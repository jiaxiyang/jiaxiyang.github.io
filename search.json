[{"title":"AI-models","url":"/2022/04/13/AI-models/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>发布的模型包括模型的结构，模型的参数(onnx)</li>\n<li>LLM 获取参数很关键</li>\n</ol>\n<h2 id=\"模型参数计算量数据量趋势\"><a href=\"#模型参数计算量数据量趋势\" class=\"headerlink\" title=\"模型参数计算量数据量趋势\"></a>模型参数计算量数据量趋势</h2><ol>\n<li><a href=\"https://epochai.org/mlinputs/visualization?yAxis=Parameters\">Model Size of Notable Machine Learning Systems Over Time</a> 可交互, 右上角 option 可搜索，可直接到论文</li>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1AAIebjNsnJj_uKALHbXNfn3_YsT6sHXtCU0q7OIPuc4/edit#gid=0\">Parameter, Compute and Data Trends in Machine Learning</a> good：包含参数，计算量, 训练数据量，论文引用</li>\n<li><a href=\"https://arxiv.org/abs/2207.02852\">Machine Learning Model Sizes and the Parameter Gap</a></li>\n<li><a href=\"https://towardsdatascience.com/parameter-counts-in-machine-learning-a312dc4753d0\">parameter-counts-in-machine-learning</a></li>\n<li><a href=\"https://arxiv.org/pdf/2202.05924.pdf\">COMPUTE TRENDS ACROSS THREE ERAS OF MACHINE LEARNING</a></li>\n<li><a href=\"https://github.com/Lyken17/pytorch-OpCounter\">常用模型参数量</a><br><img src=\"https://i.ibb.co/hHLnMp7/LAmu-Jv4-DId.png\" alt=\"常用模型参数量\"></li>\n<li><a href=\"https://github.com/ThanatosShinji/onnx-tool/blob/main/README_CN.md#results-of-onnx-model-zoo-and-sota-models\">results-of-onnx-model-zoo-and-sota-models</a></li>\n<li>可以通过模型文件大小和数据类型估计模型参数量</li>\n<li><a href=\"https://i.ibb.co/RCVGL1j/2s-Zv-Zl-E5-Ns.png\">Pre-training costs of representative LLMs</a></li>\n<li><a href=\"https://huggingface.co/spaces/optimum/llm-perf-leaderboard\">llm-perf-leaderboard</a><ul>\n<li>lantency vs memory vs score</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"model-zoo\"><a href=\"#model-zoo\" class=\"headerlink\" title=\"model zoo\"></a>model zoo</h2><h3 id=\"caffe\"><a href=\"#caffe\" class=\"headerlink\" title=\"caffe\"></a>caffe</h3><ol>\n<li><a href=\"https://github.com/SnailTyan/caffe-model-zoo\">SnailTyan&#x2F;caffe-model-zoo</a></li>\n</ol>\n<h3 id=\"onnx\"><a href=\"#onnx\" class=\"headerlink\" title=\"onnx\"></a>onnx</h3><ol>\n<li><a href=\"https://github.com/onnx/models\">onnx&#x2F;models</a></li>\n</ol>\n<h3 id=\"pytorch\"><a href=\"#pytorch\" class=\"headerlink\" title=\"pytorch\"></a>pytorch</h3><ol>\n<li><a href=\"https://github.com/Cadene/pretrained-models.pytorch\">Cadene&#x2F;pretrained-models.pytorch</a></li>\n<li><a href=\"https://pytorch.org/vision/stable/models.html\">pytorch official</a></li>\n</ol>\n"},{"title":"3d Detection","url":"/2021/05/10/3d_detection/","content":"<h2 id=\"lidar-data\"><a href=\"#lidar-data\" class=\"headerlink\" title=\"lidar data\"></a>lidar data</h2><ol>\n<li><a href=\"https://www.shuangyi-tech.com/news_161.html\">format</a></li>\n<li>pts、LAS、PCD、.xyz 和.pcap</li>\n</ol>\n<h2 id=\"PCL\"><a href=\"#PCL\" class=\"headerlink\" title=\"PCL\"></a>PCL</h2><ol>\n<li>install pcl and pcl-dev or install from source</li>\n<li><a href=\"https://pcl.readthedocs.io/projects/tutorials/en/latest/compiling_pcl_posix.html\">dependency</a></li>\n<li>pcl version &gt; 1.10 否则匹配不上 vtk</li>\n<li>notes: update yum source when dependency error</li>\n<li><a href=\"https://blog.csdn.net/a464057216/article/details/54864591\">pcd</a></li>\n<li>yum search boost; yum infoe boost;</li>\n<li>yum install boost169 boost169-devel libusbx-devel</li>\n<li><code>cmake -DBOOST_INCLUDEDIR=/usr/include/boost169 -DBOOST_LIBRARYDIR=/usr/lib64/boost169 ..</code></li>\n<li>rm find_package(openni) and rm with_openni</li>\n<li><a href=\"https://pointclouds.org/documentation/tutorials/passthrough.html\">passthrough 例子</a></li>\n</ol>\n<h2 id=\"ouster-lidar\"><a href=\"#ouster-lidar\" class=\"headerlink\" title=\"ouster lidar\"></a>ouster lidar</h2><ol>\n<li><a href=\"https://forum.ouster.at/\">forum</a></li>\n<li>不支持 pcd 格式输出，支持 pcap 格式</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=9127813\">survey</a></li>\n<li><a href=\"A_Survey_on_3D_Object_Detection_Methods_for_Autonomous_Driving_Applications\">A_Survey_on_3D_Object_Detection_Methods_for_Autonomous_Driving_Applications</a></li>\n<li><a href=\"https://github.com/traveller59/second.pytorch\">SECOND</a></li>\n<li><a href=\"https://blog.csdn.net/W1995S/article/details/114498082?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.no_search_link&spm=1001.2101.3001.4242\">pointpillars</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/75103748\">点云目标检测之 VoxelNet、SECOND、PointPillars、PV-RCNN</a></li>\n</ol>\n","categories":["Algorithm","AI"],"tags":["AI"]},{"title":"AI-ops","url":"/2023/06/08/AI-ops/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li><a href=\"https://github.com/onnx/onnx/blob/main/docs/Operators.md\">Operators</a></li>\n<li><a href=\"https://pytorch.org/docs/stable/nn.html\">torch.nn</a></li>\n<li><a href=\"https://pytorch.org/get-started/pytorch-2.0/#primtorch-stable-primitive-operators\">pytorch2.0 ops</a></li>\n<li><a href=\"https://netron.app/\">netron 在线打开 onnx</a></li>\n<li><a href=\"https://github.com/ARM-software/ComputeLibrary\">arm 官方加速库</a></li>\n</ol>\n<h2 id=\"常见的算子\"><a href=\"#常见的算子\" class=\"headerlink\" title=\"常见的算子\"></a>常见的算子</h2><p>深度学习中常见的算子包括：</p>\n<ol>\n<li>卷积层 (Convolutional Layer)：用于提取输入数据的特征，通过卷积操作在输入数据上滑动卷积核，并对每个位置进行乘法累加操作。</li>\n<li>池化层 (Pooling Layer)：用于降低特征图的空间维度，常见的池化操作包括最大池化和平均池化，通过选取窗口中的最大值或平均值来减小特征图的大小。</li>\n<li>全连接层 (Fully Connected Layer)：将输入数据的每个元素与权重相乘并加上偏置，得到输出向量，常用于将卷积层或池化层的输出展平并连接到最终的分类或回归层。</li>\n<li>激活函数 (Activation Function)：引入非线性变换，增加模型的表达能力。常见的激活函数包括 ReLU (Rectified Linear Unit)、Sigmoid、Tanh、Leaky ReLU 等。</li>\n<li>批归一化 (Batch Normalization)：用于提高网络的训练速度和稳定性，通过对每个小批量数据进行归一化操作，减少内部协变量偏移。</li>\n<li>残差连接 (Residual Connection)：用于解决深层网络的梯度消失和梯度爆炸问题，通过将输入直接与输出相加，使得网络可以学习残差信息。</li>\n<li>循环神经网络 (Recurrent Neural Network, RNN)：用于处理序列数据的神经网络，通过引入循环结构，使得网络可以对先前的信息进行记忆和处理。</li>\n<li>长短期记忆网络 (Long Short-Term Memory, LSTM)：一种特殊的循环神经网络，通过引入门控机制，有效地处理长序列依赖关系。</li>\n<li>注意力机制 (Attention Mechanism)：用于对输入数据中的不同部分分配不同的注意力权重，以便于网络更加关注重要的信息。</li>\n<li>卷积转置层 (Transpose Convolutional Layer)：用于进行上采样操作，通过反卷积操作将低分辨率特征图转换为高分辨率特征图。</li>\n</ol>\n<p>以上只是深度学习中常见的一些算子，实际上还有很多其他的算子和结构，不同的模型和任务可能会使用不同的算子组合。<br>除了上述提到的常见算子外，深度学习中还有其他一些常用的算子，包括但不限于以下几种：</p>\n<ol>\n<li>扩张卷积 (Dilated Convolution)：通过在卷积核中引入间隔，使得卷积核在输入上以不同的空洞率进行卷积操作，从而增加感受野大小。</li>\n<li>反向卷积 (Deconvolution)：也称为转置卷积或分数步长卷积，用于进行上采样操作，将低分辨率特征图转换为高分辨率特征图。</li>\n<li>转移学习 (Transfer Learning)：通过将预训练模型的权重作为初始权重进行微调，从而加快训练速度和提升模型性能。</li>\n<li>高斯滤波 (Gaussian Filtering)：一种平滑图像的操作，通过对每个像素及其周围像素进行加权平均，减小图像中的噪声和细节。</li>\n<li>非极大值抑制 (Non-Maximum Suppression)：用于边缘检测和目标检测等任务中，通过对局部最大值进行抑制，提取出稀疏且准确的边缘或目标位置。</li>\n<li>随机失活 (Dropout)：用于减少过拟合的正则化技术，通过随机将部分神经元的输出设置为零，降低神经元之间的依赖关系。</li>\n<li>权重衰减 (Weight Decay)：一种正则化技术，通过在损失函数中引入权重的 L2 范数惩罚项，降低权重的绝对值，减小模型的复杂度。</li>\n<li>梯度裁剪 (Gradient Clipping)：用于解决梯度爆炸问题，通过限制梯度的范数阈值，防止梯度值过大导致训练不稳定。</li>\n<li>自注意力机制 (Self-Attention Mechanism)：一种注意力机制的变种，用于对序列或图像中不同位置之间的关系进行建模，通过计算位置之间的相对权重来加强或抑制不同位置的表示。</li>\n<li>生成对抗网络 (Generative Adversarial Network, GAN)：由生成器和判别器组成的对抗性模型，通过博弈训练的方式，使生成器逐渐生成逼真的样本。</li>\n</ol>\n<p>这些算子在不同的深度学习任务和模型中发挥着重要的作用，可以根据具体的问题和需求选择适合的算子进行使用。</p>\n<h2 id=\"其他算子\"><a href=\"#其他算子\" class=\"headerlink\" title=\"其他算子\"></a>其他算子</h2><ol>\n<li>clip 夹子：np.clip(x, min_val, max_val), 限制输入范围</li>\n<li>nozero: B&#x3D;A[b &gt; c], b &gt; c 是 bool, B 取 b &gt; c 的值; tensorrt8.6 之前不支持， 可用 topk + mask 替代</li>\n<li>update: a[100] &#x3D; 1 不会产生新 tensor, tensorrt 不支持，用 scatter 替换</li>\n<li>scatter：根据输入、index, update 生成一个新 tensor</li>\n<li>gatther: 求子集</li>\n<li>inverse:求矩阵逆</li>\n</ol>\n<h3 id=\"激活函数\"><a href=\"#激活函数\" class=\"headerlink\" title=\"激活函数\"></a><a href=\"https://www.jiqizhixin.com/articles/2021-02-24-7\">激活函数</a></h3><h4 id=\"relu\"><a href=\"#relu\" class=\"headerlink\" title=\"relu\"></a>relu</h4><ol>\n<li><code>max(0,x)</code></li>\n<li><a href=\"https://www.desmos.com/calculator/hi1hxgezri\">可视化</a></li>\n<li>code</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">relu</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x &gt; <span class=\"number\">0</span>) ? x : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sigmoid\"><a href=\"#sigmoid\" class=\"headerlink\" title=\"sigmoid\"></a>sigmoid</h4><ol>\n<li><code>1/(1+exp(-x))</code></li>\n<li><a href=\"https://www.desmos.com/calculator/hp9f98wxrh\">可视化</a></li>\n<li>code</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">sigmoid</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.0</span> / (<span class=\"number\">1.0</span> + std::<span class=\"built_in\">exp</span>(-x));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>优化： 指数运算很耗时， 查表法</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查表法实现的Sigmoid函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">sigmoid</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">const</span> std::vector&lt;<span class=\"type\">double</span>&gt;&amp; sigmoidTable)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查表获取结果</span></span><br><span class=\"line\">    <span class=\"type\">double</span> index = (x + <span class=\"number\">5.0</span>) / <span class=\"number\">10.0</span> * sigmoidTable.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> lowerIndex = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(std::<span class=\"built_in\">floor</span>(index));</span><br><span class=\"line\">    <span class=\"type\">int</span> upperIndex = lowerIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> lowerValue = sigmoidTable[lowerIndex];</span><br><span class=\"line\">    <span class=\"type\">double</span> upperValue = sigmoidTable[upperIndex];</span><br><span class=\"line\">    <span class=\"type\">double</span> fraction = index - lowerIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lowerValue + (upperValue - lowerValue) * fraction;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建查表</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> tableSize = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">sigmoidTable</span><span class=\"params\">(tableSize + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= tableSize; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> value = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(i) / tableSize * <span class=\"number\">10.0</span> - <span class=\"number\">5.0</span>;</span><br><span class=\"line\">        sigmoidTable[i] = <span class=\"number\">1.0</span> / (<span class=\"number\">1.0</span> + std::<span class=\"built_in\">exp</span>(-value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">double</span> x = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> result = <span class=\"built_in\">sigmoid</span>(x, sigmoidTable);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Input: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Output: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"tanh\"><a href=\"#tanh\" class=\"headerlink\" title=\"tanh\"></a>tanh</h4><ol>\n<li>双曲正切函数： <code>(exp(x) - exp(-x)) / (exp(x) + exp(-x))</code></li>\n<li><a href=\"https://www.desmos.com/calculator/8xqzjeujqw\">可视化</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/onnx/onnx/blob/main/docs/Operators.md\">Operators</a></li>\n<li><a href=\"https://github.com/onnx/onnx-tensorrt/blob/main/docs/operators.md\">tensorrt onnx operators.md</a></li>\n<li><a href=\"https://www.desmos.com/calculator?lang=zh-CN\">数学公式可视化</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/511043383\">深度学习编译器 - 算子的高效实现</a><ul>\n<li>自动生成算子代码</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/microsoft/onnxruntime/tree/main/onnxruntime/contrib_ops\">onnxruntime&#x2F;contrib_ops</a></li>\n</ol>\n"},{"title":"AI-chip-performance","url":"/2022/04/11/AI-performance/","content":"<h2 id=\"throughput-and-latency\"><a href=\"#throughput-and-latency\" class=\"headerlink\" title=\"throughput and latency\"></a>throughput and latency</h2><ol>\n<li>throughput：吞吐量一般指相当一段时间内测量出来的系统单位时间处理的任务数或事务数。如：1s 处理 10 帧图片 (10FPS)</li>\n<li>latency: 执行一次任务需要的时间。如：处理一帧图片耗时 10ms</li>\n<li>Throughput – successful transactions per second</li>\n<li>Latency – response time per transaction</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><code>计算芯片的峰值算力</code> 理论计算得出的、理想状况下的峰值算力。具体通过计算核的主频、核数量、单核运算能力等来输出理论峰值，与实际场景中的真实有效处理能力有很大差距。</li>\n<li><code>计算芯片的有效算力</code> 设备在实际运作过程中能真实输出的算力。比如 ResNet50 在浮点 16 位精度下，推理一次的计算量是 7.8Gflops 左右，芯片每秒钟处理的 ResNet50 的帧率乘以 7.8G 就是真实有效的输出算力。如果推理帧率是 400fps，真实算力是 400*7.G&#x3D;3Tflops。</li>\n<li><code>计算芯片的有效利用率</code> 代表了芯片真实输出的运算能力。其计算方式为：真实有效的输出算力&#x2F;理论算力。计算结果值越高，表明该芯片工作越高效。实际应用场景中，多数传统架构计算芯片，有效利用率一般在 30%左右，而新型架构的计算芯片，芯片有效利用率可以到 50%以上。领启 KA200 异构众核、存算一体芯片有效利用率可达 60%以上。<ul>\n<li>利用率： 模型计算量 * FPS &#x2F; 芯片性能</li>\n<li>VCK190 133T, tf_resnetv1_50_imagenet_224_224_6.97G, 1421FPS, 使用率：6.97 * 1421 &#x2F; 1000 &#x2F; 133 &#x3D; 7.4%</li>\n</ul>\n</li>\n<li><code>计算芯片对主流神经网络的支持程度</code> 下一代人工智能有两个不同的发展线路图，一个是以深度学习算法为代表的传统计算科学，一个是以生物神经网络为代表脑科学。多数计算芯片只能支持二者之一。是否能将二者兼并支持，也是衡量计算芯片的核心指标之一，异构融合是达到这一指标的重要途径之一。</li>\n<li><code>芯片能效比</code> 计算方式为：典型网络（如 ResNet50）的推理能力&#x2F;芯片的功耗，单位：推理帧率（fps&#x2F;w）。</li>\n<li><code>芯片的性价比</code> 每平方毫米推理的帧率数，计算方式为：典型网络（如 ResNet50）的推理能力&#x2F;芯片的面积。</li>\n<li>多<code>batch</code>会增加模型计算量</li>\n<li>浮点转定点会降低计算量，可能剪枝优化</li>\n<li>NCHW 和 NHWC 会影响性能</li>\n</ol>\n<h2 id=\"模型计算量\"><a href=\"#模型计算量\" class=\"headerlink\" title=\"模型计算量\"></a>模型计算量</h2><h3 id=\"caffe\"><a href=\"#caffe\" class=\"headerlink\" title=\"caffe\"></a>caffe</h3><ol>\n<li><a href=\"https://dgschwend.github.io/netscope/#/editor\">netscope</a></li>\n<li><a href=\"https://dgschwend.github.io/netscope/quickstart.html\">quickstart</a></li>\n<li>复制 prototxt 内容, <code>shift + enter</code>: 查看计算量</li>\n</ol>\n<h3 id=\"onnx\"><a href=\"#onnx\" class=\"headerlink\" title=\"onnx\"></a>onnx</h3><ol>\n<li><a href=\"https://github.com/gmalivenko/onnx-opcounter\">onnx-opcounter</a> 需要模型结构，只有 pt 文件不行</li>\n</ol>\n<h3 id=\"pytorch\"><a href=\"#pytorch\" class=\"headerlink\" title=\"pytorch\"></a>pytorch</h3><ol>\n<li><a href=\"https://github.com/Lyken17/pytorch-OpCounter\">pytorch-OpCounter</a></li>\n<li><a href=\"https://github.com/open-mmlab/mmdetection/blob/master/README_zh-CN.md\">mmdetection</a></li>\n</ol>\n<h3 id=\"tensorflow\"><a href=\"#tensorflow\" class=\"headerlink\" title=\"tensorflow\"></a>tensorflow</h3><h2 id=\"芯片性能\"><a href=\"#芯片性能\" class=\"headerlink\" title=\"芯片性能\"></a>芯片性能</h2><ol>\n<li><a href=\"https://www.horizon.ai/journey2.html\">地平线 J2</a><ul>\n<li>4TOPS</li>\n<li>2W</li>\n</ul>\n</li>\n<li><a href=\"https://www.horizon.ai/journey3.html\">J3</a><ul>\n<li>5TOPS</li>\n<li>2.5W</li>\n<li>16nm</li>\n</ul>\n</li>\n<li><a href=\"https://www.horizon.ai/journey5.html\">J5</a><ul>\n<li>128TOPS</li>\n<li>30W</li>\n</ul>\n</li>\n<li><a href=\"https://www.nvidia.cn/autonomous-machines/embedded-systems/jetson-orin/\">Nvidia Xavier</a> 比较 Jetson Orin 和 Jetson Xavier 的规格<ul>\n<li>21-32TOPS</li>\n<li>10-40W</li>\n<li>12nm</li>\n</ul>\n</li>\n<li><a href=\"https://www.nvidia.cn/autonomous-machines/embedded-systems/jetson-orin/\">Nvidia Orin</a> 比较 Jetson Orin 和 Jetson Xavier 的规格<ul>\n<li>70-274TOPS</li>\n<li>10-60W</li>\n<li>8nm</li>\n</ul>\n</li>\n<li><a href=\"\">Xilinx Versal ACAP VC1902(VCK190)</a><ul>\n<li>133TOPS</li>\n<li>7ns</li>\n</ul>\n</li>\n<li><a href=\"https://www.hisilicon.com/cn/products/Ascend/Ascend-910\">昇腾（HUAWEI Ascend) 910</a><ul>\n<li>FP16: 320TFLOPS</li>\n<li>INT8: 640TOPS</li>\n<li>310W</li>\n<li>7nm</li>\n</ul>\n</li>\n<li><a href=\"\">特斯拉 FSD 计算平台</a><ul>\n<li>144TOPS</li>\n<li>单芯片 72TOPS</li>\n<li>72W</li>\n</ul>\n</li>\n<li><a href=\"https://www.mobileye.com/eyeq-chip/\">Mobileye EQ4 High</a><ul>\n<li>2TOPS</li>\n<li>28nm</li>\n</ul>\n</li>\n<li><a href=\"\">Mobileye EQ5 High</a><ul>\n<li>16TOPS</li>\n<li>7nm</li>\n</ul>\n</li>\n<li><a href=\"\">Mobileye EQ6 High</a><ul>\n<li>34TOPS</li>\n<li>7nm</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.eefocus.com/article/1726287.html\">佐思汽研《2024 年自动驾驶 SoC 研究报告》</a><ul>\n<li>各种芯片算力</li>\n</ul>\n</li>\n<li><a href=\"https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/jetson-xavier-series/\">jetson xavier params</a></li>\n<li><a href=\"https://developer.nvidia.com/embedded/jetson-modules\">jetson parms</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/337618803\">TOPS GOPS FLOPS</a></li>\n<li><a href=\"https://wuchenxu.com/2021/10/02/computing-power-metrices/\">指标</a></li>\n<li><a href=\"https://www.horizon.ai/journey5.html\">J5 官方介绍</a></li>\n<li><a href=\"https://auto.gasgoo.com/a/70266230.html\">link1</a></li>\n<li><a href=\"https://developer.nvidia.com/embedded/jetson-benchmarks\">jetson-benchmark</a></li>\n<li><a href=\"https://developer.nvidia.com/deep-learning-performance-training-inference\">deep-learning-performance-training-inference</a></li>\n<li><a href=\"https://developer.nvidia.com/blog/delivering-server-class-performance-at-the-edge-with-nvidia-jetson-orin/\">orin performance</a></li>\n<li><a href=\"https://www.nvidia.cn/autonomous-machines/embedded-systems/jetson-orin/\">orin 产品系列</a></li>\n<li><a href=\"https://github.com/Xilinx/Vitis-AI/tree/master/models/AI-Model-Zoo#performance-on-vck190\">VCK190 性能</a></li>\n<li><a href=\"https://new.qq.com/omn/20220127/20220127A06JD900.html\">地平线 MAPS</a></li>\n<li><a href=\"https://img3.gelonghui.com/pdf/bc70f-43194a12-e915-4416-9ffa-2e241931ae61.pdf\">中信车载芯片调研</a></li>\n<li><a href=\"https://pdf.dfcfw.com/pdf/H3_AP202112301537477959_1.pdf?1640871632000.pdf\">亿欧网调研</a></li>\n<li><a href=\"https://pdf.dfcfw.com/pdf/H3_AP202112061533188037_1.pdf?1639041416000.pdf\">艾瑞咨询-中国智能驾驶行业研究报告</a></li>\n</ol>\n"},{"title":"AUTOSAR","url":"/2022/09/06/AUTOSAR/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><code>AUTOmotive Open System ARchitecture</code></li>\n<li>开发标准化：interfaces, exchange formats, methodology</li>\n<li>代码分为静态代码和动态代码，静态是写死的，动态是根据配置自动生成的</li>\n<li>配置通过<a href=\"https://developer.cisco.com/docs/axl/#!what-is-axl\">axml</a></li>\n<li>有三层：application, runtime environment(rte) 和 basic Software(bsw), 每一层通过标准接口通信。(没有增加中间层解决不了的问题)</li>\n<li><code>Any problem in computer science can be solved by another layer of indirection</code> 计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决</li>\n<li>application 由 software component(swc)组成</li>\n<li>rte 均是动态代码，类似事件总线, 起到交换机的作用</li>\n<li>runnables 类似 graph 概念, 是一个静态概念，tasks 是动态概念, 有 map 机制，将静态概念映射到动态</li>\n<li>区分好静态概念和动态概念：如 graph 是静态概念，runner 是动态概念， 静态是一种表示(程序)， 动态运行静态概念(进程)</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://www.autosar.org/nc/document-search/?tx_sysgsearch_pi1%5Bquery%5D=&tx_sysgsearch_pi1%5Bcategory%5D%5B150%5D=150\">release</a></li>\n<li><a href=\"https://www.autosar.org/fileadmin/user_upload/AUTOSAR_EXP_Introduction_Part1.pdf\">AUTOSAR Introduction: The AUTOSAR Partnership and Standardization(官网)</a></li>\n<li><a href=\"https://www.autosar.org/fileadmin/user_upload/AUTOSAR_EXP_Introduction_Part2.pdf\">AUTOSAR Introduction: Current Features in a Nutshell(官网)</a></li>\n<li><a href=\"https://blog.csdn.net/AgingMoon/article/details/102813280\">Adaptive Autosar 整体架构理解</a></li>\n<li><a href=\"https://www.3cst.cn/Information/info/1uwAF7ySxL8111ea8d6300163e0473d8\">AUTOSAR 与 ROS2 区别</a></li>\n</ol>\n"},{"title":"Actix","url":"/2021/03/22/Actix/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> actix_web::&#123;get, post, web, App, HttpResponse, HttpServer, Responder&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[get(<span class=\"string\">&quot;/&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"title class_\">Responder</span> &#123;</span><br><span class=\"line\">    HttpResponse::<span class=\"title function_ invoke__\">Ok</span>().<span class=\"title function_ invoke__\">body</span>(<span class=\"string\">&quot;Hello world!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[post(<span class=\"string\">&quot;/echo&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">echo</span>(req_body: <span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"title class_\">Responder</span> &#123;</span><br><span class=\"line\">    HttpResponse::<span class=\"title function_ invoke__\">Ok</span>().<span class=\"title function_ invoke__\">body</span>(req_body)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">manual_hello</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"title class_\">Responder</span> &#123;</span><br><span class=\"line\">    HttpResponse::<span class=\"title function_ invoke__\">Ok</span>().<span class=\"title function_ invoke__\">body</span>(<span class=\"string\">&quot;Hey there!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[actix_web::main]</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() <span class=\"punctuation\">-&gt;</span> std::io::<span class=\"type\">Result</span>&lt;()&gt; &#123;</span><br><span class=\"line\">    HttpServer::<span class=\"title function_ invoke__\">new</span>(|| &#123;</span><br><span class=\"line\">        App::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">service</span>(hello)</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">service</span>(echo)</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">route</span>(<span class=\"string\">&quot;/hey&quot;</span>, web::<span class=\"title function_ invoke__\">get</span>().<span class=\"title function_ invoke__\">to</span>(manual_hello))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)?</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">run</span>()</span><br><span class=\"line\">    .<span class=\"keyword\">await</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Use App::service for the handlersusing routing <code>macros</code> and App::route for <code>manually</code> routed handlers, declaring the <code>path</code> and <code>method</code>.</li>\n<li><code>path</code>: http URL,例如：<a href=\"http://github.com/xxx/xx/xx\">http://github.com/xxx/xx/xx</a></li>\n<li><code>method</code>: path的响应</li>\n<li>All actix-web servers are built around the <code>App</code> instance.</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://actix.rs/docs/\">official docs</a></li>\n</ol>\n","categories":["Program","Rust"],"tags":["Rust"]},{"title":"Amazing emacs","url":"/2021/09/30/Amazing-emacs/","content":"<h2 id=\"Emacs-Architecture\"><a href=\"#Emacs-Architecture\" class=\"headerlink\" title=\"Emacs Architecture\"></a>Emacs Architecture</h2><p><img src=\"https://pic2.zhimg.com/964f7a10ac8a4158896500858efb4a55_b.png\" alt=\"Emacs Architecture 《架构之美》\"></p>\n<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li><code>ln -s build-debug/compile_commands.json</code> 设置软连接</li>\n<li><code>lsp</code>提示时按 i, 否则不能补全</li>\n<li><code>list-face-display and list-colors-display</code> 列出颜色</li>\n<li><code>(add-hook &#39;window-setup-hook &#39;on-after-init)</code> 启动时防止 buffer 模糊不通透</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol>\n<li>gcc emacs 性能提升</li>\n<li>vnc x11 meta<a href=\"https://www.emacswiki.org/emacs/MetaKeyProblems#:~:text=There%20is%20no%20mention%20of%20Meta%20for%20any,may%20want%20Meta%20to%20be%20distinct%20from%20Alt.\">问题</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">% xmodmap</span><br><span class=\"line\">% xmodmap -e <span class=\"string\">&quot;clear mod4&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>windows terminal 透明, 启动配置里加</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(defun on-after-init ()</span><br><span class=\"line\">  (unless (display-graphic-p (selected-frame))</span><br><span class=\"line\">    (set-face-background <span class=\"string\">&#x27;default &quot;unspecified-bg&quot; (selected-frame))))</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">(add-hook &#x27;</span>window-setup-hook <span class=\"string\">&#x27;on-after-init)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://emacs-china.org/t/topic/17035\">固定创建一个窗口</a></li>\n</ol>\n<h2 id=\"Calc\"><a href=\"#Calc\" class=\"headerlink\" title=\"Calc\"></a><a href=\"https://www.gnu.org/software/emacs/manual/html_mono/calc.html\">Calc</a></h2><ol>\n<li><code>C-x * *</code></li>\n<li><code>calc-reset</code> 重启</li>\n<li><code>D</code> redo</li>\n<li><code>U</code> or <code>ctrl+/</code> undo</li>\n<li><code>Backspace</code> calc-pop: can’t redo</li>\n<li>stack 计算方式, 可以直接输入+ - * &#x2F;， 最近 stack 进行计算</li>\n<li><a href=\"https://superuser.com/questions/1077154/emacs-commands-to-calculate-sum-average-etc-of-region\">计算 buf 均值</a></li>\n<li><code>C-x * q (quick-calc)</code></li>\n<li>step<ul>\n<li>put num in a buffer <code>ctlr-x space</code> select rectangle, remove other</li>\n<li>select all buffer <code>ctrl-x h</code></li>\n<li>M-x: statistics-in-rectangle</li>\n<li>M-x: calc-grab-region</li>\n<li>M-x: calc-vector-mean (u M)</li>\n</ul>\n</li>\n<li>step<ul>\n<li><code>ctlr-x space</code> select rectangle:(can slect string, such as: 10ms, 101ms NOTE: 后缀字符串必须一样)</li>\n<li>M-x: calc-grab-rectangle</li>\n<li>M-x: calc-vector-mean</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Rectange\"><a href=\"#Rectange\" class=\"headerlink\" title=\"Rectange\"></a><a href=\"http://xahlee.info/emacs/emacs/emacs_string-rectangle_ascii-art.html\">Rectange</a></h2><ol>\n<li><code>ctrl-x space</code> + <code>M-w</code> + <code>C-y</code> 选择，复制，粘贴</li>\n<li><code>ctrl-x r</code></li>\n<li><code>ctrl-x r t</code> insert</li>\n<li><code>ctrl-x r k</code> kill</li>\n<li><code>ctrl-x r y</code> paste</li>\n<li><code>ctrl-x r N</code> insert a column of numbers</li>\n</ol>\n<h2 id=\"ibuffer\"><a href=\"#ibuffer\" class=\"headerlink\" title=\"ibuffer\"></a>ibuffer</h2><ol>\n<li><code>, b l</code></li>\n<li><code>h</code> for help</li>\n<li><code>% n</code> - Mark buffers by their name, using a regexp.</li>\n<li><code>U</code> - Unmark all marked buffers.</li>\n<li><code>/ n</code> - Add a filter by buffer name.</li>\n<li><code>/ /</code> - Remove all filtering currently in effect.</li>\n</ol>\n<h2 id=\"dired\"><a href=\"#dired\" class=\"headerlink\" title=\"dired\"></a>dired</h2><ol>\n<li>filter: search file and ivy-occur</li>\n<li><code>wdired-change-to-wdired-mode</code> (可批量改文件名)Put a Dired buffer in Writable Dired (WDired) mode. <code>C-c C-c</code> wdired-finish-edit</li>\n<li><code>dired-hide-details-mode</code> toggle dired details shortcut:<code>(</code></li>\n<li><code>s</code> sort by date</li>\n<li><code>ctrl+u s</code></li>\n<li>xah-dired-sort</li>\n<li><code>&gt;</code> next dir</li>\n<li><code>&lt;</code> previous dir</li>\n<li><code>f and b, j and k</code> dired-find-file and dired-up-directory, next line and previous line</li>\n<li><code>+</code> add directory</li>\n<li><code>C-x C-d</code> recent dired</li>\n</ol>\n<h2 id=\"speed-up\"><a href=\"#speed-up\" class=\"headerlink\" title=\"speed up\"></a>speed up</h2><ol>\n<li>set windows repeat rate <a href=\"https://www.dummies.com/computers/pcs/set-your-keyboards-repeat-delay-and-repeat-rate/\">link</a></li>\n<li><code>profiler-start, profiler-report, profiler-stop</code> to see cpu report</li>\n<li>next-line is slow: <code>(setq auto-window-vscroll nil)</code> <a href=\"https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag\">link</a></li>\n<li>yascroll is slow; close</li>\n<li>recentf (set len 10)</li>\n<li>flycheck 应该很慢</li>\n<li>如果卡了就完全从头编译一下</li>\n</ol>\n<h2 id=\"macro\"><a href=\"#macro\" class=\"headerlink\" title=\"macro\"></a>macro</h2><ol>\n<li><code>kmacro-start-macro-or-insert-counter</code> F3</li>\n<li><code>kmacro-end-or-call-macro</code> F4</li>\n<li><code>call-last-kbd-macro</code> C-x e e e e e</li>\n<li>F3 -&gt; (F3) -&gt; F4 counter</li>\n<li><code>C-u 222 F3 ... F3 ... F4</code> start counter from 222</li>\n<li><code>C-u 100 F4</code> repeat macro 100 times</li>\n</ol>\n<h2 id=\"useful-keys\"><a href=\"#useful-keys\" class=\"headerlink\" title=\"useful keys\"></a>useful keys</h2><ol>\n<li><code>M-S-n</code> 快速选中多行， 比<code>M-; -&gt; M-n</code>更快</li>\n<li><code>repeat</code> (global-set-key (kbd “C-x .”) ‘repeat)</li>\n<li><code>xterm-paste</code></li>\n<li><code>ibuffer</code> -&gt; <code>% n</code> -&gt; “Occur” -&gt; <code>D</code> remove all Occur buffer</li>\n<li>isserch: Typing <code>M-s o</code> in incremental search invokes isearch-occur</li>\n<li>occur 正则： yolox.*Raw.*running <code>next-error</code></li>\n<li><code>clm/toggle-command-log-buffer</code> C-c o</li>\n<li>in minibuffer: ivy-occur 默认绑定在<code>C-c C-o</code>上，它可以将当前的候选集合保存至 buffer 内并退出 minibuffer</li>\n<li>ivy-call 默认绑定在<code>C-M-m</code>上，它可以看做不退出 minibuffer 的 ivy-done 操作</li>\n<li><code>M-x M-o</code> see ivy-mini-buffer-map; i: insert comand; d: go to defination;</li>\n<li><code>C-M-j</code> ivy-immediate-done, when you call find-file to create a new file, but the desired name matches an existing file.</li>\n<li>利用好 lsp</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(setq lsp-ui-doc-enable nil) ;; lsp关闭弹窗</span><br><span class=\"line\">(setq lsp-ui-sideline-mode nil) ;; lsp 关闭右侧错误提示</span><br><span class=\"line\">(setq lsp-signature-mode nil) ;; 防止M-n被占用</span><br><span class=\"line\">(setq lsp-enable-symbol-highlighting nil)) ;; lsp 不高亮</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编程操作\"><a href=\"#编程操作\" class=\"headerlink\" title=\"编程操作\"></a>编程操作</h2><ol>\n<li>symbol-overlay 高亮选中后可以用 t 切换 scope，然后 r 重命名。废弃： <code>narrow</code> &#x3D;&gt; <code>symbol-overlay-put</code> &#x3D;&gt; <code>n or r</code>跳转或替换 &#x3D;&gt; <code>fancy-widen</code></li>\n<li><code>symbol-overlay</code>: 双击左键高亮或取消高亮， 中间键跳转到上一个， 右键跳转到下一个</li>\n<li><code>origami-toggle-all-nodes</code> and <code>origami-recursively-toggle-node</code>, <code>origami-show-only-node</code>, <code>origami-undo</code>, <code>origami-redo</code></li>\n<li><code>outline-show-all</code>, <code>outline-hide-other</code>, <code>outline-show-subtree</code></li>\n<li><code>bm-toggle</code> and <code>bm-next</code></li>\n<li><code>git-gutter</code>: next, previous, revert</li>\n<li><code>view-mode</code>: (help man 都适用)(单手，大拇指 space 无名指 Delete)<ul>\n<li><code>e</code> quit and stay current buffer</li>\n<li><code>space</code> scroll page down</li>\n<li><code>Delete</code> scroll page up</li>\n<li><code>(setq view-read-only t)</code> read-only 打开 view-mode</li>\n</ul>\n</li>\n<li><code>projectile-switch-project</code> 切换工程 <code>projectile-toggle-project-read-only</code> 工程只读</li>\n<li><code>deadgrep</code></li>\n<li><code>occur</code> + <code>next-error</code></li>\n<li><code>goto-last-change</code></li>\n<li><code>indent-guide</code></li>\n<li><code>markdown mode</code> shift+tab 折叠, head 上 tab 折叠</li>\n<li><code>company-toggle-delay</code> to toggle company automatically</li>\n<li><code>F11</code> 全屏操作</li>\n<li><code>follow-mode</code> + <code>balance-window(C-x +) or balance-windows-area(, w b)</code></li>\n<li>zap</li>\n</ol>\n<h2 id=\"snippets\"><a href=\"#snippets\" class=\"headerlink\" title=\"snippets\"></a><a href=\"http://joaotavora.github.io/yasnippet/snippet-development.html#orgcde188c\">snippets</a></h2><ol>\n<li><a href=\"https://macromates.com/manual/en/snippets\">inspired from textmate</a></li>\n<li>M-x yas-tryout-snippet, key binding: C-c C-t C-t When editing a snippet, this opens a new empty buffer,</li>\n<li>可以执行 emacs lisp 命令 <code>#include &quot;$&#123;1:</code>(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))<code>.hpp&#125;&quot;</code></li>\n<li>自动大写<code>constexpr $&#123;1:type&#125; $&#123;2:$$(upcase yas-text)&#125; = $3;</code></li>\n<li><code>$&#123;1:$$(yas-choose-value &#39;(&quot;right&quot; &quot;center&quot; &quot;left&quot;))&#125;</code> 选择值</li>\n<li>c++ man</li>\n</ol>\n<h2 id=\"Common\"><a href=\"#Common\" class=\"headerlink\" title=\"Common\"></a>Common</h2><ol>\n<li><a href=\"https://github.com/jeaye/stdman.git\">stdman</a> 安装 stdman 可以在 emacs 中看 cppreference 内容</li>\n<li>通过整数确定字符在缓冲区的位置，但对缓冲区操作时会引起字符位置变化，可以使用(marker)来跟踪文本位置，会随文本变化而变化。如 set mark <a href=\"https://github.com/0voice/expert_readed_books/blob/master/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%9E%B6%E6%9E%84%E4%B9%8B%E7%BE%8E.pdf\">架构之美 235 页</a></li>\n<li><a href=\"https://excalidraw.com/#json=5564509368352768,a62g1lvpbVbiHVddtzRpOQ\">keymaps 示意图</a></li>\n</ol>\n<h2 id=\"The-Amazing-Packages\"><a href=\"#The-Amazing-Packages\" class=\"headerlink\" title=\"The Amazing Packages\"></a>The Amazing Packages</h2><ol>\n<li>treeemacs</li>\n<li>indent-guide</li>\n<li><a href=\"https://github.com/johnbcoughlin/calctex\">calctex</a></li>\n<li>tmux-cc(注意 emacs 中 tmux 版本大于 3.0a) (set windows.panel)<a href=\"https://github.com/jpalardy/vim-slime\">vim-slime</a></li>\n<li>woman</li>\n<li>emamux</li>\n<li>deadgrep</li>\n<li>hightlight</li>\n<li>bm</li>\n<li>company-ispell</li>\n<li>beginend</li>\n<li>fancy-narrow</li>\n<li>ctrlf</li>\n<li>mwim</li>\n<li>dogears</li>\n<li>keycast-mode</li>\n<li>command-log-mode: clm&#x2F;toggle-command-log-buf</li>\n<li>symbol-overlay</li>\n<li>awesome-tab</li>\n<li>eyebrowse</li>\n<li>beacon</li>\n<li>dimmer</li>\n<li>mood-line</li>\n<li>smex</li>\n<li>keypression</li>\n<li>rainbow-mode</li>\n<li>rainbow-delimiters</li>\n<li>ace-window</li>\n<li>helpful</li>\n<li>imenu-list</li>\n<li>hydra</li>\n<li>anzu</li>\n<li>move-text</li>\n<li>goto-chg</li>\n<li>whole-line-or-region</li>\n<li>ace jump</li>\n<li>clang format</li>\n<li>compile and gdb</li>\n<li>next error</li>\n<li>jump to defination</li>\n<li>company</li>\n<li>undo tree</li>\n<li>which key</li>\n<li>expand region</li>\n<li>snippets</li>\n<li>help mans</li>\n<li>M-x: you can use commands to do everything</li>\n<li>magit</li>\n<li>counsel buffers and files</li>\n<li>ibuffer</li>\n<li>dired</li>\n<li>bookmarks</li>\n<li>leader key</li>\n<li>org mode and markdown mode</li>\n<li>google translate</li>\n<li>macro</li>\n<li>smartparens</li>\n<li>swiper</li>\n<li>shift select</li>\n<li>flycheck</li>\n<li>hungry delete</li>\n<li>ox-reveal</li>\n<li>crux</li>\n<li>leetcode</li>\n<li>pdf-tools</li>\n</ol>\n","categories":["Tools","Emacs"],"tags":["Emacs"]},{"title":"Awesome Books","url":"/2021/08/16/Awesome-Books/","content":"<h2 id=\"Awesome-Books\"><a href=\"#Awesome-Books\" class=\"headerlink\" title=\"Awesome Books\"></a>Awesome Books</h2><ol>\n<li><a href=\"https://hansimov.gitbook.io/csapp/publish-info/publisher-words\">深入理解计算机系统 Computer Systems:A Programmer’s Perspective Computer Systems:A Programmer’s Perspective CSAPP</a></li>\n<li><a href=\"https://github.com/sarabander/sicp-pdf\">计算机程序的构造和解释 Structure and Interpretation of Computer Programs SICP</a></li>\n<li>计算机体系结构 量化研究方法</li>\n<li>计算机组成与设计 硬件软件接口</li>\n<li>重构</li>\n<li>架构整洁之道</li>\n<li>代码整洁之道</li>\n<li>设计模式</li>\n<li>编译原理</li>\n<li>软件建模与设计</li>\n<li>C++ Primer</li>\n<li><a href=\"https://github.com/qiangmzsx/Software-Engineering-at-Google\">Software-Engineering-at-Google 中文版本</a></li>\n<li><a href=\"https://abseil.io/resources/swe-book\">Software Engineering at Google</a></li>\n<li><a href=\"https://github.com/hmemcpy/milewski-ctfp-pdf\">Category Theory for Programmers</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/cs-books/influential-cs-books\">cs-books&#x2F;influential-cs-books</a></li>\n</ol>\n"},{"title":"BPF","url":"/2022/12/26/BPF/","content":"<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ol>\n<li><a href=\"https://blog.csdn.net/qq_23662505/article/details/125427689?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-125427689-blog-119563743.pc_relevant_aa2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-125427689-blog-119563743.pc_relevant_aa2&utm_relevant_index=8\">各种 tools</a></li>\n</ol>\n<h2 id=\"BCC\"><a href=\"#BCC\" class=\"headerlink\" title=\"BCC\"></a>BCC</h2><ol>\n<li>需要 sudo 来执行命令</li>\n<li>各命令有 man 手册</li>\n<li><code>sudo apt-get install bpfcc-tools</code></li>\n<li><code> &#39;./include/linux/kconfig.h&#39; file not found</code> &#x3D;&gt; <code>cd /lib/modules/5.10.104-tegra/build/ &amp;&amp; ln -s /lib/modules/5.10.104-tegra/build/kernel-5.10/include .</code></li>\n<li></li>\n</ol>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><ol>\n<li><a href=\"https://github.com/iovisor/bcc/blob/master/QUICKSTART.md\">docker</a> 需要用宿主机上的内核源码</li>\n</ol>\n<h2 id=\"bpftrace\"><a href=\"#bpftrace\" class=\"headerlink\" title=\"bpftrace\"></a>bpftrace</h2><ol>\n<li><code>mount -t debugfs none /sys/kernel/debug/</code></li>\n</ol>\n<h3 id=\"install-1\"><a href=\"#install-1\" class=\"headerlink\" title=\"install\"></a>install</h3><ol>\n<li><code>sudo apt-get install -y bpftrace</code></li>\n<li>需要内核开启一些选项</li>\n<li><a href=\"https://github.com/iovisor/bpftrace/blob/master/INSTALL.md#ubuntu-packages\">ubuntu</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/eunomia-bpf/bpf-developer-tutorial\">bpf-developer-tutorial</a></li>\n</ol>\n"},{"title":"Tools and Linux Command","url":"/2021/06/29/Bash-usage/","content":"<h2 id=\"Useful-Tools-can-install-from-github-release\"><a href=\"#Useful-Tools-can-install-from-github-release\" class=\"headerlink\" title=\"Useful Tools (can install from github release)\"></a>Useful Tools (can install from github release)</h2><h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><ol>\n<li>滴答清单 windows + phone</li>\n<li>sticky 便利贴 <code>win+alt+t</code> always on top</li>\n<li><a href=\"https://files.community/\">files 文件管理器</a></li>\n<li><a href=\"https://github.com/microsoft/PowerToys\">PowerToys</a><ul>\n<li>color pick: win + shift + c</li>\n<li>鼠标荧光笔</li>\n</ul>\n</li>\n<li>罗技 master3 鼠标， 大拇指 + 左右， workspace 切换</li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows/powertoys/run\">PowerToys&#x2F;run 快速启动</a><ul>\n<li>alt + space</li>\n<li>search startup 开机启动</li>\n<li><code>ctl + win + A</code> app 置顶，超有用，配合任务栏使用, 点击任务栏最小化，置顶和最小化切换</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/microsoft/terminal\">windows terminal</a><ul>\n<li>win + &#96; 上半部分显示</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/QL-Win/QuickLook\">windows quicklook 预览</a></li>\n<li><a href=\"https://github.com/QL-Win/QuickLook/wiki/Available-Plugins\">quicklook plugins</a></li>\n<li><a href=\"https://github.com/hluk/CopyQ\">CopyQ 粘贴板</a><ul>\n<li>F6</li>\n<li>win + v(系统自带)</li>\n</ul>\n</li>\n<li><a href=\"https://zh.snipaste.com/index.html\">snipaste 截图</a></li>\n<li><a href=\"https://github.com/ShareX/ShareX\">ShareX</a><ul>\n<li>tools OCR 图片文字识别</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/flameshot-org/flameshot\">flameshot 截图工具</a></li>\n<li><a href=\"https://www.screentogif.com/\">screentogif</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/zoomit\">zoomit 投影演示 倒计时</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">WSL2</a></li>\n<li><a href=\"https://dadroit.com/\">Dadroit JSON Viewer</a></li>\n<li><a href=\"https://github.com/hellzerg/optimizer\">Windows 优化器</a></li>\n<li><a href=\"https://github.com/zhongyang219/TrafficMonitor\">TrafficMonitor</a></li>\n</ol>\n<span id=\"more\"></span>\n\n<h4 id=\"shortcuts\"><a href=\"#shortcuts\" class=\"headerlink\" title=\"shortcuts\"></a><a href=\"https://support.microsoft.com/en-us/windows/keyboard-shortcuts-in-windows-dcc61a57-8ff0-cffe-9796-cb9706c75eec\">shortcuts</a></h4><ol>\n<li><code>win + f</code> 全屏</li>\n<li><code>win + v</code>历史复制</li>\n<li><code>win + 1</code> 设置为打开 vscode</li>\n</ol>\n<h3 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h3><ol>\n<li><a href=\"https://github.com/o2sh/onefetch/tree/main\">onefetch</a></li>\n<li><a href=\"https://github.com/ekzhang/sshx\">sshx web 连接，可分享</a></li>\n<li><a href=\"https://github.com/microsoft/inshellisense\">inshellisense</a></li>\n<li><a href=\"https://github.com/abi/screenshot-to-code\">screenshot-to-code</a></li>\n<li><a href=\"https://github.com/withfig/autocomplete\">autocomplete</a></li>\n<li><a href=\"https://github.com/dominikwilkowski/cfonts\">cfonts</a></li>\n<li><a href=\"https://github.com/dylanaraps/neofetch\">neofetch</a> and <a href=\"https://www.asciiart.eu/vehicles/cars\">asciiart</a></li>\n<li><a href=\"https://github.com/tmux/tmux/wiki\">tmux</a></li>\n<li><a href=\"https://github.com/skywind3000/z.lua\">z.lua(zh, zb)</a></li>\n<li><a href=\"https://github.com/ajeetdsouza/zoxide\">zoxide</a></li>\n<li><a href=\"https://github.com/junegunn/fzf\">fzf(C-r, M-c, kill -9 <tab>)</a></li>\n<li><a href=\"https://github.com/BurntSushi/ripgrep\">rg</a></li>\n<li><a href=\"https://github.com/sharkdp/fd\">fd</a></li>\n<li><a href=\"https://github.com/sharkdp/bat\">bat</a></li>\n<li><a href=\"https://github.com/mvdan/sh\">shfmt</a></li>\n<li><a href=\"https://github.com/orf/gping\">gping</a></li>\n<li><a href=\"https://github.com/commitizen/cz-cli\">commitizen</a></li>\n<li><a href=\"https://github.com/ohmyzsh\">zsh</a>(.zsh_history 保存常用命令)</li>\n<li><a href=\"https://github.com/ogham/exa\">exa</a></li>\n<li><a href=\"https://github.com/sharkdp/hexyl\">hexyl</a></li>\n<li><a href=\"https://github.com/tldr-pages/tldr\">tldr</a></li>\n<li><a href=\"https://github.com/philc/vimium\">vimium</a></li>\n<li><a href=\"https://htop.dev/\">htop</a></li>\n<li><a href=\"https://docxgen.readthedocs.io/en/latest/\">doxygen</a></li>\n<li><a href=\"https://www.samba.org/\">samba</a></li>\n<li><a href=\"https://hexo.io/zh-cn/\">hexo</a></li>\n<li><a href=\"https://github.com/facebook/docusaurus\">docusaurus</a></li>\n<li><a href=\"https://github.com/mkdocs/mkdocs/\">mkdocs</a></li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx\">sphinx-doc</a></li>\n<li><a href=\"https://cn.ubuntu.com/blog/what-is-snap-application\">snap 通用的 linux 软件包</a></li>\n<li><a href=\"https://snapcraft.io/store\">snap store</a></li>\n<li><a href=\"https://vball.fun/2021/11/23/build-7yuv-snap-package/\">7yuv linux</a></li>\n<li><a href=\"https://github.com/eddieantonio/imgcat\">imgcat</a></li>\n<li><a href=\"https://github.com/facebook/watchman\">watchman</a></li>\n<li><a href=\"https://github.com/tstack/lnav\">日志查看 lnav</a></li>\n<li><a href=\"https://github.com/johnkerl/miller\">日志分析 miller</a></li>\n<li><a href=\"https://termius.com/\">termius</a></li>\n</ol>\n<h3 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h3><ol>\n<li>mount or pipe + rsync</li>\n<li>scp 适用于文件较少</li>\n<li>rsync 适用于大量文件，增量传输<ul>\n<li>rsync 同步数据， 可以启服务备份数据 <code>rsync -avzr --progress test --exclude=test/5 10.10.0.98:/home/jiaxiyang/</code> 多用 rsync，少用 scp</li>\n<li><code>sshpass -p &quot;&quot; rsync -avz -e &quot;ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null&quot; test root@10....</code> sshpass + rsync</li>\n</ul>\n</li>\n<li>pipe 适用于大量文件，第一次传输<ul>\n<li><code>tar cf - read_shape | ssh root@10.31.1.153 &quot;tar xf - -C ~/xiyang/&quot;</code>通过管道传输，免去了单独操作麻烦, 用管道来压缩和解压，降低了磁盘 IO(两次), 直接内存里操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"tmux\"><a href=\"#tmux\" class=\"headerlink\" title=\"tmux\"></a>tmux</h3><ol>\n<li>c-m 或 enter： 换行</li>\n<li><code>tmux send-keys -t .3 &quot;ls -al&quot; c-m</code> 向当前 windows pannel 3 发送 ls 命令</li>\n<li><code>tmux list-panes | wc -l</code> 当前 panel 个数</li>\n<li>创建固定个数 panel，每个 panel 执行不同命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">PANEL_NUM=6</span><br><span class=\"line\"><span class=\"keyword\">while</span> [ $(tmux list-panes | <span class=\"built_in\">wc</span> -l) -lt <span class=\"variable\">$&#123;PANEL_NUM&#125;</span> ]; <span class=\"keyword\">do</span></span><br><span class=\"line\">\ttmux split-window \\; <span class=\"comment\">#select-pane -L</span></span><br><span class=\"line\">    tmux select-layout tiled</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># even-horizontal even-vertical main-horizontal main-vertical tiled</span></span><br><span class=\"line\"><span class=\"comment\"># tmux select-layout even-horizontal</span></span><br><span class=\"line\">tmux select-layout tiled</span><br><span class=\"line\"></span><br><span class=\"line\">CURRENT_PANEL=$(tmux display -pt <span class=\"string\">&quot;<span class=\"variable\">$&#123;TMUX_PANE:?&#125;</span>&quot;</span> <span class=\"string\">&#x27;#&#123;pane_index&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(<span class=\"built_in\">seq</span> 1 <span class=\"variable\">$&#123;PANEL_NUM&#125;</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;i&#125;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;i&#125;</span> -ne <span class=\"variable\">$&#123;CURRENT_PANEL&#125;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\ttmux send-keys -t .<span class=\"variable\">$&#123;i&#125;</span> <span class=\"string\">&quot;echo <span class=\"variable\">$&#123;i&#125;</span>; ls -al&quot;</span> c-m</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看系统系统\"><a href=\"#查看系统系统\" class=\"headerlink\" title=\"查看系统系统\"></a>查看系统系统</h2><ol>\n<li><code>top</code> and <code>htop</code><ul>\n<li>top 按 t 显示百分比, 按多次</li>\n</ul>\n</li>\n<li><code>free -m</code>查看内存使用</li>\n<li><code>sudo iotop</code></li>\n<li><code>iftop</code></li>\n<li><code>iostat -x 1 10</code> 查看 io 情况</li>\n<li><code>sudo watch pidstat -d</code> 看哪个进程占用 IO 多。</li>\n<li><code>who</code>, <code>w</code>, <code>last</code> and <code>lastlog</code> 查看最后用户登录</li>\n</ol>\n<h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a><a href=\"https://www.runoob.com/linux/linux-file-attr-permission.html\">文件权限</a></h2><ol>\n<li>never use 777</li>\n<li>u,g,o,a 分别代表 属主，数组，其他用户，所有用户</li>\n<li>+,-,&#x3D; 分别代表 增加，减去，设置一个权限</li>\n<li><code>chmod o+w</code> 给其他用户添加写权限</li>\n<li><code>o+w</code>会高亮文件夹</li>\n<li>mount 问题解决<code>chmod o+w -R .</code> <code>find . -type f | xargs chmod o+w</code> <code>chmod o+w $(find . -type f)</code> 给其他用户加写权限， 不会有 git 历史，umask 022</li>\n<li><code>o-r</code> 不让其他用户看</li>\n</ol>\n<h2 id=\"Add-User-and-Group\"><a href=\"#Add-User-and-Group\" class=\"headerlink\" title=\"Add User and Group\"></a>Add User and Group</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看用户和组id</span></span><br><span class=\"line\">% <span class=\"built_in\">id</span> -u &amp;&amp; <span class=\"built_in\">id</span> -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加组</span></span><br><span class=\"line\">% sudo groupadd xiyang -g 1022</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加用户到组，zsh作为默认shell</span></span><br><span class=\"line\">% sudo useradd -g xiyang -ms /bin/zsh xiyang -u 2022</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除用户密码</span></span><br><span class=\"line\">% passwd -d xiyang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户group，注意添加之后重新开terminal才生效</span></span><br><span class=\"line\">% <span class=\"built_in\">groups</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加到sudo group</span></span><br><span class=\"line\">% sudo  usermod -aG sudo xiyang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># xiyang作为main group</span></span><br><span class=\"line\">% sudo usermod -g xiyang xiyang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变用户id</span></span><br><span class=\"line\">% sudo usermod -u 1022 xiyang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变组id</span></span><br><span class=\"line\">% sudo groupmod -g 1022 xiyang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除用户 -r 删除目录</span></span><br><span class=\"line\">% userdel -r xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有用户uid</span></span><br><span class=\"line\">% <span class=\"built_in\">cat</span> /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sample</span></span><br><span class=\"line\">% sshpass -p nvidia ssh nvidia@10.31.1.187</span><br><span class=\"line\">% sudo groupadd xiyang -g 1022</span><br><span class=\"line\">% sudo useradd -g xiyang sudo  -ms /bin/bash xiyang -u 1022</span><br><span class=\"line\">% sudo passwd -d xiyang</span><br><span class=\"line\">% sudo su - xiyang</span><br><span class=\"line\">% passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><ol>\n<li>列出.so 或.a 库 <code>ls | awk &#39;/.so$|.a$/&#123;print $0&#125;&#39;</code></li>\n<li>分割字符串 注意从$1 开始，$0 表示输入 <code>echo test.so | awk -F &#39;.&#39; &#39;&#123;print $1&#125;&#39;</code></li>\n<li>获取 so 库的名字 <code>echo libtest.so | awk -F &#39;.&#39; &#39;&#123;print substr($1,4)&#125;&#39;</code></li>\n<li>获取库名字 <code>ls | awk &#39;/.so$|.a$/&#123;print $0&#125;&#39; | awk -F . &#39;&#123;print substr($1, 4)&#125;&#39;</code></li>\n<li>获取第一个匹配行 <code>cat file | grep -n &quot;#i[fn]\\|#pragma&quot; | awk -F &#39;:&#39; &#39;&#123;print $1&#125;&#39; | awk &#39;NR==1&#39;</code></li>\n<li><code>ldd $&#123;BINS&#125; | grep &quot;=&gt; /&quot; | awk &#39;&#123;print $3&#125;&#39; | xargs -I &#39;&#123;&#125;&#39; cp -v &#39;&#123;&#125;&#39; $&#123;OUTPUT_DIR&#125;/lib</code> copy all link libs</li>\n<li>查看库链接关系 <code>for i in $(ldd test | grep &quot;=&gt; /&quot; | awk &#39;&#123;print $3&#125;&#39;); do echo &quot;***************$i **************&quot;; ldd $i | grep flowsdk; done</code></li>\n<li>查看加载用到的库 <code>readelf -d build/dog/dog_test1 | grep &#39;NEEDED&#39;</code></li>\n</ol>\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a><a href=\"https://www.gnu.org/software/sed/manual/html_node/Command_002dLine-Options.html#Command_002dLine-Options\">sed</a></h2><ol>\n<li>双引号才能使用变量</li>\n<li>删除匹配： <code>sed -i &quot;/fancyfoot/d&quot; latex/refman.tex</code></li>\n<li>在匹配后加入一行 <code>sed -i &#39;/&#123;fancyplain&#125;/a\\\\\\rhead&#123;&#125;&#39; latex/refman.tex</code></li>\n<li>在匹配前加一行 <code>sed -i &#39;/doxysection/i\\\\\\newpage&#39; latex/refman.tex</code></li>\n<li>删除 1 到 n 行： <code>sed -i &quot;1, $&#123;n&#125;d&quot; file</code></li>\n<li>匹配字符所在行替换：<code>sed -i &#39;/config/c\\This line is relace.&#39; test.json</code></li>\n</ol>\n<h2 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h2><ol>\n<li><code>curl -fsSL https://mirrors.xxx.xx/xx.sh | bash -ex</code> 一键运行</li>\n<li>curl -L http:xxx 不加 -L 会自动转换为 https</li>\n<li>-s, –silent Silent mode</li>\n<li>-S, –show-error Show error even when -s is used</li>\n<li>-f, –fail Fail silently (no output at all) on HTTP errorsc 出错退出</li>\n<li>-O, –remote-name Write output to a file named as the remote file 保存为文件名</li>\n<li>-o, –output <file> Write to file instead of stdout</li>\n</ol>\n<h2 id=\"Useful-Commond\"><a href=\"#Useful-Commond\" class=\"headerlink\" title=\"Useful Commond\"></a>Useful Commond</h2><ol>\n<li><code>timeout 3s xxxx</code> 超时退出; 可用于无法停止程序测试；不用 ctrl-c</li>\n<li><code>alias mc=&#39;cmd()&#123; date;pwd;who|wc -l;&#125;;cmd&#39;</code> alias 执行多条命令</li>\n<li><code>pidof firefox | xargs kill -9 </code> or <code>kill $(pidof firefox)</code> kill process by name</li>\n<li><code>nl file</code> 显示行号</li>\n<li><code>ftp</code>: 搭建 ftp 服务器，脚本 put:<code>scp -r $@ user@IP:path</code>上传文件，脚本 get:<code>for i in $@; do scp -r user@IP:path/$&#123;i&#125;; done</code>获取文件。get-ls:<code>ssh xiyang@xsjsda153 &quot;cd /var/ftp/pub/xiyang/ &amp;&amp; ls $@&quot;</code>, get-list-all:<code>ssh user@IP &quot;cd path &amp;&amp; ls -alhrt&quot;</code>, get-list:<code>ssh user@IP &quot;cd path &amp;&amp; ls -lhrt | tail -n 10&quot;</code>获取 ftp 服务器列表。ftp 服务器上可以放常用文件，各服务器方便取。也可用于服务器(包括 windows)间数据交换。</li>\n</ol>\n<h2 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous\"></a>Miscellaneous</h2><ol>\n<li><code>sudo passwd user</code>linux passwd 强制设置简单密码, 需要 sudo</li>\n<li><code>sed -i s@/archive.ubuntu.com/@/mirrors.tuna.tsinghua.edu.cn/@g /etc/apt/sources.list &amp;&amp; apt-get update -y</code> apt 切换清华源</li>\n<li><code>dpkg-query -l</code>查看安装库版本</li>\n<li><code>nice -n 10 ./test</code> 调整程序优先级(不设置默认是 0), nice 值越高，优先级越低。top 或 ps -l 可查看优先级（NI: nice）Niceness values range from -20 (the highest priority) to 19 (the lowest).</li>\n<li><code>renice -n 10 -p &lt;pid&gt;</code> 重新设置 nice 值</li>\n<li>(good) <code>hostname -I</code> 查看 IP 地址</li>\n<li>htop 显示 io,需要新版本； 配置文件<code>~/.config/htop/htoprc</code> <a href=\"https://superuser.com/a/1730191\">link</a> <a href=\"https://github.com/htop-dev/htop/blob/main/ChangeLog\">changelog</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/htop-dev/htop/releases/download/3.2.2/htop-3.2.2.tar.xz &amp;&amp; tar xf htop-3.2.2.tar.xz &amp;&amp; <span class=\"built_in\">cd</span> htop-3.2.2</span><br><span class=\"line\">./autogen.sh &amp;&amp; ./configure &amp;&amp; make -j4</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>htop <code>S -&gt; Meters添加修改监控内容</code> 可添加 CPU average， disk io 等，也可修改布局和 style， 都该成 bar；</li>\n<li>htop <code>S -&gt; Display Option</code> Also show CPU frequency 显示 cpu 频率</li>\n<li>htop <code>S -&gt; Screens</code>可以添加 IO_RATE, IO_READ_RATE, IO_WRITE_RATE, CWD</li>\n<li><code>gdb attach &lt;pid&gt; =&gt;  info proc all</code> 查看进程是否设置了 coredump</li>\n<li><code>gcore $(pidof processname)</code> 命令行直接执行产生 coredump <code>-a</code>产生更详细信息</li>\n<li>json config tree <code>main_file=test.json; parse_json() &#123; local file=&quot;$1&quot; indent=&quot;$2&quot;; if [[ ! -f &quot;$file&quot; ]]; then echo &quot;$&#123;indent&#125;$file (not found)&quot;; return; fi; local json_refs=$(grep -oE &#39;&quot;[^&quot;]+\\.json&quot;&#39; &quot;$file&quot; || echo &quot;&quot;); local count=0; local total=$(echo &quot;$json_refs&quot; | grep -c .); for ref in $json_refs; do count=$((count + 1)); local ref_file=$(echo $ref | tr -d &#39;&quot;&#39;); if [[ $count -eq $total ]]; then echo -n &quot;$&#123;indent&#125;└── &quot;; local new_indent=&quot;$&#123;indent&#125;    &quot;; else echo -n &quot;$&#123;indent&#125;├── &quot;; new_indent=&quot;$&#123;indent&#125;│   &quot;; fi; if [[ -f &quot;$ref_file&quot; ]]; then echo &quot;$ref_file&quot;; parse_json &quot;$ref_file&quot; &quot;$new_indent&quot;; else echo &quot;$ref_file (not found)&quot;; fi; done; &#125;; echo; echo &quot;$main_file&quot;; parse_json &quot;$main_file&quot; &quot;&quot;; echo</code></li>\n<li><code>./pg_perf_monitor_threads.sh 535  | sed &#39;s/\\x1b\\[[0-9;]*m//g&#39; | tee output.txt</code> 去除彩色</li>\n<li><code>stdbuf -oL command | sed &#39;s/\\x1b\\[[0-9;]*m//g&#39; &gt; output.txt</code> 修改缓存行为，以行为单位写入到文件</li>\n<li><code>ls /proc/[PID]/task/</code> or <code>ps -T -p [PID]</code>获取进程线程号</li>\n<li><code>echo 1 | sudo tee /proc/sys/kernel/perf_event_paranoid</code> sudo echo 写文件</li>\n<li><code>pidof test</code>根据 name 查看 pid</li>\n<li><code>ls -sh</code></li>\n<li><code>du -sh * | sort -h</code> 按大小排序 sort -h enables human-readable sort, so it understands sizes like K, M, and G.</li>\n<li><code>du -sh .[!.]* * | sort -h</code>查看隐藏文件夹大小</li>\n<li><code>update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1</code> 修改默认程序版本</li>\n<li><code>cat test* &gt; test.bin</code> 合并文件</li>\n<li><code>split -d -n 3 -a 1 total_dummy_input@0.bin00 total_dummy_input@0_ &amp;&amp; ls total_dummy_input@0_* | xargs -I &#123;&#125; mv &#123;&#125; &#123;&#125;.bin</code> 统一重命名</li>\n<li><code>split -d -n 5 xxx xxxx</code> slipt 文件</li>\n<li><code>split -b 262144 total_flow_predictions.bin total_flow_predictions_split.bin</code> slipt 文件为两部分，第一部分 262144bytes</li>\n<li><code>grep -v grep</code> -v 显示不包含的行， 显示不包含 grep 的行</li>\n<li><code>tar -C build -zcf install.tgz output</code> 打包 build&#x2F;output, 不保留 build 文件夹</li>\n<li><code>pwdx</code> - report current working directory of a process 查看进程工作路径, 有用，可用来看机器被谁占用, <code>ll /proc/&lt;pid&gt;/</code> 查看 cwd</li>\n<li><code>for pid in $(ps -e -o pid=); do cmd=$(ps -p $pid -o args=); dir=$(sudo pwdx $pid 2&gt;/dev/null | grep -v &quot;: /$&quot; | cut -d &#39; &#39; -f2-); if [[ ! -z $dir ]]; then echo -e &quot;\\033[31m$pid: $dir\\033[0m\\n        ------  \\033[34m$cmd\\033[0m&quot;; fi; done</code> 显示所有进程 pwd 及命令</li>\n<li><code>pid=PID; cmd=$(ps -p $pid -o args=); dir=$(sudo pwdx $pid 2&gt;/dev/null | grep -v &quot;: /$&quot; | cut -d &#39; &#39; -f2-); if [[ ! -z $dir ]]; then echo -e &quot;\\033[31m$pid: $dir\\033[0m\\n        ------  \\033[34m$cmd\\033[0m&quot;; fi;</code> 查看单个 pid 信息</li>\n<li><code>for pid in $(ps -e -o pid=); do sudo pwdx $pid; done | grep -v &quot;: /$&quot;</code> 查看所有进程路径</li>\n<li><code>for pid in $(ps | awk &#39;&#123;print $1&#125;&#39;); do /userdata/pwdx $pid; done | grep -v &quot;: /$&quot;</code>j5 查看所有进程路径</li>\n<li><code>ps -eo pid,%mem,cmd --sort=-%mem | awk &#39;NR&gt;1 &#123;print $1, $2&quot;%&quot;, $3; s+=$2&#125; END &#123;print &quot;Total:&quot;, s &quot;%&quot;&#125;&#39;</code> 查看所有进程占用内存百分比及其和</li>\n<li><code>cat -n test.cpp</code> or <code>less -N test.cpp</code> 打印带行数</li>\n<li><code>readelf -a $(which find)</code> 命令里可以调用其他命令</li>\n<li><code>lsblk</code> List information about block devices.查看有哪些磁盘可挂载</li>\n<li>解决 ssh 经常断开问题 <a href=\"https://blog.csdn.net/qq_15505637/article/details/80881770\">link</a><ul>\n<li><code>sudo /etc/init.d/ssh restart</code></li>\n</ul>\n</li>\n<li><code>stat</code>: 获取文件各种信息</li>\n<li><code>fd -e py -e h -e hpp -e cpp -e cc -e png -e jpg -e txt -e md -e cmake -e json | xargs chmod 644</code> 统一改变文件权限</li>\n<li><code>fd --type f &#39;.*\\.(c|cpp|h|hpp|hxx|cxx)&#39; . -x clang-tidy &#123;&#125;</code></li>\n<li><code>/etc/profile</code> sh shell ssh 执行配置</li>\n<li><code>echo $SHELL</code> 查看系统用的 shell</li>\n<li><code>file</code>查看编码格式</li>\n<li><code>nohup</code> no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</li>\n<li><code>less</code> is more</li>\n<li>nv12 to jpg: <code>ffmpeg -s 1920x1080 -pix_fmt yuv420p -i nv12_1080p.yuv test-1920-1080.jpg</code></li>\n<li>png to nv12: <code>ffmpeg -i input.png -pix_fmt nv12 1920x1080.yuv</code></li>\n<li><code>(ldd $&#123;BINS&#125; | grep &quot;=&gt; /&quot; | awk &#39;&#123;print $3&#125;&#39; | xargs -I &#39;&#123;&#125;&#39; cp -v &#39;&#123;&#125;&#39; $&#123;OUTPUT_DIR&#125;/lib</code> copy all link libs</li>\n<li><code>wget -rcN -np -nH -q --cut-dirs=100 -R &quot;index.html*&quot; https://mirrors.phigent.io/xxx/xx -P output_dir</code> wget 下载文件夹， <code>--cut-dirs=n</code> 从&#x2F;开始往后忽略几级文件夹， <code>-q</code> quite</li>\n<li><code>wget -r -nH --cut-dirs=100 --reject &quot;index.html*&quot; --no-parent https://mirrors.phigent.io/xxx/xx -P output_dir</code></li>\n<li><code>ls -Al --si --time-style long-iso</code> <code>-A</code>:不显示.和.., <code>--si</code> human readable <code>--time-style long-iso</code>时间显示为 2022-06-10</li>\n<li><code>truncate --size 1M file_name</code> 创建大小为 1M 的文件 file_name</li>\n<li><code>dd if=/dev/urandom of=random_input.bin bs=983040 count=1</code> 创建大小为 bs 的随机文件</li>\n<li><a href=\"https://guides.wp-bullet.com/batch-resize-images-using-linux-command-line-and-imagemagick/\">imagemagick</a>: 命令行 resize 图片</li>\n<li><code>watch cat /proc/sys/fs/file-nr</code> get the current number of open files</li>\n<li><code>pidof firefox | xargs kill -9 </code> or <code>kill $(pidof firefox)</code> kill process by name</li>\n<li><code>pkg-config --cflags --libs gstreamer-1.0</code></li>\n<li><code>export PKG_CONFIG_PATH=$&#123;PIXI_PATH&#125;/env/share/pkgconfig:$&#123;PIXI_PATH&#125;/env/lib/pkgconfig:$&#123;PKG_CONFIG_PATH&#125;</code>设置 pkgconfig 查找路径</li>\n<li><code>pkg-config --modversion poppler-data</code> 查看库版本 , pkg-confg 配置文件在&#x2F;usr&#x2F;share&#x2F;pkgconfig 下(pkg-config 一般为开发者使用，文件系统中勾选-dev)</li>\n<li><code>ldconfig -p </code>查看系统安装的库</li>\n<li><code>ldconfig -p | grep pcap</code> 查看系统是否安装 pcap</li>\n<li>打洞： A1, A2, A3…, B, C; A 能连接 B, B 能连接 C, A 不能连接 C。C 上配置<code>~/.ssh/config</code>:</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">config</span><br></pre></td></tr></table></figure>\n\n<p>B 上执行<code>ssh </code>登录到 C，再打开一个 C 连接，就能和 A 之间使用 scpc 传数据。如果 A 连网，C 如果想连网，B 执行完 ssh 命令后，登录到 C 上，再执行<code>ssh </code>后登录到 A 上，再打开一个 C 连接，就能上网了。</p>\n<ol>\n<li><p>ssh -L 8000:10.31.1.177:80 <a href=\"mailto:&#x78;&#105;&#x79;&#x61;&#x6e;&#103;&#x40;&#49;&#x30;&#x2e;&#51;&#49;&#x2e;&#49;&#46;&#50;&#x32;&#53;\">&#x78;&#105;&#x79;&#x61;&#x6e;&#103;&#x40;&#49;&#x30;&#x2e;&#51;&#49;&#x2e;&#49;&#46;&#50;&#x32;&#53;</a></p>\n</li>\n<li><p><a href=\"https://github.com/damaainan/ceshisina/blob/master/Linux/blog/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/06linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%85%AD%EF%BC%9A%E7%BD%91%E7%BB%9C.md#L454\">link</a></p>\n<ul>\n<li>假设 A 为 windows 机器，打开 mobarxterm 本地执行 ssh -L 2222:C_IP:22 xiyang.jia@B_IP 登录 B, 将所有发送 2222 端口的数据通过中间主机<code>B</code>转发至目标主机<code>C</code>的<code>22</code>端口，</li>\n<li>A 再开一个窗口，执行 ssh -p 2222 root@localhost，A 直接连接 C</li>\n</ul>\n</li>\n<li><p>sed -i “s&#x2F;查找字段&#x2F;替换字段&#x2F;g” <code>grep 查找字段 -rl 路径</code></p>\n</li>\n<li><p><code>cat url-list.txt | xargs wget -c</code>xargs 将参数列表转换成小块分段传递给其他命令</p>\n</li>\n<li><p><code>fd pdf | xargs -n1 -I &#123;&#125; cp &#123;&#125; pdf/</code> cp 所有 pdf 到 pdf&#x2F;文件夹</p>\n</li>\n<li><p>ssh scp 免密 登录<code>ssh-keygen -t rsa &amp;&amp; ssh-copy-id -i ~/.ssh/id_rsa.pub root@10.10.129.25</code> 或将一台机器的 id_rsa.pub 复制到另一台机器~&#x2F;.ssh&#x2F;authorized_keys 文件中</p>\n</li>\n<li><p><code>tree -L 2</code> 查看二级目录结构</p>\n</li>\n<li><p><code>lsb_release -a</code> 查看操作系统版本，是 Ubuntu 还是 CentOS，是 14.04 还是 16.04</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/u011630575/article/details/52151995\">link</a><br><code>./test.sh 2&gt;&amp;1 | tee test.log</code> log 同时输出到前台和文件中 可以不带 2&gt;&amp;1(将标准错误输出到标准输出)<br><code>./test.sh &amp;&gt;test.log</code> 将标准输出, 标准错误重定位到 test.log, &amp;&gt;file 意思是把标准输出 和 标准错误输出 都重定向到文件 file 中, 在 Bash 中，&amp;&gt;与 2&gt;&amp;1 的含义相同。<br><code>./test.sh 2&gt;test.log 1&gt;&amp;2</code> 将标准输出重定位到标准错误， 标准错误重定位到 test.log<br><code>./test.sh &gt;test.log 2&gt;&amp;1</code> 将标注错误重定位到标准输出，标准输出重定位到 test.log<br><code> ls a.txt b.txt 1&gt;file.out 2&gt;file.err</code> “1&gt;” 通常可以省略成 “&gt;”</p>\n</li>\n<li><p>IP 地址别名，如服务器别名 <code>/etc/hosts 10.10.0.61 dg16</code></p>\n</li>\n<li><p><code>ssh -v root@10.10.129.25</code> 通过[-v]参数，查看 ssh 连接的具体过程</p>\n</li>\n<li><p><code>echo123456 | sudo -S ./winless.sh</code> 以 root 权限来执行文件 这里 123456 是密码，参数-S 专门为执行 sudo 命令的时候要输入密码而准备的，表示标准输入。</p>\n</li>\n<li><p>ssh 打洞，中间机器运行 <code>ssh -R10115:$&#123;IP1&#125;:22 $&#123;IP2&#125;</code><br>然后运行 <code>rsync -avz --progress -e &#39;ssh -p 10115&#39; $&#123;FILES&#125; localhost:$&#123;PATH&#125;</code></p>\n</li>\n<li><p>w 查看登录的用户 who 向登录用户发消息 <code>echo jia &gt; /dev/pts/20 </code> <code>for i in $(who | awk &#39;&#123;print $2&#125;&#39;); do echo &quot;$&#123;i&#125;&quot; &gt; /dev/$&#123;i&#125;; done</code></p>\n</li>\n<li><p><code>nslookup www.baidu.com</code> 域名查询命令</p>\n</li>\n<li><p>split 将一个大文件分割成多个小文件</p>\n</li>\n<li><p><code>chmod 777 -R work_space</code> 改变目录下所有文件权限</p>\n</li>\n<li><p><code>time program</code> 测试程序运行时间</p>\n</li>\n<li><p><code>ssh -XY jiaxiyang@10.10.0.61</code> 需要的时候显示图形界面</p>\n</li>\n<li><p><code>arp -na</code> 查看网络中连接情况</p>\n</li>\n<li><p><code>find . -name &#39;*&#39; -exec touch &#123;&#125; \\;</code> 修改当前目录及子目录中所有文件的时间</p>\n</li>\n<li><p><code>chattr</code> 修改文件（夹）属性 不能被删除</p>\n</li>\n<li><p><code>figlet &quot;jia&quot; -f scrpt(ls /usr/share/figlet)</code> 改变输出字体大小</p>\n</li>\n<li><p><code>ln -s source target</code> 创建软连接</p>\n</li>\n<li><p>ln 非常有用，可以使用 ln 来重新命名文件，可以提供一层虚拟层，文件名字路径改变只需重新链接一下，上层代码不用改变。例如 xilinx 所有硬盘都连接到 &#x2F;proj&#x2F;rdi&#x2F;staff&#x2F;xiyang 方便操作</p>\n</li>\n<li><p><code>watch -d -n 1 ./Re reg</code> 每隔 1 秒查看程序变化</p>\n</li>\n<li><p><code>axel -n 15（线程数）URL</code> 多线程下载</p>\n</li>\n<li><p><code>apt-cache search trash</code> 搜索安装包</p>\n</li>\n<li><p><code>sudo dpkg --install atom-amd64.deb</code> dpkg 安装.deb 软件包</p>\n</li>\n<li><p><code>export PATH=&quot;/home/zxy/Desktop:$PATH&quot;</code> 添加环境变量</p>\n</li>\n<li><p><code>linuxlogo</code> 命令行显示 linux logo</p>\n</li>\n<li><p><code>sudo mount -t tmpfs -o size=8G tmpfs ramdisk/</code> 创建内存文件系统， 可以加快程序运行时间。</p>\n</li>\n<li><p><code>hostname</code> 查看主机名</p>\n</li>\n<li><p><code>tar -zxvf aa.tar.gz BOOT.BIN</code> 单独解压 某个文件 <code>tar -tf</code> 压缩包名称，可以查看压缩包内容 <a href=\"https://www.cnblogs.com/manong--/p/8012324.html\">https://www.cnblogs.com/manong--/p/8012324.html</a></p>\n</li>\n<li><p><code>speedtest-cli</code> 测下载上传网速</p>\n</li>\n<li><p><code>curl -O -u jiaxiyang:jiaxiyang -s[-#]</code></p>\n</li>\n<li><p><code>wget -c url</code> 支持断点续传 好用，可以用来下载大文件，比如： petalinux cache 30G</p>\n</li>\n<li><p><code>crontab -e</code> 定时执行脚本 cat &#x2F;var&#x2F;mail&#x2F;jiaxiyang 查看结果</p>\n</li>\n<li><p><code>syncthing</code> 文件同步神器</p>\n</li>\n<li><p><code>realpath</code> 查看文件全路径</p>\n</li>\n<li><p><code>shotwell</code> *.jpg 打开图片</p>\n</li>\n<li><p><code>vimdiff dp</code> 快速移动不同</p>\n</li>\n<li><p><code>stat - display file or file system status</code></p>\n</li>\n<li><p><code>stat -c %s file</code> 查看文件长度</p>\n</li>\n<li><p><code>stat -c %z file</code> 查看文件修改时间</p>\n</li>\n<li><p><code>rm file || true</code> 如果不存在执行 true，还是会报错，但$?返回为 0 使用，使用 bash -ex 时不会退出。</p>\n</li>\n<li><p><code>cat file | grep -v &#39;^#&#39;</code> 输出不以#号开头的行</p>\n</li>\n<li><p><code>SCRIPT_PATH=$(dirname $(realpath xx.sh)) </code> 比 pwd 要好，pwd 显示的是虚拟链接地址。</p>\n</li>\n<li><p><code>PROJECT_NAME=$(basename $(SCPRIT_PATH))</code> 当前脚本所在的工程名字</p>\n</li>\n<li><p>sshpass 如果没带 nocheck 需要 ssh 先登录一次, 或者 StrictHOstkeyChecking&#x3D;no</p>\n</li>\n<li><p><code>sshpass -p root（密码） ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@10.10.129.22 &#39;/etc/init.d/led start&#39;</code> 跨机器执行命令 在机器 A 上调用，在机器 B 上执行，将结果输出到 A 上。</p>\n</li>\n<li><p><code>sshpass -p root（密码） ssh(scp) -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@10.10.129.22 ssh -y -y root@zu9-2 &quot; &#39; cd /home &amp;&amp; ls&#39;&quot; </code>zu9 上执行 cd &#x2F;home &amp;&amp; ls 注意 要同时加双引号和单引号。<code>sshpass -p jiaxiyang scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null static_ip.txt jiaxiyang@10.10.0.96:~</code></p>\n</li>\n<li><p><code>scp -o ProxyJump=nvidia@10.31.1.12 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r dir_test  root@10.31.1.180:/userdata/mount/xiyang/</code>跨机器传文件</p>\n</li>\n<li><p><code>ssh -o ProxyJump=nvidia@10.31.1.12 root@10.31.1.180 &#39;ls /userdata&#39;</code> 跨机器执行， host -&gt; 12 -&gt;180 执行</p>\n</li>\n<li><p><code>tar -cf - zu9_test | sshpass -p root ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@10.10.129.133 &quot;tar -xvf - -C /var&quot;</code> 跨机器 cp 文件并免密</p>\n</li>\n<li><p><code>rm -rf /etc/localtime &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code> 设置北京时区</p>\n</li>\n<li><p>多网卡不能同时配置一个网关?</p>\n</li>\n</ol>\n<h2 id=\"Links-and-Reference\"><a href=\"#Links-and-Reference\" class=\"headerlink\" title=\"Links and Reference\"></a>Links and Reference</h2><ol>\n<li><a href=\"https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md\">The art of command line</a></li>\n<li><a href=\"https://github.com/alebcay/awesome-shell\">Awesome shell</a></li>\n<li><a href=\"https://github.com/awesome-lists/awesome-bash\">Awesome bash</a></li>\n<li><a href=\"https://github.com/zhouyiqi91/awesome-cheatsheets/blob/master/languages/bash.sh\">Bash cheatsheet</a></li>\n</ol>\n","categories":["Tools","Bash"],"tags":["Bash"]},{"title":"Bazel","url":"/2022/07/05/Bazel/","content":"<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><ol>\n<li><code>docker pull cockroachdb/bazel:latest-do-not-use</code></li>\n<li><a href=\"https://bazel.build/install/ubuntu?hl=zh-cn#run-installer\">安装脚本</a></li>\n</ol>\n<h2 id=\"tutorial\"><a href=\"#tutorial\" class=\"headerlink\" title=\"tutorial\"></a>tutorial</h2><ol>\n<li><a href=\"https://bazel.build/start/cpp?hl=zh-cn\">c++ base samples</a></li>\n<li><a href=\"https://bazel.build/tutorials/cpp-use-cases?hl=zh-cn\">c++ tutorials</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://bazel.build/reference?hl=zh-cn\">参考文档: 构建百科全书， 测试百科全书，命令行参考文档，查询参考文档</a></li>\n<li><a href=\"https://bazel.build/about/intro?hl=zh-cn\">简介</a></li>\n<li><a href=\"https://bazel.build/basics?hl=zh-cn\">build system</a></li>\n<li><a href=\"https://bazel.build/concepts/build-ref?hl=zh-cn\">概念</a></li>\n<li><a href=\"https://bazel.build/build/style-guide?hl=zh-cn\">基础知识</a></li>\n<li><a href=\"https://bazel.build/configure/best-practices?hl=zh-cn\">最佳做法</a></li>\n<li><a href=\"https://bazel.build/configure/attributes?hl=zh-cn\">配置 BUILD</a></li>\n</ol>\n","categories":["Tools","Bazel"],"tags":["Tools","Bazel"]},{"title":"Bjarny Stroustrup cpp","url":"/2020/08/18/Bjarny-Stroustrup-Cpp/","content":"<h2 id=\"What-is-C-20\"><a href=\"#What-is-C-20\" class=\"headerlink\" title=\"What is C++20?\"></a>What is C++20?</h2><ol>\n<li>The best approximation of C++’s ideals so far.</li>\n<li>As big an improvement over C++11 as C++11 was over C++98: A major “release”</li>\n<li>Lots of useful features<ul>\n<li>Simpler, more expressive, faster code that compiles faster</li>\n<li>Modeles</li>\n<li>Concepts</li>\n<li>Coroutines</li>\n<li>Ranges</li>\n<li>Dates</li>\n<li>Span</li>\n<li>Better compile-time programing support</li>\n<li>Many “minor features”</li>\n</ul>\n</li>\n<li>C++23 and C++26 is better than C++20, not the major “release”.</li>\n<li>Diretly learn C++20. It’s the outside layer of the onion.</li>\n<li>C++23:<ul>\n<li>“Completes C++20”</li>\n<li>Plus: standard modules, library support for coroutines, executors &amp; networking</li>\n<li>Maybe: static reflection, pattern matching</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Keys-C-“Rules-of-Thumb”\"><a href=\"#Keys-C-“Rules-of-Thumb”\" class=\"headerlink\" title=\"Keys C++ “Rules of Thumb”\"></a>Keys C++ “Rules of Thumb”</h2><ol>\n<li><code>A static type system</code> with equal support for build-in and user-defined types<ul>\n<li>A type: specifies the set of operations that can be applied to an object and specifies how an object is laid out in memory</li>\n<li>A static type system: the base of all</li>\n<li>static mean compile time will determine all the type(not the run-time).</li>\n<li>compile-time error detection</li>\n<li>performance</li>\n<li>flexibility through compile-time resolution(overloading, generic programming, metaprogramming…)</li>\n</ul>\n</li>\n<li><code>Value and reference semantics</code><ul>\n<li>value types: Inegers, characters, strings, containers,…</li>\n<li>Pointers&#x2F;references: T*, T&amp;, unique_ptr<T>, Forward_iterator</li>\n</ul>\n</li>\n<li><code>Direct use</code> of machine and operating system resources<ul>\n<li>bitset and span(modern c++)</li>\n<li>the onion principle: the more layers you peel off, the more control, the more error.</li>\n</ul>\n</li>\n<li>Systematic and general <code>resource management</code>(RAII)<ul>\n<li>manage heap, file…</li>\n<li>every resource must have an owner: responsible for its cleanup.</li>\n<li>control the complete object life cycle: creation, copy, move, destruction</li>\n</ul>\n</li>\n<li>Support <code>composition</code> of software from separately developed parts.<ul>\n<li>modules</li>\n<li>all major features support composition: moduls, classes, concepts, templates, functions, aliases</li>\n</ul>\n</li>\n<li>Support for <code>object-oriented programming</code></li>\n<li>Support for <code>generic programming</code><ul>\n<li>concepts</li>\n</ul>\n</li>\n<li>Support <code>compile-time programming</code><ul>\n<li>Move computation from run-time to compile-time(performace, do once)</li>\n<li>It’s everywhere: overloading and virtual functions, templates, variadic templates, constexp functions…</li>\n</ul>\n</li>\n<li><code>Concurency</code> through libraries supported by intrinsics</li>\n<li><code>Libraries</code><ul>\n<li>A user shouldn’t have to care whether a feature is implemented in the language or in a library</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Philosophy-CppCoreGuidelines\"><a href=\"#Philosophy-CppCoreGuidelines\" class=\"headerlink\" title=\"Philosophy (CppCoreGuidelines)\"></a>Philosophy (CppCoreGuidelines)</h2><ol>\n<li>Express ideas directly in code</li>\n<li>Write in ISO Stardard C++</li>\n<li>Express intent</li>\n<li>Ideally, a program should be statically type safe.</li>\n<li>Prefer compile-time checking to run-time checking.</li>\n<li>What cannot be checked at compile time should be checkable at run time</li>\n<li>Catch run-time errors early.</li>\n<li>Don’t leak any resources.</li>\n<li>Don’t waste time or space.</li>\n<li>Prefer immutable data to mutable data</li>\n<li>Encapsulate messy constructs, rather than spreading through the code.</li>\n<li>Use supporting tools as appropriate</li>\n<li>Use support libraries as appropriate</li>\n</ol>\n<h2 id=\"Lower-levels-of-abstaction\"><a href=\"#Lower-levels-of-abstaction\" class=\"headerlink\" title=\"Lower levels of abstaction\"></a>Lower levels of abstaction</h2><ol>\n<li>Samples:<ul>\n<li>Sizes</li>\n<li>Raw pointers</li>\n<li>Allocation and deallocation</li>\n<li>Loop-control variables</li>\n<li>Casts</li>\n<li>Macros</li>\n</ul>\n</li>\n<li>Except as implementation details and asides</li>\n<li>Don’t go to lower level if you have to.</li>\n</ol>\n<h2 id=\"What-really-matters\"><a href=\"#What-really-matters\" class=\"headerlink\" title=\"What really matters?\"></a>What really matters?</h2><ol>\n<li>People</li>\n<li>A programming language is a tool, not an end goal: peopeo want great systems, not programming languages.</li>\n<li>Software developers want great tools: not just programming language features.</li>\n</ol>\n<h2 id=\"Abstraction\"><a href=\"#Abstraction\" class=\"headerlink\" title=\"Abstraction\"></a>Abstraction</h2><ol>\n<li>Often, the software is more complicated than the hardware.</li>\n<li>abstraction in code:<ul>\n<li>resource mangement: vector</li>\n<li>generic programing: concepts: compile-time predicates.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"The-onion-principle\"><a href=\"#The-onion-principle\" class=\"headerlink\" title=\"The onion principle\"></a>The onion principle</h2><ol>\n<li>Mangagement of complexity: make simple thing simple.</li>\n<li>Layers of abstraction: the more layers you peel off, the more you cry.</li>\n</ol>\n<h2 id=\"An-engineering-approach\"><a href=\"#An-engineering-approach\" class=\"headerlink\" title=\"An engineering approach\"></a>An engineering approach</h2><ol>\n<li>Design c++ is not pure math.</li>\n<li>Principled and pragmatic design</li>\n<li>Progress gradually guided by feedback</li>\n<li>There are always many tradeoffs: choosing is hard</li>\n<li>Design decisions have consequences</li>\n</ol>\n<h2 id=\"C-in-two-lines\"><a href=\"#C-in-two-lines\" class=\"headerlink\" title=\"C++ in two lines\"></a>C++ in two lines</h2><ol>\n<li>Direct map to hardware<ul>\n<li>of instructions and fundamental data types</li>\n<li>initially from C</li>\n<li>Future: use novel hardware better(caches, multicores, GPUs, FPGAs, SIMD, …)</li>\n</ul>\n</li>\n<li>Zero-overhead abstraction<ul>\n<li>classes, inheritance, generic programming, …</li>\n<li>initially from Simula(where it wasn’t zero-overhead)</li>\n<li>Future: Type- and resouce-safety, concepts, modules, concurrency, …</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"C-’s-role\"><a href=\"#C-’s-role\" class=\"headerlink\" title=\"C++’s role\"></a>C++’s role</h2><ol>\n<li>A language for<ul>\n<li>writing elegant and efficiaent programs</li>\n<li>for definning and using light-weight abstractions</li>\n<li>a language for resource-constrained applications</li>\n<li>building software infrastructure</li>\n</ul>\n</li>\n<li>Offers<ul>\n<li>a direct map to hardware</li>\n<li>Zero-overhead abstraction</li>\n</ul>\n</li>\n<li>No language is perfect<ul>\n<li>for everthing</li>\n<li>for everyone</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"C-is-tunable\"><a href=\"#C-is-tunable\" class=\"headerlink\" title=\"C++ is tunable\"></a>C++ is tunable</h2><ol>\n<li>Make simple things simple<ul>\n<li>Don’t make complicated tasks impossible</li>\n<li>Don’t make complicated tasks unreasonable hard to do</li>\n<li>The onion principle</li>\n</ul>\n</li>\n<li>Don’t drop to lower levels of abstraction<ul>\n<li>Unless you really, really need to</li>\n<li>Hide messy code behind clean interfaces</li>\n</ul>\n</li>\n<li>Alwasy measure</li>\n</ol>\n<h2 id=\"Write-better-code\"><a href=\"#Write-better-code\" class=\"headerlink\" title=\"Write better code\"></a>Write better code</h2><ol>\n<li>Cleaner</li>\n<li>Simpler</li>\n<li>More readable</li>\n<li>More maintainable</li>\n<li>Faster</li>\n<li>Less clever</li>\n<li>More general</li>\n<li>More usable and re-usable</li>\n<li>Type safe</li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"CPM","url":"/2022/07/16/CPM/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><a href=\"https://github.com/cpm-cmake/CPM.cmake?tab=readme-ov-file#usage\">usage</a><ul>\n<li><dependency>_SOURCE_DIR is the path to the source of the dependency.</li>\n<li><dependency>_BINARY_DIR is the path to the build directory of the dependency.</li>\n<li><dependency>_ADDED is set to YES if the dependency has not been added before, otherwise it is set to NO.</li>\n</ul>\n</li>\n<li>CPMAddPackage 是 CMake 的一个模块，它是 CPM.cmake 的一部分，用于管理项目依赖项。当你使用 CPMAddPackage 下载 .tgz 或 .tar.gz 归档文件时，该模块会自动解压归档文件,会去除一层</li>\n<li><a href=\"https://github.com/cpm-cmake/CPM.cmake/wiki/More-Snippets#sol2\">samples</a></li>\n<li>导入外部库 <code>INTERFACE IMPORTED</code> <a href=\"https://hsf-training.github.io/hsf-training-cmake-webpage/04-targets/index.html\">link</a></li>\n<li>全局导入外部库 <code>INTERFACE IMPORTED GLOBAL</code>， 解决 cpm local scope include_directories 不工作问题</li>\n<li>? add_definitions()传递， 后引入的库在作用域更小， 先引入的库作用域大，与顺序有关</li>\n<li>download</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CPM_DOWNLOAD_VERSION <span class=\"number\">0.27</span>.<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CPM_DOWNLOAD_LOCATION <span class=\"string\">&quot;$&#123;CMAKE_BINARY_DIR&#125;/cmake/CPM_$&#123;CPM_DOWNLOAD_VERSION&#125;.cmake&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> (<span class=\"keyword\">EXISTS</span> <span class=\"variable\">$&#123;CPM_DOWNLOAD_LOCATION&#125;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;Downloading CPM.cmake&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">file</span>(DOWNLOAD https://github.com/TheLartians/CPM.cmake/releases/download/v<span class=\"variable\">$&#123;CPM_DOWNLOAD_VERSION&#125;</span>/CPM.cmake <span class=\"variable\">$&#123;CPM_DOWNLOAD_LOCATION&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$&#123;CPM_DOWNLOAD_LOCATION&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cpm url lib export， <a href=\"https://github.com/cpm-cmake/CPM.cmake/wiki/More-Snippets#sol2\">cmake 导入外部链接库</a></li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">cpmaddpackage(</span><br><span class=\"line\">  NAME</span><br><span class=\"line\">  gflags</span><br><span class=\"line\">  URL</span><br><span class=\"line\">  https://mirrors.xxxxxx/nfs/pkgs/gflags_2.<span class=\"number\">2.2</span>/$gflags_2.<span class=\"number\">2.2</span>.tar</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if(gflags_ADDED AND NOT TARGET gflags)</span></span><br><span class=\"line\"><span class=\"comment\">## 错误</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(gflags_ADDED)</span><br><span class=\"line\">  <span class=\"keyword\">add_library</span>(gflags INTERFACE)</span><br><span class=\"line\">  <span class=\"keyword\">target_include_directories</span>(gflags INTERFACE <span class=\"string\">&quot;$&#123;gflags_SOURCE_DIR&#125;/include&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">target_link_directories</span>(gflags INTERFACE <span class=\"string\">&quot;$&#123;gflags_SOURCE_DIR&#125;/lib&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 正确(官网的例子没有set properties，是因为会编译出.so，不用指定so位置)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(gflags_ADDED)</span><br><span class=\"line\">  <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;gflags test2**********************&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">add_library</span>(gflags INTERFACE IMPORTED GLOBAL) <span class=\"comment\">## global导入， 解决cpm local scope include_directories不工作问题</span></span><br><span class=\"line\">  <span class=\"keyword\">add_library</span>(gflags::gflags ALIAS gflags)</span><br><span class=\"line\">  <span class=\"keyword\">set_target_properties</span>(</span><br><span class=\"line\">    gflags PROPERTIES IMPORTED_LOCATION <span class=\"string\">&quot;$&#123;gflags_SOURCE_DIR&#125;/lib/libgflags.so&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">target_include_directories</span>(gflags INTERFACE <span class=\"string\">&quot;$&#123;gflags_SOURCE_DIR&#125;/include&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\"># target_link_directories(gflags INTERFACE &quot;$&#123;gflags_SOURCE_DIR&#125;/lib&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>多个库 if(xxx_ADDED)只有一个库会调用，可以在 if 里面打印消息测试。不用<code>if(gflags_ADDED AND NOT TARGET gflags)</code></p>\n</li>\n<li><p>注意区分<code>add_library(gflags SHARED IMPORTED GLOBAL)</code>和<code>libgflags.so</code>的区别，前者是 target, 后者是 so。为了区分两者， 可以使用<code>add_library(gflags SHARED IMPORTED GLOBAL) add_library(gflags::gflags ALIAS gflags)</code> target::target 来区分。</p>\n</li>\n<li><p><a href=\"https://github.com/cpm-cmake/CPM.cmake/issues/175\">如果依赖的库有冲突， CPM 会有 WARNING</a></p>\n</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">CMake Warning at cmake/CPM.cmake:<span class=\"number\">269</span> (<span class=\"keyword\">message</span>):</span><br><span class=\"line\">  CPM: cpm-test2: requires a newer version of cpm-test1 (<span class=\"number\">0.0</span>.<span class=\"number\">4</span>) than</span><br><span class=\"line\">  currently included ().</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://github.com/cpm-cmake/CPM.cmake#limitations\">解决库冲突方法</a></li>\n</ol>\n<ul>\n<li>最外层添加依赖（因为 first version used)</li>\n<li>lock file</li>\n</ul>\n<ol>\n<li>cpm funtion</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(pg_add_lib name)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(options <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(oneValueArgs PACK)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(multiValueArgs INCLUDE_DIRS LIB_DIRS)</span><br><span class=\"line\">  <span class=\"keyword\">cmake_parse_arguments</span>(ARG <span class=\"string\">&quot;$&#123;options&#125;&quot;</span> <span class=\"string\">&quot;$&#123;oneValueArgs&#125;&quot;</span> <span class=\"string\">&quot;$&#123;multiValueArgs&#125;&quot;</span></span><br><span class=\"line\">                        <span class=\"variable\">$&#123;ARGN&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ARG_PACK)</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(PACK_NAME <span class=\"variable\">$&#123;ARG_PACK&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>()</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(PACK_NAME <span class=\"variable\">$&#123;name&#125;</span>.tar)</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">  cpmaddpackage(</span><br><span class=\"line\">    NAME <span class=\"variable\">$&#123;name&#125;</span> URL</span><br><span class=\"line\">    https://xxxxxxx/nfs/pkgs/<span class=\"variable\">$&#123;name&#125;</span>/<span class=\"variable\">$&#123;ARCH_PLAT_VENDOR&#125;</span>/<span class=\"variable\">$&#123;PACK_NAME&#125;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable\">$&#123;name&#125;</span>_ADDED)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ARG_INCLUDE_DIRS)</span><br><span class=\"line\">      <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;ARG_INCLUDE_DIRS=\\&quot;$&#123;ARG_INCLUDE_DIRS&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span>(INCLUDE_DIR <span class=\"variable\">$&#123;ARG_INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;INCLUDE_DIR=\\&quot;$&#123;INCLUDE_DIR&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">list</span>(APPEND INCLUDE_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"variable\">$&#123;INCLUDE_DIR&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>()</span><br><span class=\"line\">      <span class=\"keyword\">list</span>(APPEND INCLUDE_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"keyword\">include</span>)</span><br><span class=\"line\">    <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;INCLUDE_DIRS=\\&quot;$&#123;INCLUDE_DIRS&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ARG_LIB_DIRS)</span><br><span class=\"line\">      <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;ARG_LIB_DIRS=\\&quot;$&#123;ARG_LIB_DIRS&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span>(LIB_DIR <span class=\"variable\">$&#123;ARG_LIB_DIRS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;LIB_DIR=\\&quot;$&#123;LIB_DIR&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">list</span>(APPEND LIB_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"variable\">$&#123;LIB_DIR&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>()</span><br><span class=\"line\">      <span class=\"keyword\">list</span>(APPEND LIB_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/lib)</span><br><span class=\"line\">    <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;LIB_DIRS=\\&quot;$&#123;LIB_DIRS&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(LIB_DIR <span class=\"variable\">$&#123;LIB_DIRS&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">execute_process</span>(</span><br><span class=\"line\">        <span class=\"keyword\">COMMAND</span> ls</span><br><span class=\"line\">        <span class=\"keyword\">COMMAND</span> sh -c <span class=\"string\">&quot;awk &#x27;/.so\\$|.a\\$/&#123;print \\$0&#125;&#x27;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">COMMAND</span> sh -c <span class=\"string\">&quot;awk -F &#x27;.&#x27; &#x27;&#123;print substr($1,4)&#125;&#x27;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># COMMAND sh -c &quot;sort&quot; COMMAND sh -c &quot;uniq&quot;</span></span><br><span class=\"line\">        WORKING_DIRECTORY <span class=\"variable\">$&#123;LIB_DIR&#125;</span></span><br><span class=\"line\">        OUTPUT_VARIABLE LIBS</span><br><span class=\"line\">        OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class=\"line\">      <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;LIBS=$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;\\n&quot;</span> <span class=\"string\">&quot;;&quot;</span> LIBS <span class=\"string\">&quot;$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span>(LIB <span class=\"variable\">$&#123;LIBS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;LIB=\\&quot;$&#123;LIB&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> <span class=\"keyword\">TARGET</span> <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">find_library</span>(</span><br><span class=\"line\">            <span class=\"variable\">$&#123;LIB&#125;</span>_PATH</span><br><span class=\"line\">            NAMES <span class=\"variable\">$&#123;LIB&#125;</span></span><br><span class=\"line\">            PATHS <span class=\"string\">&quot;$&#123;LIB_DIR&#125;&quot;</span></span><br><span class=\"line\">            NO_DEFAULT_PATH)</span><br><span class=\"line\">          <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;LIB_PATH=\\&quot;$&#123;$&#123;LIB&#125;_PATH&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;LIB&#125;</span> UNKNOWN IMPORTED GLOBAL)</span><br><span class=\"line\">          <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;name&#125;</span>::<span class=\"variable\">$&#123;LIB&#125;</span> ALIAS <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">set_target_properties</span>(<span class=\"variable\">$&#123;LIB&#125;</span> PROPERTIES IMPORTED_LOCATION</span><br><span class=\"line\">                                                  <span class=\"string\">&quot;$&#123;$&#123;LIB&#125;_PATH&#125;&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">target_include_directories</span>(<span class=\"variable\">$&#123;LIB&#125;</span> INTERFACE <span class=\"variable\">$&#123;INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">      <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">    <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">endfunction</span>(pg_add_lib)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>适应 windows, 去除 awk 依赖</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(pg_add_third_party_lib name)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(options <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(oneValueArgs PACK)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(multiValueArgs INCLUDE_DIRS LIB_DIRS)</span><br><span class=\"line\">  <span class=\"keyword\">cmake_parse_arguments</span>(ARG <span class=\"string\">&quot;$&#123;options&#125;&quot;</span> <span class=\"string\">&quot;$&#123;oneValueArgs&#125;&quot;</span> <span class=\"string\">&quot;$&#123;multiValueArgs&#125;&quot;</span></span><br><span class=\"line\">                        <span class=\"variable\">$&#123;ARGN&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ARG_PACK)</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(PACK_NAME <span class=\"variable\">$&#123;ARG_PACK&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>()</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(PACK_NAME <span class=\"variable\">$&#123;name&#125;</span>.tar)</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">  cpmaddpackage(</span><br><span class=\"line\">    NAME <span class=\"variable\">$&#123;name&#125;</span> URL</span><br><span class=\"line\">    https://xxx/nfs/pkgs/<span class=\"variable\">$&#123;name&#125;</span>/<span class=\"variable\">$&#123;ARCH_PLAT_VENDOR&#125;</span>/<span class=\"variable\">$&#123;PACK_NAME&#125;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable\">$&#123;name&#125;</span>_ADDED)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ARG_INCLUDE_DIRS)</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span>(INCLUDE_DIR <span class=\"variable\">$&#123;ARG_INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">EXISTS</span> <span class=\"string\">&quot;$&#123;$&#123;name&#125;_SOURCE_DIR&#125;/$&#123;INCLUDE_DIR&#125;&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">list</span>(APPEND INCLUDE_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"variable\">$&#123;INCLUDE_DIR&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">      <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>()</span><br><span class=\"line\">      <span class=\"keyword\">list</span>(APPEND INCLUDE_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"keyword\">include</span>)</span><br><span class=\"line\">    <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ARG_LIB_DIRS)</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span>(LIB_DIR <span class=\"variable\">$&#123;ARG_LIB_DIRS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">list</span>(APPEND LIB_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"variable\">$&#123;LIB_DIR&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>()</span><br><span class=\"line\">      <span class=\"keyword\">list</span>(APPEND LIB_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/lib)</span><br><span class=\"line\">    <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(LIB_DIR <span class=\"variable\">$&#123;LIB_DIRS&#125;</span>)</span><br><span class=\"line\">      <span class=\"comment\"># shared libs</span></span><br><span class=\"line\">      <span class=\"keyword\">execute_process</span>(</span><br><span class=\"line\">        <span class=\"keyword\">COMMAND</span> ls</span><br><span class=\"line\">        <span class=\"comment\"># COMMAND sh -c &quot;awk &#x27;/.so\\$/&#123;print \\$0&#125;&#x27;&quot; COMMAND sh -c &quot;awk -F &#x27;.&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># &#x27;&#123;print substr($1,4)&#125;&#x27;&quot;</span></span><br><span class=\"line\">        WORKING_DIRECTORY <span class=\"variable\">$&#123;LIB_DIR&#125;</span></span><br><span class=\"line\">        OUTPUT_VARIABLE LIBS</span><br><span class=\"line\">        OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class=\"line\">      <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;\\n&quot;</span> <span class=\"string\">&quot;;&quot;</span> LIBS <span class=\"string\">&quot;$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span>(LIB <span class=\"variable\">$&#123;LIBS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">string</span>(REGEX MATCH <span class=\"string\">&quot;lib.*\\.so$&quot;</span> LIB <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(LIB)</span><br><span class=\"line\">          <span class=\"keyword\">get_filename_component</span>(LIB <span class=\"variable\">$&#123;LIB&#125;</span> NAME_WE)</span><br><span class=\"line\">          <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;lib&quot;</span> <span class=\"string\">&quot;&quot;</span> LIB <span class=\"string\">&quot;$&#123;LIB&#125;&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;.......lib=$&#123;LIB&#125;&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> <span class=\"keyword\">TARGET</span> <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;LIB&#125;</span> SHARED IMPORTED GLOBAL)</span><br><span class=\"line\">            <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;name&#125;</span>::<span class=\"variable\">$&#123;LIB&#125;</span> ALIAS <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">set_target_properties</span>(<span class=\"variable\">$&#123;LIB&#125;</span> PROPERTIES IMPORTED_LOCATION</span><br><span class=\"line\">                                                    <span class=\"string\">&quot;$&#123;LIB_DIR&#125;/lib$&#123;LIB&#125;.so&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">target_include_directories</span>(<span class=\"variable\">$&#123;LIB&#125;</span> INTERFACE <span class=\"variable\">$&#123;INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">      <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># static libs</span></span><br><span class=\"line\">      <span class=\"keyword\">execute_process</span>(</span><br><span class=\"line\">        <span class=\"keyword\">COMMAND</span> ls</span><br><span class=\"line\">        <span class=\"comment\"># COMMAND sh -c &quot;awk &#x27;/.a\\$/&#123;print \\$0&#125;&#x27;&quot; COMMAND sh -c &quot;awk -F &#x27;.&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># &#x27;&#123;print substr($1,4)&#125;&#x27;&quot;</span></span><br><span class=\"line\">        WORKING_DIRECTORY <span class=\"variable\">$&#123;LIB_DIR&#125;</span></span><br><span class=\"line\">        OUTPUT_VARIABLE LIBS</span><br><span class=\"line\">        OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class=\"line\">      <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;\\n&quot;</span> <span class=\"string\">&quot;;&quot;</span> LIBS <span class=\"string\">&quot;$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span>(LIB <span class=\"variable\">$&#123;LIBS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">string</span>(REGEX MATCH <span class=\"string\">&quot;lib.*\\.so$&quot;</span> LIB <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(LIB)</span><br><span class=\"line\">          <span class=\"keyword\">get_filename_component</span>(LIB <span class=\"variable\">$&#123;LIB&#125;</span> NAME_WE)</span><br><span class=\"line\">          <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;lib&quot;</span> <span class=\"string\">&quot;&quot;</span> LIB <span class=\"string\">&quot;$&#123;LIB&#125;&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;.......lib=$&#123;LIB&#125;&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> <span class=\"keyword\">TARGET</span> <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;LIB&#125;</span> STATIC IMPORTED GLOBAL)</span><br><span class=\"line\">            <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;name&#125;</span>::<span class=\"variable\">$&#123;LIB&#125;</span> ALIAS <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">set_target_properties</span>(<span class=\"variable\">$&#123;LIB&#125;</span> PROPERTIES IMPORTED_LOCATION</span><br><span class=\"line\">                                                    <span class=\"string\">&quot;$&#123;LIB_DIR&#125;/lib$&#123;LIB&#125;.a&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">target_include_directories</span>(<span class=\"variable\">$&#123;LIB&#125;</span> INTERFACE <span class=\"variable\">$&#123;INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">      <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">    <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">endfunction</span>(pg_add_third_party_lib)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>final</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(cmake/CPM.cmake)</span><br><span class=\"line\"><span class=\"keyword\">function</span>(pg_add_third_party_lib name)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(options <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(oneValueArgs PACK)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(multiValueArgs INCLUDE_DIRS LIB_DIRS)</span><br><span class=\"line\">  <span class=\"keyword\">cmake_parse_arguments</span>(ARG <span class=\"string\">&quot;$&#123;options&#125;&quot;</span> <span class=\"string\">&quot;$&#123;oneValueArgs&#125;&quot;</span> <span class=\"string\">&quot;$&#123;multiValueArgs&#125;&quot;</span></span><br><span class=\"line\">                        <span class=\"variable\">$&#123;ARGN&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ARG_PACK)</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(PACK_NAME <span class=\"variable\">$&#123;ARG_PACK&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>()</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(PACK_NAME <span class=\"variable\">$&#123;name&#125;</span>.tar)</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">  cpmaddpackage(</span><br><span class=\"line\">    NAME <span class=\"variable\">$&#123;name&#125;</span> URL</span><br><span class=\"line\">    https://mirrors.phigent.io/nfs/pkgs/<span class=\"variable\">$&#123;name&#125;</span>/<span class=\"variable\">$&#123;ARCH_PLAT_VENDOR&#125;</span>/<span class=\"variable\">$&#123;PACK_NAME&#125;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"comment\"># if($&#123;name&#125;_ADDED)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ARG_INCLUDE_DIRS)</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(INCLUDE_DIR <span class=\"variable\">$&#123;ARG_INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">EXISTS</span> <span class=\"string\">&quot;$&#123;$&#123;name&#125;_SOURCE_DIR&#125;/$&#123;INCLUDE_DIR&#125;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">list</span>(APPEND INCLUDE_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"variable\">$&#123;INCLUDE_DIR&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">    <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">  <span class=\"keyword\">else</span>()</span><br><span class=\"line\">    <span class=\"keyword\">list</span>(APPEND INCLUDE_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"keyword\">include</span>)</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ARG_LIB_DIRS)</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(LIB_DIR <span class=\"variable\">$&#123;ARG_LIB_DIRS&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">list</span>(APPEND LIB_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/<span class=\"variable\">$&#123;LIB_DIR&#125;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">  <span class=\"keyword\">else</span>()</span><br><span class=\"line\">    <span class=\"keyword\">list</span>(APPEND LIB_DIRS <span class=\"variable\">$&#123;$&#123;name&#125;</span>_SOURCE_DIR&#125;/lib)</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">foreach</span>(LIB_DIR <span class=\"variable\">$&#123;LIB_DIRS&#125;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># shared libs</span></span><br><span class=\"line\">    <span class=\"keyword\">execute_process</span>(</span><br><span class=\"line\">      <span class=\"keyword\">COMMAND</span> ls</span><br><span class=\"line\">      WORKING_DIRECTORY <span class=\"variable\">$&#123;LIB_DIR&#125;</span></span><br><span class=\"line\">      OUTPUT_VARIABLE LIBS</span><br><span class=\"line\">      OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class=\"line\">    <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;\\n&quot;</span> <span class=\"string\">&quot;;&quot;</span> LIBS <span class=\"string\">&quot;$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(LIB <span class=\"variable\">$&#123;LIBS&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">string</span>(REGEX MATCH <span class=\"string\">&quot;lib.*\\.so$&quot;</span> LIB <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(LIB)</span><br><span class=\"line\">        <span class=\"keyword\">string</span>(LENGTH <span class=\"variable\">$&#123;LIB&#125;</span> STR_LEN)</span><br><span class=\"line\">        <span class=\"keyword\">math</span>(EXPR STR_LEN <span class=\"string\">&quot;$&#123;STR_LEN&#125; - 6&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">string</span>(SUBSTRING <span class=\"variable\">$&#123;LIB&#125;</span> <span class=\"number\">3</span> <span class=\"variable\">$&#123;STR_LEN&#125;</span> LIB)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> <span class=\"keyword\">TARGET</span> <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;LIB&#125;</span> SHARED IMPORTED GLOBAL)</span><br><span class=\"line\">          <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;name&#125;</span>::<span class=\"variable\">$&#123;LIB&#125;</span> ALIAS <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">set_target_properties</span>(<span class=\"variable\">$&#123;LIB&#125;</span> PROPERTIES IMPORTED_LOCATION</span><br><span class=\"line\">                                                  <span class=\"string\">&quot;$&#123;LIB_DIR&#125;/lib$&#123;LIB&#125;.so&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">target_include_directories</span>(<span class=\"variable\">$&#123;LIB&#125;</span> INTERFACE <span class=\"variable\">$&#123;INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">      <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">    <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># static libs</span></span><br><span class=\"line\">    <span class=\"keyword\">execute_process</span>(</span><br><span class=\"line\">      <span class=\"keyword\">COMMAND</span> ls</span><br><span class=\"line\">      WORKING_DIRECTORY <span class=\"variable\">$&#123;LIB_DIR&#125;</span></span><br><span class=\"line\">      OUTPUT_VARIABLE LIBS</span><br><span class=\"line\">      OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class=\"line\">    <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;\\n&quot;</span> <span class=\"string\">&quot;;&quot;</span> LIBS <span class=\"string\">&quot;$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(LIB <span class=\"variable\">$&#123;LIBS&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">string</span>(REGEX MATCH <span class=\"string\">&quot;lib.*\\.a$&quot;</span> LIB <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(LIB)</span><br><span class=\"line\">        <span class=\"keyword\">string</span>(LENGTH <span class=\"variable\">$&#123;LIB&#125;</span> STR_LEN)</span><br><span class=\"line\">        <span class=\"keyword\">math</span>(EXPR STR_LEN <span class=\"string\">&quot;$&#123;STR_LEN&#125; - 5&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">string</span>(SUBSTRING <span class=\"variable\">$&#123;LIB&#125;</span> <span class=\"number\">3</span> <span class=\"variable\">$&#123;STR_LEN&#125;</span> LIB)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> <span class=\"keyword\">TARGET</span> <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;LIB&#125;</span> STATIC IMPORTED GLOBAL)</span><br><span class=\"line\">          <span class=\"keyword\">add_library</span>(<span class=\"variable\">$&#123;name&#125;</span>::<span class=\"variable\">$&#123;LIB&#125;</span> ALIAS <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">set_target_properties</span>(<span class=\"variable\">$&#123;LIB&#125;</span> PROPERTIES IMPORTED_LOCATION</span><br><span class=\"line\">                                                  <span class=\"string\">&quot;$&#123;LIB_DIR&#125;/lib$&#123;LIB&#125;.a&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">target_include_directories</span>(<span class=\"variable\">$&#123;LIB&#125;</span> INTERFACE <span class=\"variable\">$&#123;INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">      <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">    <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">  <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\">  <span class=\"comment\"># endif()</span></span><br><span class=\"line\"><span class=\"keyword\">endfunction</span>(pg_add_third_party_lib)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>版本管理</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CPM_FUNCTIONS_VERSION <span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CPM_DOWNLOAD_LOCATION <span class=\"string\">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/cmake/pg_cpm_functions.cmake&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">EXISTS</span> <span class=\"variable\">$&#123;CPM_DOWNLOAD_LOCATION&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">include</span>(<span class=\"variable\">$&#123;CPM_DOWNLOAD_LOCATION&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> (CPM_FUNCTIONS_VERSION <span class=\"keyword\">VERSION_EQUAL</span> CURRENT_CPM_FUNCTIONS_VERSION))</span><br><span class=\"line\">  <span class=\"keyword\">message</span>(</span><br><span class=\"line\">    STATUS</span><br><span class=\"line\">      <span class=\"string\">&quot;CURRENT_CPM_FUNCTIONS_VERSION $&#123;CURRENT_CPM_FUNCTIONS_VERSION&#125; not equal to CPM_FUNCTIONS_VERSION $&#123;CPM_FUNCTIONS_VERSION&#125;&#125;&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">message</span>(</span><br><span class=\"line\">    STATUS</span><br><span class=\"line\">      <span class=\"string\">&quot;Downloading https://xxxxcpm/functions/v$&#123;CPM_FUNCTIONS_VERSION&#125;/pg_cpm_functions.cmake to $&#123;CPM_DOWNLOAD_LOCATION&#125;&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">file</span>(</span><br><span class=\"line\">    DOWNLOAD</span><br><span class=\"line\">    https://xxxxxx/functions/v<span class=\"variable\">$&#123;CPM_FUNCTIONS_VERSION&#125;</span>/pg_cpm_functions.cmake</span><br><span class=\"line\">    <span class=\"variable\">$&#123;CPM_DOWNLOAD_LOCATION&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$&#123;CPM_DOWNLOAD_LOCATION&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(</span><br><span class=\"line\">  STATUS <span class=\"string\">&quot;CURRENT_CPM_FUNCTIONS_VERSION=\\&quot;$&#123;CURRENT_CPM_FUNCTIONS_VERSION&#125;\\&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://blog.csdn.net/davidhopper/article/details/121030549\">使用 CPM 管理 CMake C++工程中的外部依赖库</a></li>\n</ol>\n"},{"title":"CANBUS","url":"/2022/09/06/CANBUS/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/178274029\">CAN FD 协议实用指南</a></li>\n<li><a href=\"https://blog.csdn.net/u013606261/article/details/112529205\">CAN FD 总线协议深度解析-简单易懂协议详解</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/141638034\">DBC 文件：</a> DBC 是 Database Can 的缩写，其代表的是 CAN 的数据库文件，在这个文件中把 CAN 通讯的信息定义的非常完整清楚，而 CAN 网络的通讯就是依据这个文件的描述进行的，所以 DBC 文件的作用非常强大，正是因为有了它才可以使得整个 CAN 网路的节点控制器无差错的协同同步开发。</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/343635976\">CANoe 软件介绍</a></li>\n</ol>\n"},{"title":"Cargo","url":"/2020/08/05/Cargo/","content":"<h2 id=\"Build-Scripts\"><a href=\"#Build-Scripts\" class=\"headerlink\" title=\"Build Scripts\"></a>Build Scripts</h2><ol>\n<li>有些库依赖第三方语言的库，例如需要C库，并且需要从源码编译，cargo目标并不是取代那些优化很好的第三方编译工具，所以cargo通过build脚本来集成其他工具。</li>\n<li>在crate包的根路径下创建一个名为<code>build.sh</code>的脚本，Cargo会在编译crate包之前先编译<code>build.sh</code>脚本然后执行该脚本。</li>\n<li>如果<code>build.sh</code>依赖的文件有任何改变，会被重新编译。</li>\n<li>build脚本的输入是通过环境变量传递的。</li>\n<li>环境变量中的当前路径就是<code>build.sh</code>源码所在路径。</li>\n<li>build脚本会将输出放入到<code>OUT_DIR</code>中的各个路径中。所以build脚本不应该改变这些输出路径中的文件。</li>\n<li>Cargo会解析那些以<code>cargo:</code>开头的行，其他行被忽略。</li>\n<li>build脚本的输出默认被隐藏，可以使用<code>-vv</code>(very verbose)来查看输出。如果依赖的文件没有被改变，什么都不会输出，因为不会重新执行编译脚本。</li>\n<li>build脚本的编译输出都会存在类似于<code>target/debug/build/&lt;pkg&gt;/output</code>文件中。</li>\n<li>…</li>\n<li><code>build.sh</code>中依赖的crates需要在Cargo.toml中的<code>[build-dependencies]</code>中指定依赖，<code>build.sh</code>可用的依赖见<a href=\"https://crates.io/keywords/build-dependencies\">crates.io build-dependencies crates</a></li>\n</ol>\n","categories":["Program","Rust"],"tags":["Rust","Cargo"]},{"title":"ChangeLog","url":"/2022/04/08/ChangeLog/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://keepachangelog.com/zh-CN/1.0.0/\">如何维护更新日志</a></li>\n<li><a href=\"https://github.com/open-mmlab/mmsegmentation/blob/master/docs/en/changelog.md\">mmsegmentation</a></li>\n<li><a href=\"https://github.com/google/glog/blob/master/ChangeLog\">glog</a></li>\n</ol>\n"},{"title":"Chrome shortcuts","url":"/2021/05/21/Chrome-config/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>对视频右键两次，选择画中画模式，方便记笔记</li>\n<li><a href=\"https://lazy-guy.github.io/tomodoro/index.html\">番茄时钟画中画</a></li>\n</ol>\n<h2 id=\"shortcuts\"><a href=\"#shortcuts\" class=\"headerlink\" title=\"shortcuts\"></a><a href=\"https://support.google.com/chrome/answer/157179?hl=zh-Hans&co=GENIE.Platform=Desktop\">shortcuts</a></h2><ol>\n<li><code>C-l</code>或<code>M-d</code>: 地址栏</li>\n<li><code>M-Enter</code>: open another tab when search: it’s very usefull</li>\n<li><code>C-k</code> 或 <code>C-e</code>: 搜索</li>\n<li><code>Tab</code>: 下一个可点击项</li>\n<li><code>M-left</code>: 后退浏览历史</li>\n<li><code>M-right</code>: 前进浏览历史</li>\n<li><code>C-r</code>: 刷新网页</li>\n<li><code>Space</code>: pgDn</li>\n<li><code>S-Space</code>: pgUp</li>\n<li><code>C-t</code>: 新标签</li>\n<li><code>C-n</code>: 新窗口</li>\n<li><code>C-w</code>: 关闭当前标签</li>\n<li><code>C-Tab</code>: 切换标签</li>\n<li><code>C-S-t</code>: 恢复关闭的标签</li>\n<li><code>C-h</code>: history</li>\n<li><code>C-j</code>: download</li>\n<li><code>C-1</code>: 跳转到第一个标签</li>\n<li><code>C-9</code>: 跳转到第一个标签</li>\n<li><code>C-Backspace</code>: 删除一个单词</li>\n<li><code>S-Esc</code>: 任务管理器</li>\n<li><code>C-S-b</code>: 显示或隐藏书签栏</li>\n<li><code>C-f</code> + <code>C-g</code>: 查找与跳转</li>\n</ol>\n<h2 id=\"自定义-shortcuts\"><a href=\"#自定义-shortcuts\" class=\"headerlink\" title=\"自定义 shortcuts\"></a><a href=\"https://chrome.google.com/webstore/detail/shortkeys-custom-keyboard/logpjaacgmcbpdkdchjiaagddngobkck?hl=zh-CN\">自定义 shortcuts</a></h2><ol>\n<li><code>M-h</code>：Select previous tab</li>\n<li><code>M-l</code>：Select next tab</li>\n<li><code>M-k</code>：Select last tab</li>\n<li><code>M-b</code>: 后退浏览历史</li>\n<li><code>M-f</code>: 前进浏览历史</li>\n<li><code>M-s</code>: fullscreen</li>\n<li><code>M-3</code>：new tab</li>\n<li><code>M-8</code>：close tab</li>\n<li><code>M-w</code>：Duplicate current tab</li>\n</ol>\n<h2 id=\"vimium-快捷键\"><a href=\"#vimium-快捷键\" class=\"headerlink\" title=\"vimium 快捷键\"></a><a href=\"https://vimium.github.io/\">vimium 快捷键</a></h2><ol>\n<li><code>yy</code>: copy URL to clipboard</li>\n<li><code>/</code>: find</li>\n<li><code>j</code>: Scroll down</li>\n<li><code>k</code>: Scroll up</li>\n<li><code>h</code>: Scroll left</li>\n<li><code>l</code>: Scroll right</li>\n<li><code>gg</code>: Scroll to the top of the page</li>\n<li><code>G</code>: Scroll to the bottom of the page</li>\n</ol>\n<h2 id=\"搜索设置\"><a href=\"#搜索设置\" class=\"headerlink\" title=\"搜索设置\"></a>搜索设置</h2><ol>\n<li>chrome 快捷搜索设置</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">gitlab l https:<span class=\"regexp\">//gi</span>tlab.phigent.io/?sort=name_asc&amp;name=%s&amp;sort=name_asc</span><br><span class=\"line\">github g https:<span class=\"regexp\">//gi</span>thub.com/search?q=%s</span><br><span class=\"line\">cppreference cpp https:<span class=\"regexp\">//</span>duckduckgo.com/?sites=cppreference.com&amp;q=%s&amp;ia=web</span><br><span class=\"line\">translate t https:<span class=\"regexp\">//</span>translate.google.cn/?source=osdd&amp;who=test&amp;sl=en&amp;tl=zh-CN&amp;text=%s&amp;op=translate</span><br><span class=\"line\">blog blog https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/jiaxiyang/</span>blog<span class=\"regexp\">/tree/m</span>aster<span class=\"regexp\">/source/</span>_posts</span><br><span class=\"line\">links links https:<span class=\"regexp\">//</span>jiaxiyang.github.io<span class=\"regexp\">/2020/</span><span class=\"number\">06</span><span class=\"regexp\">/29/</span>Links/</span><br><span class=\"line\"><span class=\"number\">100</span>ms <span class=\"number\">100</span>ms https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/jiaxiyang/</span><span class=\"number\">100</span>ms_dot_emacs<span class=\"regexp\">/blob/m</span>aster/init.el</span><br><span class=\"line\">lead lead https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/jiaxiyang/</span>leader-key-mode<span class=\"regexp\">/blob/m</span>aster/leader-key-mode.el</span><br><span class=\"line\">melpa m https:<span class=\"regexp\">//m</span>elpa.org<span class=\"regexp\">/#/</span>?q=test&amp;sort=downloads&amp;asc=false</span><br><span class=\"line\">excalidraw e https:<span class=\"regexp\">//</span>excalidraw.com/</span><br><span class=\"line\">baidu b https:<span class=\"regexp\">//</span>www.baidu.com/<span class=\"comment\">#ie=&#123;inputEncoding&#125;&amp;wd=%s</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><ol>\n<li><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall\">onetab 节省内存</a> 快捷键<code>alt+shift+1</code> 改为 <code>alt+1</code>。 <code>alt+2</code>发送当前标签页至 OneTab</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/adblocker-ultimate/ohahllgiabjaoigichmmfljhkcfikeof/related?hl=zh-CN\">广告屏蔽</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack\">sourcegraph 插件</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN\">octotree</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitzip-for-github/ffabmkklhbepgcgfonabamgnfafbdlkn\">gitzip 插件</a></li>\n<li><a href=\"https://vimium.github.io/\">vimiu</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/shortkeys-custom-keyboard/logpjaacgmcbpdkdchjiaagddngobkck/related?hl=zh-CN\">shortkeys</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/magical-text-expansion/iibninhmiggehlcdolcilmhacighjamp/related?hl=zh-CN\">magical</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?hl=zh-CN\">colorzilla</a></li>\n<li>（good)<a href=\"https://immersivetranslate.com/\">沉侵式翻译</a><ul>\n<li>arxiv 的文章也可以用</li>\n<li>youtube 双语字幕</li>\n<li><code>Alt A</code></li>\n</ul>\n</li>\n<li><a href=\"https://chromewebstore.google.com/detail/imtranslator-%E7%BF%BB%E8%AF%91%EF%BC%8C%E5%AD%97%E5%85%B8%EF%BC%8C%E5%A3%B0%E9%9F%B3/noaijdpnepcgjemiklgfkcfbkokogabh\">ImTranslator: 翻译，字典，声音</a></li>\n<li>(good)<a href=\"https://chromewebstore.google.com/detail/%E4%BE%A7%E8%BE%B9%E7%BF%BB%E8%AF%91/bocbaocobfecmglnmeaeppambideimao?hl=zh-CN\">侧边翻译</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb/related?hl=en\">google translate</a></li>\n<li><a href=\"https://github.com/alyssaxuu/omni\">omni</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/easy-auto-refresh/aabcgdmkeabbnleenpncegpcngjpnjkc/related\">easy-auto-refresh</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/markdown-diagrams/pmoglnmodacnbbofbgcagndelmgaclel\">markdown-diagrams</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/svg-export/naeaaedieihlkmdajjefioajbbdbdjgp/related?hl=zh-CN\">svg-export</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm/related?hl=zh-CN\">whatfont</a></li>\n<li><a href=\"https://chromewebstore.google.com/detail/%E6%8D%95%E6%8D%89%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE-fireshot%E7%9A%84/mcbpblocgmgfnpjjppndjkmgjaogfceg?hl=zh-CN&utm_source=ext_sidebar\">fireshot 截屏工具</a></li>\n</ol>\n","categories":["Tools","Chrome"],"tags":["Tools"]},{"title":"Clang-format-usage","url":"/2020/07/01/Clang-format-usage/","content":"<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><ol>\n<li>不同版本的 clang-format 输出格式可能不同，需要统一团队版本</li>\n<li>文件中有编码错误的字符不能被 format</li>\n</ol>\n<h2 id=\"format-check\"><a href=\"#format-check\" class=\"headerlink\" title=\"format check\"></a>format check</h2><ol>\n<li><a href=\"https://github.com/Sarcasm/run-clang-format/tree/master\">run-clang-format</a><ul>\n<li><code>-r samples</code> 文件夹</li>\n<li><code>-i</code> 修改</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/marketplace/actions/clang-format-check\">github clang-format-check</a></li>\n<li><a href=\"https://developers.redhat.com/articles/2022/02/25/enforce-code-consistency-clang-format#enforce_the_new_coding_rules\">enforce-code-consistency-clang-format#enforce_the_new_coding_rules</a></li>\n<li><code>clang-format --Werror -n --verbose test.cpp</code> 可以检测是否符合 clang-format</li>\n<li>cpplint</li>\n<li><a href=\"https://stackoverflow.com/a/69362305\">gitlab check</a></li>\n<li><a href=\"https://gitlab.com/daverona/pre-commit/cpp\">pre-commit</a></li>\n<li><a href=\"https://blog.csdn.net/zmlovelx/article/details/105196415\">git pre commit</a></li>\n</ol>\n<h2 id=\"CI-format\"><a href=\"#CI-format\" class=\"headerlink\" title=\"CI format\"></a>CI format</h2><ol>\n<li><a href=\"https://lrita.github.io/2022/07/30/auto-clang-format-cpp-code/\">使用 clang-format 在 CI 中自动格式化 C++代码</a></li>\n</ol>\n<h2 id=\"Install-clang\"><a href=\"#Install-clang\" class=\"headerlink\" title=\"Install clang\"></a>Install clang</h2><ol>\n<li><a href=\"http://clang.llvm.org/get_started.html\">Build clang from source</a></li>\n<li><a href=\"http://clang.llvm.org/docs/ClangFormat.html\">Clang format doc</a></li>\n</ol>\n<h2 id=\"format-config\"><a href=\"#format-config\" class=\"headerlink\" title=\"format config\"></a>format config</h2><ol>\n<li><a href=\"http://clang.llvm.org/docs/ClangFormatStyleOptions.html\">Clang format style</a></li>\n<li><a href=\"https://zed0.co.uk/clang-format-configurator/\">clang format config 试验</a></li>\n<li><code>AllowShortFunctionsOnASingleLine: None</code> 函数不在一行</li>\n<li><code>SortIncludes: false</code> 头文件不排序</li>\n</ol>\n<h2 id=\"Bash-Command\"><a href=\"#Bash-Command\" class=\"headerlink\" title=\"Bash Command\"></a>Bash Command</h2><ol>\n<li>generate .clang-format<br><code>clang-format -style=llvm -dump-config &gt; .clang-format</code></li>\n<li>Format one cpp file:<br><code>clang-format --style=Google -i test.cpp</code></li>\n<li>Format all cpp files:<br><code>fd &quot;.cpp$&quot; | xargs clang-format --style=Google -i</code></li>\n</ol>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><ol>\n<li><code>git-clang-format-12 or git clang-format-12</code> format staged files</li>\n<li><code>git-clang-format-12 --diff</code> 查看要 format 的变化</li>\n</ol>\n<h2 id=\"Vim-Config\"><a href=\"#Vim-Config\" class=\"headerlink\" title=\"Vim Config\"></a>Vim Config</h2><ol>\n<li>Find clang-format.py in your system and copy the file path.</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"> ~ : find /usr -iname <span class=\"string\">&quot;clang-format.py&quot;</span></span><br><span class=\"line\">/usr/local/share/clang/clang-format.py</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Put the following config in your .vimrc. It will automaticly format the c++ file when the file is saved.</li>\n</ol>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function!</span> <span class=\"title\">Formatonsave</span><span class=\"params\">()</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">l:lines</span> = <span class=\"string\">&#x27;all&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">l:formatdiff</span> = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">g:clang_format_fallback_style</span> = <span class=\"string\">&#x27;Google&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">&quot; Remember to repalce the path of clang-format.py</span></span><br><span class=\"line\">  <span class=\"keyword\">pyfile</span> /usr/local/share/clang/clang-format.<span class=\"keyword\">py</span></span><br><span class=\"line\">  <span class=\"comment\">&quot; py3file /usr/local/share/clang/clang-format.py</span></span><br><span class=\"line\"><span class=\"keyword\">endfunction</span></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> BufWritePre *.h,*.hpp,*.<span class=\"keyword\">cc</span>,*.cpp <span class=\"keyword\">call</span> Formatonsave()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Emacs-Config\"><a href=\"#Emacs-Config\" class=\"headerlink\" title=\"Emacs Config\"></a>Emacs Config</h2><ol>\n<li>use package config</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(use-package clang-format</span><br><span class=\"line\">  :after (cc-mode)</span><br><span class=\"line\">  :config</span><br><span class=\"line\">  (set-default &#x27;clang-format-fallback-style &quot;Google&quot;)</span><br><span class=\"line\">  (add-hook &#x27;c-mode-common-hook #&#x27;(lambda()</span><br><span class=\"line\">                                    (add-hook &#x27;before-save-hook</span><br><span class=\"line\">                                              &#x27;clang-format-buffer t t))))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>Clang-format understands also special comments that switch formatting in a delimited range. The code between a comment <code>// clang-format off or /* clang-format off */ </code>up to a comment <code>// clang-format on or /* clang-format on */ </code>will not be formatted. The comments themselves will be formatted (aligned) normally.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> formatted_code;</span><br><span class=\"line\"><span class=\"comment\">// clang-format off</span></span><br><span class=\"line\">    <span class=\"type\">void</span>    unformatted_code  ;</span><br><span class=\"line\"><span class=\"comment\">// clang-format on</span></span><br><span class=\"line\"><span class=\"type\">void</span> formatted_code_again;</span><br></pre></td></tr></table></figure>\n","categories":["Tools","Clang"],"tags":["Emacs","Clang format","Vim"]},{"title":"Clang","url":"/2022/07/07/Clang/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><code>-Wall</code>：启用大多数警告。这是开发中常用的选项，可以帮助发现潜在的代码问题。</li>\n<li><code>-Wextra</code>：启用额外的警告，比 -Wall 更严格。</li>\n<li><code>-Werror</code>：将所有警告当作错误处理。这意味着任何警告都会导致编译失败，迫使开发者修复这些潜在的问题</li>\n</ol>\n<h2 id=\"clang-VS-gcc\"><a href=\"#clang-VS-gcc\" class=\"headerlink\" title=\"clang VS gcc\"></a>clang VS gcc</h2><ol>\n<li>clang 优势<ul>\n<li>编译速度更快</li>\n<li>编译产出更小</li>\n<li>出错提示更友好</li>\n<li>内置有静态分析工具</li>\n<li>专注</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"cmake-使用\"><a href=\"#cmake-使用\" class=\"headerlink\" title=\"cmake 使用\"></a>cmake 使用</h2><ol>\n<li>env</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> CC=clang</span><br><span class=\"line\"><span class=\"built_in\">export</span> CXX=clang++</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cmake</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_C_COMPILER=clang  -DCMAKE_CXX_COMPILER=clang++ ..</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"include-what-you-use\"><a href=\"#include-what-you-use\" class=\"headerlink\" title=\"include-what-you-use\"></a><a href=\"https://github.com/include-what-you-use/include-what-you-use\">include-what-you-use</a></h2><ol>\n<li>检查在头文件中用了哪些 symbol</li>\n<li><code>sudo ln -s /usr/bin/python3 /usr/bin/python</code></li>\n<li><code>iwyu_tool.py -p build/</code> build 下有 compile_commands.json, 分析工程</li>\n<li>fix_includes.py 修复 include</li>\n<li>build</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git clone git@github.com:include-what-you-use/include-what-you-use.git</span></span><br><span class=\"line\"><span class=\"comment\"># cd include-what-you-use</span></span><br><span class=\"line\"><span class=\"comment\"># git checkout 0.14</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir build &amp;&amp; cd build</span></span><br><span class=\"line\"><span class=\"comment\"># cmake -G &quot;Unix Makefiles&quot; -DCMAKE_PREFIX_PATH=/usr/lib/llvm-10 ../</span></span><br><span class=\"line\"><span class=\"comment\"># make &amp;&amp; make install</span></span><br><span class=\"line\"><span class=\"comment\"># bin/include-what-you-use ../../cpp_sandbox/io/read_shape/test.cpp</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://cloud.tencent.com/developer/article/1449757\">linux 下 Clang 和 gcc 的区别</a></li>\n</ol>\n"},{"title":"Coroutine","url":"/2022/10/25/Coroutine/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>协程并没有增加线程数量，只是在线程的基础之上通过分时复用的方式运行多个协程，而且协程的切换在用户态完成，切换的代价比线程从用户态到内核态的代价小很多。</li>\n<li>协程对计算密集型的任务也没有太大的好处，计算密集型的任务本身不需要大量的线程切换，因此协程的作用也十分有限，反而还增加了协程切换的开销。</li>\n<li>因此在协程中不能调用导致线程阻塞的操作。也就是说，协程只有和异步 IO 结合起来，才能发挥最大的威力。</li>\n<li>协程只有和异步 IO 结合起来才能发挥出最大的威力。</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/172471249\">什么是协程？</a></li>\n</ol>\n"},{"title":"Modern Cmake","url":"/2021/07/28/Cmake/","content":"<h2 id=\"code-generate\"><a href=\"#code-generate\" class=\"headerlink\" title=\"code generate\"></a>code generate</h2><ol>\n<li>vitis ai library overview generate test_performance…. <a href=\"https://github.com/Xilinx/Vitis-AI/blob/v2.5/src/Vitis-AI-Library/overview/cmake/XilinxTest.cmake#L346\">link</a></li>\n</ol>\n<h2 id=\"FetchContent\"><a href=\"#FetchContent\" class=\"headerlink\" title=\"FetchContent\"></a>FetchContent</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(FetchContent)</span><br><span class=\"line\">FetchContent_Declare(backward</span><br><span class=\"line\">    GIT_REPOSITORY https://github.com/bombela/backward-cpp</span><br><span class=\"line\">    GIT_TAG master  <span class=\"comment\"># or a version tag, such as v1.6</span></span><br><span class=\"line\">    SYSTEM          <span class=\"comment\"># optional, the Backward include directory will be treated as system directory</span></span><br><span class=\"line\">)</span><br><span class=\"line\">FetchContent_MakeAvailable(backward)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(mytarget PUBLIC Backward::Interface)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本升级\"><a href=\"#版本升级\" class=\"headerlink\" title=\"版本升级\"></a>版本升级</h2><ol>\n<li>下载 sh 脚本，本地升级。<a href=\"https://github.com/Kitware/CMake/releases\">link</a></li>\n<li><code>wget -c https://cmake.org/files/v3.28/cmake-3.28.1-linux-x86_64.sh &amp;&amp; chmod +x cmake-3.28.1-linux-x86_64.sh &amp;&amp; ./cmake-3.28.1-linux-x86_64.sh</code></li>\n<li><code>wget -c https://cmake.org/files/v3.28/cmake-3.28.1-linux-aarch64.sh &amp;&amp; chmod +x cmake-3.28.1-linux-aarch64.sh &amp;&amp; ./cmake-3.28.1-linux-aarch64.sh</code></li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li><code>CMAKE_SOURCE_DIR</code>: project</li>\n<li><code>CMAKE_CURRENT_SOURCE_DIR</code> 当前 CMakeLists.txt 所在目录</li>\n<li><code>CMAKE_BINARY_DIR</code>: 编译目录</li>\n<li><code>CMAKE_CURRENT_BINARY_DIR</code>: 指向当前正在处理的 CMakeLists.txt 文件对应的构建目录。</li>\n</ol>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><ol>\n<li>(good)编译 log 太多可以把 error 重定向到文件 <code>command 2&gt; error_log.txt</code></li>\n<li>include_directories 加 SYSTEM 防止第三方库报 warning <a href=\"https://cmake.org/cmake/help/latest/command/include_directories.html\">link</a></li>\n<li>makefile 传参</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">SRC_DIR ?= /src</span><br><span class=\"line\">BUILD_DIR ?= /build</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make SRC_DIR=/tmp/src BUILD_DIR=/tmp/build</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>target_compile_definitions</code> 导出定义，供下游使用，<code>add_definitions</code>不会被导出</li>\n<li><code>-DCMAKE_TOOLCHAIN_FILE=path/to/toolchain-clang.cmake</code> 设置 toolchain</li>\n<li><code>-DCMAKE_BUILD_TYPE=RelWithDebInfo</code> release 模式编译，带 debug info</li>\n<li><code>-DCMAKE_VERBOSE_MAKEFILE=ON</code> 显示详细信息</li>\n<li><code>-DCMAKE_FIND_DEBUG_MODE=ON</code></li>\n<li><code>cmake -S . -B build --trace-source=CMakeLists.txt</code> trace CMakeLists.txt</li>\n<li><code>cmake -S . -B build --debug-find</code> trace find</li>\n<li>osqp</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(CMAKE_BUILD_TYPE <span class=\"keyword\">STREQUAL</span> <span class=\"string\">&quot;Debug&quot;</span>)                                                                                                                                                                                                                             <span class=\"keyword\">set</span>(OSQP_ENABLE_DEBUG <span class=\"keyword\">ON</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(CMAKE_VERBOSE_MAKEFILE <span class=\"keyword\">ON</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>(good)打印所有变量</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get_cmake_property</span>(_variableNames VARIABLES)</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (_variableName <span class=\"variable\">$&#123;_variableNames&#125;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;_variableName&#125;=$&#123;$&#123;_variableName&#125;&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>-DCMAKE_CXX_FLAGS=&quot;-g&quot;</code> cmake 编译选项添加 debug info； release 模式也适用</li>\n<li>参考官方写 CMakeLists.txt: <a href=\"https://gitlab.kitware.com/cmake/cmake\">cmake</a> <a href=\"https://github.com/opencv/opencv\">opencv</a></li>\n<li><code>Call stack</code>: 看出问题的顺序</li>\n<li>CMake 3.13 now allows the target_link_libraries() command to be called from any directory to add link dependencies and link interface libraries to targets created in other directories.</li>\n<li>cmake 2.8 3.1 对 string(REGEX MATCH “lib.*.so$” LIB ${LIB}) 处理是不同的， 2.8 需要加<code>\\\\.</code></li>\n<li>get_filename_component(LIB ${LIB} NAME_WE) 获取文件名，无后缀</li>\n<li>参考 opencv 等库的 CMakeLists.txt</li>\n<li>对外 include 里如果包含，需要 PUBLIC 传递出去，如果只在实现里用则用 PRIVATE</li>\n<li><code>RUNTIME_DEPENDENCIES</code> 3.21 之后可以安装依赖库</li>\n<li><code>#cmakedefine USE_MYMATH</code> 条件编译能看到定义的配置</li>\n<li>增量编译：是在源程序已经完成第一次编译的基础上再次编译时采取的一种增量性编译技术。只重新编译必须的部分，即通过依赖分析，只编译修改过的部分及其影响的路径。</li>\n<li>debug CMakeLists.txt <code>cmake -S . -B build --trace-source=CMakeLists.txt</code></li>\n<li>处理依赖关系时区别名，例如导入 gflags.so <code>add_library(gflags SHARED IMPORTED GLOBAL) add_library(gflags::gflags ALIAS gflags)</code>来区别 libgflags.so</li>\n<li>注意区分<code>add_library(gflags SHARED IMPORTED GLOBAL)</code>和<code>libgflags.so</code>的区别，前者是 target, 后者是 so。为了区分两者， 可以使用<code>add_library(gflags SHARED IMPORTED GLOBAL) add_library(gflags::gflags ALIAS gflags)</code> target::target 来区分。</li>\n<li><code>cmake</code> + <code>ninja</code> + <code>clang</code> 组合加速编译</li>\n<li>bazel、GYP、CMake 和 Meson 是文件生成器(build system generator)， make, ninja 是构建系统。</li>\n<li><code>cmake ..</code>: configure the project and generate a native build system</li>\n<li>cmake 修改编译选项时需要删除 build 目录下的 <code>CMakeCache.txt</code> 否则编译选项不 work, 或者重新<code>cmake ..</code> or run script <a href=\"https://stackoverflow.com/a/42922588\">link</a></li>\n<li><strong>加速编译</strong>： <code>configure the project and generate a native build system</code>后直接执行<code>make -C $BUILD_DIR -j4</code> or <code>cmake --build $&#123;BUILD_DIR&#125;</code>，不用每次都重新构建编译系统</li>\n<li>[CMake] Debug build compiles and links, but Release build fails to link?</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (CMAKE_BUILD_TYPE <span class=\"keyword\">MATCHES</span> Release)</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(CMAKE_SHARED_LINKER_FLAGS <span class=\"string\">&quot;-s -Wl,--version-script=$&#123;PROJECT_SOURCE_DIR&#125;/symbol.lst&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>-DCMAKE_BUILD_TYPE&#x3D;Debug: <code>-fPIC -O2 -Wall</code></li>\n<li>-DCMAKE_BUILD_TYPE&#x3D;Release: <code>-fPIC -O2 -DNDEBUG</code></li>\n<li><code>enable_testing()</code> 需要在第一级 CMakeLists.txt 里，否则<code>make test</code>不生效</li>\n<li>make test 中程序 pwd 路径为 build 目录程序所在路径。</li>\n<li><code>Testing/Temporary/LastTest.log</code> 为<code>make test</code>结果</li>\n<li><code>set(CMAKE_VERBOSE_MAKEFILE on)</code> make 时显示详细信息，等效为<code>make VERBOSE=1</code></li>\n<li>set(CMAKE_C_COMPILER &#x2F;opt&#x2F;gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu&#x2F;bin&#x2F;aarch64-linux-gnu-gcc)， s\u0011et(CMAKE_CXX_COMPILER &#x2F;opt&#x2F;gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu&#x2F;bin&#x2F;aarch64-linux-gnu-g++) 要在 project 前， 会根据编译器选择环境， 无这条则会选择宿主机， 地平线 demo 问题。</li>\n<li>option 和 c++里的 definition 是不一样的 definition 需要 add_definitions()来添加</li>\n</ol>\n<h2 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a>functions</h2><h3 id=\"add-test\"><a href=\"#add-test\" class=\"headerlink\" title=\"add test\"></a>add test</h3><h3 id=\"cpm-add-lib\"><a href=\"#cpm-add-lib\" class=\"headerlink\" title=\"cpm add lib\"></a>cpm add lib</h3><h2 id=\"cmake-变量\"><a href=\"#cmake-变量\" class=\"headerlink\" title=\"cmake 变量\"></a>cmake 变量</h2><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><h2 id=\"cmake-component\"><a href=\"#cmake-component\" class=\"headerlink\" title=\"cmake component\"></a>cmake component</h2><h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><ol>\n<li><a href=\"https://github.com/cpm-cmake/CPM.cmake\">CPM.cmake</a></li>\n<li><a href=\"https://cmake.org/cmake/help/latest/module/FetchContent.html\">FetchContent</a></li>\n<li>CPM.cmake 封装了 FetchContent</li>\n<li>导入已经编译好的库</li>\n<li>导入三方库参考 cmake export 出的 cmake file。参见 cpp_sandbox&#x2F;cmake&#x2F;export; 查看生成的 cmake 文件，主要两个步骤<ul>\n<li>add_library(xxx::xxx STATIC IMPORTED) 导入库</li>\n<li>set_target_properties 设置 include 和 link 依赖</li>\n</ul>\n</li>\n<li>参考 vitis ai 导入 xrt</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(gflags_ADDED)</span><br><span class=\"line\">  <span class=\"keyword\">add_library</span>(gflags INTERFACE IMPORTED GLOBAL) <span class=\"comment\">## global导入， 解决cpm local scope include_directories不工作问题</span></span><br><span class=\"line\">  <span class=\"keyword\">add_library</span>(gflags::gflags ALIAS gflags)</span><br><span class=\"line\">  <span class=\"keyword\">set_target_properties</span>(</span><br><span class=\"line\">    gflags PROPERTIES IMPORTED_LOCATION <span class=\"string\">&quot;$&#123;gflags_SOURCE_DIR&#125;/lib/libgflags.so&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">target_include_directories</span>(gflags INTERFACE <span class=\"string\">&quot;$&#123;gflags_SOURCE_DIR&#125;/include&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\"># target_link_directories(gflags INTERFACE &quot;$&#123;gflags_SOURCE_DIR&#125;/lib&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cpack\"><a href=\"#cpack\" class=\"headerlink\" title=\"cpack\"></a>cpack</h2><h3 id=\"build-完之后-make-package\"><a href=\"#build-完之后-make-package\" class=\"headerlink\" title=\"build 完之后 make package\"></a>build 完之后 make package</h3><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CPACK_GENERATOR <span class=\"string\">&quot;TGZ&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CPACK_PACKAGE_FILE_NAME <span class=\"string\">&quot;cpack-test&quot;</span>)                                                                                                                                                                           <span class=\"keyword\">include</span>(CPack)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"color\"><a href=\"#color\" class=\"headerlink\" title=\"color\"></a>color</h2><ol>\n<li><a href=\"https://stackoverflow.com/a/36233927\">cmake 自带打印颜色</a> <code>cmake -E cmake_echo_color --green &quot;&gt;&gt;&gt;&gt;&gt; Download doxygen&quot;</code></li>\n<li>put make function in .bashrc</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">make</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  pathpat=<span class=\"string\">&quot;(/[^/]*)+:[0-9]+&quot;</span></span><br><span class=\"line\">  ccred=$(<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[0;31m&quot;</span>)</span><br><span class=\"line\">  ccyellow=$(<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[0;33m&quot;</span>)</span><br><span class=\"line\">  ccend=$(<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[0m&quot;</span>)</span><br><span class=\"line\">  make <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span> 2&gt;&amp;1 | sed -E -e <span class=\"string\">&quot;/[Ee]rror[: ]/ s%<span class=\"variable\">$pathpat</span>%<span class=\"variable\">$ccred</span>&amp;<span class=\"variable\">$ccend</span>%g&quot;</span> -e <span class=\"string\">&quot;/[Ww]arning[: ]/ s%<span class=\"variable\">$pathpat</span>%<span class=\"variable\">$ccyellow</span>&amp;<span class=\"variable\">$ccend</span>%g&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"variable\">$&#123;PIPESTATUS[0]&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>内置函数获取名字</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span>(REGEX MATCH <span class=\"string\">&quot;lib.*\\.so$&quot;</span> LIB <span class=\"variable\">$&#123;LIB&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(LIB)</span><br><span class=\"line\">    <span class=\"keyword\">get_filename_component</span>(LIB <span class=\"variable\">$&#123;LIB&#125;</span> NAME_WE)</span><br><span class=\"line\">    <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;lib&quot;</span> <span class=\"string\">&quot;&quot;</span> LIB <span class=\"string\">&quot;$&#123;LIB&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.  获取库列表名字</span><br><span class=\"line\"></span><br><span class=\"line\">```cmake</span><br><span class=\"line\"><span class=\"keyword\">execute_process</span>(</span><br><span class=\"line\">  <span class=\"keyword\">COMMAND</span> ls</span><br><span class=\"line\">  <span class=\"keyword\">COMMAND</span> sh -c <span class=\"string\">&quot;awk &#x27;/.so\\$|.a\\$/&#123;print \\$0&#125;&#x27;&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">COMMAND</span> sh -c <span class=\"string\">&quot;awk -F &#x27;.&#x27; &#x27;&#123;print substr($1,4)&#125;&#x27;&quot;</span></span><br><span class=\"line\">  WORKING_DIRECTORY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span></span><br><span class=\"line\">  OUTPUT_VARIABLE LIBS</span><br><span class=\"line\">  OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;LIBS=$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;\\n&quot;</span> <span class=\"string\">&quot;;&quot;</span> LIBS <span class=\"string\">&quot;$&#123;LIBS&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">list</span>(LENGTH LIBS len)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;len=\\&quot;$&#123;len&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot; &quot;</span> <span class=\"string\">&quot;;&quot;</span> SEXY_LIST <span class=\"variable\">$&#123;LIBS&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(LIB <span class=\"variable\">$&#123;LIBS&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">message</span>(STATUS, <span class=\"string\">&quot;LIB=\\&quot;$&#123;LIB&#125;\\&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>&#96;include(CMakePrintHelpers) cmake_print_variables(MY_VARIABLE)” 打印信息</p>\n</li>\n<li><p><code>-DCMAKE_EXPORT_COMPILE_COMMANDS=ON</code> 代码补全使用</p>\n</li>\n<li><p><code>cmake -LA</code> after build in build dir:list a set of available options in the cmake</p>\n</li>\n<li><p>如果 CMAKE_BUILD_TYPE 的值为”Debug”就采用 debug 模式编译；如果 CMAKE_BUILD_TYPE 的值为”Release”就采用 release 模式编译；如果 CMAKE_BUILD_TYPE 的值为空，默认采用 release 模式</p>\n</li>\n<li><p>debug release set</p>\n</li>\n<li><p>CMakeLists.txt</p>\n</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_BUILD_TYPE <span class=\"string\">&quot;Debug&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_BUILD_TYPE <span class=\"string\">&quot;Release&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>build script</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Release</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Release</span><br><span class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>set(CMAKE_CXX_COMPILER &quot;g++&quot;)</code> 选择编译器</li>\n<li>查看 target properties</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Get all propreties that cmake supports</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> CMAKE_PROPERTY_LIST)</span><br><span class=\"line\">    <span class=\"keyword\">execute_process</span>(<span class=\"keyword\">COMMAND</span> cmake --help-property-<span class=\"keyword\">list</span> OUTPUT_VARIABLE CMAKE_PROPERTY_LIST)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Convert command output into a CMake list</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span>(REGEX REPLACE <span class=\"string\">&quot;;&quot;</span> <span class=\"string\">&quot;\\\\\\\\;&quot;</span> CMAKE_PROPERTY_LIST <span class=\"string\">&quot;$&#123;CMAKE_PROPERTY_LIST&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">string</span>(REGEX REPLACE <span class=\"string\">&quot;\\n&quot;</span> <span class=\"string\">&quot;;&quot;</span> CMAKE_PROPERTY_LIST <span class=\"string\">&quot;$&#123;CMAKE_PROPERTY_LIST&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>(print_properties)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(<span class=\"string\">&quot;CMAKE_PROPERTY_LIST = $&#123;CMAKE_PROPERTY_LIST&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endfunction</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>(print_target_properties <span class=\"keyword\">target</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> <span class=\"keyword\">TARGET</span> <span class=\"variable\">$&#123;target&#125;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;There is no target named &#x27;$&#123;target&#125;&#x27;&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>()</span><br><span class=\"line\">    <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(property <span class=\"variable\">$&#123;CMAKE_PROPERTY_LIST&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">string</span>(REPLACE <span class=\"string\">&quot;&lt;CONFIG&gt;&quot;</span> <span class=\"string\">&quot;$&#123;CMAKE_BUILD_TYPE&#125;&quot;</span> property <span class=\"variable\">$&#123;property&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Fix https://stackoverflow.com/questions/32197663/how-can-i-remove-the-the-location-property-may-not-be-read-from-target-error-i</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(property <span class=\"keyword\">STREQUAL</span> <span class=\"string\">&quot;LOCATION&quot;</span> <span class=\"keyword\">OR</span> property <span class=\"keyword\">MATCHES</span> <span class=\"string\">&quot;^LOCATION_&quot;</span> <span class=\"keyword\">OR</span> property <span class=\"keyword\">MATCHES</span> <span class=\"string\">&quot;_LOCATION$&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>()</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">get_property</span>(was_set <span class=\"keyword\">TARGET</span> <span class=\"variable\">$&#123;target&#125;</span> PROPERTY <span class=\"variable\">$&#123;property&#125;</span> <span class=\"keyword\">SET</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(was_set)</span><br><span class=\"line\">            <span class=\"keyword\">get_target_property</span>(value <span class=\"variable\">$&#123;target&#125;</span> <span class=\"variable\">$&#123;property&#125;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">message</span>(<span class=\"string\">&quot;$&#123;target&#125; $&#123;property&#125; = $&#123;value&#125;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\">    <span class=\"keyword\">endforeach</span>()</span><br><span class=\"line\"><span class=\"keyword\">endfunction</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">print_target_properties(xxx)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>查看 cmake property</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_cmake_property</span><span class=\"params\">(_variableNames VARIABLES)</span></span></span><br><span class=\"line\">foreach (_variableName $&#123;_variableNames&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">message</span>(STATUS <span class=\"string\">&quot;$&#123;_variableName&#125;=$&#123;$&#123;_variableName&#125;&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">endforeach</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>查看 include_director</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_property</span><span class=\"params\">(dirs DIRECTORY $&#123;CMAKE_CURRENT_SOURCE_DIR&#125; PROPERTY INCLUDE_DIRECTORIES)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">foreach</span><span class=\"params\">(dir $&#123;dirs&#125;)</span></span></span><br><span class=\"line\">  <span class=\"built_in\">message</span>(STATUS <span class=\"string\">&quot;include dir=&#x27;$&#123;dir&#125;&#x27;&quot;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">endforeach</span><span class=\"params\">()</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">get_property</span><span class=\"params\">(dirs DIRECTORY $&#123;CMAKE_CURRENT_SOURCE_DIR&#125; PROPERTY LINK_DIRECTORIES)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">foreach</span><span class=\"params\">(dir $&#123;dirs&#125;)</span></span></span><br><span class=\"line\">  <span class=\"built_in\">message</span>(STATUS <span class=\"string\">&quot;link dir=&#x27;$&#123;dir&#125;&#x27;&quot;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">endforeach</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>ctest -N</code> 查看 test 列表</li>\n<li>target_compile_definitions(full_flow PRIVATE “-DGIT_INFO&#x3D;&quot;${GIT_BRANCH}-${GIT_COMMIT_HASH}&quot;“) 代替 add_definitions(-DGIT_INFO)</li>\n<li>add_subdirectory(protobuf) 添加子文件夹，子文件夹下 CmakeLists.txt 管理相应文件夹。</li>\n<li>cmake_minimum_required(VERSION 3.8） 版本要求</li>\n<li>project(HELLO) 定义工程名</li>\n<li>message(STATUS, ““） 打印消息</li>\n<li>aux_source_directory(. DIR_SRCS) 查找指定目录下的所有源文件并将结果存入变量名</li>\n<li>add_excutable(hello, ${DIR_SRCS}) 定义了工程生成的可执行程序文件名，源文件为 DIR_SRCS 变量中定义的源文件列表</li>\n<li>add_library(libname [SHARED | STATIC | MODULE] source_files) 定义了库文件名 静态库，动态库不能重名</li>\n<li>add_library(hello_static STATIC ${LIBHELLO_SRC}) set_target_properties(hello_static PROPERTIES OUTPUT_NAME “hello”) 有 libhello.so 的情况下生成 libhello.a</li>\n<li><code>CMAKE_INSTALL_PREFIX</code> 变量类似于 configure 脚本的 – prefix,常见的使用方法看 <code>cmake -DCMAKE_INSTALL_PREFIX=/usr .</code></li>\n<li><code>make install PREFIX=your_installation_directory</code></li>\n<li>install(TARGETS name [ARCHIVE|LIBRARY|RUNTIME] [DESTINATION <dir>] …) 安装库和可执行程序</li>\n<li>install(FILES include&#x2F;quicksort.hpp DESTINATION include) 安装头文件</li>\n<li>include_directories(&#x2F;usr&#x2F;include&#x2F;hello) 添加头文件搜索路径</li>\n<li>link_directories(dir1 dir2…) 添加链接库路径</li>\n<li>官网不推荐使用 link_directoris，而是推荐使用 find_package 和 find_library 寻找共享库的绝对路径，再传给 target_link_libraries 使用</li>\n<li>find_library(LIBQUICKSORT_PATH quicksort .&#x2F;lib)</li>\n<li>find_path(GLOG_INCLUDE_DIR glog&#x2F;logging.h PATHS ${GLOG_ROOT_DIR}) 先查找路径再查找库 find_library(GLOG_LIBRARY glog PATHS ${GLOG_ROOT_DIR} PATH_SUFFIXES lib lib64)</li>\n<li>target_link_libraries(main hello) 为可执行程序添加 libhello.so 链接库</li>\n<li>add_definitions(“-DNDEBUG” “-O3”) 向编译器添加编译选项</li>\n<li>set(CMAKE_CXX_FLAGS “$(CMAKE_CXX_FLAGS) -std&#x3D;c++11”) 设置 C++编译选项 等价于 add_definitons(“-std&#x3D;c++11)</li>\n<li>option 选项，让你可以根据选项值进行条件编译 option(DEBUG “Debug mode.” OFF)</li>\n<li>cmake –help-module FindProtobuf ；cmake –help-module FindThreads 查看模块的 cmake 用法</li>\n<li>list</li>\n<li>file</li>\n<li>string</li>\n<li>foreach</li>\n<li>if 用法</li>\n</ol>\n<figure class=\"highlight isbl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">option</span>(<span class=\"variable\">DEBUG</span> <span class=\"string\">&quot;Debug mode.&quot;</span> <span class=\"variable\">OFF</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span>(<span class=\"variable\">DEBUG</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">message</span>(<span class=\"variable\">STATUS</span> <span class=\"string\">&quot;Use Debug mode&quot;</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">else</span>()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">message</span>(<span class=\"variable\">STATUS</span> <span class=\"string\">&quot;Don&#x27;t use Debug mode&quot;</span>)</span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h2><ol>\n<li>CMake is not a build system. It’s the build system generator.</li>\n<li>add_subdirectory 最好只有一层，避免嵌套，只添加顶层文件夹</li>\n</ol>\n<h2 id=\"Target-and-Property\"><a href=\"#Target-and-Property\" class=\"headerlink\" title=\"Target and Property\"></a>Target and Property</h2><ol>\n<li>现代化的 CMake 是围绕 Target 和 Property 来定义的，并且竭力避免出现变量 variable 的定义。Variable 横行是典型 CMake2.8 时期的风格。现代版的 CMake 更像是在遵循 OOP 的规则，通过 target 来约束 link、compile 等相关属性的作用域。</li>\n</ol>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><ol>\n<li>如果把一个 Target 想象成一个对象（Object），会发现两者的组织方式非常相似：</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">构造函数：</span><br><span class=\"line\">add_executable</span><br><span class=\"line\">add_library</span><br><span class=\"line\">成员函数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">get_target_property</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">set_target_properties</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">get_property</span><span class=\"params\">(TARGET)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">set_property</span><span class=\"params\">(TARGET)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_compile_definitions</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_compile_features</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_compile_options</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_include_directories</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_sources</span><span class=\"params\">()</span></span></span><br><span class=\"line\">成员变量</span><br><span class=\"line\">Target properties（太多）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h3><ol>\n<li>target_xxx 命令 PRIVATE&#x2F;PUBLIC…后为 property，例如</li>\n</ol>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\">target_source(MyEXE PRIVATE <span class=\"string\">&quot;main.cpp&quot;</span>)  ## main.cpp为source属性</span><br><span class=\"line\">target_link_library(MyEXE PRIVATE Poco::Net Poco::Util) ## Poco:Net Poco::Util为link属性</span><br><span class=\"line\">target_compile_definition(MyEXE PRIVATE std_cxx_14) ## std_cxx_14为编译属性</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Build-Requirements-and-Usage-Requirements\"><a href=\"#Build-Requirements-and-Usage-Requirements\" class=\"headerlink\" title=\"Build-Requirements and Usage-Requirements\"></a>Build-Requirements and Usage-Requirements</h2><ol>\n<li><code>Build-Requirements</code>： 包含了所有构建 Target 必须的材料。如源代码，include 路径，预编译命令，链接依赖，编译&#x2F;链接选项，编译&#x2F;链接特性等。</li>\n<li><code>Usage-Requirements</code>：包含了所有使用 Target 必须的材料。如源代码，include 路径，预编译命令，链接依赖，编译&#x2F;链接选项，编译&#x2F;链接特性等。这些往往是当另一个 Target 需要使用当前 target 时，必须包含的依赖</li>\n</ol>\n<h2 id=\"PRIVATE-INTERFACE-PUBLIC\"><a href=\"#PRIVATE-INTERFACE-PUBLIC\" class=\"headerlink\" title=\"PRIVATE&#x2F;INTERFACE&#x2F;PUBLIC\"></a>PRIVATE&#x2F;INTERFACE&#x2F;PUBLIC</h2><ol>\n<li>没有指定 PUBLIC 或 PRIVATE 关键字时,CMake 会把这个链接库的属性默认设置为 PRIVATE。</li>\n<li>定义了<code>Target属性</code>的传递范围。</li>\n<li><code>PRIVATE</code>: 表示 Target 的属性只定义在当前 Target 中，任何依赖当前 Target 的 Target 不共享 PRIVATE 关键字下定义的属性。</li>\n<li><code>INTERFACE</code>：表示 Target 的属性不适用于其自身，而只适用于依赖其的 Target。</li>\n<li><code>PUBLIC</code>：表示 Target 的属性既是 build-requirements 也是 usage-requirements。凡是依赖。凡是依赖于当前 Target 的 Target 都会共享本属性。</li>\n</ol>\n<h2 id=\"Modern-Cmake-Using-Steps\"><a href=\"#Modern-Cmake-Using-Steps\" class=\"headerlink\" title=\"Modern Cmake Using Steps\"></a>Modern Cmake Using Steps</h2><ol>\n<li>Always create targets with no sources first.</li>\n<li>Use <code>target...</code> commands to add build-&#x2F;usage-requirements</li>\n<li>Use <code>IMPORTED</code> targets for external libraires. But, prefer <code>find_package</code> or <code>EXPORTED</code> targets ro creating them yourself.</li>\n</ol>\n<h2 id=\"3-13-之默认生成绝对路径\"><a href=\"#3-13-之默认生成绝对路径\" class=\"headerlink\" title=\"3.13 之默认生成绝对路径\"></a>3.13 之默认生成绝对路径</h2><ol>\n<li>3.13 之前</li>\n</ol>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">add_library( MyTarget SHARED )</span><br><span class=\"line\">target_sources ( MyTarget</span><br><span class=\"line\">    <span class=\"keyword\">PRIVATE</span>    src/A.cpp</span><br><span class=\"line\">               src/B.cpp</span><br><span class=\"line\">               headers/B.hpp</span><br><span class=\"line\">    <span class=\"keyword\">PUBLIC</span>     $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;<span class=\"regexp\">/headers/</span>A.hpp</span><br><span class=\"line\">    <span class=\"keyword\">INTERFACE</span>  $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;<span class=\"regexp\">/headers/</span>C.hpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>3.13 之后生成绝对路径</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">add_library( MyTarget SHARED )</span><br><span class=\"line\">target_sources ( MyTarget</span><br><span class=\"line\">    PRIVATE    <span class=\"attribute\">src</span>/<span class=\"selector-tag\">A</span><span class=\"selector-class\">.cpp</span></span><br><span class=\"line\">               <span class=\"attribute\">src</span>/<span class=\"selector-tag\">B</span><span class=\"selector-class\">.cpp</span></span><br><span class=\"line\">               headers/<span class=\"selector-tag\">B</span><span class=\"selector-class\">.hpp</span></span><br><span class=\"line\">    PUBLIC     headers/<span class=\"selector-tag\">A</span><span class=\"selector-class\">.hpp</span></span><br><span class=\"line\">    INTERFACE  headers/C<span class=\"selector-class\">.hpp</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CMakeLists-txt\"><a href=\"#CMakeLists-txt\" class=\"headerlink\" title=\"CMakeLists.txt\"></a>CMakeLists.txt</h2><ol>\n<li>top level CMakeLists.txt begining:</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>( VERSION <span class=\"number\">3.15</span>...<span class=\"number\">3.17</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>( CMAKE_PROJECT_INCLUDE_BEFORE</span><br><span class=\"line\">     <span class=\"string\">&quot;$&#123;CMAKE_CURRENT_LIST_DIR&#125;/common-project-info.in&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\"># include( &quot;$&#123;CMAKE_CURRENT_LIST_DIR&#125;/common-project-include.in&quot; )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span> (MyRootProject</span><br><span class=\"line\">    VERSION <span class=\"variable\">$&#123;project_version&#125;</span></span><br><span class=\"line\">    DESCRIPTION <span class=\"variable\">$&#123;project_description&#125;</span></span><br><span class=\"line\">    HOMEPAGE_URL <span class=\"variable\">$&#123;project_homepage&#125;</span></span><br><span class=\"line\">    LANGUAGES C CXX )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># common-project-info.in</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> ( project_version 1.2.3 )</span><br><span class=\"line\"><span class=\"built_in\">set</span> ( project_description <span class=\"string\">&quot;test....&quot;</span> )</span><br><span class=\"line\"><span class=\"built_in\">set</span> ( project_homepage <span class=\"string\">&quot;https://www....&quot;</span> )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find-package\"><a href=\"#find-package\" class=\"headerlink\" title=\"find_package\"></a><a href=\"https://zhuanlan.zhihu.com/p/658727351\">find_package</a></h2><ol>\n<li><p><a href=\"https://www.cnblogs.com/lidabo/p/16635310.html\">path 问题</a></p>\n</li>\n<li><p><code>set(xxx_DIR $&#123;&#125;/lib/cmake)</code>需要指定 cmake 位置</p>\n</li>\n<li><p><code>find_package(xxx REQUIRED HINTS /usr/local/lib)</code></p>\n</li>\n<li><p><code>export CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/local/lib/x86_64-linux-gnu</code> or <code>set(CMAKE_FIND_ROOT_PATH /usr/lib/x86_64-linux-gnu /usr/local/lib/x86_64-linux-gnu)</code>设置查找路径</p>\n</li>\n<li><p>find_package 采用两种模式搜索库：The “better” way(Config 模式) to do things is to have an installed package provide its own details to CMake; <a href=\"https://hsf-training.github.io/hsf-training-cmake-webpage/09-findingpackages/index.html#findpackage\">link</a></p>\n<ul>\n<li><code>Module模式</code>：搜索 CMAKE_MODULE_PATH 指定路径下的 FindXXX.cmake 文件，执行该文件从而找到 XXX 库。其中，具体查找库并给 XXX_INCLUDE_DIRS 和 XXX_LIBRARIES 两个变量赋值的操作由 FindXXX.cmake 模块完成。</li>\n<li><code>Config模式</code>：搜索 XXX_DIR 指定路径下的 XXXConfig.cmake 文件，执行该文件从而找到 XXX 库。其中具体查找库并给 XXX_INCLUDE_DIRS 和 XXX_LIBRARIES 两个变量赋值的操作由 XXXConfig.cmake 模块完成</li>\n</ul>\n</li>\n<li><p>两种模式看起来似乎差不多，不过 cmake 默认采取 Module 模式，如果 Module 模式未找到库，才会采取 Config 模式。如果 XXX_DIR 路径下找不到 XXXConfig.cmake 文件，则会找&#x2F;usr&#x2F;local&#x2F;lib&#x2F;cmake&#x2F;XXX&#x2F;中的 XXXConfig.cmake 文件。总之，Config 模式是一个备选策略。通常，库安装时会拷贝一份 XXXConfig.cmake 到系统目录中，因此在没有显式指定搜索路径时也可以顺利找到。</p>\n</li>\n</ol>\n<h2 id=\"find-path-and-include\"><a href=\"#find-path-and-include\" class=\"headerlink\" title=\"find_path and include\"></a>find_path and include</h2><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find_path</span>(XRT_INCLUDE_DIRS</span><br><span class=\"line\">    NAMES xrt<span class=\"selector-class\">.h</span></span><br><span class=\"line\">    PATH_SUFFIXES xrt</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">message</span><span class=\"params\">(<span class=\"string\">&quot;config types: $&#123;XRT_INCLUDE_DIRS&#125;&quot;</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pkg-config\"><a href=\"#pkg-config\" class=\"headerlink\" title=\"pkg-config\"></a>pkg-config</h2><ol>\n<li>如果 find_package 找不到库，如果系统中有库的.pc 配置文件，可以使用 pkg-config 替代。</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">find_package</span>(glog QUIET)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> glog_FOUND)</span><br><span class=\"line\">    <span class=\"keyword\">find_package</span>(PkgConfig)</span><br><span class=\"line\">    pkg_search_module(PKG_GLOG REQUIRED IMPORTED_TARGET GLOBAL libglog)</span><br><span class=\"line\">    <span class=\"keyword\">add_library</span>(glog::glog ALIAS PkgConfig::PKG_GLOG)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>(<span class=\"keyword\">NOT</span> glog_found)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件变量\"><a href=\"#组件变量\" class=\"headerlink\" title=\"组件变量\"></a>组件变量</h2><h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li>例子 1：最基础例子</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">cmake_minimum_required</span><span class=\"params\">(VERSION <span class=\"number\">3.8</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">project</span><span class=\"params\">(QUICKSORT)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">aux_source_directory</span><span class=\"params\">(. DIR_SRCS)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_definitions</span><span class=\"params\">(<span class=\"string\">&quot;-DNDEBUG&quot;</span> <span class=\"string\">&quot;-O3&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">set</span><span class=\"params\">(CMAKE_CXX_FLAGS <span class=\"string\">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(quicksort $&#123;DIR_SRCS&#125;)</span></span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>例子 2： 使用静态库并安装</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(QUICKSORT)</span><br><span class=\"line\"><span class=\"comment\">#aux_source_directory( DIR_SRCS)</span></span><br><span class=\"line\"><span class=\"comment\">#add liabrary</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(quicksort</span><br><span class=\"line\">    <span class=\"keyword\">include</span>/quicksort.hpp</span><br><span class=\"line\">    src/quicksort.cpp)</span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS quicksort DESTINATION lib)  <span class=\"comment\">#安装静态库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#add target</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(SRC_LIST src/main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">add_definitions</span>(<span class=\"string\">&quot;-DNDEBUG&quot;</span> <span class=\"string\">&quot;-O3&quot;</span> <span class=\"string\">&quot;-std=c++11&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(main <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#link library</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(main quicksort)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#install program</span></span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS main RUNTIME DESTINATION bin)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>例子 3 只使用动态库</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(QUICKSORT)</span><br><span class=\"line\"><span class=\"comment\">#aux_source_directory( DIR_SRCS)</span></span><br><span class=\"line\"><span class=\"comment\">#add shared liabrary</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(quicksort SHARED</span><br><span class=\"line\">    <span class=\"keyword\">include</span>/quicksort.hpp</span><br><span class=\"line\">    src/quicksort.cpp)</span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS quicksort LIBRARY DESTINATION lib)</span><br><span class=\"line\"><span class=\"keyword\">install</span>(FILES <span class=\"keyword\">include</span>/quicksort.hpp DESTINATION <span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#add target</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(SRC_LIST src/main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">add_definitions</span>(<span class=\"string\">&quot;-DNDEBUG&quot;</span> <span class=\"string\">&quot;-O3&quot;</span> <span class=\"string\">&quot;-std=c++11&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(main <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#link library</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(main quicksort)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>例子 4 安装静态库和动态库</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.8</span>)</span><br><span class=\"line\"><span class=\"built_in\">project</span>(QUICKSORT)</span><br><span class=\"line\"><span class=\"selector-id\">#aux_source_directory</span>( DIR_SRCS)</span><br><span class=\"line\"><span class=\"selector-id\">#add</span> shared liabrary</span><br><span class=\"line\"><span class=\"built_in\">add_library</span>(quicksort SHARED</span><br><span class=\"line\">    include/quicksort.hpp</span><br><span class=\"line\">    src/quicksort.cpp)</span><br><span class=\"line\"><span class=\"selector-id\">#add</span> static liabrary</span><br><span class=\"line\"><span class=\"built_in\">add_library</span>(quicksort_static STATIC</span><br><span class=\"line\">    include/quicksort.hpp</span><br><span class=\"line\">    src/quicksort.cpp)</span><br><span class=\"line\"><span class=\"built_in\">set_target_properties</span>(quicksort_static PROPERTIES OUTPUT_NAME &quot;quicksort&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">SET_TARGET_PROPERTIES</span>(quicksort PROPERTIES CLEAN_DIRECT_OUTPUT <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">SET_TARGET_PROPERTIES</span>(quicksort_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">install</span>(TARGETS quicksort LIBRARY DESTINATION lib)</span><br><span class=\"line\"><span class=\"built_in\">install</span>(TARGETS quicksort_static ARCHIVE DESTINATION lib)</span><br><span class=\"line\"><span class=\"built_in\">install</span>(FILES include/quicksort.hpp DESTINATION include)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#add</span> target</span><br><span class=\"line\"><span class=\"built_in\">set</span>(SRC_LIST src/main.cpp)</span><br><span class=\"line\"><span class=\"built_in\">add_definitions</span>(&quot;-DNDEBUG&quot; &quot;-O3&quot; &quot;-std=c++<span class=\"number\">11</span>&quot;)</span><br><span class=\"line\"><span class=\"selector-id\">#set</span>(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++<span class=\"number\">11</span>&quot;)</span><br><span class=\"line\"><span class=\"built_in\">add_executable</span>(main $&#123;SRC_LIST&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#link</span> library</span><br><span class=\"line\"><span class=\"built_in\">include_directories</span>(include)</span><br><span class=\"line\"><span class=\"built_in\">target_link_libraries</span>(main quicksort)</span><br><span class=\"line\"></span><br><span class=\"line\"># 参考 https://www.cnblogs.com/zhoug2020/p/<span class=\"number\">5904206</span>.html</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>例子 5 添加 glog 库</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(QUICKSORT)</span><br><span class=\"line\"><span class=\"comment\">#aux_source_directory( DIR_SRCS)</span></span><br><span class=\"line\"><span class=\"comment\">#add shared liabrary</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(quicksort SHARED</span><br><span class=\"line\">    <span class=\"keyword\">include</span>/quicksort.hpp</span><br><span class=\"line\">    src/quicksort.cpp)</span><br><span class=\"line\"><span class=\"comment\">#add static liabrary</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(quicksort_static STATIC</span><br><span class=\"line\">    <span class=\"keyword\">include</span>/quicksort.hpp</span><br><span class=\"line\">    src/quicksort.cpp)</span><br><span class=\"line\"><span class=\"keyword\">set_target_properties</span>(quicksort_static PROPERTIES OUTPUT_NAME <span class=\"string\">&quot;quicksort&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET_TARGET_PROPERTIES</span>(quicksort PROPERTIES CLEAN_DIRECT_OUTPUT <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">SET_TARGET_PROPERTIES</span>(quicksort_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS quicksort LIBRARY DESTINATION lib)</span><br><span class=\"line\"><span class=\"comment\">#install(TARGETS quicksort_static ARCHIVE DESTINATION lib)</span></span><br><span class=\"line\"><span class=\"keyword\">install</span>(FILES <span class=\"keyword\">include</span>/quicksort.hpp DESTINATION <span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#add target</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(SRC_LIST src/main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">add_definitions</span>(<span class=\"string\">&quot;-DNDEBUG&quot;</span> <span class=\"string\">&quot;-O3&quot;</span> <span class=\"string\">&quot;-std=c++11&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(main <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#link library</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span> /home/jiaxiyang/workspace/glog/lib/<span class=\"keyword\">include</span>) <span class=\"comment\">#添加glog include目录</span></span><br><span class=\"line\"><span class=\"keyword\">link_directories</span>(/home/jiaxiyang/workspace/glog/lib/lib) <span class=\"comment\">#添加glog库安装路径</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(main quicksort glog)</span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS main RUNTIME DESTINATION bin)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>例子 6 链接自己编译的库</li>\n</ol>\n<figure class=\"highlight leaf\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 3.8)</span><br><span class=\"line\">project(QUICKSORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">#</span><span class=\"title\">SET_TARGET_PROPERTIES</span><span class=\"params\">(<span class=\"variable\">quicksort</span> <span class=\"variable\">PROPERTIES</span> <span class=\"variable\">CLEAN_DIRECT_OUTPUT</span> 1)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">#</span><span class=\"title\">SET_TARGET_PROPERTIES</span><span class=\"params\">(<span class=\"variable\">quicksort_static</span> <span class=\"variable\">PROPERTIES</span> <span class=\"variable\">CLEAN_DIRECT_OUTPUT</span> 1)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">#</span><span class=\"title\">install</span><span class=\"params\">(<span class=\"variable\">TARGETS</span> <span class=\"variable\">quicksort</span> <span class=\"variable\">LIBRARY</span> <span class=\"variable\">DESTINATION</span> <span class=\"variable\">lib</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">#</span><span class=\"title\">install</span><span class=\"params\">(<span class=\"variable\">TARGETS</span> <span class=\"variable\">quicksort_static</span> <span class=\"variable\">ARCHIVE</span> <span class=\"variable\">DESTINATION</span> <span class=\"variable\">lib</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">#</span><span class=\"title\">install</span><span class=\"params\">(<span class=\"variable\">FILES</span> <span class=\"variable\">include</span>/<span class=\"variable\">quicksort</span>.<span class=\"variable\">hpp</span> <span class=\"variable\">DESTINATION</span> <span class=\"variable\">include</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">#add target</span><br><span class=\"line\">set(SRC_LIST src/main.cpp)</span><br><span class=\"line\">add_definitions(&quot;-DNDEBUG&quot; &quot;-O3&quot; &quot;-std=c++11&quot;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">#</span><span class=\"title\">set</span><span class=\"params\">(<span class=\"variable\">CMAKE_CXX_FLAGS</span> <span class=\"string\">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span></span></span><br><span class=\"line\">add_executable(main $&#123;SRC_LIST&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">#link library</span><br><span class=\"line\">include_directories(/home/jiaxiyang/workspace/algorithm/quicksort1/include /home/jiaxiyang/workspace/glog/lib/include) #添加glog include目录</span><br><span class=\"line\">link_directories(/home/jiaxiyang/workspace/glog/lib/lib) #添加glog库安装路径</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">#</span><span class=\"title\">link_directories</span><span class=\"params\">(/<span class=\"variable\">home</span>/<span class=\"variable\">jiaxiyang</span>/<span class=\"variable\">workspace</span>/<span class=\"variable\">algorithm</span>/<span class=\"variable\">quicksort1</span>/<span class=\"variable\">lib</span>)</span></span> #添加glog库安装路径   如果没有find_library，出现在add_executable后面会出错 建议用find_library</span><br><span class=\"line\">find_library(LIBQUICKSORT_PATH quicksort ./lib)</span><br><span class=\"line\">MESSAGE(STATUS $&#123;LIBQUICKSORT_PATH&#125; &quot; found&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(main $&#123;LIBQUICKSORT_PATH&#125; glog)</span><br><span class=\"line\">install(TARGETS main RUNTIME DESTINATION bin)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://hsf-training.github.io/hsf-training-cmake-webpage/\">More Modern CMake</a></li>\n<li><a href=\"https://bazel.build/reference?hl=zh-cn\">参考文档: 构建百科全书， 测试百科全书，命令行参考文档，查询参考文档</a></li>\n<li><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/index.html\">Cmake Tutorial</a></li>\n<li><a href=\"https://discourse.cmake.org/\">Cmake Forum</a></li>\n<li><a href=\"https://github.com/jiaxiyang/documents/blob/master/pcmake.pdf\">Professional CMake pdf</a></li>\n<li><a href=\"https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html\">Cmake Buildsystem</a></li>\n<li><a href=\"https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1\">Effective Modern Cmake</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=bsXLMQ6WgIk\">Effective Modern Cmake video</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=y9kSr5enrSk\">Deniz Bahadir 2019</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=y7ndUhdQuU8\">Deniz Bahadir 2018 traditional and modern camke</a></li>\n<li><a href=\"https://github.com/Bagira80/More-Modern-CMake\">Beniz Bahadir PPT</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/76975231\">OO Cmake</a></li>\n<li><a href=\"https://ukabuer.me/blog/more-modern-cmake\">Cmake Concept</a></li>\n</ol>\n","categories":["Tools","Cmake"],"tags":["Cmake"]},{"title":"Cpp awesome src","url":"/2022/05/19/Cpp-awesome-src/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/chromium/chromium\">chromium</a></li>\n<li><a href=\"https://github.com/taskflow/taskflow\">taskflow</a></li>\n</ol>\n"},{"title":"Cpp-concurrency-in-action","url":"/2021/07/20/Cpp-concurrency-in-action/","content":"<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><ol>\n<li><a href=\"https://b-ok.lat/book/3688262/d57395?dsource=recommend&regionChanged=&redirect=4729105\">C++ Concurrency in action 2</a></li>\n<li><a href=\"https://github.com/xiaoweiChen/CPP-Concurrency-In-Action-2ed-2019\">C++ Concurrency in action Chinese</a></li>\n<li>多线程写共享数据时，需要加锁<code>const std::lock_guard&lt;std::mutex&gt; lock(results_len_mutex_);</code></li>\n<li>异步程序并行度跟有几个耗时的模块相关，例如：yolox 推理和后处理最耗时，异步并行度设为 2，做当前帧的后处理同时做下一帧的模型推理。</li>\n<li>异步需要考虑 timeout 问题， 可以使用 <code>condition_variable</code></li>\n<li>. 流控：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> time_start = std::chrono::steady_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> time_end = std::chrono::steady_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> cost_ms =</span><br><span class=\"line\">    std::chrono::<span class=\"built_in\">duration_cast</span>&lt;std::chrono::milliseconds&gt;(time_end - time_start);</span><br><span class=\"line\">std::this_thread::<span class=\"built_in\">sleep_for</span>(</span><br><span class=\"line\">    std::chrono::<span class=\"built_in\">milliseconds</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">1000.0</span> / fps)) - cost_ms);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-Hello-world-of-concurrency-in-C\"><a href=\"#1-Hello-world-of-concurrency-in-C\" class=\"headerlink\" title=\"1. Hello, world of concurrency in C++\"></a>1. Hello, world of concurrency in C++</h2><h3 id=\"1-1-并发是什么\"><a href=\"#1-1-并发是什么\" class=\"headerlink\" title=\"1.1 并发是什么\"></a>1.1 并发是什么</h3><ol>\n<li>多进程并发优点： 操作系统在进程间提供的保护操作和更高级别的通信机制，可以更容易编写安全的并发代码。还有一个优势，可以使用远程连接的方式，在不同的机器上运行独立的进程。</li>\n</ol>\n<h3 id=\"1-2-为什么使用并发\"><a href=\"#1-2-为什么使用并发\" class=\"headerlink\" title=\"1.2 为什么使用并发\"></a>1.2 为什么使用并发</h3><ol>\n<li><code>分离程序</code>： 将相互独立的部分分开就行操作。如 DVD 用户界面和播放功能应分离。</li>\n<li><code>性能</code>：两种方式：任务并行（将单一任务分成几部分并行）和数据并行（每个线程在不同的数据块上执行相同的操作）</li>\n</ol>\n<h4 id=\"1-2-1-什么时候不使用并发\"><a href=\"#1-2-1-什么时候不使用并发\" class=\"headerlink\" title=\"1.2.1 什么时候不使用并发\"></a>1.2.1 什么时候不使用并发</h4><ol>\n<li>收益比不上成本，除非潜在性能足够大，否则不使用并发，需要脑力成本和维护成本，代码更复杂，难以理解。</li>\n<li>资源有限： 太多线程的会耗尽资源。可以使用线程池进行优化。太多的线程上下文切换导致的性能损耗可能比增加线程的收益更多。</li>\n</ol>\n<h3 id=\"1-3-并发和多线程\"><a href=\"#1-3-并发和多线程\" class=\"headerlink\" title=\"1.3 并发和多线程\"></a>1.3 并发和多线程</h3><h4 id=\"1-3-1-C-多线程历史\"><a href=\"#1-3-1-C-多线程历史\" class=\"headerlink\" title=\"1.3.1 C++多线程历史\"></a>1.3.1 C++多线程历史</h4><ol>\n<li>C++98 标准不支持多线程，没有内存模型。</li>\n<li>各种非标准多线程库：MFC，Boost，大部分使用的是 RAII</li>\n</ol>\n<h4 id=\"1-3-2-支持并发\"><a href=\"#1-3-2-支持并发\" class=\"headerlink\" title=\"1.3.2 支持并发\"></a>1.3.2 支持并发</h4><ol>\n<li>C++11: <code>线程管理，共享数据保护，线程间同步操作，原子操作</code></li>\n<li>C++11 之后，C++标准支持多线程，也就是说可以跨平台编写高效，可移植的代码。编译器可以搞定具体平台，用户无需担心。</li>\n</ol>\n<h4 id=\"1-3-4-C-线程库的效率\"><a href=\"#1-3-4-C-线程库的效率\" class=\"headerlink\" title=\"1.3.4 C++线程库的效率\"></a>1.3.4 C++线程库的效率</h4><ol>\n<li>高级工具（使用高级 API, 抽象高）和低级工具（使用低级 API，抽象低)有开销差，即抽象代价（abstraction penalty)。C++标准库设计时尽量使得高级 API 和低级 API 具有相同的性能。</li>\n<li>低级工具：为了达到终极性能，需要提供给硬件打交道的低级 API。为了这个目的，形成了原子操作库。</li>\n<li>高级工具：为了使得编写多线程代码更简单。因为有额外的代码需要执行，这些工具会带来性能开销。</li>\n<li>如果很看重性能或者高级工具开销过高，可以通过低层工具来实现。绝大多数情况，有过高的复杂度和过大的出错率，来交换小幅度的性能收益是不划算的。</li>\n</ol>\n<h2 id=\"2-Managing-threads\"><a href=\"#2-Managing-threads\" class=\"headerlink\" title=\"2. Managing threads\"></a>2. Managing threads</h2><ol>\n<li>文件锁用在进程之间，线程之间锁不住，文件锁是应用于进程中的一种锁，由于多线程是通过修改文件描述符指向的文件结构体中的成员变量实现，所以文件锁不能用于线程之间。 见<a href=\"https://docs.rs/fslock/0.1.6/fslock/struct.LockFile.html\">fslock</a></li>\n</ol>\n<h3 id=\"2-5-线程标识\"><a href=\"#2-5-线程标识\" class=\"headerlink\" title=\"2.5 线程标识\"></a>2.5 线程标识</h3><ol>\n<li><code>std::this_thread::get_id()</code>获取当前线程的 ID.</li>\n</ol>\n<h2 id=\"3-Sharing-data-between-threads\"><a href=\"#3-Sharing-data-between-threads\" class=\"headerlink\" title=\"3. Sharing data between threads\"></a>3. Sharing data between threads</h2><ol>\n<li>错误的数据共享是多线程产生 bug 的主要原因。</li>\n<li><code>data race</code>: the specific type of race condition that arises because of concurrent modification to a single object</li>\n<li>数据竞争时间敏感，Bug 可能很难复现，很难查找。</li>\n</ol>\n<h3 id=\"3-2-使用互斥量\"><a href=\"#3-2-使用互斥量\" class=\"headerlink\" title=\"3.2 使用互斥量\"></a>3.2 使用互斥量</h3><ol>\n<li>访问共享数据前将数据锁住，访问结束将数据解锁。</li>\n<li>互斥量是 C++保护数据最通用的机制。</li>\n<li>互斥量问题： 死锁，对数据保护太多。</li>\n<li>一个互斥量只能用于一个资源的互斥访问。</li>\n<li>互斥量(互斥锁)本质上是一把锁。</li>\n</ol>\n<h4 id=\"3-2-1-互斥量\"><a href=\"#3-2-1-互斥量\" class=\"headerlink\" title=\"3.2.1 互斥量\"></a>3.2.1 互斥量</h4><ol>\n<li><code>std::mutex</code>创建互斥量，<code>lock</code>对互斥量上锁，unlock 为解锁。</li>\n<li>RAII 管理互斥量：C++标准库为互斥量提供了 RAII 模板类<code>std::lock_guard</code>，在构造时提供已锁的互斥量（lock_guard 对象在构造时对传进来的 mutex 上锁），并在析构时解锁，从而保证互斥量被正确的解锁。</li>\n<li>大多数情况下，互斥量通常会与需要保护的数据放在同一类中，而不是定义成全局变量。</li>\n<li>C++17 提供<code>std::scoped_lock</code>加强版的<code>std::lock_guard</code>, 可以接受多个参数。</li>\n</ol>\n<h4 id=\"3-2-4-死锁\"><a href=\"#3-2-4-死锁\" class=\"headerlink\" title=\"3.2.4 死锁\"></a>3.2.4 死锁</h4><ol>\n<li>死锁一般解决方法：按顺序上锁。要么将两个都锁住，要么一个都不锁。</li>\n<li><code>std::lock</code>能同时锁住多个互斥量。</li>\n<li>C++17 中的<code>std::scoped_lock&lt;&gt;</code>是一种新的 RAII 模板类型。能接受不定数量的互斥量类型作为模板参数。在构造 scoped_lock 对象时对传入的 mutex 上锁，析构时解锁。</li>\n<li><code>std::lock</code>锁上 mutex 之后不负责释放，还需要配合 lock_guard 或者手动释放 mutex。<code>std::scoped_lock</code>生命周期结束后会自动释放锁。</li>\n<li>C++17 特性：<code>自动推导模板参数</code>。可以简写为<code>std::scoped_lock lk(m1, m2);</code> 而不用写为<code>std::scoped_lock&lt;std::mutex, std::mutex&gt; lk(m1, m2);</code></li>\n</ol>\n<h3 id=\"atomic\"><a href=\"#atomic\" class=\"headerlink\" title=\"atomic\"></a>atomic</h3><ol>\n<li>从效率上来说，原子操作要比互斥量的方式效率要高。</li>\n<li>互斥量的加锁一般是针对一个代码段，而原子操作针对的一般都是一个变量。</li>\n<li>store 和 load 来赋值和读取， 除了初始化不要使用赋值</li>\n<li><a href=\"https://zh.cppreference.com/w/cpp/atomic/atomic/is_lock_free\">atomic 不一定免锁</a></li>\n<li>对结构体需要链接 <code>-latomic</code></li>\n<li><code>-fsanitize=thread</code>可以检测数据竞争</li>\n</ol>\n<h2 id=\"4-Synchronizing-concurrent-operations-on-atomic-types\"><a href=\"#4-Synchronizing-concurrent-operations-on-atomic-types\" class=\"headerlink\" title=\"4. Synchronizing concurrent operations on atomic types\"></a>4. Synchronizing concurrent operations on atomic types</h2><h3 id=\"4-1-等待时间或条件\"><a href=\"#4-1-等待时间或条件\" class=\"headerlink\" title=\"4.1 等待时间或条件\"></a>4.1 等待时间或条件</h3><ol>\n<li>当一个线程等待另一个线程完成时，有几种选择：<ul>\n<li>持续检查共享数据标志，浪费资源查询</li>\n<li>在等待线程时，使用<code>std::this_thread::sleep_for()</code>进行周期性间歇，节省执行时间，问题：很难确定休眠时间</li>\n<li>通过标准库提供的工具。例如：<code>condition variable</code></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"condition-variable\"><a href=\"#condition-variable\" class=\"headerlink\" title=\"condition_variable\"></a><a href=\"https://blog.csdn.net/wxj1992/article/details/116888582\">condition_variable</a></h4><ol>\n<li>condition<em>variable 是一个类，搭配互斥量 mutex 来用，这个类有它自己的一些函数，这里就主要讲 wait 函数和 notify</em>*函数，故名思意，wait 就是有一个等待的作用，notify 就是有一个通知的作用。主要用法这里就不再赘述了，简而言之就是程序运行到 wait 函数的时候会先在此阻塞，然后自动 unlock，那么其他线程在拿到锁以后就会往下运行，当运行到 notify_one()函数的时候，就会唤醒 wait 函数，然后自动 lock 并继续下运行。</li>\n<li>wait 线程：当 condition 不满足的时候需要等待，直到条件满足了才做自己的事情。</li>\n<li>notify 线程：做完自己的事情后修改 condition 变量并唤醒等待线程。</li>\n<li>wait 时未持有锁，wait 之后占有锁</li>\n<li>wait 会先判断条件，如果满足，直接返回。</li>\n<li>wait_for() 解阻塞时获得 lock， 无论是 notify_all() 或 notify_one() 还是超时都会解阻塞。</li>\n<li><code>wait_for() 若经过 rel_time 时限后谓词 pred 仍求值为 false 则为 false ，否则为 true</code> 中途被通知后 pred 为 true 则直接返回 true，如果为 false，继续等待。</li>\n<li>先获得锁，再检测条件？</li>\n<li>解锁之后再 notify， 否则可能出现当前线程还未释放锁，被接收的线程被唤醒后拿不到锁立即就又休眠。</li>\n</ol>\n<h3 id=\"4-2-future\"><a href=\"#4-2-future\" class=\"headerlink\" title=\"4.2 future\"></a>4.2 future</h3><ol>\n<li>async（sender)函数是一种 promise,负责发送数据， future（receiver)负责接收数据。<code>future fut = async([]&#123;return 3+4;&#125;); cout &lt;&lt; fut.get() &lt;&lt; endl;</code></li>\n</ol>\n<h2 id=\"5-The-C-memory-model-and-operations-on-atomic-types\"><a href=\"#5-The-C-memory-model-and-operations-on-atomic-types\" class=\"headerlink\" title=\"5. The C++ memory model and operations on atomic types\"></a>5. The C++ memory model and operations on atomic types</h2><h3 id=\"5-1-内存模型\"><a href=\"#5-1-内存模型\" class=\"headerlink\" title=\"5.1 内存模型\"></a>5.1 内存模型</h3><h4 id=\"5-1-1-对象和内存模型\"><a href=\"#5-1-1-对象和内存模型\" class=\"headerlink\" title=\"5.1.1 对象和内存模型\"></a>5.1.1 对象和内存模型</h4><ol>\n<li>C++程序中数据都是由对象构成。</li>\n<li>每个变量都是对象</li>\n<li>每个对象至少占有一个内存位置。</li>\n</ol>\n<h4 id=\"5-1-2-对象，内存位置和并发\"><a href=\"#5-1-2-对象，内存位置和并发\" class=\"headerlink\" title=\"5.1.2 对象，内存位置和并发\"></a>5.1.2 对象，内存位置和并发</h4><ol>\n<li>当多个线程访问同一内存位置时，如果只读数据，不需要保护，如果有线程对数据进行修改，就可能会产生条件竞争。</li>\n<li>为了避免条件竞争，两个线程就要以一定的<code>顺序执行</code>。有两种方式：<code>互斥量</code>和<code>原子操作</code></li>\n</ol>\n<h3 id=\"5-2-原子操作和原子类型\"><a href=\"#5-2-原子操作和原子类型\" class=\"headerlink\" title=\"5.2 原子操作和原子类型\"></a>5.2 原子操作和原子类型</h3><ol>\n<li><code>原子操作</code>是不可分割的操作。系统的所有线程中，不可能观察到原子操作完成了一半，要么是做了，要么是没做，只有两种可能。非原子操作可能会被另一线程观察到只完成一半，如果是一个存储操作，那么其他线程看到的值，可能既不是存储前的值，也不是存储后的值。</li>\n<li>原子操作是一种操作（函数），互斥量（一种锁）是实现这种操作的一种方式。</li>\n</ol>\n<h4 id=\"5-2-1-标准的原子类型\"><a href=\"#5-2-1-标准的原子类型\" class=\"headerlink\" title=\"5.2.1 标准的原子类型\"></a>5.2.1 标准的原子类型</h4><ol>\n<li>标准的原子类型定义在头文件<code>&lt;atomic&gt;</code>中，这些类型操作都是原子的。</li>\n<li>可以使用互斥量来模拟原子操作。</li>\n<li>原子操作可以替代互斥量来完成同步操作。如果操作内部使用互斥量实现，那么不可能有性能提升，可以使用无锁数据结构来实现。</li>\n<li>通常标准的原子类型是不能进行拷贝和赋值的，他们没有拷贝构造函数和拷贝赋值函数。但是可以隐式的转化为内置类型进行赋值。</li>\n</ol>\n<h2 id=\"6-Designing-lock-based-concurrent-data-structures\"><a href=\"#6-Designing-lock-based-concurrent-data-structures\" class=\"headerlink\" title=\"6. Designing lock-based concurrent data structures.\"></a>6. Designing lock-based concurrent data structures.</h2><h2 id=\"7-Designing-lock-free-concurrent-data-structures\"><a href=\"#7-Designing-lock-free-concurrent-data-structures\" class=\"headerlink\" title=\"7. Designing lock-free concurrent data structures\"></a>7. Designing lock-free concurrent data structures</h2><h2 id=\"8-Designing-concurrent-code\"><a href=\"#8-Designing-concurrent-code\" class=\"headerlink\" title=\"8. Designing concurrent code\"></a>8. Designing concurrent code</h2><h2 id=\"9-Advanced-thread-managment\"><a href=\"#9-Advanced-thread-managment\" class=\"headerlink\" title=\"9. Advanced thread managment\"></a>9. Advanced thread managment</h2><h2 id=\"10-Parallel-algorithms\"><a href=\"#10-Parallel-algorithms\" class=\"headerlink\" title=\"10. Parallel algorithms\"></a>10. Parallel algorithms</h2><h2 id=\"11-Testing-and-debugging-multithreaded-applications\"><a href=\"#11-Testing-and-debugging-multithreaded-applications\" class=\"headerlink\" title=\"11. Testing and debugging multithreaded applications\"></a>11. Testing and debugging multithreaded applications</h2><h2 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h2><h3 id=\"什么是临界区\"><a href=\"#什么是临界区\" class=\"headerlink\" title=\"什么是临界区\"></a>什么是临界区</h3><ol>\n<li>临界区(critical section)是指包含有共享资源的一段代码，这些代码可能被多个线程访问 或修改。 临界区的存在就是为了保证当有一个线程在临界区内执行的时候，不能有其他任何 线程被允许在临界区执行。</li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Cpp","Concurrency"]},{"title":"Debug","url":"/2022/02/03/Cpp-debug/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li>(good)log 太多可以把 error 重定向到文件 <code>command 2&gt; error_log.txt</code></li>\n<li><code>std::numeric_limits&lt;float&gt;::max()</code> float 最大值</li>\n<li><code>-Wno-xxx</code> 不启动 xxx warning</li>\n<li><a href=\"https://www.cnblogs.com/suiyek/p/14164160.html\">gcc 编译阶段打印宏定义的内容</a></li>\n<li><a href=\"https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md\">100-gcc-tips</a></li>\n<li>没 link 报<code>undefined reference to</code>, link 但没 found <code>xxx was not found, cannot find xxx</code></li>\n<li><code>target_link_options(xxx PUBLIC -Wl,-unresolved-symbols=ignore-in-shared-libs)</code> 只要能找到 xxx 中的符号就行， link 的 shared lib 中未找到符号不报错， 忽略 link 的库解析，用于交叉编译，运行时能找到库</li>\n<li><a href=\"https://github.com/sharkdp/dbg-macro\">dbg-macro</a><ul>\n<li>灵感来源<a href=\"https://doc.rust-lang.org/std/macro.dbg.html\">rust !dbg</a></li>\n</ul>\n</li>\n<li>c++23 支持 stack trace <a href=\"https://en.cppreference.com/w/cpp/utility/basic_stacktrace\">basic_stacktrace</a><ul>\n<li><a href=\"https://github.com/bombela/backward-cpp\">backward-cpp</a></li>\n<li><a href=\"https://github.com/jeremy-rifkin/cpptrace\">cpptrace</a></li>\n<li><a href=\"https://www.boost.org/doc/libs/1_80_0/doc/html/stacktrace/getting_started.html\">boost stack trace</a></li>\n</ul>\n</li>\n<li>二进制依赖时， 需要先 find_package(glog REQUIRED), 否则<ul>\n<li>op PRIVATE 依赖 glog: undefined reference to 错误, 未传递出 glog 依赖 （静态链接的可以 PRIVATE 依赖)</li>\n<li>op PUBLIC 依赖 glog: target was not found 错误, 传递出 glog 依赖</li>\n</ul>\n</li>\n<li><code>gcc/g++  --verbose</code>显示编译过程<ul>\n<li><code>set(CMAKE_CXX_FLAGS &quot;--verbose&quot;) or -DCMAKE_CXX_FLAGS=&quot;--verbose&quot;</code> cmake 也可以显示编译信息； 比 <code>-DCMAKE_VERBOSE_MAKEFILE=ON</code> 显示更详细</li>\n</ul>\n</li>\n<li>strip 是一个在 Unix-like 操作系统中用于删除或剥离目标文件或对象文件的符号信息的工具。<ul>\n<li>删除符号表信息：符号表包含了源代码中的函数和变量的名称。</li>\n<li>删除调试信息：debug section 被删除</li>\n</ul>\n</li>\n<li>function tracing 只需要 symbols，不需要 debug symbols（gcc -g）。strip 之后不能跟踪</li>\n<li>动态符号（.dynsym）vs. 局部符号（.symtab）， .symtab 包含.dynsym; 可以用命令 strip 来手动去掉局部符号表， strip 前后用<code>readelf -s ./test</code>看, strip 只去除了.symtab</li>\n<li>strip 之后 gdb 不能使用 function 名字加断点</li>\n<li>strip 保留 symbol 文件，gdb 可使用 symbol-file 命令加载 symbol</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p symbol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历lib文件夹下的所有.so文件</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> lib/*.so*; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># 提取文件名（不包括路径和扩展名）</span></span><br><span class=\"line\">    filename=$(<span class=\"built_in\">basename</span> -- <span class=\"string\">&quot;<span class=\"variable\">$file</span>&quot;</span>)</span><br><span class=\"line\">    filename_no_ext=<span class=\"string\">&quot;<span class=\"variable\">$&#123;filename%.*&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 去除符号表并将其保存到symbol文件夹下</span></span><br><span class=\"line\">    strip -s -o symbol/<span class=\"string\">&quot;<span class=\"variable\">$filename_no_ext</span>.sym&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$file</span>&quot;</span></span><br><span class=\"line\">    strip -s <span class=\"string\">&quot;<span class=\"variable\">$file</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>debug info 作用：<ul>\n<li>将内存地址映射到具体某行源代码</li>\n<li>调用栈展开（stack unwinding）</li>\n</ul>\n</li>\n<li>在 C++中，如果函数有指定返回类型，但在实际代码中没有返回值或者在所有路径上都没有返回值，那么它的行为是未定义的（Undefined Behavior）。根据 C++标准，未定义的行为可能导致任何结果，包括程序崩溃、生成错误的结果或者在某些情况下看起来像是“正常工作”。</li>\n<li><code>addr2line</code>其功能是将函数地址解析成文件名或行号的工具。 <a href=\"https://cloud.tencent.com/developer/article/1974629\">addr2line debug</a></li>\n<li>查看 debug 模式：gdb <code>l</code> and <code>info source</code></li>\n<li><code>-DCMAKE_BUILD_TYPE=RelWithDebInfo</code> release 模式编译，带 debug info</li>\n<li><code>-DCMAKE_CXX_FLAGS=&quot;-g&quot;</code> cmake 编译选项添加 debug info； release 模式也适用</li>\n<li>gcc 选项顺序很重要，如果两个选项冲突，则以后一个为准。可以用<code>-O3 -fno-inline-functions</code>既使用-O3 的功能又关闭函数内嵌功能。</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol>\n<li>踩内存就指访问了不应该访问的内存地址</li>\n<li>火焰图可以看调用关系</li>\n<li>multidefination 可能是在头文件中定义了函数，多个文件 include 函数, 导致多重定义</li>\n<li>segmantation fault 和 bus error 均是内存地址访问导致的问题，<ul>\n<li>segmantation fault 是写了只读区域或访问了不能访问区域</li>\n<li>bus error 是访问地址未对齐</li>\n</ul>\n</li>\n<li><code>调试要用 debug 模式，性能测试用 release</code></li>\n<li>crash 排查:<ul>\n<li>引用空指针</li>\n<li>使用未初始化的内存</li>\n<li>释放后使用，也就是使用悬垂指针</li>\n<li>缓冲区溢出，比如数组越界</li>\n<li>非法释放已经释放过的或者未分配的指针</li>\n</ul>\n</li>\n<li>static 变量编译顺序，sample: dmlc 注册后处理函数时，如果注册分布在不同文件，需要先声明全局 static 变量后才能 register。 声明文件要在注册文件前执行。解决方法：专门找一个文件，先声明，后注册。</li>\n<li>debug 是编译 -DCMAKE_BUILD_TYPE&#x3D;Debug， 否则 gdb 显示信息不全</li>\n<li>export LD_LIBRARY_PATH&#x3D;xxxx:xxxx:xxx:$LD_LIBRARY_PATH, $LD_LIBRARY_PATH 放后面，否则容易链接到其他版本库</li>\n<li>因为 assert 是一种 debug 工具，而 release 不是 debug，所以不启用。</li>\n<li><code>NDEBUG</code> 这个编译宏可以控制是否启用 assert，如果定义了就不会执行</li>\n<li>debug 模式 assert 会出错， release 无问题，因为 assert 不起作用 <a href=\"https://murphypei.github.io/blog/2020/01/assert-debug-release\">link</a></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; ++i) &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> status = <span class=\"built_in\">do_something</span> ();</span><br><span class=\"line\">  <span class=\"built_in\">assert</span> (status == <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要写成这样</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; ++i)</span><br><span class=\"line\">  <span class=\"built_in\">assert</span> (<span class=\"built_in\">do_something</span> () == <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"未定义的行为\"><a href=\"#未定义的行为\" class=\"headerlink\" title=\"未定义的行为\"></a>未定义的行为</h2><ol>\n<li>行为<ul>\n<li>在函数中遗漏返回语句（如果函数声明了返回类型）</li>\n<li>读取或写入非法的内存地址</li>\n<li>整数除以零</li>\n<li>整数溢出</li>\n<li>对 null 指针进行解引用</li>\n<li>对已经释放的内存进行操作</li>\n</ul>\n</li>\n<li>结果<ul>\n<li>程序崩溃</li>\n<li>程序正常运行，但生成错误的结果</li>\n<li>程序看似正常运行，但在后台有潜在的错误或安全问题</li>\n<li>在不同的编译器、不同的平台或不同的编译器优化级别下，有不同的行为</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"debug-和-releae-模式行为不一致\"><a href=\"#debug-和-releae-模式行为不一致\" class=\"headerlink\" title=\"debug 和 releae 模式行为不一致\"></a>debug 和 releae 模式行为不一致</h2><p>C++在 Debug 和 Release 模式下运行不一致，可能由多种原因造成。以下是一些常见的原因：</p>\n<ol>\n<li><strong>未初始化的变量</strong>：在 Debug 模式下，一些编译器会自动初始化变量（如将指针设置为 null 或整数设置为零），但在 Release 模式下，编译器通常不会这么做。如果你的代码依赖于这些自动初始化的行为，那么在 Release 模式下可能会出现问题。</li>\n<li><strong>内存越界访问</strong>：Debug 模式通常包含额外的内存检查，例如检测数组越界访问。然而，Release 模式为了提高性能，通常不包含这些检查。如果你的代码中存在内存越界访问，可能在 Debug 模式下不会出现问题，但在 Release 模式下会导致各种未定义行为。</li>\n<li><strong>断言（assert）语句</strong>：断言在 Debug 模式下是启用的，可以帮助找出不满足预期条件的情况。但在 Release 模式下，为了提高性能，通常会禁用断言。因此，一些在 Debug 模式下由于断言而被发现的问题，在 Release 模式下可能会被忽视。</li>\n<li><strong>优化</strong>：Release 模式通常会开启更多的编译优化。这些优化有时可能会暴露出在 Debug 模式下不会出现的问题，特别是当代码包含未定义行为或者对于优化的假设不正确时。</li>\n<li><strong>多线程竞态条件</strong>：在 Debug 模式下，线程的调度和执行速度可能与 Release 模式有所不同。如果代码中存在依赖于特定线程执行顺序的竞态条件，这种条件在 Debug 模式下可能永远不会出现，但在 Release 模式下就可能出现。<br>要解决这种问题，首先需要确定问题出现的具体位置。然后，检查是否存在上述问题，如未初始化的变量、内存越界、断言、错误的编译优化假设或多线程竞态条件等。使用静态代码分析工具、动态内存检查工具或者并发问题检查工具等也可以帮助找出问题的原因。</li>\n</ol>\n<h2 id=\"对数\"><a href=\"#对数\" class=\"headerlink\" title=\"对数\"></a>对数</h2><ol>\n<li>opencv yml 文件</li>\n<li>python</li>\n<li>dump to file</li>\n<li>gdbserver + gdb + vscode</li>\n<li>gdb script to dump binary + tools(转为 float， 对比数值) 工具一键获取</li>\n<li>自动比对功能， <a href=\"https://github.com/Xilinx/Vitis-AI/blob/29c76cb5c29eaebb31c553572bbad56228b27c17/src/vai_runtime/vart/dpu-runner/src/dpu_runner_base_imp.cpp#L457\">ref</a></li>\n</ol>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><h3 id=\"链接错误\"><a href=\"#链接错误\" class=\"headerlink\" title=\"链接错误\"></a>链接错误</h3><ol>\n<li><a href=\"https://murphypei.github.io/blog/2019/06/link-sort\">C++ 链接库顺序导致的符号未定义问题</a></li>\n<li><code>nm -C _.a/_.so</code> 查看库里符号 <code>-C</code> Decode low-level symbol names into user-level names</li>\n<li>链接顺序： 从右到左</li>\n</ol>\n<h3 id=\"bus-error\"><a href=\"#bus-error\" class=\"headerlink\" title=\"bus error\"></a><code>bus error</code></h3><ol>\n<li><p>Bus errors are rare nowadays on x86 and occur when your processor cannot even attempt the memory access requested, typically:</p>\n<ul>\n<li>using a processor instruction with an address that does not satisfy its alignment requirements. such as: 0x000000003, 4Bytes 对齐</li>\n</ul>\n</li>\n<li><p>A bus error is trying to access memory that <code>can&#39;t possibly be there</code>. You’ve used an address that’s meaningless to the system, or the wrong kind of address for that operation.</p>\n</li>\n<li><p>x86 机器不设置就不会 bus_error <a href=\"https://stackoverflow.com/a/8412760\">link</a></p>\n</li>\n</ol>\n<h3 id=\"segmentation-fault\"><a href=\"#segmentation-fault\" class=\"headerlink\" title=\"segmentation fault\"></a><code>segmentation fault</code></h3><ol>\n<li>Segmentation faults occur when accessing memory which does not belong to your process. They are very common and are typically the result of:<ul>\n<li>using a pointer to something that was deallocated.</li>\n<li>using an uninitialized hence bogus pointer.</li>\n<li>using a null pointer.</li>\n<li>overflowing a buffer.</li>\n</ul>\n</li>\n<li>A segfault is accessing memory that you’re <code>not allowed to access</code>. It’s read-only, you don’t have permission, etc…</li>\n<li>主要与指针相关值相关, 未初始化，初始化为 nullptr</li>\n</ol>\n<h3 id=\"file-leak-Too-many-open-files\"><a href=\"#file-leak-Too-many-open-files\" class=\"headerlink\" title=\"file leak: Too many open files\"></a>file leak: <code>Too many open files</code></h3><ol>\n<li>file leak, not close</li>\n<li><code>watch cat /proc/sys/fs/file-nr</code> get the current number of open files</li>\n<li>find open files limit per process: <code>ulimit -n</code></li>\n<li>count all opened files by all processes: <code>lsof | wc -l</code></li>\n<li>get maximum allowed number of open files: <code>cat /proc/sys/fs/file-max</code></li>\n<li><code>lsof -u xiyang.jia | wc -l</code> or <code>lsof | wc -l</code> to see how many files are open.</li>\n<li>Please note that <code>lsof | wc -l</code> sums up a lot of duplicated entries (forked processes can share file handles etc).<br>That number could be much higher than the limit set in <code>/proc/sys/fs/file-max</code>.<br>To get the current number of open files from the Linux kernel’s point of view, do this:<br><code>cat /proc/sys/fs/file-nr</code><br>Example: This server has 40096 out of max 65536 open files, although lsof reports a much larger number:</li>\n</ol>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"># cat <span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/fs/</span><span class=\"keyword\">file</span>-max</span><br><span class=\"line\"><span class=\"number\">65536</span></span><br><span class=\"line\"># cat <span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/fs/</span><span class=\"keyword\">file</span>-nr</span><br><span class=\"line\"><span class=\"number\">40096</span>   <span class=\"number\">0</span>       <span class=\"number\">65536</span></span><br><span class=\"line\"># lsof | wc -l</span><br><span class=\"line\"><span class=\"number\">521504</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"libs\"><a href=\"#libs\" class=\"headerlink\" title=\"libs\"></a>libs</h2><h3 id=\"errno\"><a href=\"#errno\" class=\"headerlink\" title=\"errno\"></a>errno</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> fp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;/sys/class/gpio/gpio3/value&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!fp) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">LOG</span>(INFO) &lt;&lt; <span class=\"string\">&quot;strerror(errno)=&quot;</span> &lt;&lt; <span class=\"built_in\">strerror</span>(errno);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>NOTE: errno is key word, should not use be a variable</li>\n<li>errno is a preprocessor macro used for error indication</li>\n</ol>\n<h3 id=\"errno-command\"><a href=\"#errno-command\" class=\"headerlink\" title=\"errno command\"></a>errno command</h3><ol>\n<li><code>sudo apt install errno</code></li>\n<li>errno -l</li>\n</ol>\n<h2 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h2><ol>\n<li><code>cat /proc/xxxx/status</code> 查看进程信息</li>\n</ol>\n<h2 id=\"crash-命令\"><a href=\"#crash-命令\" class=\"headerlink\" title=\"crash 命令\"></a>crash 命令</h2><h2 id=\"lldb\"><a href=\"#lldb\" class=\"headerlink\" title=\"lldb\"></a><a href=\"https://lldb.llvm.org/\">lldb</a></h2><ol>\n<li><a href=\"https://lldb.llvm.org/use/map.html\">GDB to LLDB command map</a></li>\n</ol>\n<h2 id=\"GDB-使用\"><a href=\"#GDB-使用\" class=\"headerlink\" title=\"GDB 使用\"></a><a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb.html/\">GDB 使用</a></h2><ol>\n<li><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/break-on-entry.html\">100 个小技巧</a></li>\n<li><a href=\"https://github.com/hellogcc/100-gdb-tips\">100-gdb-tips</a></li>\n<li><a href=\"https://johnysswlab.com/gdb-a-quick-guide-to-make-your-debugging-easier/\">gdb-a-quick-guide-to-make-your-debugging-easier</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/336922639\">原理</a></li>\n<li><a href=\"https://www.yanbinghu.com/2019/04/20/41283.html\">入门指南</a></li>\n<li><a href=\"http://users.ece.utexas.edu/~adnan/gdb-refcard.pdf\">cheatsheet</a></li>\n</ol>\n<h3 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h3><ol>\n<li><code>(good) generate-core-file or gcore</code> 让被调试的进程产生 core dump 文件，记录现在进程的状态，以供以后分析; <code>gdb &lt;program&gt; &lt;core_file&gt;</code> or <code>gdb &lt;porgam&gt; =&gt; core &lt;core_file&gt;</code></li>\n<li><code>gcore $(pidof processname)</code> 命令行直接执行产生 coredump <code>-a</code>产生更详细信息</li>\n<li><code>directory dir</code> 设置源文件查找路径(类似 include，设置到最后一级, 适合找单一文件, 或者把所有文件放到一个文件夹里)</li>\n<li><code>(good) set substitute-path /from /to</code> 映射源码位置， <code>show substitute-path</code>查看映射表,<code>info sources</code>查看源码路径 <code>info source</code>查看 Compilation directory</li>\n<li><code>(good) info proc all</code> 查看当前进程各种信息，包括 pid， 调试的命令, 是否 coredump, threads nums 等</li>\n<li><code>set step-mode on</code>默认情况下，gdb 不会进入不带调试信息的函数。可以执行<code>set step-mode on</code>命令，这样 gdb 就不会跳过没有调试信息的函数, 可以使用调试汇编程序的办法去调试函数</li>\n<li><code>info functions add</code> 列出 add 函数</li>\n<li>dump binary memory max_scores_dump.bin max_scores_vec.data() max_scores_vec.data()+max_scores_vec.size() 保存内存内容到文件, 可以配合脚本 dump 文件</li>\n<li>show env and show path 查看环境变量和 path</li>\n<li>gdb 调试时打不上断点，要使用 LD_PRELOAD 先加载动态库，找不到文件所在动态库，使用 speedscope</li>\n<li>sharedlibrary libxxx.so 加载库 libxxx.so</li>\n<li>help or help xxx 查看帮助</li>\n<li><code>set logging file xxx; set trace-commands on;set logging on</code> 保存 log</li>\n<li><code>start</code> 自动停止到 main</li>\n<li>until or u 函数里运行到第几行， 比打断点再运行效率高很多</li>\n<li>i b, i s, i w</li>\n<li>i locals or i lo 打印局部变量(i 不能打印单独变量)</li>\n<li>bt full or i s full 显示各个函数的局部变量值</li>\n<li>p xx 打印单个变量</li>\n<li><code>x/40i 0x400000</code> <code>disassemble 0x4004e9,0x40050c</code> 查看.text 反汇编内容， i 表示 instruction。<code>info files</code>查看.text 地址</li>\n<li>x [&#x2F;Nuf ] expr: examine memory at address expr; 打印内存</li>\n<li>x&#x2F;12wf &amp;test[0]: 打印 test 开始 12 个 float 内存</li>\n<li>x&#x2F;16gf Q.data 打印 double</li>\n<li>x&#x2F;12bx 打印二进制, 方便对数</li>\n<li>x&#x2F;12bu 打印二进制, 8 位无符号</li>\n<li>display expr: show value of expr each time program stops</li>\n<li>set print pretty on 打印 class， 一个变量一行</li>\n<li>i functions</li>\n<li><code>frame</code> 查看当前运行堆栈, 包含运行哪一行, bt 之后可以回溯栈上变量</li>\n<li><code>up n or down n</code> 命令向上或向下选择函数堆栈帧，其中 n 是层数</li>\n<li>c-x a 可以快速看哪一行，再按一遍</li>\n<li>bt 可以显示运行到哪一行, l -1 或 l +1 显示当前行前后代码, l function</li>\n<li>b Foo::Foo 构造函数打断点</li>\n<li>b *0x1111 地址打断点</li>\n<li>save breakpoints test.bk &amp;&amp; source test.bk 保存和加载断点</li>\n<li>在程序入口处打断点, 先 readelf -h xxx 读入口地址，然后 b * 设置断点 <a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/break-on-entry.html\">link</a>, 火焰图也可以看调用关系</li>\n<li><code>info files</code> 获取各 section 地址</li>\n<li>info files 获取入口地址，b *地址或 b _start</li>\n<li><code>info proc mappings</code> 查看进程的内存映射信息, 配合 info files 使用</li>\n<li>info sources 获取源码路径, 可用于 debug 具体使用到的头文件， 如 json 使用系统默认，未使用 cpm 依赖的<ul>\n<li>gcc -H 编译选项可以列出来用到的头文件 <a href=\"https://stackoverflow.com/a/60570938\">link</a></li>\n</ul>\n</li>\n<li>(good)<code>i source</code> 列出<code>当前文件</code>各种信息，包括编译选项，路径等</li>\n<li>b _start 然后 ni 看指令执行</li>\n<li>shell ls 或 !ls 在 gdb 中执行 shell 命令</li>\n<li>whatis xxx 打印变量类型，</li>\n<li>ptype xxx or pt xxx 打印详细信息，xxx 可以是变量也可以是类型名</li>\n<li>ptype + p sizeof() 查看类型占内存大小</li>\n<li>p object 直接打印对象，可以看出具体内存分配</li>\n<li>gdb -x gdb-script.txt –args .&#x2F;my_program<br>or (gdb) source gdb-script.txt 执行命令集合</li>\n<li>脚本里#号是注释</li>\n<li>set var x &#x3D; value 程序运行可设置变量值</li>\n</ol>\n<h3 id=\"图形化\"><a href=\"#图形化\" class=\"headerlink\" title=\"图形化\"></a>图形化</h3><ol>\n<li><code>(good)gdb -tui program</code>，或者运行 gdb 过程中使用<code>C-x a</code>组合键, 使用图形界面输出历史会不好查看</li>\n<li><code>layout split or c-x 2</code> 如果既想显示源代码，又想显示汇编代码</li>\n<li><code>layout asm</code>显示汇编</li>\n<li><code>layout regs</code>显示寄存器</li>\n<li>winheight src -5 调整窗口</li>\n</ol>\n<h3 id=\"shoart-key\"><a href=\"#shoart-key\" class=\"headerlink\" title=\"shoart key\"></a><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Keys.html\">shoart key</a></h3><ol>\n<li>C-x s <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Single-Key-Mode.html#TUI-Single-Key-Mode\">single mode</a></li>\n<li>C-x o Change the active window.</li>\n<li>c-n c-p next&#x2F;previous history</li>\n</ol>\n<h3 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h3><ol>\n<li>show endian 查看大小端</li>\n<li>特别是当你在构建环境(build 目录)下调试程序的时候，可以直接运行 make：</li>\n<li>set var a &#x3D; 1 改变变量值</li>\n<li>p func2::b 打印 func2 函数中变量 b 值</li>\n<li>p ‘static-1.c’::var 打印文件中的变量</li>\n<li>i files 查看程序 elf 信息</li>\n<li>print sizeof(Type) 打印变量或类型占用内存 size</li>\n<li>.gdbinit gdb 配置文件</li>\n<li>编译要加 -g <a href=\"https://zhuanlan.zhihu.com/p/74897601\">link</a></li>\n<li>readelf -S xxx|grep debug 查看有没有 debug 段</li>\n<li>file xxx 查看有没有 stripped (编译不能加 -s), 也可以看到有没有 debug</li>\n<li>-fkeep-inline-functions 调试内联，编译的程序会变大很多</li>\n<li>set logging file log.txt, set logging on, set logging overwrite on 记录执行 log</li>\n<li>gdb -q 启动时不显示版本等信息</li>\n<li>gdb –args xxx … &amp;&amp; r 或 gdb xxx &amp;&amp; set args … &amp;&amp; r 或 gdb xxx &amp;&amp; r …</li>\n<li>show env xxx 显示环境变量</li>\n<li>bt 或 i s(info stack) 显示程序栈 backtrace</li>\n<li>l 或 l + 向下显示源码， l - 向上显示源码，l 1,100 打印 1 到 100 行， l xxx:10 显示文件 xxx 第 10 行, l funciton 显示函数，</li>\n<li>bt 可以显示运行到哪一行, l -1 或 l +1 显示当前行前后代码</li>\n<li>step&#x2F;finish 进入&#x2F;返回函数 <a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/finish-and-return.html\">link</a></li>\n<li>tb 如果想让断点只生效一次，可以使用“tbreak”命令</li>\n<li>source script 执行脚本中的命令</li>\n<li>p&#x2F;x c 十六进制打印</li>\n<li>d 删除所有断点</li>\n<li>watch expr</li>\n<li>set print array-indexes on 打印数组下标</li>\n<li>i args 显示函数参数</li>\n<li>i locals 打印局部变量</li>\n<li>i sharedlibrary 显示共享链接库</li>\n<li>whatis xxx 打印变量类型， ptype xxx 打印详细信息，</li>\n<li>set history filename ~&#x2F;.gdb_history， set history save on 保存历史</li>\n<li>shell ls 或 !ls 在 gdb 中执行 shell 命令</li>\n<li>可以直接执行 cd 和 pwd</li>\n<li>远程调试：</li>\n<li>emacs gdb-many-window, gdb 多窗口调试</li>\n</ol>\n<h3 id=\"汇编调试\"><a href=\"#汇编调试\" class=\"headerlink\" title=\"汇编调试\"></a><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/patch-program.html\">汇编调试</a></h3><ol>\n<li>trick: <code>layout split</code> &#x3D;&gt; <code>layout regs</code> &#x3D;&gt; <code>info files</code> &#x3D;&gt; <code>b *start_adress</code> &#x3D;&gt; <code>ni</code> 一步一步查看寄存器</li>\n<li><code>ni</code> 下一条汇编指令</li>\n<li><code>si</code> step by machine instructions rather than source lines</li>\n<li><code>disassemble</code> 显示汇编</li>\n<li><code>disassemble /m main</code> 将函数代码和汇编指令映射起来</li>\n<li><code>disassemble /r main</code> 添加 16 进制信息</li>\n<li><code>disassemble /mr main</code></li>\n<li><code>set disassemble-next-line on</code> 显示下一条汇编</li>\n<li><code>display /3i $pc</code> 显示 pc 对应的后 3 条汇编指令, 一直显示<code>d display</code>删除</li>\n<li><code>i line 13</code> 显示汇编地址</li>\n<li><code>disassemble 0x4004e9,0x40050c</code>根据地址显示汇编</li>\n<li><code>disassemble [Start],[End]</code></li>\n<li><code>disassemble [Function],+[Length]</code> 配合<code>info functions</code>使用</li>\n<li><code>disassemble [Address],+[Length]</code></li>\n<li><code>b *main+12</code>函数偏移来打断点</li>\n<li><code>p $pc</code>显示 PC 值</li>\n<li><code>set var $pc=0x11111</code>设置 PC 值 or <code>jump line or jump *address</code></li>\n<li><code>set write on</code> and <code>disassemble /mr drawing</code> and <code>set variable *(short*)0x400651=0x0ceb</code> 修改二进制</li>\n<li><code>info registers </code> or <code>info all-registers</code> all 也显示向量寄存器</li>\n</ol>\n<h3 id=\"gdbinit\"><a href=\"#gdbinit\" class=\"headerlink\" title=\"~&#x2F;.gdbinit\"></a><a href=\"https://github.com/gdbinit/Gdbinit/blob/master/gdbinit\">~&#x2F;.gdbinit</a></h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保存历史命令</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> history filename ~/.gdb_history</span><br><span class=\"line\"><span class=\"built_in\">set</span> history save on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出时不显示提示信息</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> confirm off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照派生类型打印对象</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"built_in\">print</span> object on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印数组的索引下标</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"built_in\">print</span> array-indexes on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每行打印一个结构体成员</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"built_in\">print</span> pretty on</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"funcutions\"><a href=\"#funcutions\" class=\"headerlink\" title=\"funcutions\"></a>funcutions</h3><ol>\n<li>gcc 自带 python stdlib 支持: 非常有用</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, glob.glob(<span class=\"string\">&#x27;/usr/share/gcc/python&#x27;</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">from</span> libstdcxx.v6.printers <span class=\"keyword\">import</span> register_libstdcxx_printers</span><br><span class=\"line\">register_libstdcxx_printers (<span class=\"literal\">None</span>)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/print-STL-container.html\">打印 c++容器</a></li>\n<li><a href=\"https://stackoverflow.com/a/25499805\">print vector</a></li>\n</ol>\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><ol>\n<li>gdb attach [pid], 如果卡死另外一个窗口打开</li>\n<li>info threads</li>\n<li>thread <thread id> 查看出问题 thread</li>\n<li>bt</li>\n<li>thread apply all bt 打印所有线程信息</li>\n<li>thread apply 1-2 bt 打印线程 1-2 堆栈信息</li>\n</ol>\n<h3 id=\"gdbserver\"><a href=\"#gdbserver\" class=\"headerlink\" title=\"gdbserver\"></a>gdbserver</h3><ol>\n<li><code>gdbserver --multi  :2000 ./test1</code>可以多次运行程序</li>\n<li><code>gdbserver --once  :2000 ./test1</code> 运行一次就退出</li>\n<li><code>gdbserver --attach  :2000 &lt;pid&gt;</code> 运行一次就退出</li>\n<li>why? 编译信息和路径都在 host 端，板端源码路径会有问题, 比如只读系统</li>\n<li>on client: <code>gdbserver :8000 ./test &lt;args&gt;</code></li>\n<li>on host: <code>gdb: target remote &lt;ip&gt;:8000</code></li>\n<li>c 开始，不能用 s</li>\n<li>跨平台使用 gdb-multiarch， 或找相同 aarch 开开发机， cgdb 无 gdb-mutltiarch</li>\n<li>host 有源码就行, target 端不需要源码</li>\n<li>detach 断开链接</li>\n<li>jump _start 重新执行</li>\n<li>First, you need to have a copy of the program you want to debugput onto the target system. The program can be stripped to savespace if needed, as gdbserver doesn’t care about symbols. All symbol handling is taken care of by the GDB running on the host system.</li>\n</ol>\n<h2 id=\"gdbgui\"><a href=\"#gdbgui\" class=\"headerlink\" title=\"gdbgui\"></a><a href=\"https://github.com/cs01/gdbgui\">gdbgui</a></h2><ol>\n<li>可以绘图： expression， 记录历史值</li>\n<li>memory view</li>\n<li><code>sudo pip install gdbgui</code></li>\n<li><code>gdbgui -g gdb-multiarch</code> 使用 gdbserver</li>\n<li><code>--port</code>可能不好使</li>\n<li>vnc 下调试用, 不是很流程</li>\n<li><code>gdbgui --port 8080 --gdb-cmd=&quot;gdb -x gdbcmds.txt&quot;</code></li>\n</ol>\n<h2 id=\"seer\"><a href=\"#seer\" class=\"headerlink\" title=\"seer\"></a><a href=\"https://github.com/epasveer/seer\">seer</a></h2><h2 id=\"gdb-dashboard\"><a href=\"#gdb-dashboard\" class=\"headerlink\" title=\"gdb-dashboard\"></a><a href=\"https://github.com/cyrus-and/gdb-dashboard\">gdb-dashboard</a></h2><ol>\n<li><code>wget -P ~ https://git.io/.gdbinit</code> 只需要配置文件</li>\n<li><code>help dashboard</code></li>\n<li><code>dashboard xxx</code> 可以选择打开和关闭 item 显示</li>\n<li><code>dashboard</code> 到 dashboard</li>\n<li><code>dashboard -layout !assembly breakpoints !expressions !history !memory !registers source stack threads variables</code></li>\n<li>竖屏显示会非常有用</li>\n</ol>\n<h2 id=\"rr\"><a href=\"#rr\" class=\"headerlink\" title=\"rr\"></a><a href=\"https://github.com/rr-debugger/rr\">rr</a></h2><ol>\n<li>gdb 回放</li>\n</ol>\n<h2 id=\"vscode-C-调试\"><a href=\"#vscode-C-调试\" class=\"headerlink\" title=\"vscode C++调试\"></a>vscode C++调试</h2><ol>\n<li>打不上断点，看下 info sharedlibrary 是否加载， Syms Read 是否为 yes, 注意配置文件中的 cwd 路径, 要与 board 板子上库的相对位置路径一致</li>\n<li><a href=\"https://excalidraw.com/#json=5TP0xwb0oD-C3RgVJIvjW,YzWZI8S8UEP_-nFMxL-rxA\">vscode gdb gdbserver 关系</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/cpp/launch-json-reference#_sourcefilemap\">source file map</a> 用于 gdbserver, 指定源码位置</li>\n<li>安装 c&#x2F;c++插件</li>\n<li><a href=\"https://code.visualstudio.com/docs/cpp/config-linux\">教程</a> 生成 task.json（编译) 和 lauch.json (执行)</li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/debugging\">debug 教程</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/getstarted/settings\">settings 配置</a></li>\n<li>.vscode 配置文件下可以改 build 和执行 exe</li>\n<li>cmake 工程使用：命令来编译， lauch.json 配置执行环境</li>\n<li><a href=\"https://blog.csdn.net/u014552102/article/details/122793256\">VsCode + gdb + gdbserver 远程调试 C++程序</a><ul>\n<li>其中”program”是要被调试的程序在 vmware 中的路径 程序要和板子上一致</li>\n<li>“cmd”是要被调试的程序在 vmware 中的目录</li>\n<li>“miDebuggerPath” 是我们刚刚编译出来的 aarch64-buildroot-linux-gnu-gdb 在 vmware 中的路径</li>\n<li>“miDebuggerServerAddress”对应我们刚刚在板子上执行的 gdbserver 指令</li>\n</ul>\n</li>\n<li>注意不同 arch 要用 gdb-multiarch</li>\n<li>C-S-d 快速 debug</li>\n<li>debug console 中可以输入命令：<code>-exec info registers</code></li>\n<li>gcc c++ stl 支持： <code>/usr/share/gcc/python/libstdcxx</code>, 需配置.gdbinit</li>\n<li>debug 点到变量上就会有值输出</li>\n<li>可以选择 stack，看改 stack 各变量值</li>\n<li>terminal 下使用 tmux，否则容易断开</li>\n<li>可以配置 compile_commands.json</li>\n<li>配置快捷键，左手单独操作</li>\n<li><code>open disassembly view</code>打开汇编窗口</li>\n<li>选中字符 然后 add to watch</li>\n<li>debug variables 如果嵌套比较深，可以用<code>-exec print xxx</code>来看结果</li>\n<li><code>Debug: start without debugging</code> debug 模式不进入断点，直接运行</li>\n<li><code>Debug: run to cursor</code> 运行到当前 cursor</li>\n<li><code>Debug: add logpoint</code>研究一下</li>\n<li><code>compile_commands.json</code> 可以精准跳转，能帮助定位编译中的问题，如：json 头文件找错地方， 多重 include<ul>\n<li>也可以先编译一个 debug 程序 gdb info sources 看具体用到了哪个路径下的文件。</li>\n</ul>\n</li>\n<li>通过命令行 <code>-exec p xxx</code> 来完全显示变量</li>\n<li>先打开 log， 然后执行命令，关闭 log， 搜索 <a href=\"https://stackoverflow.com/a/41965636\">link</a></li>\n</ol>\n<h3 id=\"debug-console\"><a href=\"#debug-console\" class=\"headerlink\" title=\"debug console\"></a>debug console</h3><ol>\n<li>可以输入 gdb 命令，加<code>-exec</code></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/debugging\">intro</a></li>\n<li>可以进行算术运算</li>\n<li>可以直接输入变量名</li>\n</ol>\n<h2 id=\"emacs-gdb-使用\"><a href=\"#emacs-gdb-使用\" class=\"headerlink\" title=\"emacs gdb 使用\"></a>emacs gdb 使用</h2><ol>\n<li>emacs gdb-many-window, gdb 多窗口调试</li>\n<li>M-x gdb-many-windows and then gdb</li>\n<li>If the variable gdb-many-windows is nil (the default), M-x gdb normally displays only the GUD interaction buffer.</li>\n<li>NOTE: -g and not -O3(优化会跳过某些代码)</li>\n<li>gdb reload file: <code>file build/test</code> 不用重新加载， r 时自动重新加载。</li>\n</ol>\n<h2 id=\"cgdb\"><a href=\"#cgdb\" class=\"headerlink\" title=\"cgdb\"></a><a href=\"https://github.com/cgdb/cgdb.git\">cgdb</a></h2><ol>\n<li><p><a href=\"https://cgdb.github.io/docs/CGDB-Mode.html#CGDB-Mode\">快捷键</a></p>\n</li>\n<li><p>esc 源码 i gdb commond</p>\n</li>\n<li><p><code>esc s</code> scroll mode in the GDB mode.</p>\n</li>\n<li><p>o open the file dialog. debug 编译用到的所有源码，可用于定位头文件路径问题, 与<code>info sources</code>列出的文件相同，不过每行一个文件，更方便看</p>\n</li>\n<li><p><a href=\"http://cgdb.github.io/\">web</a></p>\n</li>\n<li><p>两个窗口，一个显示源码，一个显示 gdb 信息.</p>\n</li>\n<li><ul>\n<li><ul>\n<li>调整窗口</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h2><ol>\n<li>strace - trace system calls and signals</li>\n<li><code>strace -f -e file perf report 2&gt;&amp;1 | grep tips.txt</code> 可用于定位问题</li>\n<li><code>strace -p $pid</code> 跟踪正在运行的进程</li>\n</ol>\n<h2 id=\"Sanitizers\"><a href=\"#Sanitizers\" class=\"headerlink\" title=\"Sanitizers\"></a><a href=\"https://github.com/google/sanitizers\">Sanitizers</a></h2><ol>\n<li><a href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\">ThreadSanitizer</a><ul>\n<li>出错了会有两个线程信息，看信息对应的源码可以看到 data race 位置</li>\n<li><a href=\"https://github.com/google/sanitizers/wiki/ThreadSanitizerDetectableBugs\">bug 类型</a></li>\n<li><a href=\"https://github.com/google/sanitizers/wiki/ThreadSanitizerReportFormat\">输出信息说明</a></li>\n</ul>\n</li>\n<li>To enable continue-after-error, compile with <code>-fsanitize-recover=address</code> and then run your code with <code>ASAN_OPTIONS=halt_on_error=0</code>. <a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizer#faq\">link</a></li>\n<li><a href=\"https://developers.redhat.com/blog/2021/05/05/memory-error-checking-in-c-and-c-comparing-sanitizers-and-valgrind\">Memory error checking in C and C++: Comparing Sanitizers and Valgrind</a></li>\n<li>sanitizer 消毒剂</li>\n<li>tools<ul>\n<li>AddressSanitizer (detects addressability issues) and LeakSanitizer (detects memory leaks)</li>\n<li>ThreadSanitizer (detects data races and deadlocks) for C++ and Go</li>\n<li>MemorySanitizer (detects use of uninitialized memory)</li>\n<li>HWASAN, or Hardware-assisted AddressSanitizer, a newer variant of AddressSanitizer that consumes much less memory</li>\n<li>UBSan, or UndefinedBehaviorSanitizer</li>\n</ul>\n</li>\n<li><code>-fsanitize=thread</code> 多线程数据竞争编译之后运行会报警告 <a href=\"https://github.com/jiaxiyang/cpp_sandbox/blob/d2e077877f1a3dae47215540429b679bcf032c54/concurrency/atomic/atomic1.cpp\">sample</a></li>\n<li><code>-DCMAKE_CXX_FLAGS=&quot;-fsanitize=address(thread) -g -lasan(-static-libasan)&quot;</code> cmake 编译选项, 加了-lasan 就不需要 LD_PRELOAD</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">LD_PRELOAD</span>=libasan.so</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cmake address</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(WITH_COMPILER_ASAN)</span><br><span class=\"line\">    <span class=\"keyword\">add_compile_options</span>(-fsanitize=address)</span><br><span class=\"line\">    <span class=\"keyword\">link_libraries</span>(asan)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>(WITH_COMPILER_ASAN)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"core-dump\"><a href=\"#core-dump\" class=\"headerlink\" title=\"core dump\"></a><a href=\"https://www.jianshu.com/p/e38a3f1cf7f7\">core dump</a></h2><ol>\n<li><code>(good) generate-core-file or gcore</code> 让被调试的进程产生 core dump 文件，记录现在进程的状态，以供以后分析; <code>gdb &lt;program&gt; &lt;core_file&gt;</code> or <code>gdb &lt;porgam&gt; =&gt; core &lt;core_file&gt;</code></li>\n<li>当程序意外终止时，系统将进程的地址空间内容及终止时的一些信息转存到 core 文件里。</li>\n<li><code>file core.xxx</code>: ELF 64-bit LSB core file</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">ulimit</span> -c unlimited</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">ulimit</span> -a</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/kernel/core_uses_pid</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/tmp/core_%t_%p&#x27;</span> &gt; /proc/sys/kernel/core_patter</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">gdb ./build/heimdallr-app /tmp/core_1643444420_1426</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">bt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">info frame</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">p symbol</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">多线程</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">info threads</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">thread apply all bt</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"drmemory\"><a href=\"#drmemory\" class=\"headerlink\" title=\"drmemory\"></a><a href=\"https://github.com/DynamoRIO/drmemory\">drmemory</a></h2><h2 id=\"Valgrind\"><a href=\"#Valgrind\" class=\"headerlink\" title=\"Valgrind\"></a><a href=\"http://senlinzhan.github.io/2017/12/31/valgrind/\">Valgrind</a></h2><ol>\n<li>Release 模式快很多</li>\n<li><a href=\"https://valgrind.org/docs/manual/faq.html\">常见问题</a></li>\n<li><a href=\"https://valgrind.org/docs/manual/quick-start.html\">quick start</a></li>\n<li><a href=\"https://valgrind.org/docs/manual/manual.html\">manual</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42144707/article/details/117642613?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-117642613-blog-126759520.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-117642613-blog-126759520.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=1\">内存泄漏解释</a></li>\n<li><a href=\"https://valgrind.org/docs/manual/mc-manual.html#mc-manual.errormsgs\">错误解释</a></li>\n<li><a href=\"https://learnku.com/articles/46663\">工具解释</a></li>\n<li><a href=\"https://blog.csdn.net/jinzeyu_cn/article/details/45969877\">DEBUG 神器 valgrind 之 memcheck 报告分析</a></li>\n<li>编译程序时，需要加上-g 选项</li>\n<li><code>sudo apt-get install libc6-dbg</code> # system libs should not stripped</li>\n<li>编译加<code>-g</code>没有调试信息需要安装<code>valgrind-dbg</code></li>\n<li><code>--num-callers=10</code>调整 stack size</li>\n<li><code>LD_PRELOAD=xxxx.so or --keep-debuginfo=yes</code> 定位 so 中的内存泄漏 <a href=\"https://stackoverflow.com/a/13136609\">link</a></li>\n</ol>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">wget ftp://sourceware.org/pub/valgrind/valgrind-3.13.0.tar.bz2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">bzip2 -d valgrind-3.13.0.tar.bz2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">tar -xf valgrind-3.13.0.tar</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> valgrind-3.13.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">./configure &amp;&amp; make</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">sudo make install</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">交叉编译: NOTE: 开发板上路径要与--prefix安装路径一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">export</span> CC=/opt/gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">export</span> CXX=/opt/gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-g++</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">export</span> LD=/opt/gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-ld</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">export</span> AR=/opt/gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-ar</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">export</span> CPP=/opt/gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> valgrind-3.13.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">./configure --host=aarch64-linux-gnu --target=aarch64-linux-gnu --prefix=/userdata/valgrind CFLAGS=-static</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">make -j8</span></span><br><span class=\"line\"><span class=\"meta prompt_\">% </span><span class=\"language-bash\">sudo make install</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h3><ol>\n<li><code>valgrind --log-file=test_memcheck.log --tool=memcheck --leak-check=full ls</code> : no summary</li>\n<li><code>valgrind --log-file=test_memcheck.log --leak-check=full ls</code> 只显示 submary</li>\n<li><code>valgrind --log-file=test_memcheck.log --leak-check=full --show-leak-kinds=all ls</code> 显示详细内容</li>\n</ol>\n<h2 id=\"procrank\"><a href=\"#procrank\" class=\"headerlink\" title=\"procrank\"></a>procrank</h2><ol>\n<li>VSS - Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</li>\n<li>RSS - Resident Set Size 实际使用物理内存（包含共享库占用的内存）</li>\n<li>PSS - Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）</li>\n<li>USS - Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）</li>\n</ol>\n<h2 id=\"jeprof\"><a href=\"#jeprof\" class=\"headerlink\" title=\"jeprof\"></a><a href=\"https://phantom9999.github.io/posts/361305b0.html\">jeprof</a></h2><ol>\n<li><a href=\"https://www.yuanguohuo.com/2019/01/02/jemalloc-heap-profiling/\">jemalloc 的 heap profiling</a></li>\n<li><a href=\"https://juejin.cn/post/7041453881255018504\">jemalloc 检查 c++服务内存泄漏</a></li>\n<li>内存增长不一定是代码里 new 了没有 delete 造成内存泄漏，还可能是消费能力不足导致内存堆积</li>\n<li>如果发现某数据结构内存增加，多在日志中打印其 size 看看</li>\n</ol>\n<h2 id=\"Static-application-security-testing-SAST-静态扫描工具\"><a href=\"#Static-application-security-testing-SAST-静态扫描工具\" class=\"headerlink\" title=\"Static application security testing (SAST) 静态扫描工具\"></a>Static application security testing (SAST) 静态扫描工具</h2><ol>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C,_C++\">lists</a></li>\n<li><a href=\"https://blog.csdn.net/u013377887/article/details/108651945\">C++静态检查工具总结</a></li>\n</ol>\n<h3 id=\"lint\"><a href=\"#lint\" class=\"headerlink\" title=\"lint\"></a><a href=\"https://blog.csdn.net/you_shou/article/details/51199293\">lint</a></h3><ol>\n<li>在计算机科学中，lint 是一种工具程序的名称，它用来标记源代码中，某些可疑的、不具结构性（可能造成 bug）的段落。它是一种静态程序分析工具，最早适用于 C 语言，在 UNIX 平台上开发出来。后来它成为通用术语，可用于描述在任何一种计算机程序语言中，用来标记源代码中有疑义段落的工具。</li>\n<li>apt search lint 可以搜索各种 lint， 如 shellcheck， yamllint</li>\n</ol>\n<h3 id=\"clang-tidy-AST-静态检查工具\"><a href=\"#clang-tidy-AST-静态检查工具\" class=\"headerlink\" title=\"clang-tidy AST 静态检查工具\"></a><a href=\"https://clang.llvm.org/extra/clang-tidy/\">clang-tidy AST 静态检查工具</a></h3><ol>\n<li>提供 run-clang-tidy 脚本用于实现对整个项目的文件做检查，用起来非常的方便。Runs clang-tidy over all files in a compilation database.</li>\n<li><code>run-clang-tidy -quiet -use-color</code> 需要 compile_commands.json</li>\n<li><code>run-clang-tidy -p build_path -header-filter=.*</code> 指定编译路径； build_path 下包含 compile_commands.json</li>\n<li><code>clang-tidy test.cpp -checks=-*,clang-analyzer-*,-clang-analyzer-cplusplus*</code> will disable all default checks (-<em>) and enable all clang-analyzer-</em> checks except for clang-analyzer-cplusplus* ones.</li>\n<li><code>clang-tidy -list-checks</code> 列出所有的 check</li>\n<li><code>clang-tidy -checks=&quot;-*,misc-unused-using-decls&quot; path/to/simple.cc --</code> 找出 simple.cc 中所有没有用到的 using declarations. 后面的<code>--</code>表示这个文件不在 compilation database 里面，可以直接单独编 l 译；</li>\n<li><code>clang-tidy -checks=&quot;-*,misc-unused-using-decls&quot; -fix path/to/simple.cc --</code>找出 simple.cc 中所有没有用到的 using declarations 并自动 fix(删除掉)</li>\n<li><code>clang-tidy -checks=&quot;-*,misc-unused-using-decls&quot; path/to/project/a.cc</code> 找出 a.c 中没有用到的 using declarations. 这里需要 path&#x2F;to&#x2F;project&#x2F;compile_commands.json 存在</li>\n<li><a href=\"https://clang.llvm.org/extra/clang-tidy/checks/list.html\">check list</a></li>\n<li><a href=\"https://github.com/llvm/llvm-project/blob/main/.clang-tidy\">.clang-tidy</a></li>\n<li><code>clang-tidy --dump-config</code>查看当前配置</li>\n</ol>\n<h3 id=\"cppcheck\"><a href=\"#cppcheck\" class=\"headerlink\" title=\"cppcheck\"></a><a href=\"https://github.com/danmar/cppcheck\">cppcheck</a></h3><h3 id=\"cpplint\"><a href=\"#cpplint\" class=\"headerlink\" title=\"cpplint\"></a><a href=\"https://github.com/cpplint/cpplint\">cpplint</a></h3><ol>\n<li><code>#include &lt;chrono&gt;  // NOLINT [build/c++11]</code></li>\n<li>配置文件 CPPLINT.cfg</li>\n<li>An open-source tool that checks for compliance with Google’s style guide for C++ coding.</li>\n<li>它可以检测代码是否符合 Google 的编码规范，会把不符合规范的地方都指出来。</li>\n<li><code>cpplint --recursive my_project_directory</code></li>\n<li><a href=\"https://github.com/marketplace/actions/clang-format-check\">github clang-format-check</a></li>\n</ol>\n<h2 id=\"shared-ptr-调试\"><a href=\"#shared-ptr-调试\" class=\"headerlink\" title=\"shared_ptr 调试\"></a>shared_ptr 调试</h2><ol>\n<li>注意析构顺序，变量没被析构，memory pool 就被析构了，导致内存泄漏</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> ...&#123;</span><br><span class=\"line\">  std::shared_ptr&lt;hbSysMem&gt; output_mem_; <span class=\"comment\">// 还未加到memory pool</span></span><br><span class=\"line\">  pg::utils::MemoryPool&lt;hbSysMem&gt; mem_pool_; <span class=\"comment\">//先析构了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>注意 deleter， 可能会被改变，如： memory pool 改变传进去的 deleter</li>\n<li>use_count()打印引用次数</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/TartanLlama/minidbg\">Writing a Linux Debugger</a></li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Debug"]},{"title":"Cpp to c interface","url":"/2020/07/27/Cpp-to-c-interface/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>如果给 c++程序 dlopen 用，只需要 create 和 release 接口，c++程序可以拿到 C++头文件定义，可以将 create 指针强转成类对象，用完之后调用 free。</li>\n<li>shared_ptr 两种解决方法(堆上手动管理智能指针，栈由系统自动管理)<ul>\n<li>struct 存 graph</li>\n<li>创建 shared_ptr 的指针，指针不释放 (已经创建栈上的 shared_ptr,没法调用 new)</li>\n<li><a href=\"https://github.com/jiaxiyang/cpp_sandbox/tree/master/cpp2c\">自建 sample</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"extern-“C”-作用\"><a href=\"#extern-“C”-作用\" class=\"headerlink\" title=\"extern “C” 作用\"></a><a href=\"https://www.cnblogs.com/xiangtingshen/p/10980055.html\">extern “C” 作用</a></h3><ol>\n<li>extern “C”的主要作用就是为了能够正确实现 C++代码调用其他 C 语言代码。加上 extern “C”后，会指示编译器这部分代码按 C 语言（而不是 C++）的方式进行编译。由于 C++支持函数重载，因此编译器编译函数的过程中会将函数的参数类型也加到编译后的代码中，而不仅仅是函数名；而 C 语言并不支持函数重载，因此编译 C 语言代码的函数时不会带上函数的参数类型，一般只包括函数名。</li>\n<li><code>extern &quot;C&quot; &#123;&#125;</code> 作用是阻止 C++ name mangling, 生成 C 格式符号表</li>\n</ol>\n<h2 id=\"method-hpp\"><a href=\"#method-hpp\" class=\"headerlink\" title=\"method.hpp\"></a>method.hpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> jia &#123;</span><br><span class=\"line\">Class Method &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> std::unique_ptr&lt;Method&gt; <span class=\"title\">create</span><span class=\"params\">(std::string name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">const</span> std::string <span class=\"title\">get_name</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"method-imp-hpp\"><a href=\"#method-imp-hpp\" class=\"headerlink\" title=\"method_imp.hpp\"></a>method_imp.hpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;method.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> jia &#123;</span><br><span class=\"line\">Class MethodImp : <span class=\"keyword\">public</span> Method &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MethodImp</span>(std::string name);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> std::string <span class=\"title\">get_name</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> name_;</span><br><span class=\"line\">    <span class=\"type\">int</span> value_;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">c_api</span>;  <span class=\"comment\">// the purpose is to get the private member which can not get from the public interface</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"method-cpp\"><a href=\"#method-cpp\" class=\"headerlink\" title=\"method.cpp\"></a>method.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;method.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;method_imp.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> jia &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::unique_ptr&lt;Method&gt; <span class=\"title\">Method::create</span><span class=\"params\">(std::string name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::unique_ptr&lt;Method&gt;&#123;<span class=\"built_in\">static_cast</span>&lt;Method*&gt;(<span class=\"keyword\">new</span> Method&#123;name&#125;)&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"method-imp-cpp\"><a href=\"#method-imp-cpp\" class=\"headerlink\" title=\"method_imp.cpp\"></a>method_imp.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;method_imp.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;c.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> jia &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">MethodImp::<span class=\"built_in\">MethodImp</span>(std::string name)</span><br><span class=\"line\">    : name_&#123;name&#125;,</span><br><span class=\"line\">      value_&#123;<span class=\"number\">1</span>&#125;&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> std::string <span class=\"title\">MethodImp::get_name</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name_;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace jia</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* C API implementations */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;c.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> jia &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">c_api</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">get_value</span><span class=\"params\">(<span class=\"type\">c_method_t</span> method)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> self = <span class=\"built_in\">static_cast</span>&lt;jia::Method*&gt;(method);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self-&gt;value_;  <span class=\"comment\">// to get value_; c_api need to be friend class of MethodImp</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">c_method_t</span> <span class=\"title\">c_create</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> m = jia::Method::<span class=\"built_in\">create</span>(std::<span class=\"built_in\">string</span>(name));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">c_method_t</span>&gt;(m.<span class=\"built_in\">realse</span>());  <span class=\"comment\">// release will move unique_ptr ownership</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">c_destroyed</span><span class=\"params\">(<span class=\"type\">c_method_t</span> method)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> m = <span class=\"built_in\">static_cast</span>&lt;jia::Method*&gt;(method);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">c_get_name</span><span class=\"params\">(<span class=\"type\">c_method_t</span> method)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> self = <span class=\"built_in\">static_cast</span>&lt;jia::Method*&gt;(method);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self-&gt;<span class=\"built_in\">get_name</span>().<span class=\"built_in\">cstr</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">c_get_value</span><span class=\"params\">(<span class=\"type\">c_method_t</span> method)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jia::c_api::<span class=\"built_in\">get_value</span>(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"c-h\"><a href=\"#c-h\" class=\"headerlink\" title=\"c.h\"></a>c.h</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus  <span class=\"comment\">// c++ will use and c not use</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">void</span>* <span class=\"type\">c_method_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">c_method_t</span> <span class=\"title\">c_create</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span></span>;  <span class=\"comment\">// create an instance</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">c_destroyed</span><span class=\"params\">(<span class=\"type\">c_method_t</span>)</span></span>;            <span class=\"comment\">// destroy the instance</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">c_get_name</span><span class=\"params\">(<span class=\"type\">c_method_t</span> method)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">c_get_value</span><span class=\"params\">(<span class=\"type\">c_method_t</span> method)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"test-c\"><a href=\"#test-c\" class=\"headerlink\" title=\"test.c\"></a>test.c</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;c.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">c_method_t</span> m = <span class=\"built_in\">c_create</span>(<span class=\"string\">&quot;c_test&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;name:  %s&quot;</span>, m-&gt;<span class=\"built_in\">c_get_name</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;value: %d&quot;</span>, m-&gt;<span class=\"built_in\">get_value</span>());</span><br><span class=\"line\">    <span class=\"built_in\">c_destroyed</span>(m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"Cpp20","url":"/2023/01/13/Cpp20/","content":"<h2 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h2><h2 id=\"coroutine\"><a href=\"#coroutine\" class=\"headerlink\" title=\"coroutine\"></a><a href=\"https://zhuanlan.zhihu.com/p/172471249\">coroutine</a></h2><ol>\n<li>协程并没有增加线程数量，只是在线程的基础之上通过分时复用的方式运行多个协程，而且协程的切换在用户态完成，切换的代价比线程从用户态到内核态的代价小很多。</li>\n<li>协程对计算密集型的任务也没有太大的好处，计算密集型的任务本身不需要大量的线程切换，因此协程的作用也十分有限，反而还增加了协程切换的开销。</li>\n<li>因此在协程中不能调用导致线程阻塞的操作。也就是说，协程只有和异步 IO 结合起来，才能发挥最大的威力。</li>\n<li>协程只有和异步 IO 结合起来才能发挥出最大的威力。</li>\n<li>协程可以通过 yield（取其“让步”之义而非“出产”）来调用其它协程，接下来的每次协程被调用时，从协程上次 yield，返回的位置接着执行，通过 yield 方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的。</li>\n<li>协程非常类似于线程。但是协程是协作式多任务的，而线程典型是抢占式多任务的。这意味着协程提供并发性而非并行性。协程超过线程的好处是它们可以用于硬性实时的语境（在协程之间的切换不需要涉及任何系统调用或任何阻塞调用），这里不需要用来守卫关键区块的同步性原语（primitive）比如互斥锁、信号量等，并且不需要来自操作系统的支持。有可能以一种对调用代码透明的方式，使用抢占式调度的线程实现协程，但是会失去某些利益（特别是对硬性实时操作的适合性和相对廉价的相互之间切换）。</li>\n<li>协程的核心竞争力在于：它能简化异步并发任务，以同步方式写异步代码, 这也是为什么要引入协程的原因了：简化异步并发任务</li>\n<li>线程是操作系统层面的概念，协程是语言层面的概念, 线程与协程最大的区别在于：线程是被动挂起恢复，协程是主动挂起恢复</li>\n</ol>\n<h3 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h3><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B\">wikipedia</a></li>\n<li><a href=\"https://juejin.cn/post/6973650934664527885\">进程、线程和协程的区别</a></li>\n</ol>\n"},{"title":"Compiler","url":"/2022/10/21/Compiler/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://blog.csdn.net/2301_76434200/article/details/136205302\">LLVM 中的 Pass 和 PassManager</a></li>\n<li>LLVM（Low-Level Virtual Machine)</li>\n<li><a href=\"https://mp.weixin.qq.com/s/OB7JJHgknJgDFjXKI3jOcA\">llvm VS gcc</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/AH7tdFR_QGTMg2wxaj0sog\">解释， 编译， 字节码(JIT)</a></li>\n<li>传统的编译器通常分为三个部分，前端(frontEnd)，优化器(Optimizer)和后端(backEnd)。在编译过程中，前端主要负责词法和语法分析，将源代码转化为抽象语法树；优化器则是在前端的基础上，对得到的中间代码进行优化，使代码更加高效；后端则是将已经优化的中间代码转化为针对各自平台的机器代码</li>\n<li>llvm 和 clang 关系<br><img src=\"https://img-blog.csdn.net/20160718211639694?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"llvm和clang关系\"></li>\n<li>IR(intermediate representation): 中间语言，最常见的中间语言表述形式，是三位址码（Three address code）</li>\n<li>LLVM 是一种基础设施，是有用的编译器技术的集合，可以用于解决特定问题（例如构建 C 编译器或特效管道中的优化器）</li>\n<li><a href=\"https://worktile.com/kb/p/37934\">bitcode 和 bytecode 的区别是什么</a></li>\n<li>注意<code>import</code> and <code>export</code> symbols</li>\n<li><code>echo | xt-clang -E -Wp,-v -</code> -E 选项告诉编译器只进行预处理，-Wp,-v 选项告诉编译器打印出它在预处理阶段使用的头文件路径。</li>\n<li><a href=\"https://gaomf.cn/2020/06/03/shared_library_global_symbol_override/\">动态库全局符号覆盖的大坑 double free</a><ul>\n<li><code>nm libmylib1.so libmylib2.so | grep -P &quot;^[^\\\\s]+ T &quot; | cut -d&#39; &#39; -f3 | sort | uniq -d | grep -v &#39;_fini&#39; | grep -v &#39;_init&#39; | c++filt</code> 查看是否有相同全局符号</li>\n</ul>\n</li>\n<li><a href=\"http://arthurchiao.art/blog/linux-tracing-basis-zh/\">Symbols 与 gcc -g 产生的 debug info 并不是一个东西</a></li>\n<li>function tracing 只需要 symbols，不需要 debug symbols（gcc -g）。strip 之后不能跟踪</li>\n<li>动态符号（.dynsym）vs. 局部符号（.symtab）， 可以用命令 strip 来手动去掉局部符号表， strip 前后用<code>readelf -s ./test</code>看, strip 只去除了.symtab</li>\n<li><a href=\"https://unix.stackexchange.com/questions/120015/how-to-find-out-the-dynamic-libraries-executables-loads-when-run\">查看依赖动态库的一些方法</a><ul>\n<li><code>sudo awk &#39;/\\.so/&#123;print $6&#125;&#39; /proc/1/maps | sort -u</code> 查看进行 1 链接的动态库</li>\n<li><code>LD_DEBUG=files ./xx</code> 查看运行时加载的库</li>\n<li><code>readelf -d build/dog/dog_test1 | grep &#39;NEEDED&#39;</code> 查看加载用到的库</li>\n<li><code>sudo lsof -p 1| grep mem | grep so</code> 查看进程用到的库</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol>\n<li><p>解释型语言解释器是一个运行的交互程序，接收输入命令，执行对应操作并将结果输出</p>\n</li>\n<li><p>ld 编译选项<code>--whole-archive</code>, 告诉链接器，将后面库中所有符号都链接进来，参数<code>-no-whole-archive</code>则是重置，以避免后面库的所有符号被链接进来。要通 gcc 传递到 ld，需要在他们前面加 -Wl</p>\n</li>\n<li><p><code>set(CMAKE_SHARED_LINKER_FLAGS &quot;-s -Wl,--version-script=$&#123;PROJECT_SOURCE_DIR&#125;/symbol.lst&quot;)</code> 跟据 symbol.lit 来 strip， 可以只暴露需要的 symbol, <code>nm -C</code>看不到符号， <code>readelf -s</code>可以<br><code>target_link_options(tensorflowlite_c PRIVATE &quot;-Wl,--version-script,$&#123;TENSORFLOW_SOURCE_DIR&#125;/tensorflow/lite/c/version_script.lds&quot;)</code></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/catch/p/4314256.html\">c++ 全局变量初始化</a><br>根据 C++ 标准，全局变量的初始化要在 main 函数执行前完成，常识无疑，但是这个说法有点含糊，main 函数执行前到底具体是什么时候呢？是编译时还是运行时？答案是既有编译时，也可能会有运行时(seriously), 从语言的层面来说，全局变量的初始化可以划分为以下两个阶段（c++11 N3690 3.6.2)：</p>\n<ul>\n<li>static initialization: 静态初始化指的是用常量来对变量进行初始化,主要包括 zero initialization 和 const initialization，静态初始化在程序加载的过程中完成，对简单类型(内建类型，POD 等)来说，从具体实现上看，zero initialization 的变量会被保存在 bss 段，const initialization 的变量则放在 data 段内，程序加载即可完成初始化，这和 c 语言里的全局变量初始化基本是一致的。</li>\n<li>dynamic initialization：动态初始化主要是指需要经过函数调用才能完成的初始化，比如说：int a &#x3D; foo()，或者是复杂类型（类）的初始化（需要调用构造函数）等。这些变量的初始化会在 main 函数执行前由运行时调用相应的代码从而得以进行(函数内的 static 变量除外)。<br>需要明确的是：静态初始化执行先于动态初始化！ 只有当所有静态初始化执行完毕，动态初始化才会执行。显然，这样的设计是很直观的，能静态初始化的变量，它的初始值都是在编译时就能确定，因此可以直接 hard code 到生成的代码里，而动态初始化需要在运行时执行相应的动作才能进行，因此，静态初始化先于动态初始化是必然的。</li>\n</ul>\n</li>\n<li><p>注册：(<code>库中符号没有被使用，库不会被初始化(具有全局声明周期的变量和所有函数)</code> <code>具有side-effect的变量会被初始化，肯定用到了所在库</code>)</p>\n<ul>\n<li>全局不初始化是没链接接上，没链接是因为没加载， 不是 NEEDED lib</li>\n<li><code>readelf -d build/dog/dog_test1 | grep &#39;NEEDED&#39;</code> 查看加载用到的库</li>\n<li><a href=\"http://www.cppblog.com/kevinlynx/archive/2010/01/17/105885.aspx\">注册全局变量未初始化初始化</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5202142/static-variable-initialization-over-a-library\">Static variable initialization over a library</a></li>\n<li>未依赖的全局变量可能并不初始化。main 之前也可以打印。</li>\n<li>dlopen 打开 lib，运行时注册(需要知道库名字)。</li>\n<li>My guess - when linking against a library, the linker only brings over symbols that are actually used by the executable. Object files whose exported symbols are not referenced from anywhere are simply ignored; so registered variable is dropped and its initializer doesn’t run. Normally, that’s a good thing - you wouldn’t usually want unused parts of a large library to nevertheless wind up in your binary.</li>\n<li><a href=\"https://blog.csdn.net/gaussrieman123/article/details/106384853\">TensorFlow c++ SessionFactory 注册与 No session factory registered 错误</a><br>在上面我们已经分析清楚，这个报错的根本原因是 TensorFlow 动态库中的这两个源文件中的全局静态变量 registrar 没有初始化，导致后面在创建 Session 的时候 GetFactory 失败。<br>有一篇文章”Integrating TensorFlow libraries”也分析是这个原因。因为 TF 组件化的设计思路，一个很小的 core+注册的方式来完成包括 SessionFactory、Op_Kernel、Op 等的加载，在编译的时候，如果这部分代码被编译器忽略了，就会导致部分代码注册失败，进而导致报错。<br>为什么不初始化呢？<br>动态库的加载分为<code>显示加载和隐式加载</code>，我们后面验证了显示加载，即显示通过 dlopen 来调用这些动态库，是可以正常运行的，说明这种情况下，所有的注册都完成了。问题出在隐式加载上。</li>\n<li><code>A non-local variable with static storage duration having initialization with side-effects must be initialized even if it is not odr-used </code> side-effects 引起其他地方改变，被其他地方使用就算引起改变</li>\n<li><a href=\"https://en.wikipedia.org/wiki/One_Definition_Rule\">One_Definition_Rule(ODR)</a> 在整个程序中，对象或非内联函数不能有多个定义；如果使用一个对象或函数，它必须有一个定义。您可以声明一个从未使用过的对象或函数，在这种情况下，您不必提供定义。在任何情况下都不可能有多个定义</li>\n<li><a href=\"https://stackoverflow.com/questions/18600034/is-static-object-guaranteed-to-be-initialized\">Is static object guaranteed to be initialized</a></li>\n<li><a href=\"https://stackoverflow.com/a/18601535\">与 flow 加载问题相似例子</a></li>\n<li><code>the first odr-use of any function or variable deﬁned in the same translation unit as the variable to be initialized</code> 同一个编译单元不管是否用到都会初始化</li>\n<li><code> If the initialization is deferred to some point in time after the ﬁrst statement of main, it shall occur before the ﬁrst odr-use (3.2) of any function or variable deﬁned in the same translation unit as the variable to be initialized.</code> 如果某全局变量初始化推迟到 main 之后，那么使用该全局变量所在 TU 内的任何变量和函数之前需要初始化该全局变量，如果该全局变量与 main 在同一 TU 内，那么使用 main 中任何变量前，都要初始化改全局变量，等效 main 之前初始化, 因为用到了当前库中的符号。(做实验，同一 UT 内(没使用也会被初始化，注册成功)，随便使用另一个 so 中的函数(随便引用了一个毫无相关的内容，注册进工厂))</li>\n<li><code>The compiler is not allowed to optimiza away global objects. Even if they are never used.</code> 全局变量不会被优化掉，静态库可能不链接；动态库整个 TU 可能不被加载, 动态库在磁盘上，如果没有用到，不会被加载?。 <a href=\"https://stackoverflow.com/a/1229542\">link</a> <code>&quot;It seems that having a file purely consisting of these global objects is what&#39;s causing the problem. It&#39;s as if that translation unit was entirely ignored&quot;. The translation unit is being ignored in the sense that it is being omitted by the linker because it&#39;s in a library. If an object is in a library and isn&#39;t called by anything in the app, it&#39;s omitted, that&#39;s the whole idea of libaries! </code></li>\n<li><code>they were not setup at startup if no symbol of the DLL were used in the main.</code> 库中符号没有被使用，库不会被初始化。</li>\n<li><a href=\"https://accu.org/journals/overload/6/27/bellingham_597/\">SELF REGISTERING CLASSES</a> (多研究下怎们用 extern)</li>\n<li>解决方法 1： 运行时加载 dlopen 打开 so 时， 会初始化全局变量</li>\n<li>解决方法 2： 显示使用符号，测试程序中使用库中的任意符号<code>extern int xxx; int test()&#123;return xxx;&#125;</code> 为什么能工作？<code>当前TU中的函数会被初始化， 函数里使用到了xxx， xxx所在库全局声明周期变量会被初始化</code></li>\n<li>库和测试程序都定义同一个内联函数不解决问题。</li>\n<li>由于内存太小，所以真的动态执行，只有用到了才加载到内存，执行完就释放掉了，</li>\n</ul>\n</li>\n<li><p>动态链接库的加载方式有两种：隐式加载(静态链接或动态加载时链接)和显示加载(动态运行时链接)。 显示加载会加载所有符号，初始化所有变量, 可能是因为不确定要调用哪些符号，所以都初始化了。</p>\n</li>\n<li><p><code>flow单例注册问题</code>: 单例不只一份 static</p>\n<ul>\n<li>隐藏单例的 Instance 函数 symbol 会出问题, 会有多个 static 变量</li>\n<li><code>链接静态库要用PRIVATE保护</code>： 可能被链接两次，如单例模式注册问题， 链接了两份静态， 导致注册到不同地方。</li>\n<li><a href=\"https://www.zhihu.com/question/425920019/answer/2254967131\">C++单例模式跨 DLL 是不是就是会出问题?</a></li>\n<li>linux 上的 GNU GCC 编译器默认给函数的属性是<code>attribute</code>((visibility(“default”)))，如果没有指定编译选项 visilibility 的话默认会导出所有的符号 <code>-fvisibility=hidden</code></li>\n<li><a href=\"https://www.cnblogs.com/lsgxeva/p/12510201.html\">控制库符号导出</a></li>\n<li>加了-fvisibility&#x3D;hidden 后 static 符号(Instance 函数)被隐藏，有多份 static 局部变量，会有多个实例</li>\n<li><a href=\"https://github.com/jiaxiyang/cpp_sandbox/tree/master/design_pattern/singleton\">自测 sample</a></li>\n<li>还有可能测试程序链接的静态库，只链接了用到的静态变量，导致未用到的没注册；链接整个静态库<code>-Wl,--whole-archive dcv_predict -Wl,-no-whole-archive</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"LLVM\"><a href=\"#LLVM\" class=\"headerlink\" title=\"LLVM\"></a>LLVM</h2><ol>\n<li><code>.c --frontend--&gt; AST --frontend--&gt; LLVM IR --LLVM opt--&gt; LLVM IR --LLVM llc--&gt; .s Assembly --OS Assembler--&gt; .o --OS Linker--&gt; executable</code></li>\n</ol>\n<h3 id=\"MLIR（Multi-Level-Intermediate-Representation）和-LLVM-IR（LLVM-Intermediate-Representation）区别：\"><a href=\"#MLIR（Multi-Level-Intermediate-Representation）和-LLVM-IR（LLVM-Intermediate-Representation）区别：\" class=\"headerlink\" title=\"MLIR（Multi-Level Intermediate Representation）和 LLVM IR（LLVM Intermediate Representation）区别：\"></a>MLIR（Multi-Level Intermediate Representation）和 LLVM IR（LLVM Intermediate Representation）区别：</h3><ol>\n<li><code>多层次表示 vs 单层次表示</code>:<ul>\n<li><code>MLIR</code> 是多层次的中间表示，它允许表示不同层次的抽象，从高级语言特定领域语言（DSL）到底层硬件描述。这使得 MLIR 在各种领域和应用中非常灵活。</li>\n<li><code>LLVM IR</code> 是单层次的中间表示，更专注于从高级源代码到目标机器代码的转换。它不支持多层次抽象或领域特定语言的内置支持。</li>\n</ul>\n</li>\n<li><code>领域特定语言支持</code>:<ul>\n<li><code>MLIR</code> 提供了内置支持领域特定语言（DSLs）的机制，这使得开发者可以更容易地在 MLIR 中定义和优化特定领域的代码。</li>\n<li><code>LLVM IR</code> 不提供直接的 DSL 支持，尽管可以通过 LLVM 的扩展来实现某些领域特定的优化。</li>\n</ul>\n</li>\n<li><code>生态系统和用途</code>:<ul>\n<li><code>MLIR</code> 被设计为通用的多领域中间表示，适用于编译器、机器学习、图形处理器编程等多个领域。</li>\n<li><code>LLVM IR</code> 在开始时更专注于编译器优化和代码生成，但它的生态系统也在不断扩展，包括用于 WebAssembly、GPU 等不同领域的扩展。</li>\n</ul>\n</li>\n<li><code>设计目标</code>:<ul>\n<li><code>MLIR</code> 的设计目标之一是提供灵活性和可扩展性，以适应不同领域的编译和代码生成需求，包括优化和分析。</li>\n<li><code>LLVM IR</code> 更侧重于提供优化编译器的中间表示，以便在各种目标平台上生成高性能代码。</li>\n</ul>\n</li>\n<li><code>历史和成熟度</code>:<ul>\n<li><code>LLVM IR</code> 已经存在更长时间，拥有更成熟的生态系统和广泛的应用。它是众多编程语言的编译器后端的首选中间表示。</li>\n<li><code>MLIR</code> 是相对较新的项目，尚未在广泛的生产环境中获得与 LLVM IR 相似的广泛应用。<br>总之，MLIR 和 LLVM IR 都是强大的中间表示语言，用于编译器和代码生成领域，但它们的设计和用途有所不同。MLIR 更注重灵活性和多领域支持，而 LLVM IR 则更注重编译器优化和生成高性能代码。选择使用哪个中间表示取决于项目的需求和目标。有些项目甚至可以同时使用两者，以充分利用它们的不同特性。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Just-in-Time-JiT-和-Ahead-of-Time-AoT\"><a href=\"#Just-in-Time-JiT-和-Ahead-of-Time-AoT\" class=\"headerlink\" title=\"Just-in-Time (JiT) 和 Ahead-of-Time (AoT)\"></a>Just-in-Time (JiT) 和 Ahead-of-Time (AoT)</h2><h3 id=\"Just-in-Time-JiT-编译：\"><a href=\"#Just-in-Time-JiT-编译：\" class=\"headerlink\" title=\"Just-in-Time (JiT) 编译：\"></a>Just-in-Time (JiT) 编译：</h3><ol>\n<li><code>定义</code>: JiT 编译是在运行时，即代码执行时进行的编译。一个常见的例子是 Java 虚拟机(JVM)，它将字节码在运行时转换为机器代码。</li>\n<li><code>优点</code>:<ul>\n<li><code>跨平台</code>: 代码可以为不同的硬件&#x2F;操作系统平台提供同一种中间表示形式，然后在每个目标平台上进行 JiT 编译。</li>\n<li><code>优化</code>: 由于编译发生在运行时，JiT 编译器可以利用特定于当前机器的优化，例如考虑当前的 CPU 和内存状况。</li>\n<li><code>适应性</code>: 可以针对正在执行的代码的实际使用模式进行优化。</li>\n</ul>\n</li>\n<li><code>缺点</code>:<ul>\n<li><code>启动延迟</code>: 在应用程序开始执行时可能需要额外的时间进行编译，从而导致启动延迟。</li>\n<li><code>内存使用</code>: JiT 编译需要额外的内存来存储中间表示形式和机器代码。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Ahead-of-Time-AoT-编译：\"><a href=\"#Ahead-of-Time-AoT-编译：\" class=\"headerlink\" title=\"Ahead-of-Time (AoT) 编译：\"></a>Ahead-of-Time (AoT) 编译：</h3><ol>\n<li><code>定义</code>: AoT 编译是在代码执行之前进行的编译。传统的 C&#x2F;C++编译器（例如 gcc、clang）就使用了这种方法，它们将源代码直接编译为机器代码。</li>\n<li><code>优点</code>:<ul>\n<li><code>快速启动</code>: 由于代码已经被编译，应用程序通常可以更快地启动。</li>\n<li><code>确定性</code>: 编译的输出是静态的，它不会因为运行时的条件或环境而改变。</li>\n<li><code>资源</code>: 通常使用较少的内存，因为不需要存储中间表示形式或进行运行时编译。</li>\n</ul>\n</li>\n<li><code>缺点</code>:<ul>\n<li><code>跨平台问题</code>: 每个目标平台都需要一个特定的编译版本。</li>\n<li><code>失去运行时优化</code>: 由于编译是在运行时之前完成的，AoT 编译器不能基于实际的运行时数据或环境进行优化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><ol>\n<li><code>JiT</code> 更适合需要跨平台支持和能够利用运行时数据进行优化的场景。</li>\n<li><code>AoT</code> 更适合对启动时间有严格要求、需要确定的性能或在资源受限的环境中运行的应用。</li>\n</ol>\n<h2 id=\"FFI\"><a href=\"#FFI\" class=\"headerlink\" title=\"FFI\"></a><a href=\"https://cloud.tencent.com/developer/news/607788\">FFI</a></h2><ol>\n<li>FFI（Foreign Function Interface）是这样一种机制：用一种编程语言写的程序能调用另一种编程语言写的函数（routines）。</li>\n</ol>\n<h2 id=\"ABI-和指令集\"><a href=\"#ABI-和指令集\" class=\"headerlink\" title=\"ABI 和指令集\"></a>ABI 和指令集</h2><ol>\n<li>CPU–vendor–OS 这三者决定了一个平台，只要这三者一致，我们生成的二进制程序往往就可以确定了。这三者就被称为一个「目标三元组」（Target Triple）。x86_64-unknown-linux-gnu，这里 x86_64 指的是 CPU 架构，unknown 是 vendor，对于 Linux 环境，往往不太重要</li>\n<li>ABI (Application Binary Interface) 和指令集是两个在计算领域中经常被提及的概念，它们是相关的，但各自有其定义和用途。下面是对两者的简要描述和区别：</li>\n</ol>\n<h3 id=\"ABI-Application-Binary-Interface\"><a href=\"#ABI-Application-Binary-Interface\" class=\"headerlink\" title=\"ABI (Application Binary Interface)\"></a>ABI (Application Binary Interface)</h3><ol>\n<li>为什么 ABI 很重要？<ul>\n<li>如果你有一个预编译的库，并想在不同的环境中使用它，那么 ABI 的兼容性就非常重要。如果编译应用程序的编译器产生与库不兼容的 ABI，那么该应用程序可能无法正确地链接或运行。</li>\n<li>当更新系统的库或操作系统时，保持 ABI 的稳定性是很重要的，否则之前编译的应用程序可能会因为新的库或操作系统的 ABI 改变而崩溃。</li>\n</ul>\n</li>\n<li><code>定义</code>：ABI 是程序模块（通常是一个可执行文件和一个共享库）之间在二进制级别进行交互所需要遵循的协议。换句话说，ABI 是软件之间的”约定”，这些软件在二进制层面上交互。</li>\n<li><code>内容</code>：ABI 通常涉及到以下方面：<ul>\n<li><code>函数调用约定</code>：如何传递参数，如何返回结果，以及在调用中如何使用堆栈。</li>\n<li><code>数据类型的大小和对齐</code>：例如，一个 <code>int</code> 类型在某个平台上可能是 4 字节，而在另一个平台上可能是 8 字节。</li>\n<li><code>系统调用的约定</code>：这决定了应用程序如何进行系统调用。</li>\n<li><code>目标文件格式</code>：例如 ELF (Executable and Linkable Format)。</li>\n<li><code>其他方面</code>：如名称修饰和 C++的函数重载。</li>\n</ul>\n</li>\n<li><code>重要性</code>：不同的编译器，或同一编译器的不同版本，可能会有不同的 ABI。如果两个模块有不同的 ABI 并且它们尝试相互交互，那么可能会出现不可预知的行为。</li>\n</ol>\n<h4 id=\"ABI-例子\"><a href=\"#ABI-例子\" class=\"headerlink\" title=\"ABI 例子\"></a>ABI 例子</h4><p>ABI（应用程序二进制接口）是特定于架构和操作系统的，用于确保在二进制层面上的软件组件可以正确地相互交互。以下是一些常见的 ABI 的例子：</p>\n<ol>\n<li><code>System V ABI</code>：这是 Unix 系统上最常见的 ABI，被多个 Unix-like 操作系统所采用，包括 Solaris、HP-UX、AIX 以及其他的系统。</li>\n<li><code>Microsoft x64 calling convention</code>：这是 Windows 在 x64 架构上使用的 ABI。</li>\n<li><code>PowerOpen ABI (PABI)</code>：这是 PowerPC 上的 ABI。</li>\n<li><code>ARM ABI (AAPCS, ARM Architecture Procedure Call Standard)</code>：这是 ARM 架构上的 ABI。它也有多个变种，例如 AAPCS-VFP 用于硬浮点单元。</li>\n<li><code>MIPS O32 ABI</code>：MIPS 架构上的一种常见 ABI。</li>\n<li><code>Itanium C++ ABI</code>：这是为 Itanium 架构 (IA-64) 设计的，但其他架构上的 C++ 实现也采用了这个 ABI，如 x86 和 x86-64 的 GCC。</li>\n<li><code>x86_64 psABI</code>：为 x86_64 架构设计的 ABI。</li>\n<li><code>AArch64 ABI</code>：为 ARM 的 64 位版本设计的 ABI。 <a href=\"https://github.com/ARM-software/abi-aa/\">arm abi github</a></li>\n<li><code>EABI (Embedded ABI)</code>：适用于嵌入式处理器，特别是 ARM 和 MIPS。</li>\n<li><code>Wasm ABI</code>：针对 WebAssembly 设计的 ABI。</li>\n</ol>\n<h4 id=\"linux-ABI-和-ARM-ABI-关系\"><a href=\"#linux-ABI-和-ARM-ABI-关系\" class=\"headerlink\" title=\"linux ABI 和 ARM ABI 关系\"></a>linux ABI 和 ARM ABI 关系</h4><p>Linux ABI (Application Binary Interface) 和 ARM ABI 都是关于应用程序二进制接口的规范，但它们的关注点和应用场景有所不同。<br>Linux ABI 和 ARM ABI 是为不同的目的和在不同的层次上定义的规范，但在一个 ARM Linux 系统中，它们共同确保了软件组件的二进制兼容性和互操作性。</p>\n<ol>\n<li><code>readelf -a test1 |grep ABI</code> 查看 elf ABI</li>\n<li><code>.note.ABI-tag</code> section 中有信息</li>\n<li><code>file ./test</code>也有 ABI 信息</li>\n<li><code>Linux ABI</code>:<ul>\n<li>Linux ABI 特指 Linux 操作系统内核与用户空间应用程序之间的接口。更具体地说，它描述了应用程序如何发起系统调用，以及这些调用如何传递参数、返回值等。</li>\n<li>它定义了系统调用的接口，即应用程序如何与 Linux 内核交互。</li>\n<li>它涉及到数据类型、系统调用编号以及如何将参数传递给这些系统调用等。</li>\n<li>Linux ABI 是跨平台的，意味着它旨在为多种体系结构（如 x86、ARM、MIPS 等）提供一致的接口。</li>\n<li>Linux ABI 可以确保，<code>只要应用和内核之间的 ABI 保持一致，就可以在不重新编译应用程序的情况下升级或更换 Linux 内核</code>。</li>\n</ul>\n</li>\n<li><code>ARM ABI</code>: - 这是特定于 ARM 架构的规范。<ul>\n<li>ARM ABI 定义了在 ARM 架构上的软件如何布局数据和如何进行函数调用。这包括调用约定、数据类型的大小和对齐、处理器寄存器的使用，以及异常处理等。</li>\n<li>ARM 公司定义了多个 ABI。例如，有针对 ARM 架构的基础 ABI，也有针对特定指令集如 AArch64 的 ABI。</li>\n<li>当我们谈论 ARM ABI 时，常见的是”EABI” (Embedded ABI)，它是为嵌入式系统设计的。</li>\n</ul>\n</li>\n<li><code>关系</code>:<ul>\n<li>ARM ABI 确保应用程序的正确执行，而 Linux ABI 则确保应用程序与内核的正确交互。</li>\n<li><code>Linux 在 ARM 平台上运行时，用户空间的应用程序和库会遵循 ARM ABI 的规范。这确保了应用程序和库在 ARM 硬件上的正确执行。同时，这些应用程序和库与 Linux 内核交互时会使用 Linux ABI 定义的系统调用</code>。</li>\n<li>当一个应用程序运行在这样的系统上时，它与操作系统内核通信时使用 Linux ABI。而应用程序内部，或者它与其他库和组件通信时，可能遵循 ARM ABI。</li>\n<li>实际上，应用程序或库在被编译和链接为 ARM Linux 系统上的二进制时，编译器和链接器会确保它们遵循这两种 ABI。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"指令集-Instruction-Set-Architecture-ISA\"><a href=\"#指令集-Instruction-Set-Architecture-ISA\" class=\"headerlink\" title=\"指令集 (Instruction Set Architecture, ISA)\"></a>指令集 (Instruction Set Architecture, ISA)</h3><ol>\n<li><code>定义</code>：指令集是计算机架构的一部分，描述了 CPU 可以执行的低级操作和它们在机器代码级别的表示。</li>\n<li><code>内容</code>：指令集定义了如下方面：<ul>\n<li><code>指令</code>：如加法、乘法、跳转等。</li>\n<li><code>寄存器集</code>：描述 CPU 中可用的寄存器。</li>\n<li><code>寻址模式</code>：决定如何访问数据和指令。</li>\n<li><code>数据类型</code>：例如整数、浮点数等。</li>\n</ul>\n</li>\n<li><code>示例</code>：常见的指令集包括 x86, x86_64, ARM, MIPS 等。</li>\n</ol>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li><code>级别</code>：ABI 在更高的层次上定义了如何在二进制级别进行交互，而指令集是关于 CPU 可以执行哪些基本操作的描述。</li>\n<li><code>目标</code>：<code>ABI 主要关注软件之间的互操作性，而指令集关注硬件（CPU）如何执行特定的操作</code></li>\n<li><code>应用场景</code>：<code>开发者在为特定平台编写程序或编译代码时需要关心 ABI。而在设计或实现 CPU 时，会关心指令集</code></li>\n</ul>\n<h2 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h2><ol>\n<li>链接就像拼积木，有凹槽，也有凸槽，有一定的规则，满足规则凹凸部分才能拼合。</li>\n<li>数据段段和代码段为什么分开？<ul>\n<li>程序运行多次可以共享只读内容， 包括代码段，只读数据段等，可以节省大量内存。</li>\n<li>权限可以不同：代码自读， 数据可以读写</li>\n<li>提高 cache 命中率</li>\n</ul>\n</li>\n<li><code>/usr/include/elf.h</code>看 elf 文件结构体</li>\n</ol>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><ol>\n<li><code>man ld.so</code> 查看各种 linker&#x2F;loader 环境变量</li>\n<li><a href=\"https://blog.csdn.net/llm_hao/article/details/115493516\">Linux 环境变量之 LD_PRELOAD &amp; LD_LIBRARY_PATH &amp; LD_DEBUG</a></li>\n</ol>\n<h4 id=\"LD-PRELOAD\"><a href=\"#LD-PRELOAD\" class=\"headerlink\" title=\"LD_PRELOAD\"></a>LD_PRELOAD</h4><ol>\n<li><code>LD_PRELOAD=&quot;/path/to/library.so&quot; valgrind my-executable</code> valgrind 定位动态库内存泄漏可以用到 <a href=\"https://stackoverflow.com/a/13136609\">link</a></li>\n<li>gdb 调试时打不上断点，要使用 LD_PRELOAD 先加载动态库，找不到文件所在动态库，使用 speedscope</li>\n</ol>\n<h4 id=\"LD-LIBRARY-PATH\"><a href=\"#LD-LIBRARY-PATH\" class=\"headerlink\" title=\"LD_LIBRARY_PATH\"></a>LD_LIBRARY_PATH</h4><h4 id=\"LD-DEBUG\"><a href=\"#LD-DEBUG\" class=\"headerlink\" title=\"LD_DEBUG\"></a>LD_DEBUG</h4><ol>\n<li><p><code>LD_DEBUG=help ls</code> 查看帮助</p>\n</li>\n<li><p><code>LD_DEBUG=libs ./xxx</code> 查看加载库时详细信息</p>\n</li>\n<li><p><code>LD_DEBUG=libs LD_DEBUG_OUTPUT=lib ./xxx</code> 信息输出文件中</p>\n<ul>\n<li>搜索 so -&gt; 初始化 so -&gt; 初始化 elf -&gt; 控制转移到 elf -&gt; 运行 elf -&gt; 结束 elf -&gt; 反序结束 so</li>\n<li>可以看到搜索顺序; LD_LIBRARY_PATH -&gt; RUNPATH from elf -&gt; &#x2F;etc&#x2F;ld.so.cache</li>\n<li>可以看到库的初始化顺序与完成顺序相反， 先初始化的库后完成</li>\n<li>可以看到一次对动态库进行初始化，然后再对可执行程序进行初始化</li>\n<li>可以指定 so 初始化和析构函数, 可用于注册机制?</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __attribute__((constructor)) <span class=\"built_in\">init_function</span>();</span><br><span class=\"line\"><span class=\"type\">void</span> __attribute__((destructor))  <span class=\"built_in\">fini_function</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>info</p>\n<ul>\n<li>“files”，显示整个装载过程；</li>\n<li>“libs”，显示共享库查找过程；</li>\n<li>“symbols”，显示符号的查找过程；</li>\n<li>“bindings”，显示动态链接的符号绑定过程；</li>\n<li>“versions”，显示符号的版本依赖关系；</li>\n<li>“reloc”，显示重定位信息；</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Binary-Utils\"><a href=\"#Binary-Utils\" class=\"headerlink\" title=\"Binary Utils\"></a>Binary Utils</h2><h3 id=\"Google-bloaty-https-github-com-google-bloaty\"><a href=\"#Google-bloaty-https-github-com-google-bloaty\" class=\"headerlink\" title=\"Google bloaty(https://github.com/google/bloaty)\"></a>Google bloaty(<a href=\"https://github.com/google/bloaty\">https://github.com/google/bloaty</a>)</h3><ol>\n<li>查看二进制大的原因</li>\n<li><a href=\"https://github.com/google/bloaty/blob/main/doc/using.md\">guide</a></li>\n<li><code>bloaty -d symbols ./test</code></li>\n<li><code>bloaty -d compileunits ./test</code></li>\n<li><code>bloaty -v -d sections ./test</code></li>\n</ol>\n<h3 id=\"ghidra\"><a href=\"#ghidra\" class=\"headerlink\" title=\"ghidra\"></a><a href=\"https://github.com/NationalSecurityAgency/ghidra\">ghidra</a></h3><ol>\n<li>可以查看各个段内容</li>\n</ol>\n<h3 id=\"elfutils\"><a href=\"#elfutils\" class=\"headerlink\" title=\"elfutils\"></a><a href=\"https://sourceware.org/elfutils/\">elfutils</a></h3><ol>\n<li>eu-stack 可以跟踪 on-cpu and off-cpu, perf 只能跟踪 off-cpu</li>\n</ol>\n<h3 id=\"GNU-binutils\"><a href=\"#GNU-binutils\" class=\"headerlink\" title=\"GNU binutils\"></a><a href=\"https://www.gnu.org/software/binutils/\">GNU binutils</a></h3><ol>\n<li><p>reverse enginerring 各种工具查看段内容</p>\n</li>\n<li><p><code>ar</code> : 创建静态库，插入删除，列出和提取成员。</p>\n</li>\n<li><p><code>strings</code> : 列出一个目标文件中所有可打印的字符串。</p>\n<ul>\n<li>找一个唯一字符串， 可以用来看程序是否为最新版本</li>\n<li><code>strings build/out/osqp_demo | grep include  |  xargs  -t -I &#123;&#125; ls &#123;&#125; | grep signal.h</code>查看头文件</li>\n</ul>\n</li>\n<li><p><code>strip</code> : 从目标文件中删除符号表信息。 <code>file</code>可以查看是否 strip</p>\n</li>\n<li><p><code>nm</code> : 列出一个目标文件的符号表中定义的符号。</p>\n<ul>\n<li><code>nm -A -l build/base</code> 显示文件名和行号(需要 debug 模式编译)</li>\n<li><code>nm --undefined-only -C ./test</code> 查看 import symbols</li>\n<li><code>nm --defined-only -C ./test</code> 查看 export symbols, export 可以看到 symbol 前面有地址</li>\n<li><code>nm -S xxx</code>查看 defined symbols size</li>\n<li><code>nm -S --size-sort test</code> 按 size 排序</li>\n<li><code>man nm</code> 查看用法</li>\n<li>大写全局，小写局部, 局部变量不会记录到符号表中（static 除外）</li>\n<li>b:bss, t:text, d:data, r:readonly</li>\n<li><code>nm -C build/base</code> decode <a href=\"https://en.wikipedia.org/wiki/Name_mangling\">Name_mangling</a> this makes C++ function names readable.</li>\n<li><code>extern &quot;C&quot; &#123;&#125;</code> 作用是阻止 C++ name mangling, 生成 C 格式符号表</li>\n<li><code>c++filt _ZN9NS_QZSOCK10CTcpClient11SendAndRecvEPciRiRjd</code> c++filt Name De-Mangling</li>\n<li>符号详解<ul>\n<li><code>T</code>: 定义：函数定义在当前模块中， <code>nm -C libxxx | grep &quot; T &quot;</code>查看当前模块定义的函数</li>\n<li><code>U</code>: 声明：使用定义在其他模块中的函数</li>\n<li><code>D</code>: 初始化的 data (静态初始化的变量)</li>\n<li><code>B</code>: 未初始化的 data(动态初始化的变量)</li>\n<li><code>N</code>: debug 符号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>size</code> : 列出目标文件中的节的名字和大小。</p>\n<ul>\n<li><code>size -A ./test</code> 列出 section 详细信息</li>\n</ul>\n</li>\n<li><p><code>readelf</code> : 显示一个目标文件的完整结构，包含 size 和 nm 的功能。</p>\n<ul>\n<li><code>readelf -a -W -C bin2float|less</code> -W wide 显示， -C demangle(最新版本才支持)</li>\n<li><code>readelf -d build/dog/dog_test1 | grep &#39;NEEDED&#39;</code> 查看加载用到的库</li>\n<li>readelf -a test 先显示 section 信息， 然后显示 segment(Program Headers)信息，接着显示 Section to Segment mapping 信息</li>\n<li><code>readelf -a test1 |grep ABI</code> 查看 elf ABI</li>\n</ul>\n</li>\n<li><p><code>objdump</code> : 所有二进制文件之母。能够显示一个目标文件中所有的信息。它最大作用是反汇编.text 节中的二进制指令。</p>\n<ul>\n<li><code>objdump -p test | grep NEEDED</code> 查看加载用到的库</li>\n<li><code>objdump -g libxxx.so | grep /data0/....</code> 动态库调试信息中找文件路径</li>\n<li><code>objdump --dwarf=decodedline test</code> 显示内存地址映射到具体某行源代码</li>\n<li><code>objdump -d -C test</code> 反汇编，demangle</li>\n</ul>\n</li>\n<li><p><code>ldd</code> : 列出一个可执行文件在运行时所需要的共享库。</p>\n<ul>\n<li><code>ldd -v xxx</code> 列出依赖详细关系，包括依赖的依赖</li>\n</ul>\n</li>\n<li><p>!notice : use tldr to show the basic usage.</p>\n</li>\n<li><p><code>cat /proc/pid/maps 或 pmap pid</code> 看进程映射区域</p>\n</li>\n</ol>\n<h2 id=\"glibc-初始化\"><a href=\"#glibc-初始化\" class=\"headerlink\" title=\"glibc 初始化\"></a>glibc 初始化</h2><ol>\n<li><code>_start -&gt; __libc_start_main -&gt; __libc_csu_init -&gt; _init -&gt; __do_global_ctors_aux(c++构造函数) -&gt; main -&gt; __do_global_dtors_aux -&gt; _fini -&gt; __libc_csu_fini</code></li>\n</ol>\n<h2 id=\"GCC-编译选项\"><a href=\"#GCC-编译选项\" class=\"headerlink\" title=\"GCC 编译选项\"></a>GCC 编译选项</h2><ol>\n<li>给 gcc 加上<code>-fno-common</code>选项, 这个选项会告诉链接器，在遇到多重定义的全局符号时，触发一个错误。或者使用 -Werror 选项，它会把所有的警告都变为错误。<code>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -fno-common&quot;)</code></li>\n<li><code>-Wl,--whole-archive target -Wl,-no-whole-archive</code> 静态链接时把 target 都打包， 正常情况下只会将使用到的符号相关代码数据打包</li>\n</ol>\n<h2 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/268462046\">编译期间获取类型名</a></li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">auto</span> <span class=\"title\">type_name</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::string_view name, prefix, suffix;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __clang__</span></span><br><span class=\"line\">    name = __PRETTY_FUNCTION__;</span><br><span class=\"line\">    prefix = <span class=\"string\">&quot;auto type_name() [T = &quot;</span>;</span><br><span class=\"line\">    suffix = <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">elif</span> defined(__GNUC__)</span></span><br><span class=\"line\">    name = __PRETTY_FUNCTION__;</span><br><span class=\"line\">    prefix = <span class=\"string\">&quot;constexpr auto type_name() [with T = &quot;</span>;</span><br><span class=\"line\">    suffix = <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">elif</span> defined(_MSC_VER)</span></span><br><span class=\"line\">    name = __FUNCSIG__;</span><br><span class=\"line\">    prefix = <span class=\"string\">&quot;auto __cdecl type_name&lt;&quot;</span>;</span><br><span class=\"line\">    suffix = <span class=\"string\">&quot;&gt;(void) noexcept&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    name.<span class=\"built_in\">remove_prefix</span>(prefix.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    name.<span class=\"built_in\">remove_suffix</span>(suffix.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://blog.csdn.net/K346K346/article/details/51698184\">运行时获取类名字</a></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Object</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//用于在运行时获取对象的真实类型名称</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> string <span class=\"title\">getClassName</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _MSC_VER</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">typeid</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">name</span>() + <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">char</span>* name = <span class=\"built_in\">typeid</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">name</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (*name &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; *name &lt;= <span class=\"string\">&#x27;9&#x27;</span>) name++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>防止编译器优化</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> optimize off</span></span><br><span class=\"line\"><span class=\"type\">int</span> globalVar</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> optimize on</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"buildid\"><a href=\"#buildid\" class=\"headerlink\" title=\"buildid\"></a>buildid</h2><ol>\n<li>This allows two builds of the same program on the same host to always produce consistent build-ids and binary content.</li>\n<li><code>readelf -n /bin/bash</code> or <code>file /bin/bash</code></li>\n<li><a href=\"https://blog.csdn.net/flurry_rain/article/details/122544969\">读取自己的 buildid</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://cppcli.net/\">cling online</a></li>\n<li><a href=\"https://github.com/root-project/cling/\">cling the-interactive-c++-interpreter</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/139026433\">程序的编译、装载与链接</a></li>\n<li><a href=\"https://discourse.llvm.org/\">llvm 论坛</a></li>\n<li><a href=\"https://discourse.llvm.org/t/beginner-resources-documentation/5872\">llvm beginner-resources-documentation</a></li>\n<li><a href=\"https://discord.com/invite/xS7Z362\">llvm discord</a> 312567150</li>\n<li><a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\">My First Language Frontend with LLVM Tutorial</a></li>\n<li><a href=\"https://blog.llvm.org/\">llvm blog</a></li>\n<li><a href=\"https://compiler-research.org/\">compiler-research</a></li>\n<li><a href=\"https://github.com/ksco/BuildYourOwnLispCn\">BuildYourOwnLispCn</a></li>\n<li><a href=\"https://norasandler.com/archive/\">Writing a C Compiler</a></li>\n<li><a href=\"https://www.craftinginterpreters.com/\">craftinginterpreters</a></li>\n<li><a href=\"https://github.com/Evian-Zhang/llvm-ir-tutorial\">llvm-ir-tutorial</a></li>\n<li><a href=\"https://www.zhihu.com/question/401766029/answer/2733700454\">机器学习编译器的前世今生</a></li>\n</ol>\n<h2 id=\"books\"><a href=\"#books\" class=\"headerlink\" title=\"books\"></a>books</h2><ol>\n<li>深入理解计算机系统</li>\n<li>程序员的自我修养</li>\n<li>程序是怎样跑起来的</li>\n</ol>\n"},{"title":"DDS","url":"/2022/09/05/DDS/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><h3 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h3><ol>\n<li><a href=\"https://www.dds-foundation.org/what-is-dds-3/\">what-is-dds</a></li>\n<li><code>DDS(Data Distribution Service,数据分发服务)</code> 是一种以数据为中心的通信协议，用于分布式软件应用程序通信。</li>\n<li>RTPS 是 Real-Time Publish Subscribe 的缩写</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/192981171\">分布式实时通信——DDS 技术简洁</a></li>\n<li><img src=\"https://pic1.zhimg.com/80/v2-ff84b83ecac6b84f96d3631827080188_720w.jpg\" alt=\"示意图\"></li>\n<li><a href=\"https://www.zhihu.com/question/56652257\">简介 2</a><br><img src=\"https://picx.zhimg.com/80/v2-daee8186bd378ce224b0f032a735f6c6_720w.jpg?source=1940ef5c\" alt=\"DDS模型架构图\"></li>\n</ol>\n<h3 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h3><ol>\n<li><a href=\"https://www.dds-foundation.org/why-choose-dds/\">why-choose-dds</a></li>\n<li><a href=\"https://icode.best/i/86439147785337\">dds 与 some&#x2F;ip 及 opendds 与 fastdds 区别</a></li>\n<li>dds, mq , rpc 区别：<ul>\n<li>dds： 事件总线模式， mq: 代理模式？ <a href=\"https://juejin.cn/post/6949929918138417165\">事件总线（发布订阅模式）</a></li>\n<li>dds 是（主要是）基于组播的“无中心”的端到端发布订阅，kafka 等主要是基于代理节点的发布订阅，二者在体系结构上差异明显</li>\n<li>抽象程度不一样。DDS 的很多高级功能如果在 ZMQ 基础上增加成本很高。 ZMQ 更底层</li>\n</ul>\n</li>\n<li><a href=\"https://www.rti.com/blog/2017/04/20/why-would-anyone-use-dds-over-zeromq\">why-would-anyone-use-dds-over-zeromq</a><ul>\n<li>In DDS you just publish&#x2F;subscribe to topic names. You never have to provide IP addresses, computer names or ports. It is all handled by the built-in discovery. And it does it automatically without additional services. This means that applications can be re-deployed and integrated without recompilation or reconfiguration.</li>\n<li>In comparison, ZeroMQ is lower level. You must specify ports, IP addresses, etc.</li>\n</ul>\n</li>\n<li><a href=\"https://www.rti.com/blog/industrial-iot-communication-solutions-which-ones-for-you-comparison\">IIoT Solutions | 6 Industrial IoT Communication Solutions</a></li>\n<li><a href=\"https://info.rti.com/hubfs/blog-files/iiot_comsol_pngaspdf.pdf\">比较图表</a></li>\n<li><img src=\"https://marvel-b1-cdn.bc0a.com/f00000000264121/www.rti.com/hs-fs/hubfs/Assets%202017/communicationsevolution.jpg?width=720&height=405&name=communicationsevolution.jpg\" alt=\"Architectural diagrams for the various IoT protocols.\"></li>\n</ol>\n<h3 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h3><ol>\n<li><a href=\"https://www.dds-foundation.org/how-dds-works/\">how-dds-works</a></li>\n</ol>\n<h3 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h3><ol>\n<li><a href=\"https://blog.csdn.net/Tom942067059/article/details/113382934\">FastDDS、OpenDDS、ConnextDDS 三者之间是能够实现通信的</a></li>\n</ol>\n<h2 id=\"Fast-DDS\"><a href=\"#Fast-DDS\" class=\"headerlink\" title=\"Fast-DDS\"></a>Fast-DDS</h2><ol>\n<li>DCPS(以数据为中心的发布订阅模型)</li>\n</ol>\n<h3 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">% docker pull iceoryx/fastdds</span><br><span class=\"line\">% docker run -<span class=\"built_in\">id</span> --name fastdds iceoryx/fastdds</span><br><span class=\"line\">% docker <span class=\"built_in\">exec</span> -it fastdds bash</span><br><span class=\"line\">% tmux new-session <span class=\"string\">&quot;./HelloWorldExample publisher 0 1000&quot;</span> \\; \\</span><br><span class=\"line\">split-window <span class=\"string\">&quot;./HelloWorldExample subscriber&quot;</span> \\; \\</span><br><span class=\"line\">select-layout even-vertical</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://blog.csdn.net/briblue/article/details/124081170\">通信中间件 Fast DDS 基础概念简述与通信示例</a></li>\n</ol>\n"},{"title":"Dangling pointer","url":"/2020/07/26/Dangling-pointer/","content":"<h2 id=\"Sample1\"><a href=\"#Sample1\" class=\"headerlink\" title=\"Sample1\"></a>Sample1</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> Name = <span class=\"built_in\">input</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Hello &quot;</span> &lt;&lt; Name &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">input</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string Line;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin, Line);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Line.<span class=\"built_in\">c_str</span>();  <span class=\"comment\">// Line is destroyed</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sample2\"><a href=\"#Sample2\" class=\"headerlink\" title=\"Sample2\"></a>Sample2</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* p = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        p = &amp;x;</span><br><span class=\"line\">        cout &lt;&lt; *p;</span><br><span class=\"line\">    &#125;  <span class=\"comment\">// x is destroyed</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; *p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sample3\"><a href=\"#Sample3\" class=\"headerlink\" title=\"Sample3\"></a>Sample3</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string_view &#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> len;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string_view s;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">        s = a;</span><br><span class=\"line\">        cout &lt;&lt; s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;  <span class=\"comment\">// a is destroyed and a.str become a dangling pointer</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; s[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sample4\"><a href=\"#Sample4\" class=\"headerlink\" title=\"Sample4\"></a>Sample4</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object* a, Object* b)</span></span>&#123;</span><br><span class=\"line\">    Object* tmp;</span><br><span class=\"line\">    tmp = a;  <span class=\"comment\">//tmp point to a</span></span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = tmp;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// tmp was destroyed and b will be a dangling pointer</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sample5\"><a href=\"#Sample5\" class=\"headerlink\" title=\"Sample5\"></a>Sample5</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    *(a++) = i;  <span class=\"comment\">// a has been changed and a not point array[0] now</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> a;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><p><a href=\"https://zhuanlan.zhihu.com/p/85200304\">zhihu example</a></p>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"DataStructure","url":"/2022/09/15/DataStructure/","content":"<h2 id=\"CPP\"><a href=\"#CPP\" class=\"headerlink\" title=\"CPP\"></a>CPP</h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><ol>\n<li>unordered_map 排序：使用 map <code>std::map&lt;int, int&gt; ordered(unordered.begin(), unordered.end());</code> <a href=\"https://stackoverflow.com/a/6212709\">link</a></li>\n<li></li>\n</ol>\n"},{"title":"Docker","url":"/2021/02/02/Docker/","content":"<h2 id=\"NOTES\"><a href=\"#NOTES\" class=\"headerlink\" title=\"NOTES\"></a>NOTES</h2><ol>\n<li>dockerhub 下载 images 到磁盘, 传到服务器: docker pull and docker save</li>\n<li>wsl2 中设置<code>--net=host</code>会影响 docker port 设置</li>\n<li><code>docker image prune -a</code> 清理任何为用的的 image</li>\n<li><a href=\"http://www.debugself.com/2018/01/17/docker_network/\">docker build 以及 docker run 时使用 host 网络的方法</a></li>\n<li>docker 开发使用： docker image(路径无关) + docker.sh(路径相关)</li>\n<li><a href=\"https://github.com/apache/tvm/blob/main/docker/bash.sh\">tvm docker 启动 bash</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers\">windwos wsl2 + docker 开发</a> docker desktop 需要启动</li>\n<li><code>docker attach CONTAINER</code></li>\n<li><code>docker info</code> 查看 docker 信息</li>\n<li><code>docker stats</code> 可以看哪个 container 占用率高</li>\n<li><code>sudo usermod -aG docker $USER</code> 将当前用户加入到 docker 组中，否则必须使用 sudo 来运行 docker</li>\n<li><code>--user root --gpus all</code> 使用 gpu</li>\n<li><code>--privileged</code> 使用 systemctl</li>\n<li><code>--name orin</code></li>\n<li><code>docker save -o fedora-all.tar fedora</code> 保存镜像到磁盘；container 需要先 commit 才能保存到磁盘</li>\n<li><code>docker commit my-container my-image</code> 保存 container 为镜像</li>\n<li><code>docker load --input fedora.tar</code> or <code>docker load &lt; busybox.tar.gz</code></li>\n<li><code>docker login --username=xiyang.jia hub.xxx.io</code> 登录后才能 push</li>\n<li><code>docker commit efb954281fd3 j5-dsp-xiyang-dev:v1</code></li>\n<li><code>docker tag [ImageId] hub.xx.io/avp/[ImageName]:[镜像版本号]</code></li>\n<li><code>docker push docker.io/my-username/my-image:v1.0.0</code></li>\n<li><code>docker image rm eb3f9d403e36</code> 删除 image</li>\n</ol>\n<h2 id=\"docker-container-install-ssh-server\"><a href=\"#docker-container-install-ssh-server\" class=\"headerlink\" title=\"docker container install ssh server\"></a>docker container install ssh server</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i s@/archive.ubuntu.com/@/mirrors.tuna.tsinghua.edu.cn/@g /etc/apt/sources.list &amp;&amp; apt-get update -y</span><br><span class=\"line\">sudo apt install -y openssh-server</span><br><span class=\"line\">/etc/init.d/ssh start</span><br><span class=\"line\"><span class=\"comment\"># vi /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 PermitRootLogin yes和 PasswordAuthentication yes</span></span><br><span class=\"line\">/etc/init.d/ssh restart</span><br><span class=\"line\">passwd <span class=\"comment\"># 设置密码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"usefull-docker\"><a href=\"#usefull-docker\" class=\"headerlink\" title=\"usefull docker\"></a>usefull docker</h2><ol>\n<li><a href=\"https://hub.docker.com/_/gcc\">gcc</a></li>\n</ol>\n<h2 id=\"Command\"><a href=\"#Command\" class=\"headerlink\" title=\"Command\"></a>Command</h2><ol>\n<li><p><img src=\"https://user-gold-cdn.xitu.io/2019/4/9/16a02cdbf14142a0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"一图胜千言\"></p>\n</li>\n<li></li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"language-bash\"> -<span class=\"built_in\">id</span> --name gcc.xiyang -v /data0/users/teams/software/heterogeneous/xiyang.jia/:/data0/users/xiyang.jia -w /data0/users/xiyang.jia/d/working -p 10099:22 -v /etc/localtime:/etc/localtime gcc</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">% docker pull openexplorer/ai_toolchain_centos_7:v1.12.5</span><br><span class=\"line\">% docker run -<span class=\"built_in\">id</span> \\</span><br><span class=\"line\">    --name openexplorer.xiyang \\</span><br><span class=\"line\">    -v /data0/users/xiyang.jia:/data0/users/xiyang.jia \\</span><br><span class=\"line\">    -w /data0/users/xiyang.jia/d/working \\</span><br><span class=\"line\">    -p 10090:22 \\</span><br><span class=\"line\">    --privileged \\</span><br><span class=\"line\">    -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">    openexplorer/ai_toolchain_centos_7:v1.12.5</span><br><span class=\"line\"></span><br><span class=\"line\">% docker <span class=\"built_in\">exec</span> -it openexplorer.xiyang bash</span><br><span class=\"line\">% docker ps</span><br><span class=\"line\">% docker stop openexplorer.xiyang</span><br><span class=\"line\">% docker <span class=\"built_in\">rm</span> openexplorer.xiyang</span><br><span class=\"line\">% docker images</span><br><span class=\"line\">% docker image <span class=\"built_in\">rm</span> xxx</span><br><span class=\"line\">% docker logs openexplorer.xiyang</span><br><span class=\"line\">% docker start &lt;name&gt; // start docker when it <span class=\"built_in\">exit</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-load\"><a href=\"#docker-load\" class=\"headerlink\" title=\"docker load\"></a><a href=\"https://docs.docker.com/engine/reference/commandline/load/\">docker load</a></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">% docker load &lt; busybox.tar.gz</span><br><span class=\"line\">% docker load --input fedora.tar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept\"></a>Concept</h2><p>Docker 包括三个基本概念:</p>\n<ol>\n<li>镜像（Image）</li>\n<li>容器（Container）</li>\n<li>仓库（Repository）<br>理解了这三个概念，就理解了 Docker 的整个生命周期。</li>\n</ol>\n<h3 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a><a href=\"https://yeasy.gitbook.io/docker_practice/basic_concept/image\">Image</a></h3><ol>\n<li>Docker 镜像（Image），就相当于是一个 root 文件系统</li>\n<li>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li>\n</ol>\n<h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a><a href=\"https://yeasy.gitbook.io/docker_practice/basic_concept/container\">Container</a></h3><ol>\n<li>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>\n</ol>\n<h3 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"Repository\"></a><a href=\"https://yeasy.gitbook.io/docker_practice/basic_concept/repository\">Repository</a></h3><ol>\n<li><code>Docker Registry</code>: 一个集中的存储、分发镜像的服务</li>\n<li>一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</li>\n<li>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</li>\n</ol>\n<h2 id=\"传统虚拟化与-docker-虚拟化\"><a href=\"#传统虚拟化与-docker-虚拟化\" class=\"headerlink\" title=\"传统虚拟化与 docker 虚拟化\"></a>传统虚拟化与 docker 虚拟化</h2><p><img src=\"https://gblobscdn.gitbook.com/assets%2F-M5xTVjmK7ax94c8ZQcm%2F-M5xT_hHX2g5ldlyp9nm%2F-M5xTdXNYDmRWNH-Lqez%2Fvirtualization.png?alt=media\" alt=\"传统虚拟化\"><br><img src=\"https://gblobscdn.gitbook.com/assets%2F-M5xTVjmK7ax94c8ZQcm%2F-M5xT_hHX2g5ldlyp9nm%2F-M5xTdXP2scg0hxytUHA%2Fdocker.png?alt=media\" alt=\"docker虚拟化\"></p>\n<h2 id=\"VNC\"><a href=\"#VNC\" class=\"headerlink\" title=\"VNC\"></a>VNC</h2><ol>\n<li><code>vncserver :1</code></li>\n<li><code>vncserver -kill :1</code></li>\n<li><code>ps -ef | grep vnc</code>查看是否运行及端口号</li>\n<li><code>cat .vnc/password.txt</code> 查看密码(自己设置)</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://yeasy.gitbook.io/docker_practice/introduction/why\">从入门到实践</a></li>\n<li><a href=\"https://juejin.im/post/5cacbfd7e51d456e8833390c\">30 分钟快速入门</a></li>\n<li><a href=\"https://juejin.cn/post/6844903450203914253\">资源整理</a></li>\n<li><a href=\"https://juejin.cn/post/7224149297951195193\">简单聊聊 k8s，和 docker 之间的关系</a></li>\n</ol>\n","categories":["Tools","Docker"],"tags":["Docker"]},{"title":"Document","url":"/2022/09/26/Document/","content":"<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><ol>\n<li><p><a href=\"https://bazel.build/?hl=zh-cn\">参考 bazel</a></p>\n</li>\n<li><p>are several main types of documents that software engineers often need to write:</p>\n<ul>\n<li>Reference documentation, including code comments 参考文档，包括代码注释</li>\n<li>Design documents 设计文档</li>\n<li>Tutorials 教程</li>\n<li>Conceptual documentation 概念文档</li>\n<li>Landing pages 着陆页</li>\n<li>quickstart, Getting Started</li>\n<li>introduction, overview</li>\n</ul>\n</li>\n<li><p><a href=\"https://qiangmzsx.github.io/Software-Engineering-at-Google/#/zh-cn/Chapter-10_Documentation/Chapter-10_Documentatio\">Software-Engineering-at-Google</a></p>\n</li>\n</ol>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ol>\n<li><a href=\"https://github.com/jgm/pandoc\">pandoc</a> (The universal markup converter 可以转换各种标记语言)</li>\n<li>doxygen</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx\">sphinx-doc&#x2F;sphinx</a></li>\n<li>Latex <a href=\"https://github.com/Wandmalfarbe/pandoc-latex-template\">pandoc-latex-template</a></li>\n<li><a href=\"https://readthedocs.org/\">readthedocs</a></li>\n</ol>\n"},{"title":"Doxygen","url":"/2022/03/03/Doxygen/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>markdown 添加 [toc] 为 html 生成目录</li>\n<li>参考 opencv</li>\n<li><a href=\"https://stackoverflow.com/a/57979732\">multi projects</a></li>\n<li>可以用 cmake 生成 doxygen 配置 <a href=\"https://github.com/opencv/opencv/blob/17234f82d025e3bbfbf611089637e5aa2038e7b8/doc/Doxyfile.in\">link</a></li>\n<li><a href=\"https://github.com/doxygen/doxygen/tree/master/templates\">templates</a></li>\n</ol>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><h3 id=\"moritz\"><a href=\"#moritz\" class=\"headerlink\" title=\"moritz\"></a>moritz</h3><ol>\n<li><a href=\"https://sourceforge.net/projects/moritz/\">moritz 插件 生成流程图</a><ul>\n<li>可以单独使用，也可以和 doxygen 一起使用 doxywizard</li>\n<li><a href=\"https://sourceforge.net/p/moritz/wiki/Home/#31b2\">pdf 文档</a></li>\n<li>Moritz_Linux_2020_06_10.zip 执行 ansi_c_create.sh 生成 dot 和 html</li>\n<li>默认 arm 二进制， x86 需要源码编译 src_abc2xml_xml2abc_2020_06_10.zip, 需要 codeblocks 图形界面来编译，String_help.h 找不到直接替换字符</li>\n<li>cfg&#x2F;Doxyfile_ansi_c_xml 中 INPUT 改源码位置， RECURSIVE 要改为 YES</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"XML-pareser\"><a href=\"#XML-pareser\" class=\"headerlink\" title=\"XML pareser\"></a>XML pareser</h3><ol>\n<li><code>pip install  doxmlparser</code></li>\n<li><a href=\"https://github.com/doxygen/doxygen/blob/master/addon/doxmlparser/examples/metrics/metrics.py\">metrics</a><ul>\n<li><code>python metrics.py xml/</code>能够输出统计信息</li>\n<li><a href=\"https://github.com/doxygen/doxygen/blob/master/addon/doxmlparser/doxmlparser/compound.py#L7025\">location 来获取定义文件，start end line</a></li>\n</ul>\n</li>\n<li>跟据 xml 信息提取函数再加上 cxx2flow 生成流程图</li>\n<li>如果使用宏定义来区分平台，doxygen 生成 xml 时需要删除其他平台的代码或者提供 compile_commands.json 来生成；否则类的关系会有问题，生成不了具体实现的流程图</li>\n<li>也可以配置 doxygen 中的 INPUT, 只包含要使用的平台</li>\n<li>给别人生成时需要提供 compile_commands.json 和源码，根据路径在自己电脑创建相应目录，放入源码</li>\n<li><code>sed -i &#39;s/\\/builds\\/platform/\\/home\\/xiyang\\/d\\/working/g&#39; compile_commands.json</code>修改路径</li>\n<li>compile_commands.json 不太好使;</li>\n<li>(good)可以 grep compile_commands.json 要用的 cpp 文件，写到 INPUT(注意 INPUT 不支持正则), FILE_PATTERN 只设置搜索头文件(INPUT 要填最外层文件夹)， EXCLUDE 排除一些文件, 头文件路径设置到 INCLUDE_PATH，</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo apt install jq</span></span><br><span class=\"line\">rm file_list.txt; cat compile_commands.json | jq &#x27;.[] | .file&#x27; | while read -r line; do</span><br><span class=\"line\">  echo &quot;$line\\\\&quot;</span><br><span class=\"line\">done | sort &gt;&gt; file_list.txt</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>写个脚本处理 compile_commands.json 文件， 得到文件和 include 路径，设置到 INPUT 里面</li>\n<li>doxyxml</li>\n<li><a href=\"https://gitlab.com/graphviz/graphviz\">graphviz 要用最新的，否则生成的图片有问题</a></li>\n</ol>\n<h3 id=\"word-文档\"><a href=\"#word-文档\" class=\"headerlink\" title=\"word 文档\"></a>word 文档</h3><ol>\n<li><p>XML 格式： Word 文档本质上是一个 XML 文件。可以使用文本编辑器或编程语言（如 Python、C#）打开 Word 文档的 XML 格式，搜索&lt;w:altText&gt;标签，即可找到图片的 Alt 文本。</p>\n<ul>\n<li>unzip docx: 解压 docx 文件，在 word 里查看 document.xml</li>\n<li>windows 下另存为 xml</li>\n<li>通过 xml 可以看出通过图片的 name 和 descr 属性可以区分图片</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/python-openxml/python-docx?tab=readme-ov-file\">python-docx</a></p>\n<ul>\n<li>加入可选文字，后面使用 template 替换</li>\n<li>把图片写在 bytesIO 里面然后用 from docxtpl import InlineImage 插入的，用了快两年了，很稳 就是楼上这个</li>\n<li>通过 descr 属性来处理图片替换问题 <a href=\"https://chatgpt.com/c/66e15cd9-20f4-8004-a2fd-945070c91601\">link</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">inline_shape = run.add_picture(image_path, width=Inches(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 descr（图片描述）</span></span><br><span class=\"line\">inline_shape._inline.graphic.graphicData.pic.nvPicPr.cNvPr.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;descr&#x27;</span>, descr)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/elapouya/python-docx-template\">python-docx-template</a></p>\n<ul>\n<li><a href=\"https://github.com/elapouya/python-docx-template/blob/master/tests/merge_docx.py\">merge_doc</a><ul>\n<li>合并之后在下面添加用于下次合并</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/elapouya/python-docx-template/blob/master/tests/module_execute.py\">通过 json 来生成 docx</a></li>\n<li><a href=\"https://github.com/elapouya/python-docx-template/blob/master/tests/replace_picture.py\">replace_picture</a><ul>\n<li>右击图片，可选文字显示名称</li>\n</ul>\n</li>\n<li><a href=\"https://blog.csdn.net/h1773655323/article/details/119876821\">sample</a></li>\n</ul>\n</li>\n<li><p>流程图加到文档里</p>\n</li>\n<li><p>pandoc</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/yuetaope/article/details/119444970\">详解 Python-docx 自动生成 word 图文报告</a></p>\n</li>\n</ol>\n<h2 id=\"theme\"><a href=\"#theme\" class=\"headerlink\" title=\"theme\"></a>theme</h2><ol>\n<li><a href=\"https://github.com/jothepro/doxygen-awesome-css\">doxygen-awesome-css</a></li>\n<li><a href=\"https://jothepro.github.io/doxygen-awesome-css/index.html\">效果</a></li>\n</ol>\n<h2 id=\"doxygen-config\"><a href=\"#doxygen-config\" class=\"headerlink\" title=\"doxygen config\"></a>doxygen config</h2><ol>\n<li><code>sudo apt install doxygen</code></li>\n<li><code>doxygen -g &lt;config-name&gt;</code> 产生配置文件，默认为 Doxyfile <code>-s</code> 生成不带注释的配置文件</li>\n<li><code>doxygen &lt;config-name&gt;</code> 生成文档</li>\n<li>UML 生成 svg 图片<ul>\n<li><code>DOT_IMAGE_FORMAT       = svg(png)</code></li>\n<li><code>INTERACTIVE_SVG        = YES</code></li>\n</ul>\n</li>\n<li>生成 UML, 需要修改配置文件, 以下改为 YES</li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">RECURSIVE</span><br><span class=\"line\">HAVE<span class=\"emphasis\">_DOT</span></span><br><span class=\"line\"><span class=\"emphasis\">UML_LOOK</span></span><br><span class=\"line\"><span class=\"emphasis\">EXTRACT_</span>ALL</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>CLANG_DATABASE_PATH=compile_commands.json</code>提供编译信息更准确的拿到信息 <a href=\"https://stackoverflow.com/a/64476238/23011500\">link</a></li>\n<li><code>INLINE_SOURCES</code>标签。如果设置为 YES，可以将源代码直接包含到文档中。</li>\n<li><code>INPUT</code> 标签是输入的源码文件的目录, 空格分开 例如： <code>INPUT = README.md include/pg</code></li>\n<li><code>OUTPUT_LANGUAGE</code> &#x3D; 改为 Chinese</li>\n<li><code>HTML_TIMESTAMP</code>标签设置为 YES，则每个生成的 HTML 页面的页脚将包含生成页面的日期和时间。将此设置为“是”有助于显示上次运行 doxygen 的时间，从而显示文档是否最新。</li>\n<li><code>GENERATE_TREEVIEW</code> 标签用于指定是否应生成树状索引结构以显示分层信息。</li>\n<li><code>GENERATE_XML = YES</code> 产生 xml</li>\n<li><code>GENERATE_HTML = YES</code> 产生 html</li>\n<li><code>EXTRACT_ALL</code></li>\n<li><code>EXTRACT_PRIVATE</code> If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will be included in the documentation.</li>\n<li><code>EXTRACT_STATIC</code></li>\n<li><code>EXTRACT_LOCAL_METHODS</code></li>\n<li><code>EXTRACT_ANON_NSPACES</code>提取匿名函数</li>\n<li><code>PROJECT_NAME</code></li>\n<li><code>PROJECT_NUMBER</code></li>\n<li><code>PROJECT_LOGO</code> 首页左侧图标</li>\n<li><code>EXTRACT_STATIC</code> 如果设置为 YES，一个文件的所有静态成员都将包含在文档中。</li>\n<li><code>EXTRACT_PRIVATE</code> 如果设置为 YES，一个类的所有私有成员都将包含在文档中。</li>\n<li><code>IMAGE_PATH</code> 修复 markdown 生成网页时 doc 出错问题</li>\n<li><code>USE_MDFILE_AS_MAINPAGE = ./README.md</code> 主页</li>\n<li><code>HTML_OUTPUT = doc_html</code></li>\n<li><code>LATEX_OUTPUT = doc_latex</code></li>\n<li>输出 color <a href=\"https://github.com/jothepro/doxygen-awesome-css/blob/main/docs/customization.md#doxygen-generator\">link</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTML_COLORSTYLE_HUE    = 209</span><br><span class=\"line\">HTML_COLORSTYLE_SAT    = 255</span><br><span class=\"line\">HTML_COLORSTYLE_GAMMA  = 113</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pdf\"><a href=\"#pdf\" class=\"headerlink\" title=\"pdf\"></a>pdf</h2><ol>\n<li><code>sudo apt-get install texlive-full texlive-latex-base</code> <a href=\"https://tex.stackexchange.com/a/481681\">link</a></li>\n<li><code>cd latex &amp;&amp; make</code></li>\n<li><code>doxygen -w latex header.tex footer.tex doxygen.sty</code> 先生成默认配置，修改 doxygen.config 指定<code>LATEX_HEADER = header.tex</code> <a href=\"https://stackoverflow.com/a/16222657\">link</a></li>\n<li>修改 refman.tex 来改变 pdf 生成</li>\n<li><code>sed -i &quot;s/Doxygen/xx xx/&quot; refman.tex</code>修改制作者名字</li>\n<li>中文问题 <code>\\begin&#123;CJK&#125;&#123;UTF8&#125;</code> 换成 <code>\\begin&#123;CJK&#125;&#123;gbsn&#125;</code> <a href=\"https://www.cnblogs.com/zyl910/archive/2013/06/02/doxygen_pdf_chinese.html\">link</a></li>\n<li>空页问题： <code>COMPACT_LATEX</code> to YES</li>\n<li>换页问题： <code>\\doxysection</code> 之前加 <code>\\newpage</code></li>\n<li>refman.tex 处理</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&quot;/fancyfoot/d&quot;</span> latex/refman.tex</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;/fancyhead/d&quot;</span> latex/refman.tex</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/&#123;fancyplain&#125;/a\\\\\\cfoot&#123;\\\\thepage&#125;&#x27;</span> latex/refman.tex</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/&#123;fancyplain&#125;/a\\\\\\rhead&#123;&#125;&#x27;</span> latex/refman.tex</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/&#123;fancyplain&#125;/a\\\\\\lhead&#123;&#125;&#x27;</span> latex/refman.tex</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/doxysection/i\\\\\\newpage&#x27;</span> latex/refman.tex</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s/Doxygen 1.8.17/PhiGent Robotics/&quot;</span> latex/refman.tex</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s/&#123;min&#125;/&#123;gbsn&#125;/&quot;</span> latex/refman.tex</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>\\pagestyle&#123;fancyplain&#125;</code> 删除之后页眉页脚不再有横杠 <code>\\pagestyle&#123;plain&#125;</code></li>\n</ol>\n<h2 id=\"notes\"><a href=\"#notes\" class=\"headerlink\" title=\"notes\"></a>notes</h2><ol>\n<li>不要在有 build 的目录下</li>\n<li>如果想生成详细的 UML 图，需要设置<code>EXTRACT_STATIC</code> <code>EXTRACT_PRIVATE</code>为 YES</li>\n</ol>\n<h2 id=\"文档解析\"><a href=\"#文档解析\" class=\"headerlink\" title=\"文档解析\"></a>文档解析</h2><ol>\n<li>Class Hierarchy 可以查看类层级关系</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://fossies.org/dox/all.html\">fossies doxygen lists</a></li>\n<li><a href=\"https://www.doxygen.nl/manual/starting.html\">getting start</a></li>\n<li><a href=\"https://www.guyuehome.com/35640\">参数详解</a></li>\n<li><a href=\"https://doxygen.nl/projects.html\">使用 doxygen 的项目</a></li>\n<li><a href=\"https://docs.nvidia.com/metropolis/deepstream/sdk-api/index.html\">deepstream doxygen</a></li>\n<li><a href=\"https://google.github.io/ion/base_2logging_8h.html\">ion</a></li>\n<li><a href=\"https://docs.opencv.org/4.x/d9/df8/tutorial_root.html\">opencv tutorial</a></li>\n<li><a href=\"https://github.com/opencv/opencv/blob/17234f82d025e3bbfbf611089637e5aa2038e7b8/doc/Doxyfile.in\">opencv config</a></li>\n<li><a href=\"https://github.com/doxygen/doxygen/tree/master/templates\">templates</a></li>\n</ol>\n","categories":["Program"],"tags":["Doxygen"]},{"title":"Eclipse Cpp","url":"/2020/10/06/Eclipse-Cpp-IDE-on-Windows10/","content":"<h2 id=\"install-Eclipse-IDE-for-C-C-Developers\"><a href=\"#install-Eclipse-IDE-for-C-C-Developers\" class=\"headerlink\" title=\"install Eclipse IDE for C&#x2F;C++ Developers\"></a>install Eclipse IDE for C&#x2F;C++ Developers</h2><ol>\n<li><a href=\"https://www.eclipse.org/downloads/packages/release/kepler/sr2/eclipse-ide-cc-developers\">Officail Download</a></li>\n</ol>\n<h2 id=\"install-compiler-MinGW\"><a href=\"#install-compiler-MinGW\" class=\"headerlink\" title=\"install compiler MinGW\"></a>install compiler MinGW</h2><ol>\n<li><a href=\"http://mingw.org/wiki/InstallationHOWTOforMinGW\">Official Install</a></li>\n<li><a href=\"https://blog.csdn.net/done1182818968/article/details/105385382\">Lose Packages</a></li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"Effective modern cpp","url":"/2020/08/14/Effective-modern-cpp/","content":"<h2 id=\"绪论\"><a href=\"#绪论\" class=\"headerlink\" title=\"绪论\"></a>绪论</h2><ol>\n<li><code>右值</code>对应的是函数返回的临时对象，<code>左值</code>是可指涉的对象，可通过名字，指针等来标识。</li>\n<li>判断左值右值方法： 判断是否能取得地址。如果能取得地址则是左值，不能则为右值。例如<code>Widget(Widget&amp;&amp; rhs);</code>其中rhs为左值，因为函数体内对rhs取地址没有问题。相当于rhs被右值初始化，接受了右值。</li>\n<li>函数中，<code>实参</code>是用来初始化<code>形参</code>的。</li>\n<li>形参都是左值，而作为其初始化依据的实参，既能是右值，也可能是左值。例：<code>Widget(Widget&amp; rhs);</code>rhs是左值，传入的实参也是左值。<code>Widget(Widget&amp;&amp; rhs);</code>rhs是左值，传入的实参是右值。</li>\n<li><code>声明</code>的作用是引入名字和类型，而不给出细节。如存储位置或具体实现。<code>定义</code>则会给存储位置和具体实现的细节。定义同时也可以当声明用。</li>\n<li><code>函数的签名</code>：只包含形参类别和返回值类别，不包含函数名字和形参名字。例如：<code>bool(const Widget&amp;)</code></li>\n</ol>\n<h2 id=\"第一章-类型推到\"><a href=\"#第一章-类型推到\" class=\"headerlink\" title=\"第一章 类型推到\"></a>第一章 类型推到</h2><ol>\n<li>C++98仅有一套类型推导规则，用于函数模板。C++11对其进行改进，并增加了两套，一套用于auto，一套用于decltype。C++14又扩展了使用语义。</li>\n</ol>\n<h3 id=\"条款1：-理解模板类别推导\"><a href=\"#条款1：-理解模板类别推导\" class=\"headerlink\" title=\"条款1： 理解模板类别推导\"></a>条款1： 理解模板类别推导</h3><ol>\n<li></li>\n</ol>\n<h2 id=\"第三章-转向现代C\"><a href=\"#第三章-转向现代C\" class=\"headerlink\" title=\"第三章 转向现代C++\"></a>第三章 转向现代C++</h2><h3 id=\"在创建对象时注意区分-和\"><a href=\"#在创建对象时注意区分-和\" class=\"headerlink\" title=\"在创建对象时注意区分()和{}\"></a>在创建对象时注意区分()和{}</h3><ol>\n<li>对象初始化的方式包括使用小括号，使用等号，或是使用大括号：<code>int x(0); int y = 0; int z&#123;0&#125;;</code> 等号加大括号等效于大括号<code>int z = &#123;0&#125;;</code></li>\n<li>大括号初始化又称为<code>统一初始化</code>。</li>\n<li>大括号可以用来对容器进行初始化，例如: <code>vector&lt;int&gt; v&#123;1, 2, 3, 4&#125;;</code></li>\n<li>类的成员变量在类的定义时可以用<code>&#123;&#125;</code>或者<code>=</code>进行初始化，不能使用<code>()</code></li>\n<li>不可复制对象(例如：std::atomic)可以使用<code>&#123;&#125;</code>或者<code>()</code>进行初始化，不能使用<code>=</code></li>\n<li>大括号初始化<code>禁止内建类型进行隐式窄化类型转化</code>。如：<code>double x, y; ... ; int sum&#123;x+y&#125;;</code>编译出错，double无法用int表示。</li>\n<li>C++规定，任何能够解析为声明的都要解析为声明。大括号初始化免疫。<code>Widget w1();</code>此处被解析为函数声明，而不是初始化w1调用构造函数。<code>Widget w2&#123;&#125;;</code>调用无形参的构造函数来构造w2。</li>\n<li>大括号初始化时如果形参出现std::initializer_list会优先调用，此时可以小括号。</li>\n<li>模板内容进行创建时，应该使用小括号还是大括号是一个棘手问题。</li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"Efficient-LLM","url":"/2024/01/14/Efficient-LLM/","content":"<h2 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h2><h3 id=\"大模型推理综述-Towards-Efficient-Generative-Large-Language-Model-Serving-A-Survey-from-Algorithms-to-Systems\"><a href=\"#大模型推理综述-Towards-Efficient-Generative-Large-Language-Model-Serving-A-Survey-from-Algorithms-to-Systems\" class=\"headerlink\" title=\"大模型推理综述 Towards Efficient Generative Large Language Model Serving: A Survey from Algorithms to Systems\"></a><a href=\"https://arxiv.org/abs/2312.15234\">大模型推理综述 Towards Efficient Generative Large Language Model Serving: A Survey from Algorithms to Systems</a></h3><ol>\n<li>Context or initial or prefil 阶段: input token 是并行的，可以利用 flash attention 来加速</li>\n<li>Generation or incremental or decode 阶段: input token 是 1， Autoregressive(AR)，使用 paged attention 来实现<ul>\n<li>如果是 batch 为 1， 可以填充为 8 来利用 tensor core; 或者使用优化的 cuda core GEMV</li>\n<li>解码阶段的过程主要由 GEMV（batch size&#x3D;1）或 flat GEMM（batch size &gt; 1）操作组成</li>\n</ul>\n</li>\n<li><a href=\"https://mp.weixin.qq.com/s/Uue0SxH6W_tI8K4Zb0igLQ\">中文解读</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/675101140\">黄浴中文翻译</a></li>\n<li><code>低延迟和高吞吐量</code>是 LLM 服务系统中的双重优化目标，代表了互补但往往相互冲突的目标，需要一种平衡的策略来优化单个任务的快速响应和指定时间内最大化处理任务量之间的权衡</li>\n<li>除了注意计算之外，对于线性投影算子，最近还出现了用<code>通用矩阵向量积（GEMV，general matrix-vector product）代替GEMM的趋势</code>，更有效地处理小批量（即大小为 1）的情况。</li>\n</ol>\n<h3 id=\"Full-Stack-Optimization-of-Transformer-Inference-a-Survey\"><a href=\"#Full-Stack-Optimization-of-Transformer-Inference-a-Survey\" class=\"headerlink\" title=\"Full Stack Optimization of Transformer Inference: a Survey\"></a><a href=\"https://arxiv.org/abs/2302.14017\">Full Stack Optimization of Transformer Inference: a Survey</a></h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/677595064\">黄浴中文翻译</a></li>\n</ul>\n<h3 id=\"Efficient-Large-Language-Models-A-Survey\"><a href=\"#Efficient-Large-Language-Models-A-Survey\" class=\"headerlink\" title=\"Efficient Large Language Models: A Survey\"></a><a href=\"https://github.com/AIoT-MLSys-Lab/Efficient-LLMs-Survey\">Efficient Large Language Models: A Survey</a></h3><h3 id=\"Efficient-Deep-Learning-Book\"><a href=\"#Efficient-Deep-Learning-Book\" class=\"headerlink\" title=\"Efficient Deep Learning Book\"></a><a href=\"https://www.jiqizhixin.com/articles/2022-05-03-4\">Efficient Deep Learning Book</a></h3><ol>\n<li><a href=\"https://efficientdlbook.com/#download\">https://efficientdlbook.com</a></li>\n</ol>\n<h2 id=\"sampling\"><a href=\"#sampling\" class=\"headerlink\" title=\"sampling\"></a>sampling</h2><ol>\n<li>top-K</li>\n<li>top-P</li>\n</ol>\n<h2 id=\"系统优化技术\"><a href=\"#系统优化技术\" class=\"headerlink\" title=\"系统优化技术\"></a>系统优化技术</h2><ol>\n<li><a href=\"https://developer.nvidia.com/blog/mastering-llm-techniques-inference-optimization/\">nvidia mastering-llm-techniques-inference-optimization</a></li>\n<li><a href=\"https://arxiv.org/abs/2312.15234\">大模型推理综述 Towards Efficient Generative Large Language Model Serving: A Survey from Algorithms to Systems</a><ul>\n<li>量化</li>\n<li>并行计算</li>\n<li>内存管理</li>\n<li>请求调度</li>\n<li>kernel 优化</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/tree/main?tab=readme-ov-file#advanced-topics\">tensorrt llm 高级主题</a><ul>\n<li>量化</li>\n<li>in-flight batching</li>\n<li>attention</li>\n<li>graph rewriting</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><ol>\n<li>vllm</li>\n<li>tensorrt-llm</li>\n</ol>\n<h2 id=\"attention-优化\"><a href=\"#attention-优化\" class=\"headerlink\" title=\"attention 优化\"></a>attention 优化</h2><ol>\n<li>flash attention -&gt; flash attention v2 -&gt; flash decoding</li>\n<li>xformers</li>\n<li>paged attention</li>\n<li>token attention</li>\n<li>cublas</li>\n<li>cutlass</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/horseee/Awesome-Efficient-LLM\">Awesome-Efficient-LLM</a></li>\n<li><a href=\"https://huggingface.co/spaces/optimum/llm-perf-leaderboard\">llm-perf-leaderboard</a><ul>\n<li>lantency vs memory vs score</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h2><ol>\n<li><a href=\"https://huggingface.co/docs/transformers/perplexity\">PPL: perplexity</a></li>\n<li>hugging face 显示指标<br><img src=\"https://i.ibb.co/THp5xHd/Ijz-O30-Ae96.png\" alt=\"指标\"></li>\n<li><a href=\"https://huggingface.co/spaces/optimum/llm-perf-leaderboard\">llm-perf-leaderboard</a><ul>\n<li>lantency vs memory vs score</li>\n<li>e2e lantency</li>\n<li>e2e throughput</li>\n<li>prefil lantency</li>\n<li>decode throughput</li>\n</ul>\n</li>\n<li>TTFT 表示 Time To First Token，TPOT 表示 Time Per Output Token。前者由初始相位处理速度驱动，而后者直接取决于增量解码中的每次迭代执行时间。</li>\n</ol>\n"},{"title":"Cpp grammar","url":"/2021/09/20/Cpp-grammar/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE:\"></a>NOTE:</h2><h3 id=\"basic-concept\"><a href=\"#basic-concept\" class=\"headerlink\" title=\"basic concept\"></a>basic concept</h3><ol>\n<li>程序(内存中完全链接): 算法(函数， 代码) + 数据(变量)</li>\n<li>编译(未完全链接)：引用 + 定义 (变量和函数)</li>\n<li>注意内存分布(代码 + 数据)</li>\n<li>编译期，链接期，加载期， 运行期</li>\n<li>语句， 表达式</li>\n<li>作用域， 生命周期， 所有权</li>\n<li>对象何时构造(编译期，运行期)及构造顺序</li>\n</ol>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><ol>\n<li><a href=\"https://github.com/p-ranav/tabulate\">tabulate</a></li>\n<li><a href=\"https://github.com/dendibakh/perf-ninja/blob/main/GetStarted.md\">perf-ninja 性能比较</a></li>\n<li><a href=\"https://github.com/abseil/abseil-cpp\">google abseil</a></li>\n<li><a href=\"https://abseil.io/\">abseil doc</a></li>\n<li><a href=\"https://github.com/facebook/folly\">facebook folly</a></li>\n<li><a href=\"https://abseil.io/resources/swe-book\">Software Engineering at Google</a></li>\n<li><a href=\"https://github.com/qiangmzsx/Software-Engineering-at-Google\">Software-Engineering-at-Google 中文版本</a></li>\n<li><a href=\"https://github.com/Xilinx/Vitis-AI/blob/2.0/tools/Vitis-AI-Library/benchmark/include/vitis/ai/benchmark.hpp\">Vitis-AI</a></li>\n<li><a href=\"https://github.com/Xilinx/Vitis-AI/blob/c26eae36f034d5a2f9b2a7bfe816b8c43311a4f8/src/Vitis-AI-Library/benchmark/include/vitis/ai/demo4.hpp\">Vitis AI demo</a></li>\n<li><a href=\"https://github.com/stbrumme/hash-library\">hash-library</a></li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a><a href=\"https://zhuanlan.zhihu.com/p/64493524\">attribute</a></h2><ol>\n<li><code>[[maybe_unused]]</code></li>\n<li><code>__attribute__((visibility(&quot;default&quot;)))</code> 函数符号不隐藏</li>\n<li><code>[[deprecated]]/[[deprecated(&quot;reason&quot;)]]</code></li>\n</ol>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>std::array 编译期需要确定大小；在栈上分配内存，std::vector 在堆上;在栈上申请内存比堆快 <a href=\"https://zhuanlan.zhihu.com/p/481687008\">link</a>;</li>\n<li><code>类型擦除</code>指将原有类型消除或者隐藏，因为很多时候我们并不关心具体类型是什么，我们只需要去使用就可以了，提高提高代码的简洁性。是不是很耳熟，对，抽象继承的多态其实就是比较传统、常见及简单的类型擦除。我们使用的只是抽象接口，而不关心具体实现类的类型。类型擦除常用做法是<code>多态、模板、通用类型（C++17 std::any|std::variant）、闭包</code></li>\n<li>注意区分#ifdef 在头文件和.cpp 中的表现，在头文件中，不同的库也要定义才能生效，如果在.cpp 中，只需要相应 lib 定义就好</li>\n<li><a href=\"https://blog.csdn.net/sksukai/article/details/105612235\">头文件中定义问题</a>&#x2F;</li>\n</ol>\n<h2 id=\"性能测试-chrono-link\"><a href=\"#性能测试-chrono-link\" class=\"headerlink\" title=\"性能测试 chrono link\"></a>性能测试 chrono <a href=\"https://github.com/Xilinx/Vitis-AI/blob/master/tools/Vitis-AI-Runtime/VART/vart/util/include/vitis/ai/profiling.hpp\">link</a></h2><ol>\n<li>计时用 steady_clock, timestamp 用 system_clock</li>\n<li>steady_clock 是单调的时钟，相当于教练手中的秒表；只会增长，适合用于记录程序耗时；</li>\n<li>system_clock 是系统的时钟；因为系统的时钟可以修改；甚至可以网络对时； 所以用系统时间计算时间差可能不准。</li>\n<li>high_resolution_clock, 不建议使用</li>\n<li>可以和 glog 与 get_env 结合(性能与 Debug 结合) <a href=\"https://github.com/Xilinx/Vitis-AI/blob/master/tools/Vitis-AI-Runtime/VART/vart/util/include/vitis/ai/env_config.hpp\">link</a></li>\n<li><a href=\"https://www.jianshu.com/p/1861a844a2fb\">CLOCK_MONOTONIC 与 CLOCK_REALTIME 区别</a></li>\n<li>C++11 中的 system_clock::now() 使用 gettimeofday()或者 std::time()，而 steady_clock::now()则使用 clock_gettime(CLOCK_MONOTONIC,*);</li>\n</ol>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;chrono&gt;</span><br><span class=\"line\">using Clock = std::chrono::steady_clock;</span><br><span class=\"line\">#define __TIC__(tag) auto __##tag##_start_time = Clock::now();</span><br><span class=\"line\"></span><br><span class=\"line\">#define __TOC__(tag)                                                  \\</span><br><span class=\"line\">  auto __##tag##_end_time = Clock::now();                             \\</span><br><span class=\"line\">  std::cout &lt;&lt; #tag &lt;&lt; <span class=\"string\">&quot; : &quot;</span>                                          \\</span><br><span class=\"line\">            &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;( \\</span><br><span class=\"line\">                   __##tag##_end_time - __##tag##_start_time)         \\</span><br><span class=\"line\">                   .count()                                           \\</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">&quot;us&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ns</li>\n</ol>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;chrono&gt;</span><br><span class=\"line\">using Clock = std::chrono::steady_clock;</span><br><span class=\"line\">#define __TIC__(tag) auto __##tag##_start_time = Clock::now();</span><br><span class=\"line\"></span><br><span class=\"line\">#define __TOC__(tag)                                                  \\</span><br><span class=\"line\">  auto __##tag##_end_time = Clock::now();                             \\</span><br><span class=\"line\">  std::cout &lt;&lt; #tag &lt;&lt; <span class=\"string\">&quot; : &quot;</span>                                          \\</span><br><span class=\"line\">            &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;( \\</span><br><span class=\"line\">                   __##tag##_end_time - __##tag##_start_time)         \\</span><br><span class=\"line\">                   .count()                                           \\</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">&quot;ns&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数式编程\"><a href=\"#数式编程\" class=\"headerlink\" title=\"数式编程\"></a><a href=\"https://zhuanlan.zhihu.com/p/45750387\">数式编程</a></h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><ol>\n<li>transform</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(<span class=\"number\">10000</span>, <span class=\"number\">1.111</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec1</span><span class=\"params\">(<span class=\"number\">10000</span>, <span class=\"number\">2.111</span>)</span></span>;</span><br><span class=\"line\">std::vector&lt;<span class=\"type\">float</span>&gt; result;</span><br><span class=\"line\"><span class=\"comment\">// 操作一个vector</span></span><br><span class=\"line\">std::<span class=\"built_in\">transform</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">back_inserter</span>(result),</span><br><span class=\"line\">               [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> item) -&gt; <span class=\"type\">float</span> &#123; <span class=\"keyword\">return</span> item + <span class=\"number\">100</span>; &#125;);</span><br><span class=\"line\"><span class=\"comment\">// for_each(vec.begin(), vec.end(), [](auto &amp;item) &#123; item += 100; &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 操作两个vector <span class=\"doctag\">NOTE:</span> 使用前需要检查vec, vec1 size是否匹配。</span></span><br><span class=\"line\"><span class=\"comment\">// 性能好 797us 13us(-O3)</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">result1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">0.0</span>)</span></span>;</span><br><span class=\"line\">std::<span class=\"built_in\">transform</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec1.<span class=\"built_in\">begin</span>(), result1.<span class=\"built_in\">begin</span>(),</span><br><span class=\"line\">               [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item1, <span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item2) -&gt; <span class=\"type\">float</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> item1 + item2;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 性能差 2605us 173us(-O3)</span></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">float</span>&gt; result2;</span><br><span class=\"line\">std::<span class=\"built_in\">transform</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec1.<span class=\"built_in\">begin</span>(),</span><br><span class=\"line\">               std::<span class=\"built_in\">back_inserter</span>(result2),</span><br><span class=\"line\">               [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item1, <span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item2) -&gt; <span class=\"type\">float</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> item1 + item2;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\"><span class=\"comment\">// for 463us 70us(-O3)</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">result3</span><span class=\"params\">(vec.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; result3.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">  result[i] = vec[i] + vec1[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><ol>\n<li>copy_if</li>\n<li>remove_if</li>\n</ol>\n<h3 id=\"fold\"><a href=\"#fold\" class=\"headerlink\" title=\"fold\"></a>fold</h3><ol>\n<li>accumulate <code>float sum = std::accumulate(vec.begin(), vec.end(), 0.0, std::plus&lt;float&gt;());</code></li>\n</ol>\n<h3 id=\"func-函数名\"><a href=\"#func-函数名\" class=\"headerlink\" title=\"__func__函数名\"></a>__func__函数名</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">myfunc</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __func__);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RVO-返回值优化-effective-modern-c-166-页\"><a href=\"#RVO-返回值优化-effective-modern-c-166-页\" class=\"headerlink\" title=\"RVO 返回值优化 effective modern c++ 166 页\"></a>RVO 返回值优化 effective modern c++ 166 页</h2><ol>\n<li>返回值也是函数参数，RVO 直接在位函数返回值分配的内存上创建局部变量来避免复制</li>\n<li>两个条件：<ul>\n<li>局部对象类型和返回值类型相同</li>\n<li>返回的就是局部对象本身</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"gcc-O0-O1-O2-O3-四级优化选项及每级分别做什么优化\"><a href=\"#gcc-O0-O1-O2-O3-四级优化选项及每级分别做什么优化\" class=\"headerlink\" title=\"gcc -O0 -O1 -O2 -O3 四级优化选项及每级分别做什么优化\"></a><a href=\"https://blog.csdn.net/qq_31108501/article/details/51842166\">gcc -O0 -O1 -O2 -O3 四级优化选项及每级分别做什么优化</a></h2><h2 id=\"GDB-使用\"><a href=\"#GDB-使用\" class=\"headerlink\" title=\"GDB 使用\"></a><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html\">GDB 使用</a></h2><ol>\n<li>.gdbinit gdp 配置文件</li>\n<li>编译要加 -g <a href=\"https://zhuanlan.zhihu.com/p/74897601\">link</a></li>\n<li>readelf -S xxx|grep debug 查看有没有 debug 段</li>\n<li>file xxx 查看有没有 stripped (编译不能加 -s)</li>\n<li>-fkeep-inline-functions 调试内联，编译的程序会变大很多</li>\n<li>set logging file log.txt, set logging on, set logging overwrite on 记录执行 log</li>\n<li>gdb -q 启动时不显示版本等信息</li>\n<li>gdb –args xxx … &amp;&amp; r 或 gdb xxx &amp;&amp; set args … &amp;&amp; r 或 gdb xxx &amp;&amp; r …</li>\n<li>show env xxx 显示环境变量</li>\n<li>bt 或 i s(info stack) 显示程序栈 backtrace</li>\n<li>l 或 l + 向下显示源码， l - 向上显示源码，l 1,100 打印 1 到 100 行， l xxx:10 显示文件 xxx 第 10 行, l funciton 显示函数，</li>\n<li>bt 可以显示运行到哪一行, l -1 或 l +1 显示当前行前后代码</li>\n<li>step&#x2F;finish 进入&#x2F;返回函数 <a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/finish-and-return.html\">link</a></li>\n<li>tb 如果想让断点只生效一次，可以使用“tbreak”命令</li>\n<li>source script 执行脚本中的命令</li>\n<li>p&#x2F;x c 十六进制打印</li>\n<li>d 删除所有断点</li>\n<li>watch expr</li>\n<li>info functions add 列出 add 函数</li>\n<li>在程序入口处打断点, 先 readelf -h xxx 读入口地址，然后 b * 设置断点 <a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/break-on-entry.html\">link</a></li>\n<li>set print array-indexes on 打印数组下标</li>\n<li>i args 显示函数参数</li>\n<li>i locals 打印局部变量</li>\n<li>i sharedlibrary 显示共享链接库</li>\n<li>whatis xxx 打印变量类型， ptype xxx 打印详细信息，</li>\n<li>set history filename ~&#x2F;.gdb_history， set history save on 保存历史</li>\n<li>shell ls 或 !ls 在 gdb 中执行 shell 命令</li>\n<li>可以直接执行 cd 和 pwd</li>\n<li>远程调试：</li>\n<li>emacs gdb-many-window, gdb 多窗口调试</li>\n</ol>\n<h2 id=\"input-and-output\"><a href=\"#input-and-output\" class=\"headerlink\" title=\"input and output\"></a>input and output</h2><ol>\n<li><code>std::flush</code> 立即输出， Without std::flush, the output would be the same, but may not appear in real time.</li>\n</ol>\n<h2 id=\"标准函数-和-库\"><a href=\"#标准函数-和-库\" class=\"headerlink\" title=\"标准函数 和 库\"></a>标准函数 和 库</h2><ol>\n<li>std::filesystem 库 create_directoriesfile_size, exists, current_path,</li>\n<li>std::numeric_limits<float>::max()最大浮点数， std::numeric_limits<float>::lowest() 最小浮点数，注意不是 min。 #include<limits></li>\n<li>std::round()四舍五入 #include&lt;math.h&gt;</li>\n<li>std::floor()向下取整 #include&lt;math.h&gt;</li>\n<li>std::ceil() 向上取整 #include&lt;math.h&gt;</li>\n<li>std::memcmp() 按位比较是否完全相等，解决 if(-0 &#x3D;&#x3D; 0)问题</li>\n<li>std::memset() 只能用于设置连续内存，不能用于 vector <a href=\"https://www.zhihu.com/question/408799127\">link</a></li>\n<li>int mi &#x3D; std::min({x1, x2, x3, x4});</li>\n<li>std::max_element <code>auto max_value = *std::max_element(vec0.begin(), vec0.end()); </code></li>\n<li>std::min_element <code>auto min_value = *std::min_element(vec0.begin(), vec0.end());</code></li>\n<li>std::minmax_element <code>const auto [min, max] = std::minmax_element(vec0.begin(), vec0.end()); std::cout &lt;&lt; &quot;min = &quot; &lt;&lt; *min &lt;&lt; &quot;, max = &quot; &lt;&lt; *max &lt;&lt; &#39;\\n&#39;;</code></li>\n</ol>\n<h2 id=\"第三方库-package\"><a href=\"#第三方库-package\" class=\"headerlink\" title=\"第三方库 package\"></a>第三方库 package</h2><ol>\n<li><a href=\"https://github.com/fmtlib/fmt\">fmtlib&#x2F;fmt 可以 format 各种字符串, 方便打印</a></li>\n<li><a href=\"https://www.json.org/json-en.html\">json 库集合</a></li>\n<li><a href=\"https://github.com/nlohmann/json\">json for modern c++</a></li>\n<li><a href=\"https://github.com/miloyip/nativejson-benchmark#parsing-time\">jeson benchmark</a></li>\n</ol>\n<h2 id=\"ideas\"><a href=\"#ideas\" class=\"headerlink\" title=\"ideas\"></a>ideas</h2><ol>\n<li>记录语法时最好能举个例子</li>\n<li><code>why?</code>。模块<code>存在的目的？解决了什么问题？特点特性？优缺点？适用范围？概念？架构？设计思路？具体实现方式？</code>等方面学习？</li>\n<li>模块的存在的目的，功能作用，实现方式</li>\n<li>按照 Bjarny Stroustrup 列的特性重新进行分类。</li>\n</ol>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><ol>\n<li><code>开闭原则</code> 软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的</li>\n<li><code>单一职责原则</code> 一个类只做一件事</li>\n<li><code>里氏替换原则</code> 子类应该可以完全替代父类，也就是说在使用继承时，只扩展新功能，不要破坏父类原有的功能。</li>\n<li><code>依赖倒置原则</code> 细节应该依赖与抽象，抽象不应该依赖于细节。把抽象层放在程序设计的高层，并保持稳定，程序的细节变化由低层的实现层来完成。</li>\n<li><code>迪米特法则/最少知道原则</code> 一个类不应该知道自己操作类的细节，换言之，只和朋友谈话，不和朋友的朋友谈话。</li>\n<li><code>接口隔离原则</code> 客户端不应该依赖它不需要的接口。如果一个接口在实现时，部分方法由于冗余被客户端空实现，则应该将该接口拆分，让实现类只依赖自己需要的接口。</li>\n</ol>\n<h2 id=\"struct-对齐和补齐\"><a href=\"#struct-对齐和补齐\" class=\"headerlink\" title=\"struct 对齐和补齐\"></a><a href=\"http://www.lingjun.online/2020/07/21/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E9%82%A3%E7%82%B9%E4%BA%8B/\">struct 对齐和补齐</a></h2><p>结构体的对齐和补齐的规则：<br>对齐：假定从零地址开始，每成员的起始地址编号，必须是它本身字节数的整数倍。<br>补齐：结构的总字节数必须是它最大成员的整数倍。</p>\n<h2 id=\"C-language-features\"><a href=\"#C-language-features\" class=\"headerlink\" title=\"C++ language features\"></a>C++ language features</h2><h2 id=\"Concurrency-Parallelism-and-Async\"><a href=\"#Concurrency-Parallelism-and-Async\" class=\"headerlink\" title=\"Concurrency, Parallelism and Async\"></a>Concurrency, Parallelism and Async</h2><ol>\n<li>Concurrency(并发): Less freedom for the scheduler(usually because of missing information)</li>\n<li>Parallelism(并行): More information provided to the scheduler(thus more freedom)</li>\n<li>Serial(串行：单线程) is between concurrency and parallelism.</li>\n<li></li>\n</ol>\n<h3 id=\"C-concurrency-development\"><a href=\"#C-concurrency-development\" class=\"headerlink\" title=\"C++ concurrency development\"></a>C++ concurrency development</h3><ol>\n<li>C++11: Memory model, Threads, Mutexes and locks, Thread local data, Condition vaviables, Tasks</li>\n<li>C++14: Reader-writer locks</li>\n<li>C++17: Parallel STL</li>\n<li>C++20: std::jthread, Atomic smart pointers, Latches and barriers, Semaphores, Coroutines</li>\n<li>C++23: Executors, std::future, extensions, Transactional memory, Task blocks, Data-parallel vector, library</li>\n<li>多线程要统计各个函数的运行时间，根据时间进行线程数比例划分，例如，预处理函数 1s，处理函数 2s，那么给预处理分配 1 个线程，处理分配两个线程，</li>\n</ol>\n<h2 id=\"OOP\"><a href=\"#OOP\" class=\"headerlink\" title=\"OOP\"></a>OOP</h2><ol>\n<li>Object-Oriented Programming</li>\n<li>base class: defines the API</li>\n<li>derived classes: provide different implementaions</li>\n</ol>\n<h2 id=\"Generic-Programming\"><a href=\"#Generic-Programming\" class=\"headerlink\" title=\"Generic Programming\"></a>Generic Programming</h2><ol>\n<li>泛型编程主要是为算法流程编写的，不是为数据结构，使算法通用化，可以适应不同的数据结构。</li>\n<li>可以先写一个具体的例子，抽象出算法，屏蔽数据结构（类型）。</li>\n<li><code>A type: specifies the set of operations that can be applied to an object and specifies how an object is laid out in memory</code> 类型不仅规定对象的操作集合，还规定对象在内存中的排布</li>\n<li><code>A concept: Specifies the set of operations that can be applied to an object and says nothing about the layout of the object</code> Concept 只规定对象的操作集合，不规定对象在内存中的排布。</li>\n<li>模板类是比参数类型 T 更高一级的抽象。模板类实现高一级别的抽象，而不用关心低一级抽象的不同。</li>\n</ol>\n<h3 id=\"Template\"><a href=\"#Template\" class=\"headerlink\" title=\"Template\"></a>Template</h3><ol>\n<li>typename 关键字用于引入一个模板参数</li>\n<li>使用 typename 标识嵌套类型名称。</li>\n<li>使用从属类型时要加 typename。比如：<code>typename T::const_iterator iter()</code>不加 typename 会报错，因为编译器并不知道 T::const_iterator 是一个类型的名字还是摸个变量的名字。</li>\n<li>可变参数模板(c++11 之前参数个数固定不可变)：<code>template&lt;typename... Args&gt; class test</code>表示 Args 个数不固定，使用时<code>void f(Args... args)</code></li>\n<li><code>template &lt;typename T&gt; using xxx = T</code></li>\n</ol>\n<h3 id=\"模板嵌套\"><a href=\"#模板嵌套\" class=\"headerlink\" title=\"模板嵌套\"></a>模板嵌套</h3><h2 id=\"RAII-Resource-Acquisition-Is-Initalization\"><a href=\"#RAII-Resource-Acquisition-Is-Initalization\" class=\"headerlink\" title=\"RAII Resource Acquisition Is Initalization\"></a>RAII Resource Acquisition Is Initalization</h2><ol>\n<li>资源获取初始化：<code>使用局部对象来管理资源的技术</code>被称为资源获取初始化。<code>局部对象</code>(有生命周期)是指存储在<code>栈</code>上的对象，它的生命周期由操作系统管理，无需人工介入。</li>\n<li>利用： C++保证了所有栈对象在生命周期结束时会被销毁(调用析构函数)。<ul>\n<li><code>A a;</code> 在栈上分配 a</li>\n<li><code>A* a = new A()</code> 在堆上分配 a，并在栈上保存 a 的指针，生命周期结束后只释放栈上的指针变量，需要 delete 释放资源。。</li>\n<li><code>unique_ptr&lt;A&gt; a = make_unique&lt;A&gt;(new A())</code> 在栈上分配 a，在堆上分配 A 的对象，a 中保存了 A 对象的指针，a 用来管理 A 对象，当 a 生命周期结束，会调用 a 的析构函数，释放 A 对象资源。</li>\n</ul>\n</li>\n<li>RAII 用来自动管理对象，例如 smart pointers，用栈来管理资源。</li>\n<li>RAII 流程：设计一个类封装资源，构造函数初始化，析构函数释放资源。</li>\n<li>RAII 可以极大地简化资源管理，并有效的保证程序的正确和代码的简洁。</li>\n<li>The slogan is about initialization, but its meaning is ready about cleanup.</li>\n<li><code>resource</code>: anything that requires specail(manual) management.<ul>\n<li>Allocated memory(molloc&#x2F;free, new&#x2F;delete)</li>\n<li>POSIX file handles(open&#x2F;close)</li>\n<li>C FILE handles(fopen&#x2F;fclose)</li>\n<li>Mutex locks(pthread_mutex_lock&#x2F;pthread_mutex_unlock)</li>\n<li>C++ threads(spawn&#x2F;join)</li>\n<li>objective-c resource-counted objects(retain&#x2F;release)</li>\n</ul>\n</li>\n<li>resource 管理涉及到的操作： 资源释放（destructor)，资源复制(copy constructor)，释放原来资源并复制其他资源(copy assignement operator)，资源所有权转移(move operator)，释放原来资源并转移其他资源(move assignment operator)。</li>\n<li>RRID(Resource Release Is Destruction)</li>\n</ol>\n<h3 id=\"构造函数，析构函数，copy-构造函数，copy-赋值构造函数，move-构造函数，move-赋值构造函数\"><a href=\"#构造函数，析构函数，copy-构造函数，copy-赋值构造函数，move-构造函数，move-赋值构造函数\" class=\"headerlink\" title=\"构造函数，析构函数，copy 构造函数，copy 赋值构造函数，move 构造函数，move 赋值构造函数\"></a>构造函数，析构函数，copy 构造函数，copy 赋值构造函数，move 构造函数，move 赋值构造函数</h3><ol>\n<li>全局对象的构造函数在程序进入 main() 函数之前执行</li>\n<li>Initialization is not assignment.</li>\n<li><code>T w = v;</code> This is an initialization(construction) of a new object. It calls a copy constructor.</li>\n<li><code>T w; w = v;</code> This is an assignment to the existing object w. It calls an assignment operator.</li>\n<li>使得函数 default 可能提醒他人调用 default 是可以正常工作的。</li>\n<li>资源释放应该放到析构函数中，避免资源泄露。</li>\n<li>赋值构造函数最好使用 copy-and-swap.这样可以解决 self-copy 等问题。</li>\n<li>析构函数的调用与构造函数反序。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// copy assignment constructor</span></span><br><span class=\"line\">T&amp; T::<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> T&amp; rhs) &#123;</span><br><span class=\"line\">    T <span class=\"built_in\">copy</span>(rhs);  <span class=\"comment\">// 调用copy构造函数</span></span><br><span class=\"line\">    copy.<span class=\"built_in\">swap</span>(*<span class=\"keyword\">this</span>);  <span class=\"comment\">// good</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// copy will be destruct</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// move assignment constructor</span></span><br><span class=\"line\">T&amp; T::operatr=(T&amp;&amp; rhs) &#123;</span><br><span class=\"line\">    T <span class=\"built_in\">copy</span>(std::<span class=\"built_in\">move</span>(rhs));  <span class=\"comment\">// rhs现在是左值？</span></span><br><span class=\"line\">    copy.<span class=\"built_in\">swap</span>(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类对象内存分布\"><a href=\"#类对象内存分布\" class=\"headerlink\" title=\"类对象内存分布\"></a><a href=\"https://blog.csdn.net/dxpqxb/article/details/102794132\">类对象内存分布</a></h3><ol>\n<li><a href=\"https://blog.csdn.net/chuncanL/article/details/70306740\">带基类</a></li>\n<li><a href=\"https://www.zhihu.com/question/34955591\">sizeof(vector&lt;&gt;)大小固定</a></li>\n<li><a href=\"https://tangocc.github.io/2018/03/20/cpp-class-memory-struct/\">虚函数</a></li>\n<li><code>p/x *(long *)&amp;T</code> gdb 打印虚表地址 (64 位机器), 对象起始地址前 8 字节</li>\n<li><code>p/x *(long *)(*(long *)&amp;T + 8)</code> 打印第 2 个虚函数地址</li>\n</ol>\n<h3 id=\"虚析构函数的作用\"><a href=\"#虚析构函数的作用\" class=\"headerlink\" title=\"虚析构函数的作用\"></a>虚析构函数的作用</h3><ol>\n<li>子类对象析构时一定会调用到子类的析构函数，这可以保证对象的正确析构。（多态时，例如工厂模式，基类需要定义虚析构函数）</li>\n<li>多态发生在父类指针或引用指向子类对象时。此时如果没有虚析构，编译器默认调用父类的析构函数，无法通过父类的指针或引用析构子类对象的空间，此时就有可能发生内存泄漏。当父类析构和子类析构定义为 virtual 虚函数时，就可以顺利通过父类的指针或引用析构子类对象的内存空间。</li>\n</ol>\n<h3 id=\"构造析构顺序\"><a href=\"#构造析构顺序\" class=\"headerlink\" title=\"构造析构顺序\"></a>构造析构顺序</h3><ol>\n<li>构造顺序<ul>\n<li>如果某个类具有基类，执行基类的构造函数。</li>\n<li>类的非静态数据成员，按照声明的顺序创建。</li>\n<li>执行该类的构造函数。</li>\n</ul>\n</li>\n<li>析构顺序：相反<ul>\n<li>调用类的析构函数。</li>\n<li>销毁数据成员，与创建的顺序相反。</li>\n<li>如果有父类，调用父类的析构函数。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"The-Rule-of-Three-or-Five-after-c-11\"><a href=\"#The-Rule-of-Three-or-Five-after-c-11\" class=\"headerlink\" title=\"The Rule of Three or Five(after c++11)\"></a>The Rule of Three or Five(after c++11)</h3><ol>\n<li>含义：如果类里面需要管理 resource，例如 rall pointer，那么你需要手写 3 个 functions.否则会调用默认函数，可能会出现多个指针副本，引起悬垂指针等问题。（可以 delete 这些函数，使 non-copyalble)<ul>\n<li>A destructor to free the resource</li>\n<li>A copy constructor to copy the resource</li>\n<li>A copy assignment operator to free the left-hand resource and copy the right-hand one.</li>\n<li>A move constructor to transfer owenership of resource (after c++11)</li>\n<li>A move assignment operator to free the left-hand resource and transfer ownership of the right-hand one(after c++11)</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"The-Rule-of-Zero\"><a href=\"#The-Rule-of-Zero\" class=\"headerlink\" title=\"The Rule of Zero\"></a>The Rule of Zero</h3><ol>\n<li>含义：如果你的类没有管理任何资源，但是使用了库中的 vector，string 等，那么你应该避免写特殊的函数，使用默认函数。<ul>\n<li>Let the compiler implicitly generate a default destructor</li>\n<li>Let the compiler generate the copy constructor</li>\n<li>Let the compiler generate the copy assignment operator</li>\n<li>(But your own swap might improve performance)</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"两种设计良好的-value-semantic-C-类\"><a href=\"#两种设计良好的-value-semantic-C-类\" class=\"headerlink\" title=\"两种设计良好的 value-semantic C++类\"></a>两种设计良好的 value-semantic C++类</h3><ol>\n<li>Bussiness-logic classes: 不管理资源，follow the Rule of Zero</li>\n<li>Resource-management classes(small, single purpose)： 管理资源(最好使用 RAII)，follow the Rule of Three or Five.</li>\n</ol>\n<h3 id=\"std-ref-与-reference-wrapper\"><a href=\"#std-ref-与-reference-wrapper\" class=\"headerlink\" title=\"std::ref 与 reference_wrapper\"></a>std::ref 与 reference_wrapper</h3><ol>\n<li><a href=\"https://blog.csdn.net/u014645632/article/details/78966340\">浅析 std::ref 与 reference_wrapper</a></li>\n</ol>\n<h3 id=\"move\"><a href=\"#move\" class=\"headerlink\" title=\"move\"></a>move</h3><ol>\n<li>move does not move anything. （只是所有权移动，为物理移动任何东西）</li>\n<li>move unconditionally casts its input into an rvalue reference(无变量保存的数据)，会将输入变为右值。</li>\n<li>move constructor <code>ClassXX(ClassXX&amp;&amp; w) = default</code> w 是右值引用</li>\n<li>move assignment operator <code>ClassXX&amp; operator=(ClassXX&amp;&amp; w) = default</code></li>\n<li>类成员最好用智能指针。原始指针不能使用默认 move 构造函数。需要自己写 move 构造函数， 分两步： member-wise move and reset。</li>\n<li>move asignment operator 分 3 步： cleanup, member-wise move and reset</li>\n<li>make move operations(constructor) noexcept</li>\n<li>Don’t return a T&amp;&amp;.</li>\n<li>使用 move 后，原来的变量不再进行资源释放，它已经将所有权转移给新的变量，由新变量进行资源管理。</li>\n</ol>\n<h3 id=\"forward\"><a href=\"#forward\" class=\"headerlink\" title=\"forward\"></a>forward</h3><ol>\n<li><code>&amp; &amp; = &amp;</code>, <code>&amp; &amp;&amp; = &amp;</code>, <code>&amp;&amp; &amp; = &amp;</code>, <code>&amp;&amp; &amp;&amp; = &amp;&amp;</code> 变量，是 lvalue</li>\n<li><code>void f(T&amp;&amp; x); auto&amp;&amp; var = var1;</code> 其中 T&amp;&amp;和 auto&amp;&amp;是 forward reference(T 类型不确定，T&amp;&amp;类型要通过推导（模板），如果 T 是确定的，那么是右值引用，如类的 move 构造函数 T 就是类名称)。转发引用。被称为 universal reference.</li>\n<li>forward reference 作为参数能接受左值也能接受右值。</li>\n<li>应用: <code>make_unique</code>可以传左值和右值。<code>auto i = make_unique&lt;int&gt;(1); auto s1_ptr = make_unique&lt;string&gt;(s1)</code></li>\n<li>std::forward（不是 forward reference, 是标准库函数）作用： 如果输入是 lvalue，将其转化为 lvalue reference，如果是 rvalue，将其转化为 rvalue reference。使用原因：当一个函数输入参数是右值，并且需要用到该参数调用其他函数，调用时会将右值转化为左值，因为有了名字。在调用的函数中被当做左值来处理。如果希望是右值，则实现不了。在调用其他函数时，将参数通过 std::forward 转化一下</li>\n<li>std::forward does not forward anything。</li>\n<li>问题：forward reference 作为模板的参数时能接收任何参数，容易与其他函数冲突。</li>\n</ol>\n<h3 id=\"左值-lvalue-右值-rvalue\"><a href=\"#左值-lvalue-右值-rvalue\" class=\"headerlink\" title=\"左值(lvalue) 右值(rvalue)\"></a>左值(lvalue) 右值(rvalue)</h3><ol>\n<li>左值：占据内存中某个可识别位置（有变量保存）的对象</li>\n<li>右值：临时存储，没有变量标识。</li>\n<li>如果表达式的结果是一个暂时的对象，那么这个表达式就是右值。</li>\n<li>如果函数能直接返回，不要起名字。return 右值，否则要使用 move。(RVO)</li>\n</ol>\n<h3 id=\"rvalue-reference-右值引用\"><a href=\"#rvalue-reference-右值引用\" class=\"headerlink\" title=\"&amp;&amp; rvalue reference 右值引用\"></a>&amp;&amp; rvalue reference 右值引用</h3><ol>\n<li>只有左值才能给引用<code>int nine = 9; int&amp; ref = nine;</code> 不能<code>int&amp; ref = 9;</code>，也不能<code>int&amp; ref = get_value()</code></li>\n<li>右值引用用法：<code>int&amp;&amp; ref = 9</code>或<code>int&amp;&amp; ref = get_value()</code></li>\n</ol>\n<h2 id=\"Lifetime-and-Allocation-Deallocation\"><a href=\"#Lifetime-and-Allocation-Deallocation\" class=\"headerlink\" title=\"Lifetime and Allocation Deallocation\"></a>Lifetime and Allocation Deallocation</h2><ol>\n<li>指的是 object lifetime，不是类。</li>\n<li>对象涉及到生命周期和内存分配销毁两方面问题。一般生命周期起始分配内存，生命周期结束释放内存。但生命周期可能小于内存分配释放时间，比如 option.</li>\n<li>reference 能够延长临时变量生命周期。 <code>string &amp; s = get_string();</code>无问题 <code>char *s = get_string().c_str();</code>有问题，get_string 返回右值，s 只接受了指针，右值内容被释放。</li>\n</ol>\n<h2 id=\"Smart-Pointers\"><a href=\"#Smart-Pointers\" class=\"headerlink\" title=\"Smart Pointers\"></a>Smart Pointers</h2><ol>\n<li>用来管理 raw pointer，属于资源管理类。</li>\n</ol>\n<h3 id=\"unique-ptr\"><a href=\"#unique-ptr\" class=\"headerlink\" title=\"unique_ptr\"></a>unique_ptr</h3><ol>\n<li>防止内存泄露，使所有权清晰。</li>\n<li>唯一所有权， 不能复制，只能 move</li>\n<li>有一个 Deleter 成员变量</li>\n<li>有两个参数，Deleter 有默认</li>\n<li>智能指针传参和返回值应该<code>按值传递</code>，这样更简单，而且只会消耗很小的资源(8 字节)，栈上传递，很快.</li>\n<li>不要通过引用传递指针</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">Deleter</span> = std::default_delete&lt;T&gt;&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> unique_ptr &#123;</span><br><span class=\"line\">    T* p_= <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    Deleter d_;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">unique_ptr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p_) <span class=\"built_in\">d_</span>(p_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">default_delete</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(T* p)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>需要调用 free, close 等地方，可以封装为 unique_ptr, sample:</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FileClose</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(File *fp)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(fp != <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">File *fp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;input.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"><span class=\"function\">std::unique_ptr&lt;File, FileClose&gt; <span class=\"title\">uptr</span><span class=\"params\">(fp)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shared-ptr\"><a href=\"#shared-ptr\" class=\"headerlink\" title=\"shared_ptr\"></a>shared_ptr</h3><ol>\n<li>避免悬垂指针。</li>\n<li>shared mean reference counting 引用计数</li>\n<li>“Will the last person out of the room please turn out the lights.” 最后一个离开房间的人请关灯，人数就相当于引用计数，灯相当于共享的资源。最后一个释放资源。如果房间里还有人就把灯关了，剩下的人就相当于悬垂指针。</li>\n<li>栈上有两部分 ptr to T and ptr to control block。分别指向堆上数据。</li>\n<li>uniqe_ptr 可以转化为 shared_ptr，反之不成立。</li>\n</ol>\n<h3 id=\"make-shared-and-make-unique\"><a href=\"#make-shared-and-make-unique\" class=\"headerlink\" title=\"make_shared and make_unique\"></a>make_shared and make_unique</h3><ol>\n<li>现代的 c++应该避免使用 raw new and delete，智能指针可以避免使用 delete，我们也应该避免使用 new，工厂函数能够避免 new。</li>\n<li>make_shared and make_unique 都是<code>工厂函数</code>。make_shared 能够产生一个 shared_ptr，make_unique 能够产生一个 unique_ptr</li>\n<li><code>最好不要使用rall pointer</code>，。如果不用 rall pointer，就不用担心内存泄露。</li>\n</ol>\n<h3 id=\"weak-ptr\"><a href=\"#weak-ptr\" class=\"headerlink\" title=\"weak_ptr\"></a>weak_ptr</h3><ol start=\"2\">\n<li>weak_ptr 可以告诉你 xuan</li>\n<li>weak_ptr has the same physical layout ad shared_ptr</li>\n<li>weak_ptr 不是智能指针。不能对 weak_ptr 解引用</li>\n<li>weak_ptr 可以看作是获取 shared_ptr 的 ticket，如果拥有 weak_ptr 就有权获得 shared_ptr。</li>\n<li></li>\n</ol>\n<h3 id=\"std-enable-shared-from-this\"><a href=\"#std-enable-shared-from-this\" class=\"headerlink\" title=\"std::enable_shared_from_this\"></a>std::enable_shared_from_this</h3><h2 id=\"Cast\"><a href=\"#Cast\" class=\"headerlink\" title=\"Cast\"></a>Cast</h2><h3 id=\"四种关键字-const-cast-常量性转除-dynamic-cast-向下安全转型-reinterpret-cast-重新解释转型-static-cast-静态转型\"><a href=\"#四种关键字-const-cast-常量性转除-dynamic-cast-向下安全转型-reinterpret-cast-重新解释转型-static-cast-静态转型\" class=\"headerlink\" title=\"四种关键字: const_cast, 常量性转除;dynamic_cast, 向下安全转型;reinterpret_cast, 重新解释转型; static_cast, 静态转型;\"></a>四种关键字: const_cast, 常量性转除;dynamic_cast, 向下安全转型;reinterpret_cast, 重新解释转型; static_cast, 静态转型;</h3><ol>\n<li>const_cast, 常量性转除:</li>\n</ol>\n<p>主要对变量的常量性(const)进行操作, 移除变量的常量性, 即可以被非常量指向和引用, 详见代码;</p>\n<ol start=\"2\">\n<li>dynamic_cast, 向下安全转型:</li>\n</ol>\n<p>主要应用于继承体系, 可以由 “指向派生类的基类部分的指针”, 转换”指向派生类”或”指向兄弟类”;</p>\n<p>static_cast 只能转换为”指向派生类”;</p>\n<ol start=\"3\">\n<li>reinterpret_cast, 重新解释转型:</li>\n</ol>\n<p>主要是对 2 进制数据进行重新解释(re-interpret),不改变格式, 而 static_cast 会改变格式进行解释;</p>\n<p>如由派生类转换基类, 则重新解释转换, 不改变地址, 静态转换改变地址;</p>\n<ol start=\"4\">\n<li>static_cast, 静态转型:</li>\n</ol>\n<p>主要是数据类型的转换, 还可以用于继承;</p>\n<h2 id=\"Zero-Cost-Abstract\"><a href=\"#Zero-Cost-Abstract\" class=\"headerlink\" title=\"Zero Cost Abstract\"></a>Zero Cost Abstract</h2><h2 id=\"Lambdas\"><a href=\"#Lambdas\" class=\"headerlink\" title=\"Lambdas\"></a>Lambdas</h2><ol>\n<li>用于定义和创建匿名函数。</li>\n<li>语法： <code>[capture list] (params list) mutable exception -&gt; return type &#123; function body&#125;</code></li>\n</ol>\n<h2 id=\"Macros\"><a href=\"#Macros\" class=\"headerlink\" title=\"Macros\"></a>Macros</h2><ol>\n<li><a href=\"https://blog.csdn.net/qq_22660775/article/details/89255286\">C++宏（Macro）的各种玩法</a></li>\n<li><a href=\"https://stackoverflow.com/a/31609246\">thread local 来解决 macro 不同线程 static 变量相同问题</a></li>\n</ol>\n<h3 id=\"define\"><a href=\"#define\" class=\"headerlink\" title=\"#define\"></a>#define</h3><ol>\n<li><code>#if __cplusplus &lt; 201703L</code> 可用宏来兼容 c++11 和 c++17</li>\n</ol>\n<h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h2><ol>\n<li>内存分为 host 内存和 device 内存。需要管理 device 上需要大空间的对象，比如 tensor，还需要在 host 和 device 内存中传输数据。输入的数据在 host 端处理后需要发送到 device 上使用，device 上输出结果或 dump 的数据需要在 host 端显示或者保存。不同的设备管理方式不同，当设备段是直接通过物理地址管理内存的，可以在 host 端创建一个对象来管理设备端的内存。</li>\n</ol>\n<h3 id=\"内存分配方式\"><a href=\"#内存分配方式\" class=\"headerlink\" title=\"内存分配方式\"></a>内存分配方式</h3><ol>\n<li><code>栈</code> 函数参数，局部变量</li>\n<li><code>堆</code> malloc 和 free。堆上操作系统维护的一块内存</li>\n<li><code>自由存储区</code> new 和 delete。自由存储区是 C++中通过 new 和 delete 动态分配和释放对象的抽象概念。有些编译器使用 malloc 和 free 实现 new 和 delete。</li>\n<li><code>全局/静态存储区</code> 全局变量和 static 变量。</li>\n<li><code>常量存储区</code> 存放的是常量，不允许修改。</li>\n</ol>\n<h3 id=\"内存管理方式\"><a href=\"#内存管理方式\" class=\"headerlink\" title=\"内存管理方式\"></a>内存管理方式</h3><ol>\n<li><code>自动存储</code></li>\n<li><code>静态存储</code></li>\n<li><code>动态存储</code></li>\n<li><code>线程存储</code></li>\n</ol>\n<h2 id=\"Multi-Thread\"><a href=\"#Multi-Thread\" class=\"headerlink\" title=\"Multi Thread\"></a>Multi Thread</h2><h2 id=\"Small-Module\"><a href=\"#Small-Module\" class=\"headerlink\" title=\"Small Module\"></a>Small Module</h2><h3 id=\"值语义与引用语义\"><a href=\"#值语义与引用语义\" class=\"headerlink\" title=\"值语义与引用语义\"></a>值语义与引用语义</h3><ol>\n<li>值语义(value sematics)指的是对象的拷贝与原对象无关，就像拷贝 int 一样，拷贝之后与原对象脱离关系。</li>\n<li>引用语义(reference sematics)或者对象语义(object sematics)是指面向对象意义下的对象，对象是禁止拷贝的。因为拷贝对象是无意义的，如拷贝一个雇员不会变成两个雇员。</li>\n<li>值语义：复制（赋值操作）以后，两个数据对象拥有的存储空间是独立的，相互之间互不影响。</li>\n<li>引用语义：复制（赋值操作）以后，两个数据对象互为别名。操作其中一个会影响另一个。</li>\n<li>引用语义赋值操作是按位复制，有可能只复制了栈上的数据，为复制堆</li>\n<li>值语义的好处： 生命周期管理很简单，不用担心生命周期。</li>\n<li>引用语义的 object 由于不能拷贝，我们只能通过指针或引用来使用它。需要考虑生命周期来释放资源，避免悬垂指着等。</li>\n<li>使用指针和引用之后所有的赋值代表将有多个变量指向同一个对象，一旦其中一个变量释放了对象的资源，其他的变量的使用将是一个问题。</li>\n<li>(zero abstract cost) C++的 class 的 layout 与 C struct 一样，没有额外开销。定义一个只包含一个 int 的 class 的对象和定义一个 int 一样。</li>\n<li>默认拷贝构造函数是最简单的浅拷贝。</li>\n<li>智能指针实际上是将对象语义转化为值语义。</li>\n</ol>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><ol>\n<li><a href=\"https://en.cppreference.com/w/cpp/language/static\">cppreference static members</a></li>\n<li><a href=\"https://stackoverflow.com/a/31609246\">thread local 来解决 macro 不同线程 static 变量相同问题</a></li>\n<li><a href=\"https://caloud.tencent.com/developer/article/1858485\">类 static 成员变量头文件初始化问题</a></li>\n<li>C++17 中可以用 inline 来在头文件中定义类的 static 成员变量 <a href=\"https://stackoverflow.com/a/54994044\">link</a></li>\n<li>局部 static 变量只被初始化一次，生命周期是从创建到程序结束。相比全局 static 变量只是作用域不是全局。</li>\n<li>如果全局变量仅在单个函数中使用，则可以将这个变量改为该函数的静态局部变量。</li>\n<li>全局变量，静态局部变量，静态全局变量都存在全局静态存储区。</li>\n<li>函数中必须要使用 statci 变量的情况：当某个函数返回值为指针类型时，则必须是 static 的局部变量的地址作为返回值，因为他的生命周期是整个程序运行期间。</li>\n<li>static 全局变量限定作用范围为定义该变量的文件。</li>\n<li>子类访问父类定义的 static 成员变量或函数<code>Son::Parent::xxx()</code></li>\n<li>static 存储在全局静态存储区，因此父类中定义的 static 变量由所有子类父类对象共享。</li>\n<li>作用<ul>\n<li>修饰普通变量，修改变量的存储区域和生命周期，使变量存储在静态区，在 main 函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。</li>\n<li>修饰普通函数，表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命名空间里的函数重名，可以将函数定位为 static。</li>\n<li>修饰成员变量，修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。</li>\n<li>修饰成员函数，修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内不能访问非静态成员。</li>\n</ul>\n</li>\n<li>伪单例： 共享一个变量，但多线程不安全</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> std::vector&lt;<span class=\"type\">bool</span>&gt;&amp; <span class=\"title\">is_file</span><span class=\"params\">()</span> </span>&#123;                                                                                                                                                                                <span class=\"type\">static</span> std::vector&lt;<span class=\"type\">bool</span>&gt; ftype;                                                                                                                                                                                    <span class=\"keyword\">return</span> ftype;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">is_file</span>() = &#123;<span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>fps control</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __FPS_CONTROL__(fps)                                                   \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#123;                                                                            \\</span></span><br><span class=\"line\"><span class=\"meta\">    static thread_local auto start_time = std::chrono::steady_clock::now();    \\</span></span><br><span class=\"line\"><span class=\"meta\">    auto end_time = std::chrono::steady_clock::now();                          \\</span></span><br><span class=\"line\"><span class=\"meta\">    auto time_us = std::chrono::duration_cast<span class=\"string\">&lt;std::chrono::microseconds&gt;</span>(      \\</span></span><br><span class=\"line\"><span class=\"meta\">                       end_time - start_time)                                  \\</span></span><br><span class=\"line\"><span class=\"meta\">                       .count();                                               \\</span></span><br><span class=\"line\"><span class=\"meta\">    int sleep_us = static_cast<span class=\"string\">&lt;int&gt;</span>(1000.0 * 1000.0 / fps) - time_us;          \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"keyword\">if</span> (sleep_us &gt; 0) &#123;                                                        \\</span></span><br><span class=\"line\"><span class=\"meta\">      std::this_thread::sleep_for(std::chrono::microseconds(sleep_us));        \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;                                                                          \\</span></span><br><span class=\"line\"><span class=\"meta\">    start_time = std::chrono::steady_clock::now();                             \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作符重载\"><a href=\"#操作符重载\" class=\"headerlink\" title=\"操作符重载\"></a>操作符重载</h3><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ol>\n<li><code>全局作用域</code></li>\n<li><code>局部作用域</code></li>\n<li><code>语句作用域</code></li>\n<li><code>类作用域</code></li>\n<li><code>命名空间作用域</code></li>\n<li><code>文件作用域</code></li>\n</ol>\n<h3 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h3><ol>\n<li>声明</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;   <span class=\"comment\">// prototype</span></span><br><span class=\"line\"><span class=\"built_in\">double</span> (*pf)(<span class=\"type\">int</span>);   <span class=\"comment\">// 指针pf指向的函数， 输入参数为int,返回值为double</span></span><br><span class=\"line\">pf = cal;    <span class=\"comment\">// 指针赋值</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>作为函数参数</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">estimate</span><span class=\"params\">(<span class=\"type\">int</span> lines, <span class=\"type\">double</span> (*pf)(<span class=\"type\">int</span>))</span></span>;  <span class=\"comment\">// 函数指针作为参数传递</span></span><br><span class=\"line\"><span class=\"type\">double</span> y = (*pf)(<span class=\"number\">5</span>);   <span class=\"comment\">// 通过指针调用， 推荐的写法</span></span><br><span class=\"line\"><span class=\"type\">double</span> y = <span class=\"built_in\">pf</span>(<span class=\"number\">5</span>);     <span class=\"comment\">// 这样也对， 但是不推荐这样写</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"typedef-传统\"><a href=\"#typedef-传统\" class=\"headerlink\" title=\"typedef(传统)\"></a>typedef(传统)</h3><ol>\n<li>任何声明变量的语句前面加上 typedef 之后，原来是变量的都变成一种类型。不管这个声明中的标识符号出现在中间还是最后。</li>\n<li>作用：<ul>\n<li>促进跨平台开发</li>\n<li>定义易于记忆的类型名</li>\n</ul>\n</li>\n<li>使用：<ul>\n<li><code>typedef int* IntPtr; int x = 5; IntPtr = &amp;x; *IntPtr = 1;</code></li>\n<li><code>typedef void (*call_back)(int)； void add_one(int i) &#123;return i+1&#125;; call_back = add_one; call_back(2);</code> call_back 声明为函数指针</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"using-新标准\"><a href=\"#using-新标准\" class=\"headerlink\" title=\"using(新标准)\"></a>using(新标准)</h3><ol>\n<li><code>using IntPtr = int*;int x = 5; IntPtr = &amp;x; *IntPtr = 1;</code></li>\n<li><code>using V1F = std::vector&lt;float&gt;; using V2F = std::vector&lt;V1F&gt;;</code></li>\n<li><code>using CallBack = void (*)(int)；// using CallBack = decltype((add_one)); void add_one(int i) &#123;return i+1&#125;; CallBack call_back = add_one; call_back(2);</code></li>\n</ol>\n<h3 id=\"overload-重载-and-override-or-overwrite（覆盖或重写）-link\"><a href=\"#overload-重载-and-override-or-overwrite（覆盖或重写）-link\" class=\"headerlink\" title=\"overload (重载)and override or overwrite（覆盖或重写） link\"></a>overload (重载)and override or overwrite（覆盖或重写） <a href=\"https://blog.csdn.net/Zeno_wrj/article/details/110478916\">link</a></h3><ol>\n<li>类内：Overloading occurs when two or more methods in one class have the same method name but different parameters.</li>\n<li>类间：Overriding or overwrite means having two methods with the same method name and parameters (i.e., method signature). One of the methods is in the parent class and the other is in the child class.</li>\n</ol>\n<h3 id=\"class-和-struct-区别\"><a href=\"#class-和-struct-区别\" class=\"headerlink\" title=\"class 和 struct 区别\"></a>class 和 struct 区别</h3><ol>\n<li>C++中的 struct 对 C 中的 struct 进行了扩充，可以有成员函数，可以被继承，可以有多态。</li>\n<li>struct 和 class 最大的区别是访问权限，struct 成员默认是 public 的，class 默认是 private，struct 继承默认是 public，class 默认是 private。</li>\n<li>class 可以定义模板参数，就像 typename，而 struct 不行。</li>\n</ol>\n<h3 id=\"template-定义时的-typename-和-class-区别\"><a href=\"#template-定义时的-typename-和-class-区别\" class=\"headerlink\" title=\"template 定义时的 typename 和 class 区别\"></a>template 定义时的 typename 和 class 区别</h3><ol>\n<li>最早使用的 class 可能会造成概念上的混淆，后面加上了 typename 替代 class。</li>\n</ol>\n<h3 id=\"new-delete-和-malloc-free-区别\"><a href=\"#new-delete-和-malloc-free-区别\" class=\"headerlink\" title=\"new&#x2F;delete 和 malloc&#x2F;free 区别\"></a>new&#x2F;delete 和 malloc&#x2F;free 区别</h3><ol>\n<li>malloc&#x2F;free 是 c++&#x2F;c 标准库函数，new&#x2F;delete 是 C++运算符，都可以用于动态内存申请和内存释放。</li>\n<li>new 一个对象时会调用构造函数，delete 一个对象时会调用析构函数。</li>\n<li>对于非内部累来说，malloc&#x2F;free 无法满足在对象创建时执行构造函数，在对象销毁时调用析构函数。</li>\n<li>由于内部数据类型的对象没有构造和析构的过程，对他们而言 malloc&#x2F;free 和 new&#x2F;delete 是等价的。</li>\n<li>为什么需要 malloc 和 free，因为 C++中经常调用 c 函数，而 c 只能用 malloc 和 free 管理动态内存（堆上）。</li>\n</ol>\n<h3 id=\"函数调用的过程\"><a href=\"#函数调用的过程\" class=\"headerlink\" title=\"函数调用的过程\"></a>函数调用的过程</h3><h3 id=\"for-each-any-of\"><a href=\"#for-each-any-of\" class=\"headerlink\" title=\"for each any_of\"></a>for each any_of</h3><h3 id=\"rang-based-for-loop\"><a href=\"#rang-based-for-loop\" class=\"headerlink\" title=\"rang-based for loop\"></a>rang-based for loop</h3><h3 id=\"std-tuple\"><a href=\"#std-tuple\" class=\"headerlink\" title=\"std::tuple\"></a>std::tuple</h3><ol>\n<li><code>std::get&lt;0&gt;(std::make_tuple(3.8, &#39;A&#39;, &quot;Lisa Simpson&quot;)) </code></li>\n<li><code>float a; char b; string c; std::tie(a, b, c) = (std::make_tuple(3.8, &#39;A&#39;, &quot;Lisa Simpson&quot;);</code></li>\n<li><code>auto [a, b ,c] = (std::make_tuple(3.8, &#39;A&#39;, &quot;Lisa Simpson&quot;);</code></li>\n</ol>\n<h3 id=\"std-tie\"><a href=\"#std-tie\" class=\"headerlink\" title=\"std::tie\"></a>std::tie</h3><ol>\n<li>创建 tuple 的左值引用</li>\n<li>可以用来解 tuple</li>\n<li>c++17 之后可以被 structured bindings 替代</li>\n</ol>\n<h3 id=\"Structured-Bindings-c-17\"><a href=\"#Structured-Bindings-c-17\" class=\"headerlink\" title=\"Structured Bindings c++17\"></a>Structured Bindings c++17</h3><ol>\n<li><code>const auto &amp;[elem1, elme2] = some_thing;</code></li>\n<li><code>auto [ gpa2, grade2, name2 ] = return std::make_tuple(3.8, &#39;A&#39;, &quot;Lisa Simpson&quot;);</code></li>\n<li>类似引用，结构化绑定是既存对象的别名。不同于引用的是，结构化绑定的类型不必为引用类型。</li>\n<li><a href=\"https://zh.cppreference.com/w/cpp/language/structured_binding\">reference</a></li>\n</ol>\n<h3 id=\"concepts-c-20\"><a href=\"#concepts-c-20\" class=\"headerlink\" title=\"concepts c++20\"></a>concepts c++20</h3><h3 id=\"modules-c-20\"><a href=\"#modules-c-20\" class=\"headerlink\" title=\"modules c++20\"></a>modules c++20</h3><h3 id=\"string-view-c-17\"><a href=\"#string-view-c-17\" class=\"headerlink\" title=\"string_view c++17\"></a>string_view c++17</h3><h3 id=\"std-format-c-20\"><a href=\"#std-format-c-20\" class=\"headerlink\" title=\"std::format c++20\"></a>std::format c++20</h3><h3 id=\"ranges-c-20\"><a href=\"#ranges-c-20\" class=\"headerlink\" title=\"ranges c++20\"></a>ranges c++20</h3><h3 id=\"fold-expressions\"><a href=\"#fold-expressions\" class=\"headerlink\" title=\"fold expressions\"></a>fold expressions</h3><h3 id=\"std-exchange\"><a href=\"#std-exchange\" class=\"headerlink\" title=\"std::exchange()\"></a>std::exchange()</h3><h3 id=\"deprecated-attribute\"><a href=\"#deprecated-attribute\" class=\"headerlink\" title=\"[[deprecated]] attribute\"></a>[[deprecated]] attribute</h3><figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[[deprecated]]</span></span><br><span class=\"line\">void old_method();</span><br><span class=\"line\"><span class=\"string\">[[deprecated(&quot;Use new_method instead&quot;)]]</span></span><br><span class=\"line\">void legacy_method();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"c-中的-const-和-c-中的-const-区别\"><a href=\"#c-中的-const-和-c-中的-const-区别\" class=\"headerlink\" title=\"c 中的 const 和 c++中的 const 区别\"></a>c 中的 const 和 c++中的 const 区别</h3><ol>\n<li>c 语言中只有 enum 能实现真正的常量</li>\n</ol>\n<h3 id=\"macro-和-inline\"><a href=\"#macro-和-inline\" class=\"headerlink\" title=\"macro 和 inline\"></a>macro 和 inline</h3><h3 id=\"const-关键字作用\"><a href=\"#const-关键字作用\" class=\"headerlink\" title=\"const 关键字作用\"></a>const 关键字作用</h3><h3 id=\"default，-delete，override，final，noexcept\"><a href=\"#default，-delete，override，final，noexcept\" class=\"headerlink\" title=\"default， delete，override，final，noexcept\"></a>default， delete，override，final，noexcept</h3><ol>\n<li><code>final</code>在基类中指定无法在派生类中重写的虚函数。还可以指定无法继承的类。</li>\n<li>当使用 default 或者 delete 定义构造，析构，复制构造，赋值，move…其中一个时，也需要定义其他的。</li>\n</ol>\n<h3 id=\"explicit\"><a href=\"#explicit\" class=\"headerlink\" title=\"explicit\"></a>explicit</h3><ol>\n<li>explicit 只能用来修饰类构造函数。作用是声明类构造函数是显示调用的，不能隐式调用。</li>\n<li>只能显示使用<code>ClassXX a(args)</code>来创建对象，不能使用<code>ClassXX a = args</code>来隐士调用构造函数。</li>\n<li>作为函数参数也必须使用<code>ClassXX(args)</code>，不能使用<code>args</code>隐式调用构造函数。</li>\n<li>能用就用。</li>\n</ol>\n<h3 id=\"virtual\"><a href=\"#virtual\" class=\"headerlink\" title=\"virtual\"></a>virtual</h3><ol>\n<li><a href=\"https://www.cnblogs.com/Mered1th/p/10924545.html\">虚函数表 0</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1599283\">虚函数表</a></li>\n<li>接口类(基类)的析构函数需要为 virtual,这样才能正常调用子类的析构函数，如果不为 virtual，那么只会调用基类的析构函数，不会调用子类的。</li>\n</ol>\n<h3 id=\"友元\"><a href=\"#友元\" class=\"headerlink\" title=\"友元\"></a>友元</h3><ol>\n<li>友元函数</li>\n<li>友元类</li>\n<li>友元成员函数</li>\n</ol>\n<h3 id=\"decltype\"><a href=\"#decltype\" class=\"headerlink\" title=\"decltype\"></a>decltype</h3><ol>\n<li>获取变量的类型。<code>int x; decltype(x) y; // y is int</code></li>\n<li>可以用于匿名结构体。</li>\n</ol>\n<h3 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h3><ol>\n<li>常量表达式是指<code>值不会改变</code>并且在<code>编译过程中就能计算结果</code>的表达式</li>\n<li>const int sz &#x3D; get_size(); sz 不是常量表达式，sz 只是常量，因为值在编译期才确定</li>\n<li>声明为 constexpr 的变量一定是个常量，并且必须用常量表达式初始化。</li>\n</ol>\n<h3 id=\"add-pointer-and-is-pointer-remove-pointer\"><a href=\"#add-pointer-and-is-pointer-remove-pointer\" class=\"headerlink\" title=\"add pointer and is pointer remove_pointer\"></a>add pointer and is pointer remove_pointer</h3><ol>\n<li>都是类模板，定义在 std 中</li>\n<li><code>add_pointer&lt;T&gt;</code>：T 可以是具体类型也可以是类型引用。获取类型的指针，保存在 type 成员变量里。一般和 typede 一起使用<code>typedef std::add_pointer&lt;x&gt;::type IntPtr; IntPtr i;</code></li>\n</ol>\n<h3 id=\"std-function\"><a href=\"#std-function\" class=\"headerlink\" title=\"std::function\"></a>std::function</h3><ol>\n<li>std::function 是通用多态函数封装器。</li>\n<li>定义：<code>template &lt; class R, class... Args&gt; class function&lt;R(Args...)</code> R 为返回类型，Args 为参数。</li>\n<li>例子：<code>void p(int i) &#123; cout &lt;&lt; i;&#125;; std::fuction&lt;void&lt;int&gt;&gt; f = p; f(i);</code></li>\n<li>可用来实现函数回调</li>\n</ol>\n<h3 id=\"std-atomic\"><a href=\"#std-atomic\" class=\"headerlink\" title=\"std::atomic\"></a>std::atomic</h3><h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><ol>\n<li>目的：将对象的创建与对象的使用解耦。</li>\n<li><code>简单工厂函数</code> 将对象的创建放入到统一工厂函数中，根据类型判断具体创建哪一种类型对象。相当于将耦合问题从使用中转移到工厂函数。扩展性差，每增加一个产品就要修改工厂函数。</li>\n<li><code>工厂方法模式</code> 每个产品都有一个工厂函数，相当于将耦合从总的工厂函数中转移到各个产品的工厂函数中，问题：使用时需要包含各个工厂头文件。</li>\n<li><code>抽象工厂模式</code> 同工厂方法模式，只不过每一个具体工厂可以可以调不同接口（不是同一个接口传参数）创建不同的产品。</li>\n<li><code>反射，依赖注入</code> 由类名来创建对象。相当于工厂方法模式+单例模式。全局有一个总的工厂，工厂里有保存产品类型及其工厂函数的 map 表(使用到函数指针)，每个产品都要有一个工厂，并且需要注册（依赖注入）到总的工厂 map 表中。解决了工厂方法模式中使用问题。map 可以使用全局变量，注册函数写成类的静态函数，就不需要专门设计一个总的工厂类。总工厂生产的产品不由总工厂控制，而是交给子工厂控制，这叫<code>控制反转</code>，将子工厂通过注册接口传入到总工厂中，这叫<code>依赖注入</code></li>\n<li><code>模板工厂模式</code></li>\n</ol>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><ol>\n<li><a href=\"https://www.cnblogs.com/xiaolincoding/p/11524401.html\">factory method</a></li>\n<li><a href=\"https://blog.csdn.net/K346K346/article/details/51698184\">reflection</a></li>\n</ol>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><h2 id=\"Program-with-C\"><a href=\"#Program-with-C\" class=\"headerlink\" title=\"Program with C\"></a>Program with C</h2><h2 id=\"接口实现分离\"><a href=\"#接口实现分离\" class=\"headerlink\" title=\"接口实现分离\"></a>接口实现分离</h2><ol>\n<li><code>Pimplldiom</code>(防火墙技术，代理模式？(未提供一个抽象接口)) 将实现细节隐藏于指针背后，比如：分成两个类，一个负责提供接口，一个负责提供实现。负责提供实现的类的对象作为负责提供接口类的私有成员。这种方式只能不能像工厂函数一样由多种实现，因为类中写死了一种实现方式。</li>\n<li><code>Object Inerface</code> 将接口定义为抽象类，派生类实现这些借口。类似工厂函数(创建型设计模式)。</li>\n</ol>\n<h2 id=\"命令行参数解析\"><a href=\"#命令行参数解析\" class=\"headerlink\" title=\"命令行参数解析\"></a>命令行参数解析</h2><ol>\n<li>glib <a href=\"https://github.com/kiwibrowser/src/blob/master/third_party/wds/src/mirac_network/gst-test.cpp#L67\">usage</a><a href=\"https://gstreamer.freedesktop.org/documentation/application-development/basics/init.html?gi-language=c#the-goption-interface\">link1</a> <a href=\"https://people.gnome.org/~ryanl/glib-docs/glib-Commandline-option-parser.html\">link2</a></li>\n<li>getopt: see how to use with emacs woman; <a href=\"https://github.com/Xilinx/Vitis-AI/blob/master/tools/Vitis-AI-Library/usefultools/src/xir2elf.cpp#L38\">link1</a></li>\n<li><a href=\"https://github.com/jarro2783/cxxopts\">cxxopts</a>: only include header</li>\n</ol>\n<h3 id=\"Reference-1\"><a href=\"#Reference-1\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"https://blog.csdn.net/TAOKONG1017/article/details/79561856\">reference</a></li>\n<li><a href=\"https://github.com/AnthonyCalandra/modern-cpp-features\">modern-cpp-features</a></li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"Elisp","url":"/2021/06/27/Elisp/","content":"<h2 id=\"Useful-Command\"><a href=\"#Useful-Command\" class=\"headerlink\" title=\"Useful Command\"></a>Useful Command</h2><ol>\n<li>C-u before command to insert the result into the current buffer.</li>\n<li>crux-eval-and-replace 将表达式替换为结果， 例如(+ 1 1) -&gt; 2</li>\n<li>创建新 buffer: switch-to-buffer</li>\n<li>需要到命令行工作时，不用关闭 emacs, 使用 suspend-frame(C-z) 回到命令行，使用 fg 命令返回 emacs</li>\n</ol>\n<h2 id=\"grammer\"><a href=\"#grammer\" class=\"headerlink\" title=\"grammer\"></a>grammer</h2><ol>\n<li>(car list) first element</li>\n<li>(nth n list) nth element</li>\n<li>(car (last list)) last element</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(car (list &quot;a&quot; &quot;b&quot; &quot;c&quot;) )   ; &quot;a&quot;</span><br><span class=\"line\">(nth 1 (list &quot;a&quot; &quot;b&quot; &quot;c&quot;) ) ; &quot;b&quot;</span><br><span class=\"line\">(car (last (list &quot;a&quot; &quot;b&quot; &quot;c&quot;)) )   ; &quot;c&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>(setq temp (append temp (list 1)))</code> addpend to list temp</li>\n<li>loop list</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(dolist (element (extract-rectangle start end)) ;; extract-rectangle to lists</span><br><span class=\"line\">  (setq LIST (append LIST (split-string element)))) ;; apend to list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a>functions</h2><ol>\n<li><code>(message &quot;%s=%d&quot; &quot;test&quot; 1)</code> minibuf 打印</li>\n<li><code> (split-string &quot;1 2 3 4&quot;)</code> &#x3D;&gt; (“1” “2” “3” “4”)</li>\n<li><code> (seq-map &#39;string-to-number (split-string &quot;1 2 3 4&quot;))</code> &#x3D;&gt; (1 2 3 4)</li>\n<li><code>(vconcat [] (split-string &quot;1.2.3&quot; &quot;\\\\.&quot;))</code> &#x3D;&gt; [“1” “2” “3”]</li>\n<li>max, min, sum and mean</li>\n<li><code>(extract-rectangle start end)</code> extract-rectangle to lists</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(defun count-of-nums (xs)</span><br><span class=\"line\">  (length xs))</span><br><span class=\"line\"></span><br><span class=\"line\">(defun min-of-nums (xs)</span><br><span class=\"line\">  (apply #&#x27;min xs))</span><br><span class=\"line\"></span><br><span class=\"line\">(defun max-of-nums (xs)</span><br><span class=\"line\">  (apply #&#x27;max xs))</span><br><span class=\"line\"></span><br><span class=\"line\">(defun sum-of-nums (xs)</span><br><span class=\"line\">  (apply #&#x27;+ xs))</span><br><span class=\"line\"></span><br><span class=\"line\">(defun mean-of-nums (xs)</span><br><span class=\"line\">  (float (/ (float (sum-of-nums xs))</span><br><span class=\"line\">            (count-of-nums xs))))</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>对 region 进行统计，注意不能是 rectangle <a href=\"link\">http://sugano-nu.github.io/emacs-lisp-stat-attitude/</a></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(defun statistics-in-region (start end)</span><br><span class=\"line\">  (interactive &quot;r&quot;)</span><br><span class=\"line\">  (setq LIST (split-string (buffer-substring start end)))</span><br><span class=\"line\">  (setq LIST (mapcar* #&#x27;(lambda (X) (math-read-number X)) LIST))</span><br><span class=\"line\">  (message &quot;length:%s, mean:%s, variance:%s, standard deviation:%s, meidan:%s, max:%s, min:%s&quot;</span><br><span class=\"line\">           (length LIST)</span><br><span class=\"line\">           (math-format-number (calcFunc-vmean (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vvar (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vsdev (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vmedian (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vmax (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vmin (cons &#x27;vec LIST)))))</span><br><span class=\"line\"></span><br><span class=\"line\">;; not chose a string with character, it will be as 0</span><br><span class=\"line\">(defun statistics-in-rectangle (start end)</span><br><span class=\"line\">  &quot;statistics-in-rectangle.&quot;</span><br><span class=\"line\">  (interactive &quot;r&quot;)</span><br><span class=\"line\">  (setq LIST nil)</span><br><span class=\"line\">  (dolist (element (extract-rectangle start end)) ;; extract-rectangle to lists</span><br><span class=\"line\">    (setq LIST (append LIST (split-string element)))) ;; apend to list</span><br><span class=\"line\">  ;; (setq LIST (seq-map &#x27;string-to-number LIST)) ;;  convert to num</span><br><span class=\"line\">  (setq LIST (mapcar* #&#x27;(lambda (X) (math-read-number X)) LIST))</span><br><span class=\"line\">  (message &quot;length:%s, mean:%s, variance:%s, standard deviation:%s, meidan:%s, max:%s, min:%s&quot;</span><br><span class=\"line\">           (length LIST)</span><br><span class=\"line\">           (math-format-number (calcFunc-vmean (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vvar (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vsdev (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vmedian (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vmax (cons &#x27;vec LIST)))</span><br><span class=\"line\">           (math-format-number (calcFunc-vmin (cons &#x27;vec LIST)))))</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>toggle function: cycle status</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">;; http://xahlee.info/emacs/emacs/elisp_toggle_command.html</span><br><span class=\"line\">(defun company-toggle-delay (@n)</span><br><span class=\"line\">  &quot;Company toggle idle delay.&quot;</span><br><span class=\"line\">  (interactive &quot;p&quot;)</span><br><span class=\"line\">  (let* (</span><br><span class=\"line\">         ($values [0.2 nil])</span><br><span class=\"line\">         ($index-before</span><br><span class=\"line\">          (if (get &#x27;company-toggle-delay &#x27;state)</span><br><span class=\"line\">              (get &#x27;company-toggle-delay &#x27;state)</span><br><span class=\"line\">            0))</span><br><span class=\"line\">         ($index-after (% (+ $index-before (length $values) @n) (length $values)))</span><br><span class=\"line\">         ($next-value (aref $values $index-after)))</span><br><span class=\"line\"></span><br><span class=\"line\">    (put &#x27;company-toggle-delay &#x27;state $index-after)</span><br><span class=\"line\">    (setq company-idle-delay  $next-value)</span><br><span class=\"line\">    (message &quot;company idle delay to %s&quot; $next-value)))</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>if mode then</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(if (derived-mode-p &#x27;c++-mode)</span><br><span class=\"line\">    (message &quot;The mode is on&quot;)</span><br><span class=\"line\">    (message &quot;The mode is off&quot;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>yes or no</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(if (yes-or-no-p &quot;Do you really want to remove everything?&quot;)</span><br><span class=\"line\">    (message &quot;yes&quot;)</span><br><span class=\"line\">    (message &quot;no&quot;))</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>auto add, commit and push</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(defun aborn/simple-git-commit-push ()</span><br><span class=\"line\">  &quot;Simple commit current git project and push to its upstream.&quot;</span><br><span class=\"line\">  ;; (interactive &quot;sCommit Message: &quot;)</span><br><span class=\"line\">  (interactive)</span><br><span class=\"line\">  (when (and buffer-file-name</span><br><span class=\"line\">             (buffer-modified-p))</span><br><span class=\"line\">    (save-buffer))                   ;; save it first if modified.</span><br><span class=\"line\">  (magit-diff-unstaged)</span><br><span class=\"line\">  (when (yes-or-no-p &quot;Do you really want to commit everything?&quot;)</span><br><span class=\"line\">    (magit-stage-modified)</span><br><span class=\"line\">    ;; (magit-mode-bury-buffer)</span><br><span class=\"line\">    (magit-diff-staged)</span><br><span class=\"line\">    (setq msg (read-string &quot;Commit Message: &quot;))</span><br><span class=\"line\">    (when (= 0 (length msg))</span><br><span class=\"line\">      (setq msg (format-time-string &quot;commit by magit in emacs@%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\">                                    (current-time))))</span><br><span class=\"line\">    (message &quot;commit message is %s&quot; msg)</span><br><span class=\"line\">    ;;(magit-commit (list &quot;-m&quot; msg))</span><br><span class=\"line\">    (magit-call-git &quot;commit&quot; &quot;-m&quot; msg)</span><br><span class=\"line\">    (magit-push-current-to-upstream nil)</span><br><span class=\"line\">    (message &quot;now do async push to %s&quot; (magit-get &quot;remote&quot; &quot;origin&quot; &quot;url&quot;)))</span><br><span class=\"line\">  (magit-mode-bury-buffer))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://ergoemacs.org/emacs/elisp_basics.html\">Xah 教程</a></li>\n<li><a href=\"https://github.com/ksco/BuildYourOwnLispCn\">BuildYourOwnLispCn</a></li>\n</ol>\n"},{"title":"Emacs on Windows10","url":"/2020/09/30/Emacs-on-Windows10/","content":"<h2 id=\"Install-msys2-on-windindows\"><a href=\"#Install-msys2-on-windindows\" class=\"headerlink\" title=\"Install msys2 on windindows\"></a>Install msys2 on windindows</h2><ol>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/msys2/distrib/x86_64/\">Tsing hua source</a></li>\n<li><a href=\"https://www.msys2.org/\">Official web</a></li>\n</ol>\n<h2 id=\"Config-msys2\"><a href=\"#Config-msys2\" class=\"headerlink\" title=\"Config msys2\"></a>Config msys2</h2><ol>\n<li>Theme: dracula</li>\n<li>Font: Consolas 14</li>\n<li>Transparency: Medium</li>\n<li>Right mouse: paste</li>\n<li>Terminal Type: xterm-256color</li>\n<li>Cursor: bold, not blinking</li>\n</ol>\n<h2 id=\"Install-git-vim-oh-my-zsh-emacs\"><a href=\"#Install-git-vim-oh-my-zsh-emacs\" class=\"headerlink\" title=\"Install git vim oh-my-zsh emacs\"></a>Install git vim oh-my-zsh emacs</h2><ol>\n<li><a href=\"https://blog.csdn.net/u013938484/article/details/83539008\">Tutorial</a></li>\n<li>Note: Change package source. No vim at first, you can edit the file on windows</li>\n<li>Emacs install: <code>pacman -S mingw-w64-x86_64-emacs</code></li>\n<li>Libs install: <code>pacman -S mingw-w64-x86_64-libpng &amp;&amp; pacman -S mingw-w64-x86_64-libjpeg-turbo</code></li>\n<li>Config .bashrc and .zshrc</li>\n</ol>\n<h2 id=\"Build-emacs-plugins-in-Ubuntu-on-VMvare\"><a href=\"#Build-emacs-plugins-in-Ubuntu-on-VMvare\" class=\"headerlink\" title=\"Build emacs plugins in Ubuntu on VMvare\"></a>Build emacs plugins in Ubuntu on VMvare</h2><ol>\n<li><a href=\"https://github.com/jiaxiyang/100ms_dot_emacs\">100ms emacs</a></li>\n<li>build and copy the tar package to msys2</li>\n<li>install package on msys2</li>\n</ol>\n","categories":["Tools","Emacs"],"tags":["Emacs"]},{"title":"FFmpeg","url":"/2021/02/23/FFmpeg/","content":"<h2 id=\"视频处理基本概念\"><a href=\"#视频处理基本概念\" class=\"headerlink\" title=\"视频处理基本概念\"></a><a href=\"https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html\">视频处理基本概念</a></h2><ol>\n<li><code>容器(封装)</code>：<code>ffmpeg-formats</code> 视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。</li>\n<li><code>编码格式</code>：<code>ffmpeg-codecs</code> 视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。</li>\n<li><code>编码器</code>：<code>ffmpeg-encoders</code> 编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频&#x2F;音频的编码和解码。</li>\n</ol>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><ol>\n<li>ffmpeg的主要工作流程相对比较简单，具体如下。</li>\n</ol>\n<ul>\n<li>解封装（Demuxing）</li>\n<li>解码（Decoding）</li>\n<li>编码（Encoding）</li>\n<li>封装（Muxing）</li>\n</ul>\n<ol>\n<li>其中需要经过6个步骤，具体如下。</li>\n</ol>\n<ul>\n<li>读取输入源</li>\n<li>进行音视频的解封装</li>\n<li>解码每一帧音视频数据</li>\n<li>进行音视频的重新封装</li>\n<li>输出到目标</li>\n</ul>\n<p>1.<br>                _______              ______________<br>               |       |            |              |<br>               | input |  demuxer   | encoded data |   decoder<br>               | file  | ———&gt; | packets      | —–+<br>               |<em><strong><strong><strong>|            |</strong></strong></strong><strong><strong><strong><strong>|      |<br>                                                          v<br>                                                      _________<br>                                                     |         |<br>                                                     | decoded |<br>                                                     | frames  |<br>                                                     |</strong></strong></strong></strong></em>|<br>                ________             ______________       |<br>               |        |           |              |      |<br>               | output | &lt;——– | encoded data | &lt;—-+<br>               | file   |   muxer   | packets      |   encoder<br>               |<strong><strong><strong><strong>|           |</strong></strong></strong></strong>______|</p>\n<h2 id=\"ffmpeg\"><a href=\"#ffmpeg\" class=\"headerlink\" title=\"ffmpeg\"></a>ffmpeg</h2><ol>\n<li>FFmpeg框架的基本组成包含AVFormat、AVCodec、AVFilter、AVDevice、AVUtil等模块库</li>\n<li>主要命令</li>\n</ol>\n<ul>\n<li>ffmpeg主要用于音视频编解码</li>\n<li>ffprobe主要用于音视频内容分析</li>\n<li>ffplay主要用于音视频播放、可视化分析</li>\n</ul>\n<h3 id=\"ffmpeg-1\"><a href=\"#ffmpeg-1\" class=\"headerlink\" title=\"ffmpeg\"></a>ffmpeg</h3><ol>\n<li>总共分为5部分：<code>ffmpeg &#123;1&#125; &#123;2&#125; -i &#123;3&#125; &#123;4&#125; &#123;5&#125;</code></li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ffmpeg \\</span><br><span class=\"line\"><span class=\"selector-attr\">[全局参数]</span> \\</span><br><span class=\"line\"><span class=\"selector-attr\">[输入文件参数]</span> \\</span><br><span class=\"line\">-<span class=\"selector-tag\">i</span> <span class=\"selector-attr\">[输入文件]</span> \\</span><br><span class=\"line\"><span class=\"selector-attr\">[输出文件参数]</span> \\</span><br><span class=\"line\"><span class=\"selector-attr\">[输出文件]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ffplay\"><a href=\"#ffplay\" class=\"headerlink\" title=\"ffplay\"></a>ffplay</h3><ol>\n<li>FFmpeg不但可以提供转码、转封装等功能，同时还提供了播放器相关功能，使用FFmpeg的avformat与avcodec，可以播放各种媒体文件或者流。如果想要使用ffplay，那么系统首先需要有SDL来进行ffplay的基础支撑。</li>\n</ol>\n<h3 id=\"ffprobe\"><a href=\"#ffprobe\" class=\"headerlink\" title=\"ffprobe\"></a>ffprobe</h3><ol>\n<li>ffprobe也是FFmpeg源码编译后生成的一个可执行程序。ffprobe是一个非常强大的多媒体分析工具，可以从媒体文件或者媒体流中获得你想要了解的媒体信息，比如音频的参数、视频的参数、媒体容器的参数信息等。</li>\n<li><code>./ffprobe –show_streams output.mp4</code></li>\n</ol>\n<h2 id=\"ffmpeg硬编解码\"><a href=\"#ffmpeg硬编解码\" class=\"headerlink\" title=\"ffmpeg硬编解码\"></a>ffmpeg硬编解码</h2><ol>\n<li>当使用FFmpeg进行软编码时，常见的基于CPU进行H.264或H.265编码其相对成本会比较高，CPU编码时的性能也很低，所以出于编码效率及成本考虑，很多时候都会考虑采用硬编码，常见的硬编码包含Nvidia GPU与Intel QSV两种，还有常见的嵌入式平台，如树莓派、瑞芯微等</li>\n</ol>\n<h2 id=\"ffmpeg流媒体\"><a href=\"#ffmpeg流媒体\" class=\"headerlink\" title=\"ffmpeg流媒体\"></a>ffmpeg流媒体</h2><ol>\n<li>随着互联网、移动互联网的发展，人们获取信息的方式开始从纸质媒体转向互联网文字媒体，又从文字媒体转向音视频流媒体。音视频流媒体又称为流媒体，而用于处理流媒体的压缩、录制、编辑操作，开源并强大的工具屈指可数，FFmpeg就是常见的流媒体处理工具。</li>\n<li>流类型：RTMP, RTSP, HTTP, UDP&#x2F;TCP, HDS, DASH</li>\n</ol>\n<h2 id=\"ffmpeg-filter\"><a href=\"#ffmpeg-filter\" class=\"headerlink\" title=\"ffmpeg filter\"></a>ffmpeg filter</h2><ol>\n<li>FFmpeg除了具有强大的封装&#x2F;解封装、编&#x2F;解码功能之外，还包含了一个非常强大的组件——avfilter。avfilter组件经常用于进行多媒体的处理与编辑。例如加水印，画中画，多宫格视频等</li>\n</ol>\n<h2 id=\"ffmpeg视频采集\"><a href=\"#ffmpeg视频采集\" class=\"headerlink\" title=\"ffmpeg视频采集\"></a>ffmpeg视频采集</h2><ol>\n<li>可以使用FFmpeg采集本地的音视频采集设备的数据，然后进行编码、封装、传输等操作</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://ffmpeg.org/documentation.html\">Official Documents</a></li>\n<li><a href=\"http://jxz1.j9p.com/pc/dgsdfhghgh.pdf\">FFmpeg从入门到精通（书）</a></li>\n</ol>\n","categories":["Program","FFmpeg"],"tags":["FFmpeg"]},{"title":"Profiling","url":"/2021/08/24/Cpp-Profiling/","content":"<h2 id=\"great\"><a href=\"#great\" class=\"headerlink\" title=\"great\"></a>great</h2><ol>\n<li><p>通过 roofline 作为指导, 各种优化方法对应到 roofline</p>\n</li>\n<li><p><a href=\"https://www.brendangregg.com/overview.html\">各种性能分析工具</a></p>\n</li>\n<li><p><a href=\"https://easyperf.net/\">easyperf</a></p>\n</li>\n<li><p><a href=\"https://docs.xilinx.com/r/zh-CN/ug1414-vitis-ai/Vitis-AI-Profiler-%E6%9E%B6%E6%9E%84\">VAI profiler</a></p>\n</li>\n<li><p><a href=\"https://github.com/dendibakh/perf-book\">perf-book</a></p>\n</li>\n<li><p><a href=\"https://github.com/dendibakh/perf-ninja\">perf-ninja</a></p>\n</li>\n<li><p><a href=\"https://www.eet-china.com/mp/a196988.html\">基于 CPU 性能调优的必要性和方法</a></p>\n</li>\n<li><p><a href=\"https://github.com/topics/profiling\">topics&#x2F;profiling</a></p>\n</li>\n<li><p><a href=\"https://hhb584520.github.io/kvm_blog/files/perf/Linux_Performance_Analysis_and_Tools.pdf\">Linux_Performance_Analysis_and_Tools</a></p>\n</li>\n<li><p><a href=\"https://www.brendangregg.com/linuxperf.html\">linuxperf</a></p>\n</li>\n<li><p><a href=\"https://github.com/nicolargo/glances\">glances</a></p>\n<span id=\"more\"></span>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/362575905\">profiling 与性能优化总结</a></p>\n<ul>\n<li>通常在计算密集型（CPU intensive）的任务中 CPU time 会占据较大的比重，而在 I&#x2F;O 密集型（I&#x2F;O intensive）任务中 off-CPU time 会占据较大的比重。</li>\n<li>我们把程序在 CPU 上执行的时间（即 user CPU time + system CPU time）称为 CPU time（或 on-CPU time），程序处于睡眠等状态的时间称为 off-CPU time（or blocked time），程序实际运行的时间称为 wall clock time（字面意思是墙上时钟的时间，也就是真实世界中流逝的时间），对于一个给定的线程：wall clock time &#x3D; CPU time + off-CPU time。</li>\n</ul>\n</li>\n<li><p><a href=\"http://arthurchiao.art/blog/linux-tracing-basis-zh/\">Linux tracing&#x2F;profiling 基础：符号表、调用栈、perf&#x2F;bpftrace</a></p>\n</li>\n<li><p><a href=\"https://medium.com/coccoc-engineering-blog/things-you-should-know-to-begin-playing-with-linux-tracing-tools-part-i-x-225aae1aaf13\">Practical Linux tracing ( Part 1&#x2F;5) : symbols, debug symbols and stack unwinding</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/385519404\">Perf IPC 以及 CPU 性能</a></p>\n</li>\n<li><p><a href=\"https://plantegg.github.io/\">plantegg’s blog</a></p>\n</li>\n<li><p><a href=\"https://github.com/Xilinx/Vitis-AI/tree/master/src/vai_runtime/vart/trace\">VART trace</a></p>\n</li>\n<li><p><a href=\"https://github.com/Xilinx/Vitis-AI/tree/master/src/vai_runtime/vart/trace/vaitrace/vaitraceTools/mem_perf\">vaitraceTools&#x2F;mem_perf</a></p>\n</li>\n<li><p><a href=\"https://docs.xilinx.com/r/en-US/ug1414-vitis-ai/Vitis-AI-Profiler?tocId=LjrELULUsJtA_mgGxWE2lQ\">Vitis-AI-Profiler</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/445267642\">linux 性能分析工具 perf：十八般武器之 cache</a></p>\n</li>\n<li><p><a href=\"https://static.linaro.org/connect/yvr18/presentations/yvr18-416.pdf\">Using perf On Arm platforms</a></p>\n</li>\n<li><p><a href=\"https://github.com/gaogaotiantian/viztracer\">viztracer</a></p>\n</li>\n<li><p><a href=\"https://github.com/google/orbit\">orbit</a></p>\n</li>\n<li><p>谓词替换分支， 谓词函数是一个返回布尔值的函数。</p>\n<ul>\n<li>这种方法涉及将复杂或重复的条件逻辑（通常出现在 if-else 或 switch 语句中）替换为更简洁、更清晰的代码结构。这种替换通常通过使用函数指针、Lambda 表达式或对象方法来实现。如 map 查找来替换 else if</li>\n</ul>\n</li>\n<li><p>问 chatgpt 如何优化</p>\n</li>\n<li><p><a href=\"https://tvm.hyper.ai/docs/tutorial/tensor_expr#%E7%A4%BA%E4%BE%8B-2%E4%BD%BF%E7%94%A8-te-%E6%89%8B%E5%8A%A8%E4%BC%98%E5%8C%96%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95\">TVM 各种优化方法</a></p>\n<ul>\n<li>总体： 提高缓存命中率和使用 SIMD</li>\n<li>块操作(cache)</li>\n<li>循环置换(cache)</li>\n<li>向量化(simd)</li>\n<li>数组打包, 重新排序，类似 cutlass cute(cache)</li>\n<li>通过缓存优化块写入(cache)</li>\n<li>并行化</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/google/highway/blob/master/hwy/profiler.h\">highway profiler 使用 RAII 可以设置 zone</a></p>\n<ul>\n<li>生命周期结束做一些操作</li>\n<li>add_definitions(-DPROFILER_ENABLED&#x3D;1)</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.51cto.com/article/718780.html\">QPS、TPS、RT、吞吐量</a></p>\n<ul>\n<li>系统吞吐量几个重要参数：QPS（TPS）、并发数、响应时间。</li>\n<li>QPS（TPS）&#x3D; 并发数&#x2F;平均响应时间</li>\n<li>QPS：Queries Per Second 意思是“每秒查询率”</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"roofline\"><a href=\"#roofline\" class=\"headerlink\" title=\"roofline\"></a>roofline</h2><ol>\n<li><a href=\"https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/\">berkeley roofline</a><ul>\n<li><a href=\"https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/ecptutorial/\">视频教程</a></li>\n<li><a href=\"https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/tutorial/\">SC23 Tutorial</a></li>\n<li><a href=\"https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/software/\">roofline 工具</a></li>\n<li><a href=\"https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/publications/\">(very good)相关文章</a><ul>\n<li><a href=\"https://crd.lbl.gov/assets/Uploads/ECP21-Roofline-1-intro.pdf\">berkeley lab 2021</a> <a href=\"https://crd.lbl.gov/assets/Uploads/ECP20-Roofline-1-intro.pdf\">Uploads&#x2F;ECP20-Roofline-1-intro.pdf</a><ul>\n<li>Kernels near the roofline are making good use of computational resources; 在远离 roofline 的地方没利用好资源<ul>\n<li>kernels can have low performance (GFLOP&#x2F;s), but make good use (%STREAM) of a machine</li>\n<li>kernels can have high performance (GFLOP&#x2F;s), but still make poor use of a machine (%peak)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://crd.lbl.gov/assets/Uploads/ECP20-Roofline-4-cpu.pdf\">Hierarchical Roofline Analysis on CPUs</a></li>\n<li><a href=\"https://www.nersc.gov/assets/Uploads/Tutorial-ECP2020-GPUs.pdf\">Hierarchical Roofline Analysis on GPUs</a></li>\n<li><a href=\"https://crd.lbl.gov/assets/Uploads/ECP21-Roofline-2-NVIDIA.pdf\">Hierarchical Roofline Analysis on GPUs</a></li>\n<li><a href=\"https://crd.lbl.gov/assets/Uploads/ECP21-Roofline-6-advanced.pdf\">Hierarchical Roofline Analysis on GPUs</a></li>\n<li>papers<ul>\n<li><a href=\"https://escholarship.org/uc/item/78h8v7mr\">Roofline: AnInsightfulVisual Performance Modelfor Floating-PointProgramsand Multicore Architectures</a></li>\n<li><a href=\"https://onlinelibrary.wiley.com/doi/am-pdf/10.1002/cpe.5547\">Hierarchical Roofline Analysis for GPUs: Accelerating Performance Optimization for the NERSC-9 Perlmutter System</a></li>\n<li><a href=\"https://escholarship.org/uc/item/0cg446n2\">Instruction Roofline: An Insightful Visual Performance Model for GPUs</a></li>\n<li><a href=\"https://crd.lbl.gov/assets/Uploads/InstructionRooflineModel-PMBS19-.pdf\">An Instruction Roofline Model for GPUs</a></li>\n</ul>\n</li>\n<li>优化目标是向屋顶靠近(上)，利用好计算资源，终极目标是用满计算资源; 降低延迟，增大吞吐</li>\n<li>脊点（拐点）是系统平衡点</li>\n<li>不同内存应该都是从 0 点出发，为什么有些图内存是平行的，坐标轴原点不是 0；从上面截断，看着像是平行的</li>\n<li>Roofline 模型讲的是程序在计算平台的算力和带宽这两个指标限制下，所能达到的理论性能上界(可实测最大 flops 和内存带宽作为理论)，而不是实际达到的性能，因为实际计算过程中还有除算力和带宽之外的其他重要因素，它们也会影响模型的实际性能，这是 Roofline Model 未考虑到的。例如矩阵乘法，会因为 cache 大小的限制、GEMM 实现的优劣等其他限制，导致你几乎无法达到 Roofline 模型所定义的边界（屋顶）。</li>\n<li>为什么不能达到屋顶上方？因为不是顺序访问， 屋顶是内存并行访问计算出来的，访问内存有利用率. cache 有命中率，（物理能达到最大带宽 逻辑不能达到，搬了那么多数，利用的不多，跳着访问，浪费了带宽）</li>\n<li>Roofline 模型是一个可视化工具，<code>用于表示计算系统的性能上限</code>，并帮助识别应用程序的性能瓶颈。它通过绘制两个关键性能指标（算术密集度和峰值性能）来显示应用程序或某一计算部分的性能相对于理论峰值性能的位置。</li>\n<li>可以实测最大 FLOPS，最大主存带宽, 得到最大计算访存比；当程序计算访存比小于最大计算访存比时，则是访存密集型，大于则是计算密集型。<code>并不是访存量大于计算量才是访存密集型</code>。</li>\n<li>应用所在的点不能超过屋顶</li>\n<li>其中 x 轴表示<code>算术密度</code>（每个访问的字节所做的浮点操作数），y 轴表示<code>性能</code>（通常是 FLOP&#x2F;s， Tops&#x2F;s，即每秒浮点操作数）。如果代码在带宽屋顶下方但接近于它，那么可能会受到内存带宽的限制。相反，如果代码在计算屋顶下方但接近于它，那么它可能受到计算能力的限制。</li>\n<li><code>how to opt gemm</code> 只需计算性能就能矩阵乘优化好坏，因为 roof line 目标就是提高计算性能, 计算性能才是关键，计算量一定，计算越快，延迟越少，访存只是完成计算需要的步骤，目的是完成计算</li>\n<li><code>Arithmetic Intensity</code>算术密度(FLOPs&#x2F;Byte), (速率或总量， 知道总操作数和总访问量也可以)</li>\n<li>注意 FLOPS 和 Flops 区别。 FLOPS &#x3D; Flops&#x2F;s</li>\n<li>转折点为最大性能，最大带宽（可由计算密度算）</li>\n<li>程序算术密度点大于转折点所在算术密度就是计算密集型程序。小于则是访存密集型。</li>\n<li>和 IPC 有何关联？</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/522007924\">MegPeak——让你更懂你的处理器</a></li>\n<li><a href=\"https://developer.nvidia.com/blog/accelerating-hpc-applications-with-nsight-compute-roofline-analysis/\">Accelerating HPC Applications with NVIDIA Nsight Compute Roofline Analysis</a></li>\n<li>确定应用程序或代码段的总浮点操作次数和所访问的内存量?</li>\n<li><code>likwid-bench</code>可以算 roofline</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/34204282\">Roofline Model 与深度学习模型的性能分析</a></li>\n<li>内存最大带宽不是一个一个字节搬的速度 有位宽，增大 cache 命中率防止一个个搬</li>\n<li>放在 cache 增加计算访主存储器比，斜向上</li>\n<li>总访存量没变化；从 cache 里更快，如果计算强度不变，屋顶模型直接向上</li>\n<li>应用计算强度如果不变，充分利用计算能力会减少延迟， 增大吞吐</li>\n<li>拿到一个系统可以先制作 proofline, 跟据 proofline 指导优化</li>\n<li>降低重复访存能增加计算密度， 斜向上，更好的利用硬件资源(性能提升)</li>\n<li>如果只用 cache， 计算密度不变，向上</li>\n<li>Achieved Value - The achieved value represents the performance of the profiled kernel. If baselines are being used, the roofline chart will also contain an achieved value for each baseline.</li>\n<li>The distance from the achieved value to the respective roofline boundary (shown in this figure as a dotted white line), represents the opportunity for performance improvement. The closer the achieved value is to the roofline boundary, the more optimal is its performance. An achieved value that lies on the Memory Bandwidth Boundary but is not yet at the height of the ridge point would indicate that any further improvements in overall FLOP&#x2F;s are only possible if the Arithmetic Intensity is increased at the same time. 到达点到 roofline 边界距离显示了优化机会，越接近边界表示越接近最佳性能，如果接近边界但还没到脊点，那么只有计算密度增加才能提高计算性能。</li>\n<li>memory bound 步骤：先向上， 在向右<ul>\n<li>向上：提高带宽(提升 cache 命中率)</li>\n<li>向右：提高计算密度(算法层面优化：减少访存) Reducing data movement increases AI</li>\n</ul>\n</li>\n<li>系统和应用在存储不同层级上有不同的脊点和 AI<br><img src=\"https://i.ibb.co/8PQq9fy/Cs-Me-Agns06.png\" alt=\"pic\"></li>\n</ol>\n<h3 id=\"berkeleylab-cs-roofline-toolkit\"><a href=\"#berkeleylab-cs-roofline-toolkit\" class=\"headerlink\" title=\"berkeleylab&#x2F;cs-roofline-toolkit\"></a><a href=\"https://bitbucket.org/berkeleylab/cs-roofline-toolkit/src/master/\">berkeleylab&#x2F;cs-roofline-toolkit</a></h3><ol>\n<li>voltar gpu 使用的 tensor core(mma.h)测试的性能</li>\n<li>得到数据</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://bitbucket.org/berkeleylab/cs-roofline-toolkit.git</span><br><span class=\"line\">cd cs-roofline-toolkit/Empirical_Roofline_Tool-1.1.0/</span><br><span class=\"line\">cp Config/config.voltar.uoregon.edu Config/config.orin</span><br><span class=\"line\">vi Config/config.orin</span><br><span class=\"line\">./ert Config/config.orin</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>生成图片</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi Results.Orin/Run.001/roofline.gnu</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改gpu配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">set</span> terminal pngcairo enhanced font <span class=\"string\">&quot;Arial,10&quot;</span> fontscale 1.0 size 500, 350</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">set</span> output <span class=\"string\">&#x27;roofline.png&#x27;</span></span></span><br><span class=\"line\">gnuplot Results.Orin/Run.001/roofline.gnu</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>加点</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Operational intensity</span></span><br><span class=\"line\">op_ins = 1.32</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Performance value</span></span><br><span class=\"line\">app_perf = 77</span><br><span class=\"line\">application = &quot;Testapplication&quot;</span><br><span class=\"line\">application_offset = 1</span><br><span class=\"line\">set object circle at first op_ins,app_perf radius char 0.5 fillcolor rgb &#x27;red&#x27; fillstyle solid</span><br><span class=\"line\">set label 1 at op_ins+0.2,app_perf+application_offset sprintf(&quot;%s (%.2f, %.2f)&quot;, application, op_ins, app_perf)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>生成的 ps 文件, 可以直接显示<ul>\n<li><a href=\"https://psviewer.org/onlineviewer.aspx\">ps file onlineviewer</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/RRZE-HPC/likwid/wiki/Tutorial%3A-Empirical-Roofline-Model\">Tutorial Empirical-Roofline-Model</a><ul>\n<li><code>sudo apt intall gnuplot</code></li>\n<li><code>gnuplot plotscript.gp</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"timemory\"><a href=\"#timemory\" class=\"headerlink\" title=\"timemory\"></a><a href=\"https://github.com/NERSC/timemory\">timemory</a></h3><ol>\n<li><a href=\"https://timemory.readthedocs.io/en/develop/getting_started/roofline.html\">getting_started&#x2F;roofline</a></li>\n<li><code>echo 1 | sudo tee /proc/sys/kernel/perf_event_paranoid</code></li>\n</ol>\n<h2 id=\"编译器选项\"><a href=\"#编译器选项\" class=\"headerlink\" title=\"编译器选项\"></a>编译器选项</h2><ol>\n<li><p><a href=\"https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md\">100-gcc-tips</a></p>\n</li>\n<li><p><code>gcc -Q --help=optimizers -O1</code>打印优化级别的对应选项</p>\n</li>\n<li><p>gcc 选项顺序很重要，如果两个选项冲突，则以后一个为准。可以用<code>-O3 -fno-inline-functions</code>既使用-O3 的功能又关闭函数内嵌功能。</p>\n<ul>\n<li><code>-O3 -O0</code> O0 级别</li>\n<li><code>-O0 -O3</code> O3 级别</li>\n<li><code>-O3 -O</code> O3 级别</li>\n<li><code>-O0 -O</code> O0 级别, If you use multiple -O options, with or without level numbers, the last such option is the one that is effective.</li>\n</ul>\n</li>\n<li><p><code>-O3</code> 是编译器的优化级别选项，表示进行高级优化。这个选项告诉编译器进行更多的优化，以提高代码的执行效率。<code>-O3</code> 是最高级别的优化选项，它会启用多种优化技术，包括循环展开、函数内联、向量化等。使用 <code>-O3</code> 可以显著提高代码的执行速度，但可能会增加编译时间和可执行文件的大小。</p>\n</li>\n<li><p><code>-Ofast</code> enables all -O3 optimizations. It also enables optimizations that are not valid for all standard-compliant programs. It turns on -ffast-math and the Fortran-specific -fstack-arrays, unless -fmax-stack-var-size is specified, and -fno-protect-parens</p>\n</li>\n<li><p><code>-LNO:simd</code> 是针对 SIMD（Single Instruction Multiple Data）指令集的优化选项。SIMD 是一种并行计算的技术，它允许在同一时间执行多个数据元素的相同操作，以提高程序的并行性和性能。<code>-LNO:simd</code> 告诉编译器使用 SIMD 指令集进行优化，以利用硬件的并行能力。这可以在循环、向量操作和并行计算等方面提高程序的性能。</p>\n</li>\n<li><p><code>-fopenmp</code>可以在编译时启用 OpenMP 并行编程的支持，从而实现多线程并行执行，提高程序的性能， 需要注意的是，使用 OpenMP 进行并行编程需要在代码中添加适当的并行指令，如 #pragma omp parallel，来标识需要并行执行的代码块。同时，也需要注意线程间的同步和数据共享，以避免并发冲突和数据竞争的问题。</p>\n<ul>\n<li><code>#pragma omp parallel for reduction(+ : sum)</code></li>\n<li><code>#pragma omp parallel</code></li>\n<li>多线程访问同时写一个地址会 core， 需要先处理数据依赖关系，比如先放到 vector 中，最后再合并处理</li>\n<li><code>export OMP_NUM_THREADS=4</code>设置运行时线程数量</li>\n</ul>\n</li>\n<li><p><code>sudo apt install libomp-dev</code></p>\n</li>\n<li><p><code>-fopenmp-simd -DSIMDE_ENABLE_OPENMP</code></p>\n</li>\n<li><p><code>-funroll-loops</code>强制编译器展开循环。这可能会提高某些循环密集型程序的性能，但也可能使代码体积增大。</p>\n</li>\n<li><p><code>-fprefetch-loop-arrays</code> 如果目标平台支持，这会在循环中为数组引用生成预取指令。</p>\n</li>\n<li><p><code>-march=native</code> 为当前运行编译命令的机器优化代码。这会使 GCC 产生针对你的特定 CPU 类型的代码，使用所有可用的指令集和优化。</p>\n</li>\n<li><p><code>-flto</code> 启用链接时间优化。这在链接时进行全程序分析，可能会产生更好的优化代码，但会增加链接时间。</p>\n</li>\n<li><p><code>-mfpu=neon</code> 此选项告诉编译器要为 NEON 浮点单元生成代码。这适用于较老的 ARM 架构和编译器版本。</p>\n</li>\n<li><p><code>-march</code> 使用此选项指定目标架构，例如<code>-march=armv8-a</code>。这可以确保编译器针对特定的 ARM 版本生成优化代码。</p>\n</li>\n<li><p><code>-mfloat-abi</code> 该选项定义了浮点数应该如何在函数调用中传递。有三个选项可以选择：soft、softfp 和 hard。使用 NEON 时，通常建议使用-mfloat-abi&#x3D;hard。</p>\n</li>\n<li><p><code>-ftree-vectorize</code> 这是一个优化选项，允许编译器自动将循环转换为使用向量指令。虽然这不是直接与 NEON 相关的，但它可以帮助自动利用 NEON 功能。</p>\n</li>\n<li><p><code>-fprofile-generate / -fprofile-use</code>用于基于真实数据的反馈指导优化（PGO）。首先使用-fprofile-generate 编译和运行程序来收集数据，然后使用-fprofile-use 再次编译以使用该数据进行优化。</p>\n</li>\n</ol>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf *<span class=\"variable\">.gcda</span></span><br><span class=\"line\">g++ -Ofast -fprofile-<span class=\"keyword\">generate</span> -o prefetch prefetch<span class=\"variable\">.cpp</span> &amp;&amp; ./prefetch</span><br><span class=\"line\">g++ -Ofast -fprofile-<span class=\"keyword\">use</span> -o prefetch prefetch<span class=\"variable\">.cpp</span> &amp;&amp; ./prefetch</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>-DCMAKE_CXX_FLAGS=&quot;-fprofile-generate&quot;</code> 然后运行生成 gcda, 然后 <code>-DCMAKE_CXX_FLAGS=&quot;-fprofile-use&quot;</code></li>\n<li><code>-fauto-profile</code> 使用 perf 来优化</li>\n<li><code>软件预取技术</code>：预取技术可以减少由于缓存未命中而导致的延迟。<code>__builtin_prefetch</code> 是 GCC 的内置函数，用于预取数据到缓存。其他编译器可能有类似的指令。</li>\n<li><code>-ftree-vectorize -funroll-loops</code>可以组合用</li>\n</ol>\n<h3 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h3><ol>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/\">gcc.gnu.org&#x2F;onlinedocs</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc-9.5.0/gcc/Optimize-Options.html#Optimize-Options\">gcc-9.5.0 Optimize-Options</a></li>\n</ol>\n<h2 id=\"程序性能分析步骤\"><a href=\"#程序性能分析步骤\" class=\"headerlink\" title=\"程序性能分析步骤\"></a>程序性能分析步骤</h2><ol>\n<li><code>cpufreq-set -g performance</code> 保持最大频率(频率固定好分析)</li>\n<li><code>taskset -c 0 ./test</code> 固定核</li>\n<li><code>perf stat -ddd ./test</code></li>\n<li><code>perf top -p</code> 快速的定位热点函数</li>\n<li>火焰图看各函数耗时占比</li>\n<li>perf report and annotate 查看热点函数的热点代码</li>\n<li>profiling table 统计代码具体时间<ul>\n<li>(profiling table + csv server)<a href=\"https://nmon.sourceforge.io/pmwiki.php?n=Main.HomePage\">nmon</a></li>\n<li><a href=\"https://github.com/LLNL/Caliper\">Caliper</a> 类似 Caliper</li>\n</ul>\n</li>\n<li>flamescope 看 hot map</li>\n<li>speedscope</li>\n</ol>\n<h2 id=\"60s-操作-bpf\"><a href=\"#60s-操作-bpf\" class=\"headerlink\" title=\"60s 操作 bpf\"></a>60s 操作 bpf</h2><ol>\n<li><p>uptime —–&gt; <code>load averages</code> <a href=\"https://zhuanlan.zhihu.com/p/75975041\">link</a> <a href=\"https://blog.51cto.com/u_15077533/4173309\">link1</a></p>\n<ul>\n<li>Linux load averages 不仅可以用于追踪 runnable 任务，还可以跟踪不间断睡眠状态下的任务（uninterruptible sleep state）。</li>\n<li>如果 1min 平均值高于 5min 或 15min 平均值，则负载正在增加, 如果 1min 平均值低于 5min 或 15min 平均值，则负载正在减少</li>\n<li>如果它们高于系统 CPU 的数量，那么系统很可能会遇到性能问题（视情况而定）</li>\n<li>当 load averages 首次出现在 Linux 中时，就像其他操作系统一样，它们反映了 CPU 的需求。但后来在 Linux 上将它们改为不仅包括 runnable 任务，还包括处于不间断状态的任务（TASK_UNINTERRUPTIBLE 或 nr_uninterruptible）</li>\n<li>这证实了故意改变 load averages 以反映对其他系统资源的需求，而不仅仅针对于 CPU 资源。Linux 从 “CPU load averages” 变为 “system load averages”。</li>\n</ul>\n</li>\n<li><p>dmesg -T | tail ——&gt; <code>kernal erros</code></p>\n</li>\n<li><p>vmstat 1 ——&gt; <code>overall stats by time</code></p>\n</li>\n<li><p>mpstat -P ALL 1 —–&gt; <code>CPU balance</code></p>\n<ul>\n<li><code>sudo apt install sysstat</code></li>\n<li>可以查看多核心 cpu 中每个计算核心的统计数据；</li>\n<li>Report CPU statistics.</li>\n</ul>\n</li>\n<li><p>pidstat 1 —–&gt; <code>process usage</code></p>\n<ul>\n<li>可以看进程分配在哪一个 cpu 核上</li>\n</ul>\n</li>\n<li><p>iostat -xz 1 —–&gt; <code>iostat -xz 1</code></p>\n</li>\n<li><p>free -m —–&gt; <code>memory usage</code></p>\n<ul>\n<li>man free 查看各个字段含义</li>\n<li>cat &#x2F;proc&#x2F;meminfo 有更详细内存占用</li>\n</ul>\n</li>\n<li><p>sar -n DEV 1 —–&gt; <code>network I/O</code></p>\n</li>\n<li><p>sar -n TCP,ETCP 1 —–&gt; <code>TCP stats</code></p>\n</li>\n<li><p>top —–&gt; <code>check overview</code></p>\n</li>\n</ol>\n<h2 id=\"simd-library\"><a href=\"#simd-library\" class=\"headerlink\" title=\"simd library\"></a><a href=\"https://www.reddit.com/r/cpp/comments/106ivke/simd_intrinsics_and_the_possibility_of_a_standard/\">simd library</a></h2><ol>\n<li><a href=\"https://github.com/google/highway\">highway cpu 向量加速库 SIMD</a><ul>\n<li><a href=\"https://github.com/google/highway/blob/f86369577e9f884f9156dddbf03ee786493c67f9/hwy/examples/benchmark.cc#LL245C5-L245C31\">获取支持的加速硬件</a></li>\n<li><code>cat /proc/cpuinfo</code> 看 flags</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jfalcou/eve\">eve</a></li>\n<li><a href=\"https://github.com/xtensor-stack/xsimd\">xsimd</a></li>\n<li><a href=\"https://github.com/ermig1979/Simd\">图像处理与机器学习 Simd</a></li>\n<li><a href=\"https://en.cppreference.com/w/cpp/experimental/simd\">parallelism TS v2</a></li>\n<li><a href=\"https://github.com/simd-everywhere/simde\">simde</a></li>\n</ol>\n<h2 id=\"性能基准测试\"><a href=\"#性能基准测试\" class=\"headerlink\" title=\"性能基准测试\"></a>性能基准测试</h2><ol>\n<li><a href=\"https://www.spec.org/\">spec</a> 需要 ios 文件</li>\n<li><a href=\"https://www.cnblogs.com/xiaoqi-home/p/15981359.html\">SpecCPU2017 测试 cpu 性能</a></li>\n</ol>\n<h2 id=\"sysstat\"><a href=\"#sysstat\" class=\"headerlink\" title=\"sysstat\"></a><a href=\"https://github.com/sysstat/sysstat\">sysstat</a></h2><h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a><a href=\"https://www.jianshu.com/p/af584c5a79f2\">top</a></h2><ol>\n<li>man top</li>\n<li>? help</li>\n<li>RES&#x3D;CODE+DATA 进程使用的、未被换出的物理内存大小</li>\n<li>内存主要关注物理内存, 虚拟内存表示程序文件及链接库大小，并不是所有的都加载到内存</li>\n<li>used mem &#x3D; total - free - buffers - cache （man free 可以看计算公式),</li>\n<li>主要看 <code>avaliable</code> &lt; free + buff&#x2F;cache</li>\n<li>纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到 free 中去，因此在 linux 上 free 内存会越来越少。</li>\n<li>%MEM – Memory Usage (RES) A task’s currently used share of available physical memory. 当前使用的物理内存 &#x2F; 总的物理内存</li>\n</ol>\n<h2 id=\"proc-获取信息\"><a href=\"#proc-获取信息\" class=\"headerlink\" title=\"proc 获取信息\"></a>proc 获取信息</h2><ol>\n<li><code>/proc/[PID]/stat</code></li>\n</ol>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li><p><code>Autotuning</code>（自动调优）在计算机科学中是一种优化技术，用于自动找到最佳的软件配置或参数设置，以提高应用程序的性能或资源使用效率。这种方法在多种计算领域中都有应用，尤其在高性能计算（HPC）、数据库管理、机器学习和深度学习等领域中非常重要。Autotuning 通常涉及一系列的探索和评估过程，可能包括启发式搜索、贝叶斯优化、进化算法等策略。这些过程旨在自动探索大量可能的配置组合，并评估它们在特定应用和硬件环境中的性能，以找到最佳配置。</p>\n<ul>\n<li>Autotuning 可以自动搜索最优的算法参数或配置设置，以最大化应用程序的性能。例如，在高性能计算中，它可以确定最佳的并行化策略、内存分配和计算资源使用方式。</li>\n<li>不同的硬件平台（如 CPU、GPU、TPU）有不同的性能特点和优化要求。Autotuning 能够根据目标平台的特性自动调整算法和参数，以实现最佳性能。</li>\n<li>手动调优通常需要深厚的专业知识和大量的时间。Autotuning 通过自动化这一过程，降低了对专业知识的依赖，同时提高了效率。</li>\n<li>在机器学习和深度学习中，autotuning 可用于自动寻找最优的模型超参数，如学习率、网络层数、批量大小等。</li>\n<li>在数据库系统中，autotuning 可以帮助自动优化查询计划、索引管理和内存分配等，以提高查询效率和数据处理速度。</li>\n</ul>\n</li>\n<li><p><code>tiling</code>（瓦片化）通常指的是一种优化技术，用于提高数据处理效率，特别是在高性能计算和图形处理领域。这种技术的核心思想是将大的数据集或计算任务分割成更小的、更易于管理和处理的单元或“瓦片”（tiles）。分治思想</p>\n<ul>\n<li>在高性能计算和深度学习中，tiling 被用于优化矩阵运算，特别是在使用 GPU 或其他并行计算设备时。通过将大矩阵分割成更小的块，可以更有效地利用缓存，减少内存访问的延迟和带宽需求。这样可以提高数据的局部性，从而提升计算效率。</li>\n<li>在内存密集型应用中，tiling 可以减少对大块连续内存的需求。这种方式有助于减少内存碎片化，提高内存利用率。</li>\n<li>在数据传输密集型操作中（如从 CPU 到 GPU 的数据传输），tiling 可以减少每次传输的数据量，从而降低延迟和带宽需求。</li>\n</ul>\n</li>\n<li><p>估计模型运行帧率时需考虑： 内存耗时和计算耗时； 要搬运的内存和内存读写速度可以算出一帧的耗时</p>\n</li>\n<li><p><code>性能分析</code> 和 <code>性能优化</code> 两大部分。</p>\n</li>\n<li><p>eigen 矩阵可以向量化，Eigen::Map 问 chatgpt</p>\n</li>\n<li><p>矩阵乘法是计算密集型运算(会变)。为取得良好的 CPU 性能，有两个重要的优化： <a href=\"https://tvm.hyper.ai/docs/tutorial/tensor_expr#%E7%A4%BA%E4%BE%8B-2%E4%BD%BF%E7%94%A8-te-%E6%89%8B%E5%8A%A8%E4%BC%98%E5%8C%96%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95\">link</a></p>\n<ul>\n<li><code>提高内存访问的缓存命中率</code>。高缓存命中率可以加速复杂的数值计算和热点内存访问。这需要将原始内存访问模式转换为适合缓存策略的模式。</li>\n<li><code>SIMD（单指令多数据）</code>，又称向量处理单元。在每个循环中，SIMD 可以处理一小批数据，而不是处理单个值。这需要将循环体中的数据访问模式转换为统一模式，以便 LLVM 后端可将其降低到 SIMD。</li>\n</ul>\n</li>\n<li><p><code>效率 = 有效量 / 理论量 = 有效量 / (理论峰值量 * 时间) = 有效量 * fps / 理论峰值量</code></p>\n</li>\n<li><p>op 计算效率：根据 op 算法算出计算量 C（可用 highway 函数统计 cycle)， 测出实际耗时 t, 已知理论峰值算力 O&#x2F;s; <code>计算效率 = 计算量 / 理论计算量(峰值算力 * 实际耗时) = C / (O * t) = C * fps / O</code> ？</p>\n</li>\n<li><p>op io 效率 <code>io效率 = io量 / 理论io量(峰值IO * 实际耗时)</code></p>\n</li>\n<li><p>模型算力利用率： <code>利用率 = 模型计算量 / 理论计算量(峰值算力 * 实际耗时) = 模型计算量 * fps / 峰值算力</code></p>\n</li>\n<li><p>提高 cache 命中率软件方法：</p>\n<ul>\n<li>连续访存</li>\n<li>分块</li>\n<li>循环置换</li>\n</ul>\n</li>\n<li><p>向量处理器可以设置步幅，访问步幅确定的非连续内存也有比较高的性能</p>\n</li>\n<li><p>在栈上申请内存比堆快, 不是运算快 <a href=\"https://zhuanlan.zhihu.com/p/481687008\">link</a>;</p>\n</li>\n<li><p>MIPS: 每秒执行了多少百万条指令。DMIPS：D 是 Dhrystone 的缩写，在 MIPS 前面加上 Dhrystone （整数运算），用于测整数计算能力。进程占用 DMIPS &#x3D; 总的 DMIPS * 进程占用 CPU 百分比</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_21475601/article/details/106564903\">ARM 各内核系列整型运算能力对比—DMIPS &#x2F; MHz</a></li>\n<li>A55 单核算力： 2.7DMIPS&#x2F;MHz*1.2GHz&#x3D;3.24 KDMIPS</li>\n<li>评估算力： 某个平台 top（隔几秒统计一次）看各进程 cpu 占比(max, mean)，根据 cpu 占比计算进程占 DMIPS， 所有进程加起来看是否超过另外一个平台总算力</li>\n</ul>\n</li>\n<li><p>函数计算量评估方法：</p>\n<ol>\n<li>假设平台的最大计算量是 M，函数运行时的 CPU 占用率是 p%，函数的计算需求 C 可以大致估计为 C &#x3D; M * p%。 然后通过函数的帧率 f 来估计每帧的计算需求：C_frame &#x3D; C &#x2F; f。</li>\n</ol>\n</li>\n<li><p><img src=\"https://mmbiz.qpic.cn/sz_mmbiz_png/2icOarNW84W7BnJpVvdnUeOgJYHibeWJbd4z0KJu556ykzgnjl7MHm5YWyjWDqR7eMPmXIWSWCFy8KG3dJQD8O8A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"cpu gpu npu算力单位\"></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/uTp9DXsG0pzTbyux1JgHMA\">抛弃 ARM，高通第五代汽车芯片</a></p>\n</li>\n<li><p>芯片指令解码位宽对 IPC 有直接影响</p>\n</li>\n<li><p>提高性能方法： 充分利用并行， 局部性原理</p>\n</li>\n<li><p>并行加速：</p>\n<ul>\n<li><p><code>数据级并行（DLP）</code>，它的出现是因为可以同时操作许多数据项。</p>\n<ul>\n<li><code>指令级并行</code>: 在编译器的帮助下，利用流水线之类的思想适度开发数据级并行，利用推理执行之类的思想以中等水平开发数据级并行。</li>\n<li><code>SIMD</code>： 向量体系结构和图形处理器（GPU）将单条指令并行应用于一个数据集，以开发数据级并行。</li>\n</ul>\n</li>\n<li><p><code>任务级并行（TLP）</code>，它的出现是因为创建了一些能够单独处理但大量采用并行方式执行的工作任务。</p>\n<ul>\n<li><code>线程并行</code>：线程级井行在一种紧耦合硬件模型中开发数据级并行或任务级并行，这种模型允许在并行线程之间进行交互。</li>\n<li><code>请求级并行</code>: 在程序员或操作系统指定的大量去耦合任务之间开发并行。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>局部性原理</p>\n<ul>\n<li>时间局部性：最近访问过的内容很可能会在短期内被再次访问</li>\n<li>空间局部性：地址相互临近的指令或数据很可能会在短时间内被用到</li>\n</ul>\n</li>\n<li><p>加速比(归一化)： 原执行时间 &#x2F; 新执行时间 &#x3D; 1 &#x2F; ( (1 - 升级比例) + (升级比例&#x2F;升级加速比))；新执行时间 &#x3D; 不能加速部分 + 加速后部分 &#x3D; 不能加速部分 + 加速部分&#x2F;加速部分加速比</p>\n</li>\n<li><p>Amdahl 定律：根据加速比， 可以得到</p>\n<ul>\n<li>如果仅改进一部分计算的性能，在增加改进是，所获得的加速比增量会逐渐减小</li>\n<li>加速比有最大值： 1 &#x2F; ( 1 - 升级比例)</li>\n</ul>\n</li>\n<li><p>感知系统优化方案（从系统上分析)：</p>\n<ul>\n<li>整体 pipeline 调度优化: 线程优先级， 各模块多线程，异步</li>\n<li>整体数据流优化： 合并前处理操作， rgba 在 rgb 转 nchw 时来做， memory_pool, zero copy</li>\n<li>模型+后处理联合优化：sigmoid 在后处理做, 反算阈值，sigmoid 之前先过滤， 优化 cpu 热点代码</li>\n<li>cuda 算子， neon 加速</li>\n</ul>\n</li>\n<li><p>关注数据流，具体哪一步耗时</p>\n</li>\n<li><p>data packing:</p>\n<ul>\n<li>注意 struct 成员变量顺序，尽量减少 padding</li>\n</ul>\n</li>\n<li><p>访存优化：</p>\n<ul>\n<li>连续访问</li>\n<li>不要重复访问（可以先用临时变量存下来)</li>\n</ul>\n</li>\n<li><p>软硬算法联合优化</p>\n</li>\n<li><p>编译器：</p>\n<ul>\n<li>打开编译器优化报告</li>\n<li>编译器参数：-O3(启动与机器无关的优化功能) -march&#x3D;armv8.2-a(启动针对特定 CPU 系列的优化功能) -flto(启动过程间优化功能)</li>\n<li>gcc -fopt-info 输出优化报告</li>\n</ul>\n</li>\n<li><p>技术栈:</p>\n<ul>\n<li>第一个就是编译器，你可能不需要更深入理解编译器的具体的原理，但是你要了解编译器通用的编译优化手段，以及它有比较通用的一些编译优化的选项。</li>\n<li>第二个就是 OS 的一个调度，还有一个可能 CPU 绑核。在手机上的话，绑核还是很明显的，如果是在小核上和大核，要是中核，它们也差距很多。硬件的限制。如果你想你的任务要跑特别快，比如假如一个特别重要的前台功能，你需要把你的主线程一个界面相关的线程可能就要绑定到大核上，让他跑这么快。</li>\n<li>第三个在硬点上，我可能我们要比较了解 CPU 的微架构是什么样的， CPU 微架构什么样的，为什么我的代码跑的时候它就慢，慢又拆解为几类，怎么去分析它。第二个你要去可能要去尝试的去学习，怎么去读或者改这些汇编的一些指令。</li>\n</ul>\n</li>\n<li><p>系统级性能优化通常包括两个阶段：性能剖析（performance profiling）和代码优化。</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/419859575\">性能静态分析（定量）</a></p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/a0296d5b91bc\">Parallelware Analyzer</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/343408130\">性能指标</a></p>\n<ul>\n<li>latency(延迟或响应时间)</li>\n<li>throughput()</li>\n<li>资源使用率 (资源：处理器，内存，IO)<ul>\n<li>cpu(不大于 75%)</li>\n<li>内存(不大于 80%)</li>\n<li>IO(磁盘, 网络)</li>\n</ul>\n</li>\n<li>错误率</li>\n</ul>\n</li>\n<li><p>latency 和 throughput (延迟和吞吐量)</p>\n<ul>\n<li>throughput(速度？)：吞吐量一般指相当一段时间内测量出来的系统单位时间处理的任务数或事务数。如：1s 处理 10 帧图片 (10FPS)</li>\n<li>latency: 执行一次任务需要的时间。如：处理一帧图片耗时 10ms</li>\n<li>latency 最大值：每个节点最大耗时叠加在一起，就是整体 pipeline 的 latency 最大值，即一帧最大需要多少时间输出结果，这个 latency 值尽量越小越好；</li>\n<li>目标：低延迟，高吞吐</li>\n<li>提高吞吐：提升 node 处理速度或异步流水线， 异步流水可能会增加延迟（较好提升, 有两种方法)</li>\n<li>降低延迟：提升 node 处理速度， 优化关键点，也会增加吞吐(容易遇见瓶颈)</li>\n<li>提升 node 处理速度能够同时提高吞吐和降低延迟。</li>\n</ul>\n</li>\n<li><p>流水线深度(硬件执行单元个数)，buffer 数量(处理多少帧)关系</p>\n<ul>\n<li>如果完全流水起来， buffer size 不小于流水线深度，流水线帧率由耗时最大的 node 决定: 1 &#x2F; max(node time)</li>\n<li>(异步处理比较重要 queue size)</li>\n<li>node 之间相互不影响，buffer size 大于流水线深度通常作用不大， 同一时刻所有 node 只能处理流水线深度的 buffer，但如果 node 之间相互影响，不好推测 buffer size 大小。</li>\n<li>node 之间相互影响：buffer size 不影响其他功能越大越好</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/66933636\">流水线深度</a></li>\n</ul>\n</li>\n<li><p>提升 node 处理速度方法：</p>\n<ul>\n<li>减少运算量(降低算法复杂度)</li>\n<li>加速库(如：硬件加速) 或更换更强硬件</li>\n<li>多线程</li>\n<li>减少资源申请与释放(如 memory pool, thread pool)</li>\n<li>减小内存拷贝(如：零拷贝)</li>\n<li>内存使用优化：如模型多个输出，申请一次大内存，偏移量来寻址。</li>\n<li>空间换时间(如查表法)</li>\n<li>语言特性：内联函数</li>\n<li>提高 cache 命中率(如：矩阵变数组，连续访问会提高 cache 命中率)</li>\n<li>改变运算方法(如 sigmoid 后再做处理，减少指数运算)</li>\n</ul>\n</li>\n<li><p>异步方法(流水线)</p>\n<ul>\n<li>多线程</li>\n<li>增加 buffer 数</li>\n<li>调度优化</li>\n<li>多流水线(pingpang)</li>\n</ul>\n</li>\n<li><p><a href=\"https://bbs.huaweicloud.com/blogs/detail/222032\">定位和优化程序 CPU、内存、IO 瓶颈</a></p>\n<ul>\n<li>两个方向：<code>提⾼运⾏速度 + 减少计算量</code></li>\n<li>先建立测试<code>baseline</code></li>\n<li>瓶颈点可能有多个，如果不解决最狭窄的瓶颈点</li>\n</ul>\n</li>\n<li><p>调研性能瓶颈，如何对系统性能进行分析。</p>\n</li>\n<li><p>单例 perf table</p>\n</li>\n<li><p>计算密集型</p>\n<ul>\n<li>减少不必要计算</li>\n</ul>\n</li>\n<li><p>访存密集型</p>\n<ul>\n<li>提高 cache 命中率</li>\n<li>减少不必要访存</li>\n</ul>\n</li>\n<li><p>IO 密集型</p>\n</li>\n</ol>\n<h2 id=\"理论性能评估\"><a href=\"#理论性能评估\" class=\"headerlink\" title=\"理论性能评估\"></a>理论性能评估</h2><ol>\n<li>(假设串行执行)理论 GPU 使用时间计算：各模型的推理耗时是单模型实测值，GPU 时间片按照各自的设计帧率（如 15Hz (fps)）× 推理耗时得到，是个纯理论计算的值。总和为各部分理论值相加，820 为理论值，这个值如果大于 1000 则系统无法达成。</li>\n<li>单模型推理时间 x fps &#x3D; 模型占用 gpu 时间, 所有模型时间不能超过 1000ms;</li>\n<li>有了各个模型推理时间也可以算理论最大帧率；（未考虑模型对计算资源的抢占，锁）1000 &#x2F; 所有模型加一起耗时;</li>\n</ol>\n<h2 id=\"推理优化\"><a href=\"#推理优化\" class=\"headerlink\" title=\"推理优化\"></a><a href=\"https://www.cnblogs.com/Matrix_Yao/p/13181778.html\">推理优化</a></h2><ol>\n<li><a href=\"https://www.6aiq.com/article/1662281420188\">深度模型推理加速的术与道</a></li>\n<li>减少 sigmoid 的使用(非常耗时)，可以放到后处理来做，根据 sigmoid 公式， 反算阈值，过滤之后再进行计算</li>\n</ol>\n<h3 id=\"算子融合\"><a href=\"#算子融合\" class=\"headerlink\" title=\"算子融合\"></a>算子融合</h3><ol>\n<li><p>算子融合基于对深度学习拓扑结构模式的观察。深度学习算子按其对资源的需求可以分为两类：</p>\n<ul>\n<li>计算密集型算子，这些算子的时间绝大部分花在计算上，如卷积、全连接等。</li>\n<li>访存密集型算子，这些算子的时间绝大部分花在访存上，他们大部分是 element-wise 算子， ReLU，eltment-wise sum。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"cpu-time-and-off-cpu-time\"><a href=\"#cpu-time-and-off-cpu-time\" class=\"headerlink\" title=\"cpu time and off-cpu time\"></a>cpu time and off-cpu time</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/362575905\">profiling 与性能优化总结</a></li>\n</ol>\n<h2 id=\"性能调优方法\"><a href=\"#性能调优方法\" class=\"headerlink\" title=\"性能调优方法\"></a>性能调优方法</h2><h3 id=\"PMC-Performance-Monitoring-Counters\"><a href=\"#PMC-Performance-Monitoring-Counters\" class=\"headerlink\" title=\"PMC(Performance Monitoring Counters)\"></a>PMC(Performance Monitoring Counters)</h3><h3 id=\"循环展开\"><a href=\"#循环展开\" class=\"headerlink\" title=\"循环展开\"></a><a href=\"https://zhuanlan.zhihu.com/p/553771789\">循环展开</a></h3><ol>\n<li>计算能力（GFlops）和访存速度（MB&#x2F;s）的矛盾，在汇编语言中就是取指令（load store）和计算（ALU）的矛盾。访存和计算天然是两种独立的资源，两者可以独立运行互不影响。</li>\n<li>当循环次数变少，循环体增多的时候，<code>CPU在执行循环体的过程中就有了更大的操作空间进行指令调度(inline也有这个作用)</code>，在计算 a[i]的时候就可以去调度 a[i+1]相关的指令（取数据）和 a[i-1]相关的指令（存数据），因此 CPU 流水线更满载，也就提高了性能。</li>\n<li>循环展开可以减少分支预测的次数</li>\n<li>一般不需要手动优化，-O2 会自动展开， -O1 不会</li>\n<li>perf annotate 可以看出循环有开销(判断，跳转或 index 操作)， cpu 流水线并行性低</li>\n</ol>\n<h3 id=\"分支预测\"><a href=\"#分支预测\" class=\"headerlink\" title=\"分支预测\"></a>分支预测</h3><ol>\n<li>推理：在还不确切知道是否真的需要某一条指令时，就先执行改指令。如果预测错误，就需要清理流水线。</li>\n</ol>\n<h3 id=\"预取\"><a href=\"#预取\" class=\"headerlink\" title=\"预取\"></a>预取</h3><ol>\n<li>数据和指令预取</li>\n<li>硬件和软件预取</li>\n</ol>\n<h3 id=\"IPC-instruction-per-cycle\"><a href=\"#IPC-instruction-per-cycle\" class=\"headerlink\" title=\"IPC (instruction per cycle)\"></a><a href=\"https://zhuanlan.zhihu.com/p/385519404\">IPC (instruction per cycle)</a></h3><ol>\n<li><code>tiptop</code></li>\n<li><code>perf stat</code> 可以查看</li>\n<li>当比较不同的指令集时，与使用相同芯片技术实现更复杂的指令集相比，更简单的指令集可能会导致更高的 IPC 数字。但是，更复杂的指令集可能能够以更少的指令实现更多有用的工作。</li>\n<li>确定： <code>计算密集型或访存密集型</code></li>\n<li>如果 IPC &lt; 1.0, 很可能是 Memory stall 占主导，可从软件和硬件两个方面考虑这个问题。软件方面：减少不必要的访存操作，提升 cache 命中率，尽量访问本地节点内存；硬件方面：增加 cache 容量，加快访存速度，提升总线带宽。<br>如果 IPC &gt; 1.0, 很可能是计算密集型的程序。可以试图减少执行指令的数量：消除不必要的工作。火焰图 CPU flame graphs，非常适用于分析这类问题。硬件方面：尝试超频、使用更多的 core 或 hyperthread。作者根据 PMU 相关的工作经验，设定了 1.0 这个阈值，用于区分访存密集型(memory-bound)和计算密集型(cpu-bound)程序。读者可以根据自己的实际工作平台，合理调整这个阈值。</li>\n<li><a href=\"https://www.brendangregg.com/blog/2017-05-09/cpu-utilization-is-wrong.html\">cpu-utilization-is-wrong</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/364661188?utm_source=zhihu&utm_medium=social&utm_oi=26748628500480\">CPU 最高性能预估之“理论最大 IPC”</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/385519404\">IPC 测试，可以预估最大 IPC</a></li>\n<li>ipc 是指每个 core 的 IPC</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1517979\">用 CPI 火焰图分析 Linux 性能问题</a> 使用 CPI 火焰图，可以很方便地做 CPU 利用率的分析，找到和定位引发 CPU 停顿的函数。一旦找到相关的函数，就可以通过 perf annotate 命令对引起停顿的指令作出进一步确认。</li>\n</ol>\n<h3 id=\"CPI-Cycle-Per-Instruction\"><a href=\"#CPI-Cycle-Per-Instruction\" class=\"headerlink\" title=\"CPI(Cycle Per Instruction)\"></a>CPI(Cycle Per Instruction)</h3><h3 id=\"绑核\"><a href=\"#绑核\" class=\"headerlink\" title=\"绑核\"></a>绑核</h3><ol>\n<li>taskset</li>\n<li><code>taskset -c 3,5 firefox</code></li>\n<li>taskset 超出核心数程序可能更快， why?</li>\n</ol>\n<h3 id=\"memory-bound\"><a href=\"#memory-bound\" class=\"headerlink\" title=\"memory bound\"></a>memory bound</h3><h3 id=\"SSE（Streaming-SIMD-Extensions）\"><a href=\"#SSE（Streaming-SIMD-Extensions）\" class=\"headerlink\" title=\"SSE（Streaming SIMD Extensions）\"></a>SSE（Streaming SIMD Extensions）</h3><h3 id=\"SVE-Scalable-Vector-Extension\"><a href=\"#SVE-Scalable-Vector-Extension\" class=\"headerlink\" title=\"SVE(Scalable Vector Extension)\"></a>SVE(Scalable Vector Extension)</h3><ol>\n<li>是 arm AArch64 架构下的下一代 SIMD 指令集，旨在加速高性能计算，SVE 引入了很多新的架构特点</li>\n</ol>\n<h3 id=\"多发射处理器\"><a href=\"#多发射处理器\" class=\"headerlink\" title=\"多发射处理器\"></a>多发射处理器</h3><ol>\n<li>多发射处理器相对于向量处理器的潜在优势在于它们能够从结构化程度较低的代码中提取某些并行，以及能够很轻松地缓存所有形式的数据。因为这些原因，<code>多发射方法已经成为利用指令级并行的主要方法</code>，而向量主要作为这些处理器的扩展。</li>\n<li>目标就是允许在一个时钟周期中发射多条指令。多发射处理器主要有以下 3 类。</li>\n</ol>\n<h4 id=\"静态调度超标量处理器\"><a href=\"#静态调度超标量处理器\" class=\"headerlink\" title=\"静态调度超标量处理器\"></a>静态调度超标量处理器</h4><ol>\n<li>由于静态调度超标量的收益会随着发射宽度的增长而逐渐减少，所以静态调度超标量主要用于发射宽度较窄的情况，通常仅有两条指令</li>\n<li>大多属于嵌入式领域， MiPS 和 ARM ，包括 ARM Cortex-A8</li>\n</ol>\n<h4 id=\"VLIW-超长指令字-处理器\"><a href=\"#VLIW-超长指令字-处理器\" class=\"headerlink\" title=\"VLIW( 超长指令字)处理器\"></a>VLIW( 超长指令字)处理器</h4><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/337749676\">计算机指令集架构 – 超长指令字（VLIW）</a></li>\n<li>大多数属于信号处理领域，比如 TI C6x</li>\n</ol>\n<h4 id=\"动态调度超标量处理器\"><a href=\"#动态调度超标量处理器\" class=\"headerlink\" title=\"动态调度超标量处理器\"></a>动态调度超标量处理器</h4><ol>\n<li>Intel Core i3 、i5 ， i7. AMD Phenom, IBM Power7</li>\n</ol>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><ol>\n<li>LLC: last level cache 最后一级缓存，比较关键</li>\n<li>cache locality 表示程序对缓存中数据的访问 locality 和重用情况。如果同一个 warp 中的线程迭代访问同一缓存线(cache line)上的数据(比如遍历一个数组),那么可以最大化利用 cache,称之为良好的 cache locality。</li>\n</ol>\n<h3 id=\"提高-cache-性能\"><a href=\"#提高-cache-性能\" class=\"headerlink\" title=\"提高 cache 性能\"></a>提高 cache 性能</h3><p>处理器的缓存（通常是 L1、L2 和 L3）旨在减少从主内存访问数据所需的时间。它们存储了最近或经常访问的数据副本，从而提高了数据访问速度。为了充分利用缓存并提高程序性能，你可以遵循以下一些方法和建议：</p>\n<ol>\n<li><strong>局部性原理</strong>：<ul>\n<li><strong>时间局部性</strong>：如果某个数据项被访问，那么在近期它可能再次被访问。</li>\n<li><strong>空间局部性</strong>：如果某个数据项被访问，那么它附近的数据项也可能会很快被访问。<br>为了利用这种局部性，尝试在连续的内存地址上组织和访问数据（例如，使用数组而不是链表）。</li>\n</ul>\n</li>\n<li><strong>避免伪共享</strong>：确保并发运行的线程访问的数据不位于同一缓存行上，因为这可能会导致缓存无效并减慢性能。</li>\n<li><strong>数据对齐</strong>：确保数据结构按照缓存行大小进行对齐，这可以减少跨多个缓存行的数据访问。</li>\n<li><strong>预取策略</strong>：如果可能，尝试预测下一次需要的数据并预先加载它。一些编译器和硬件支持数据预取指令。</li>\n<li><strong>减少缓存失效</strong>：<ul>\n<li>将常用的数据放在一起。</li>\n<li>避免大的数据结构，它们可能会频繁地导致缓存失效。</li>\n<li>在可能的情况下，使用更小的数据类型。</li>\n</ul>\n</li>\n<li><strong>循环分块&#x2F;循环重排</strong>：这是一种技术，可以将大的循环重组为更小的块，从而更好地适应缓存。这尤其适用于多层嵌套的循环。</li>\n<li><strong>避免不必要的写回操作</strong>：只在数据确实更改时写入，以减少不必要的写回到主内存。</li>\n<li><strong>使用只读和常量数据</strong>：如果数据不需要更改，将其标记为常量可以帮助编译器进行优化。</li>\n<li><strong>控制数据的分配和布局</strong>：例如，在 C++中，你可以使用自定义分配器来控制对象在内存中的位置。</li>\n<li><strong>利用非统一内存访问 (NUMA) 架构</strong>：在多处理器系统上，确保线程尽可能在与其数据最近的处理器上运行。</li>\n<li><strong>监控和剖析</strong>：使用工具（如<code>perf</code>、<code>VTune</code>等）来分析你的程序，找出缓存失效的热点，并对它们进行优化。</li>\n</ol>\n<h4 id=\"cache-line\"><a href=\"#cache-line\" class=\"headerlink\" title=\"cache line\"></a><a href=\"https://plantegg.github.io/2021/05/16/CPU_Cache_Line%E5%92%8C%E6%80%A7%E8%83%BD/\">cache line</a></h4><ol>\n<li>cpu 一般 size 64 byte (512bit)</li>\n<li><code>getconf -a | grep CACHE</code> 查看各级 cache line size</li>\n<li><code>lscpu -C</code></li>\n<li><code>likwid-topology</code>显示有关硬件拓扑的详细信息，例如 CPU、缓存、NUMA 域等。</li>\n</ol>\n<h4 id=\"cache-一致性\"><a href=\"#cache-一致性\" class=\"headerlink\" title=\"cache 一致性\"></a>cache 一致性</h4><ol>\n<li><a href=\"https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/caches/MESIHelp.htm\">在线体验 MESI 协议状态转换</a></li>\n<li><a href=\"https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/caches/MESIHelp.htm\">cache 相关动画</a></li>\n</ol>\n<h4 id=\"cache-miss\"><a href=\"#cache-miss\" class=\"headerlink\" title=\"cache miss\"></a>cache miss</h4><ol>\n<li>应用程序的读占比越高，对缓存越友好；访问的字长越大对预取越友好；同等数量的指令内存依赖越低，CPI 会越高。</li>\n<li><code>sudo perf stat -d -d -d -a -- sleep 10</code></li>\n<li><code>sudo perf stat -e cache-misses ls</code></li>\n<li><code>sudo cachestat-bpfcc 2</code></li>\n<li><code>sudo cachetop-bpfcc</code></li>\n</ol>\n<h4 id=\"prefetch\"><a href=\"#prefetch\" class=\"headerlink\" title=\"prefetch\"></a>prefetch</h4><ol>\n<li>预取是一种优化技术，它允许 CPU 提前加载将要访问的数据到缓存中，以便在实际访问数据时可以更快地获得它。预取可以减少由于缓存未命中引起的等待时间。减少指令延迟</li>\n<li>硬件预取：现代 CPU 已经有自己的硬件预取策略。在某些情况下，手动的预取可能会与硬件的预取策略发生冲突，导致性能下降。</li>\n<li><code> __builtin_prefetch(&amp;data[i + 16], 0, 1);  // 预取下一个将要访问的数据</code></li>\n</ol>\n<h4 id=\"伪共享\"><a href=\"#伪共享\" class=\"headerlink\" title=\"伪共享\"></a>伪共享</h4><ol>\n<li>伪共享发生在以下情况下：<ul>\n<li>两个或多个处理器核心在它们各自的本地缓存中读&#x2F;写不同的变量。</li>\n<li>这些变量恰好位于同一缓存行中。</li>\n</ul>\n</li>\n<li>避免：<ul>\n<li>数据对齐：确保经常由不同线程访问的数据在不同的缓存行上。许多编译器和平台都提供数据对齐指令或属性。</li>\n<li>填充：在数据结构中添加填充，使每个线程访问的数据元素都有一个完整的缓存行。</li>\n<li>局部变量：尽量使用线程的局部变量，因为它们通常存储在栈上，并且不太可能与其他线程的变量共享缓存行。</li>\n<li>避免细粒度并行：如果任务太小，线程间的同步和伪共享可能会抵消并行处理的好处。</li>\n</ul>\n</li>\n<li>sample, 避免伪共享更快</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> Clock = std::chrono::steady_clock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __TIC__(tag) auto __##tag##_start_time = Clock::now();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __TOC__(tag)                                                           \\</span></span><br><span class=\"line\"><span class=\"meta\">  auto __##tag##_end_time = Clock::now();                                      \\</span></span><br><span class=\"line\"><span class=\"meta\">  std::cout &lt;&lt; #tag &lt;&lt; <span class=\"string\">&quot; : &quot;</span>                                                   \\</span></span><br><span class=\"line\"><span class=\"meta\">            <span class=\"string\">&lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;</span>(          \\</span></span><br><span class=\"line\"><span class=\"meta\">                   __##tag##_end_time - __##tag##_start_time)                  \\</span></span><br><span class=\"line\"><span class=\"meta\">                   .count()                                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">            &lt;&lt; <span class=\"string\">&quot;us&quot;</span> &lt;&lt; std::endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ITERATIONS 1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 伪共享情况</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SharedData</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> value1;</span><br><span class=\"line\">  <span class=\"type\">long</span> value2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 避免伪共享的情况</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PaddedData</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> value1;</span><br><span class=\"line\">  <span class=\"type\">char</span> padding[<span class=\"number\">64</span>]; <span class=\"comment\">// 通常缓存行的大小为64字节</span></span><br><span class=\"line\">  <span class=\"type\">long</span> value2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">updateValue1</span><span class=\"params\">(SharedData *data)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">long</span> i = <span class=\"number\">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class=\"line\">    data-&gt;value1 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">updateValue2</span><span class=\"params\">(SharedData *data)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">long</span> i = <span class=\"number\">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class=\"line\">    data-&gt;value2 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  SharedData data;</span><br><span class=\"line\">  __TIC__(TEST)</span><br><span class=\"line\">  <span class=\"function\">std::thread <span class=\"title\">t1</span><span class=\"params\">(updateValue1, &amp;data)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::thread <span class=\"title\">t2</span><span class=\"params\">(updateValue2, &amp;data)</span></span>;</span><br><span class=\"line\">  t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">  t2.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">  __TOC__(TEST)</span><br><span class=\"line\"></span><br><span class=\"line\">  PaddedData paddedData;</span><br><span class=\"line\">  __TIC__(TEST_WITH_PADDING)</span><br><span class=\"line\">  <span class=\"function\">std::thread <span class=\"title\">t3</span><span class=\"params\">([&amp;paddedData] &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">for</span> (<span class=\"type\">long</span> i = <span class=\"number\">0</span>; i &lt; ITERATIONS; i++) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      paddedData.value1 += i;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  &#125;)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::thread <span class=\"title\">t4</span><span class=\"params\">([&amp;paddedData] &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">for</span> (<span class=\"type\">long</span> i = <span class=\"number\">0</span>; i &lt; ITERATIONS; i++) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      paddedData.value2 += i;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  &#125;)</span></span>;</span><br><span class=\"line\">  t3.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">  t4.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">  __TOC__(TEST_WITH_PADDING)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><ol>\n<li>Release 模式编译</li>\n<li>看 cpu 使用率 log 重定向到&#x2F;dev&#x2F;null。 <code>&gt; /dev/null 2&gt;&amp;1</code></li>\n<li>log 重定向到文件, 不要打印到 stdout<ul>\n<li><code>&gt; output.log 2&gt;&amp;1</code> this will redirect both STDOUT and STDERR to the file.</li>\n<li><code>2&gt;&amp;1 &gt; output.log</code> the old STDOUT will be saved (copied) in STDERR and then STDOUT will be redirected to file. So, stdout will go to file and stderr will go to console.</li>\n<li><code>2&gt;&amp;1 | tee output.log</code> both streams will be redirected to tee. Tee will duplicate any input to its stdout (the console in your case) and to file (output.log).</li>\n</ul>\n</li>\n<li>GPU 函数耗时统计不能只记录一次的，GPU 可能做一些准备工作，教训： nppiResize_8u_C3R 不管大小第一次运行耗时都很大 The cuda context is lazily initialized</li>\n<li>-O3 测试</li>\n<li>perf stat .&#x2F;xxx 测试程序运行时间</li>\n</ol>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><h3 id=\"arm-map\"><a href=\"#arm-map\" class=\"headerlink\" title=\"arm map\"></a><a href=\"https://developer.arm.com/documentation/101136/22-1-3/MAP/Performance-analysis-with-Caliper-instrumentation/Analyze-your-program\">arm map</a></h3><h3 id=\"palanteer\"><a href=\"#palanteer\" class=\"headerlink\" title=\"palanteer\"></a><a href=\"https://github.com/dfeneyrou/palanteer\">palanteer</a></h3><ol>\n<li><a href=\"https://dfeneyrou.github.io/palanteer/index.html#\">c++ doc</a></li>\n<li><a href=\"https://dfeneyrou.github.io/palanteer/getting_started.md.html\">getting_started</a></li>\n</ol>\n<h3 id=\"njmon\"><a href=\"#njmon\" class=\"headerlink\" title=\"njmon\"></a><a href=\"https://nmon.sourceforge.io/pmwiki.php?n=Site.Njmon\">njmon</a></h3><ol>\n<li>注意可以看视频教程</li>\n<li><a href=\"https://www.ibm.com/support/pages/njmon-intro-and-update\">njmon-intro-and-update</a></li>\n<li><code>wget http://sourceforge.net/projects/nmon/files/njmon_linux_v83.zip</code> tar and make</li>\n<li><a href=\"https://github.com/chhanz/njmon-grafana-dashboard-json\">njmon-grafana-dashboard-json</a></li>\n</ol>\n<h3 id=\"nmon\"><a href=\"#nmon\" class=\"headerlink\" title=\"nmon\"></a><a href=\"https://nmon.sourceforge.io/pmwiki.php?n=Main.HomePage\">nmon</a></h3><ol>\n<li><a href=\"https://github.com/adejoux/nmon2influxdb\">nmon2influxdb</a></li>\n<li>Nigel’s Monitor(nmon)</li>\n<li>可以记录 cpu, memory， io 等资源，用 nmonchart 显示图表</li>\n<li>建议您将快照数量保持在 800 - 1000 左右，以避免文件过大出现问题。</li>\n<li>nmon -f -s 10 -c 360 (snapshot the statistics every 10 seconds for an hour)</li>\n<li>(very good)nmon -fT -s 5 -c 720 非常好用，top 信息, html 中显示 top timeline, execl 中显示 top summary，包括 cpu、memory 各进程使用情况<ul>\n<li>包含各进程 cpu mem 使用信息</li>\n</ul>\n</li>\n<li>-a 包含 gpu 信息</li>\n<li><a href=\"https://nmon.sourceforge.io/pmwiki.php?n=Site.Nmonchart\">nmonchart</a><ul>\n<li>sampleD 可以看详细信息</li>\n<li>下方 download 下载</li>\n<li><code>wget -c http://sourceforge.net/projects/nmon/files/nmonchart42.tar</code></li>\n<li>sudo apt install ksh</li>\n<li>.&#x2F;nmonchart *.nom 生成 html</li>\n<li>JFS 可以显示文件系统使用百分比历史</li>\n<li>cpu util 中 idle + wait + sys + user &#x3D; 100%</li>\n<li>top command 中与 cpu util 表示方法不同，top command 不叠加，cpu util 叠加</li>\n</ul>\n</li>\n<li><a href=\"https://nmon.sourceforge.io/pmwiki.php?n=Site.Nmon-Analyser\">Nmon-Analyser</a><ul>\n<li>下方下载，注意是 excel，需要解除宏限制 <a href=\"https://support.microsoft.com/zh-cn/topic/%E5%B7%B2%E9%98%BB%E6%AD%A2%E6%9C%89%E6%BD%9C%E5%9C%A8%E5%8D%B1%E9%99%A9%E7%9A%84%E5%AE%8F-0952faa0-37e7-4316-b61d-5b5ed6024216\">link</a></li>\n<li>使用 excel 生成各种图表，包含各个 cpu 和 cpu_all 信息</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/mzky/easyNmon?tab=readme-ov-file\">easyNmon</a><ul>\n<li>对 nmon 的扩展</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nmonvisualizer/nmonvisualizer\">nmonvisualizer</a></li>\n</ol>\n<h3 id=\"top-analyzer\"><a href=\"#top-analyzer\" class=\"headerlink\" title=\"top-analyzer\"></a><a href=\"https://gceasy.io/yc-top-analyzer.jsp\">top-analyzer</a></h3><h3 id=\"netdata\"><a href=\"#netdata\" class=\"headerlink\" title=\"netdata\"></a><a href=\"https://github.com/netdata/netdata\">netdata</a></h3><h3 id=\"ui\"><a href=\"#ui\" class=\"headerlink\" title=\"ui\"></a>ui</h3><ol>\n<li><a href=\"https://www.markhansen.co.nz/profiler-uis/\">Linux perf Profiler UIs</a></li>\n</ol>\n<h3 id=\"firefox-devtools-profiler\"><a href=\"#firefox-devtools-profiler\" class=\"headerlink\" title=\"firefox-devtools&#x2F;profiler\"></a><a href=\"https://github.com/firefox-devtools/profiler\">firefox-devtools&#x2F;profiler</a></h3><ol>\n<li>可以打开 perf script 之后的数据，类似 flamegraph</li>\n<li><a href=\"https://profiler.firefox.com/\">live web</a></li>\n<li>点击上方线程对应的图片，可以显示具体函数调用，注意会高亮所有相同调用的部分</li>\n</ol>\n<h3 id=\"tracy\"><a href=\"#tracy\" class=\"headerlink\" title=\"tracy\"></a><a href=\"https://github.com/wolfpld/tracy\">tracy</a></h3><h3 id=\"uftrace\"><a href=\"#uftrace\" class=\"headerlink\" title=\"uftrace\"></a><a href=\"https://github.com/namhyung/uftrace\">uftrace</a></h3><ol>\n<li>uftrace record .&#x2F;test</li>\n<li>uftrace report</li>\n<li>uftrace info</li>\n<li>uftrace dump –flame-graph &gt; test.fold</li>\n<li>flamegraph.pl test.fold &gt; test.svg</li>\n</ol>\n<h3 id=\"orbit\"><a href=\"#orbit\" class=\"headerlink\" title=\"orbit\"></a><a href=\"https://github.com/google/orbit\">orbit</a></h3><ol>\n<li>Orbit is a CPU profiler that enables you to identify CPU-related performance issues in your application. It allows you to take system traces and detailed CPU performance data using callstack sampling, dynamic instrumentation, memory tracing and GPU driver tracing (AMD only).</li>\n</ol>\n<h3 id=\"likwid\"><a href=\"#likwid\" class=\"headerlink\" title=\"likwid\"></a><a href=\"https://github.com/RRZE-HPC/likwid.git\">likwid</a></h3><ol>\n<li><code>sudo apt install likwid</code></li>\n<li><a href=\"https://github.com/RRZE-HPC/likwid/wiki/AddARMSupport\">AddARMSupport</a></li>\n<li><code>likwid-topology -g</code></li>\n<li><code>likwid-topology -V 3</code>打开 debug 信息</li>\n<li><a href=\"https://github.com/RRZE-HPC/likwid/tree/master/groups\">各平台各性能指标计算方法</a> 需要配合<a href=\"https://github.com/RRZE-HPC/likwid/wiki/ARM-A57\">event</a></li>\n<li><code>likwid-perfctr -e</code> 查看 event</li>\n<li><code>likwid-perfctr -a</code>查看支持的 group</li>\n<li><a href=\"https://docs.nersc.gov/tools/performance/likwid/\">userguide</a></li>\n<li><a href=\"https://blog.rwth-aachen.de/hpc_import_20210107/attachments/20056127/24117298.pdf\">tutorial1</a></li>\n<li><a href=\"https://www.vi-hps.org/cms/upload/material/tw09/vi-hps-tw09-VI-HPS_likwid.pdf\">tutorial</a></li>\n<li>源码编译时需要修改 config.mk 的 COMPILER 字段; For ARM builds, the COMPILER flag in config.mk needs to changed to GCCARMv8 or ARMCLANG (experimental).</li>\n<li><code>likwid-topology</code>显示有关硬件拓扑的详细信息，例如 CPU、缓存、NUMA 域等。</li>\n<li><code>likwid-bench</code>可以算 roofline; likwid-bench: Micro benchmarking platform for CPU architectures</li>\n<li><code>likwid-perfscope</code>: Frontend to the timeline mode of likwid-perfctr, plots live graphs of performance metrics using gnuplot</li>\n<li><a href=\"https://github.com/RRZE-HPC/likwid/wiki/Tutorial%3A-Empirical-Roofline-Model\">Tutorial Empirical-Roofline-Model</a><ul>\n<li><code>sudo apt intall gnuplot</code></li>\n<li><code>gnuplot plotscript.gp</code></li>\n</ul>\n</li>\n<li><code>cat /proc/cpuinfo</code> part 不一定支持， topology.h 中查看</li>\n</ol>\n<h3 id=\"gprof\"><a href=\"#gprof\" class=\"headerlink\" title=\"gprof\"></a><a href=\"http://www.tastones.com/stackoverflow/c++/profiling/profiling_with_gcc_and_gprof/\">gprof</a></h3><ol>\n<li><a href=\"https://github.com/jrfonseca/gprof2dot\">gprof2dot</a></li>\n<li><a href=\"https://jasonblog.github.io/note/ncku_embededd/tong_xue_li_yong_gprof2dot_gong_ju_ff0c_jiang_zui_.html\">link</a></li>\n</ol>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">g</span>++ -pg ... -o xxx (<span class=\"keyword\">Note</span>: <span class=\"keyword\">do</span> not <span class=\"keyword\">use</span> -<span class=\"keyword\">g</span>)</span><br><span class=\"line\">- ./xxx</span><br><span class=\"line\">- gprof -b ./xxx gmon.<span class=\"keyword\">out</span> &gt; xxx.<span class=\"keyword\">log</span></span><br><span class=\"line\">-  gprof ./xxx gmon.<span class=\"keyword\">out</span> | less</span><br><span class=\"line\"></span><br><span class=\"line\">sudo pip install gprof2dot</span><br><span class=\"line\">gprof ./xxx | gprof2dot | dot -Tpng -o <span class=\"keyword\">report</span>.png</span><br><span class=\"line\">gprof ./xxx | gprof2dot | dot -Tsvg -o <span class=\"keyword\">report</span>.svg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_CXX_FLAGS <span class=\"string\">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -pg&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_EXE_LINKER_FLAGS <span class=\"string\">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -pg&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_SHARED_LINKER_FLAGS <span class=\"string\">&quot;$&#123;CMAKE_SHARED_LINKER_FLAGS&#125; -pg&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"google-perftools\"><a href=\"#google-perftools\" class=\"headerlink\" title=\"google-perftools\"></a>google-perftools</h3><figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">g</span>++ -O3 -o <span class=\"keyword\">test</span> <span class=\"keyword\">test</span>.<span class=\"keyword\">cc</span> -lprofiler</span><br><span class=\"line\">- LD_PRELOAD=/usr/<span class=\"keyword\">local</span>/lib/libprofiler.<span class=\"keyword\">so</span> CPUPROFILE=<span class=\"keyword\">test</span>.prof ./<span class=\"keyword\">test</span></span><br><span class=\"line\">- google-pprof ./<span class=\"keyword\">test</span> <span class=\"keyword\">test</span>.prof --svg &gt; <span class=\"keyword\">test</span>.svg</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"valgrind\"><a href=\"#valgrind\" class=\"headerlink\" title=\"valgrind\"></a>valgrind</h3><ol>\n<li><a href=\"https://www.zhihu.com/question/31382177\">valgrind + massif-visualizer 看内存占用</a></li>\n</ol>\n<h4 id=\"cachegrind\"><a href=\"#cachegrind\" class=\"headerlink\" title=\"cachegrind\"></a>cachegrind</h4><ol>\n<li>cachegrind：分析 CPU 的 cache 命中率、丢失率，用于进行代码优化。</li>\n<li><code>valgrind --tool=cachegrind --branch-sim=yes ls</code></li>\n<li><code>cg_annotatel(callgrind_annotate) cachegrind.out.88431</code> 各模块 cache 统计</li>\n<li><code>cg_annotatel(callgrind_annotate) cachegrind.out.88431 file</code> 统计 file 每一行 cache 情况, 可以看出 O3 比 O1 cache 优化了</li>\n<li><a href=\"https://jaist.dl.sourceforge.net/project/qcachegrindwin/0.7.4/\">qcachegrindwin 分析生成文件</a></li>\n<li>Kcachegrind GUI 显示分析生成的文件</li>\n</ol>\n<h4 id=\"callgrind\"><a href=\"#callgrind\" class=\"headerlink\" title=\"callgrind\"></a><a href=\"https://learnku.com/articles/46663\">callgrind</a></h4><ol>\n<li>callgrind</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">valgrind –tool=callgrind ./tmp</span><br><span class=\"line\">callgrind_annotate callgrind.out.XXX</span><br><span class=\"line\">gprof2dot.py -f callgrind callgrind.out.XXX |dot -Tpng -o report.png</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pmu-tools\"><a href=\"#pmu-tools\" class=\"headerlink\" title=\"pmu-tools\"></a><a href=\"https://github.com/andikleen/pmu-tools\">pmu-tools</a></h3><h3 id=\"good-pprof\"><a href=\"#good-pprof\" class=\"headerlink\" title=\"(good)pprof\"></a><a href=\"https://github.com/google/pprof\">(good)pprof</a></h3><ol>\n<li><a href=\"https://github.com/google/perf_data_converter\">perf_data_converter</a></li>\n<li><code>-g</code>和<code>sudo</code>可能有问题</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo perf record -F 99  -g ./bandwidth64</span><br><span class=\"line\">pprof -svg perf.data</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>perf 结果可视化</li>\n<li><a href=\"https://github.com/google/pprof/blob/main/doc/README.md\">readme</a></li>\n<li>与 google-pprof 不是一个工具</li>\n<li><a href=\"https://github.com/google/perf_data_converter\">需要编译 perf_data_converter</a><ul>\n<li><code>cp  bazel-bin/src/perf_to_profile ~/go/bin</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"gprof2dot\"><a href=\"#gprof2dot\" class=\"headerlink\" title=\"gprof2dot\"></a><a href=\"https://github.com/jrfonseca/gprof2dot\">gprof2dot</a></h3><ol>\n<li>可类似 gprof 将 perf 结果生成调用图</li>\n<li><code>perf script | c++filt | gprof2dot.py -f perf | dot -Tpng -o output.png</code></li>\n</ol>\n<h2 id=\"simpleperf\"><a href=\"#simpleperf\" class=\"headerlink\" title=\"simpleperf\"></a><a href=\"https://android.googlesource.com/platform/system/extras/+/master/simpleperf/doc/README.md\">simpleperf</a></h2><h2 id=\"perf\"><a href=\"#perf\" class=\"headerlink\" title=\"perf\"></a><a href=\"https://billtian.github.io/digoal.blog/2016/11/27/01.html\">perf</a></h2><ol>\n<li><code>-vvv</code>打印调试信息</li>\n<li><code>perf stat --all-cpus --no-aggr ls</code>查看每一个 cpu 统计</li>\n<li><a href=\"https://gaomf.cn/2019/10/30/perf_stack_traceback/\">使用 perf 进行性能分析时如何获取准确的调用栈</a></li>\n<li><a href=\"https://www.brendangregg.com/perf.html\">good examples</a></li>\n<li>perf 是性能分析的必备工具, 它最核心的能力是能访问硬件上的 Performance Monitor Unit (PMU), 对分析 CPU bound 的问题很有帮助, 当然 perf 也支持各种软件 event.</li>\n</ol>\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><ol>\n<li></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 https://github.com/torvalds/linux.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> tools/perf/</span><br><span class=\"line\">make -j4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><a href=\"https://www.cs.rice.edu/~la5/doc/perf-doc/de/df8/builtin-record_8c.html\">docxgen</a></li>\n<li><a href=\"https://github.com/freelancer-leon/notes/blob/master/kernel/profiling/perf.md\">原理解析</a></li>\n</ol>\n<h3 id=\"perf-event\"><a href=\"#perf-event\" class=\"headerlink\" title=\"perf_event\"></a>perf_event</h3><ol>\n<li><code>strace perf stat ./test</code>strace 跟踪<code>perf_event_open</code>看 type 和 config</li>\n<li>可 c++编程</li>\n<li>在 Linux perf events 中，确实存在对同时使用的 raw events 的数量限制。这是因为硬件计数器的数量是有限的。当超过硬件性能计数器的数量时，需要使用复用(multiplexing)来统计所有事件。</li>\n<li>raw counter 不管是 bash 还是 c++都有个数限制，需要分时复用，有没有方法计算到利用的时间？</li>\n<li><code>perf stat -vvv ./test</code>可以看 perf_event_attr 配置</li>\n</ol>\n<h3 id=\"timechart\"><a href=\"#timechart\" class=\"headerlink\" title=\"timechart\"></a>timechart</h3><ol>\n<li><code>sudo perf timechart record</code> or <code>sudo perf timechart record sleep 1</code></li>\n<li><code>sudo perf timechart</code></li>\n<li>图上进程显示时间表示占用 cpu 时间, 注意有多核<ul>\n<li>一个空格 100ms</li>\n</ul>\n</li>\n<li><code>/sys/kernel/debug/tracing/events/sched/sched_wakeup</code> 需要&#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing 文件夹</li>\n</ol>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><ol>\n<li><a href=\"https://developer.arm.com/documentation/100442/0100/debug-descriptions/pmu/pmu-events?lang=en\">arm55 pmu 手册</a></li>\n<li>列出 event</li>\n<li><code>likwid-perfctr -e</code> 列出所有 PMC</li>\n<li><code>likwid-perfctr -e | grep MEM</code>列出所有内存相关 PMC, <code>perf stat -e r013,r066,r067</code> r + mask + eventsel 监控对应事件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvidia@miivii-tegra:~$ likwid-perfctr -e | grep MEM</span><br><span class=\"line\">MEM_ACCESS, 0x13, 0x0, PMC</span><br><span class=\"line\">MEMORY_ERROR, 0x1A, 0x0, PMC</span><br><span class=\"line\">MEM_ACCESS_LD, 0x66, 0x0, PMC</span><br><span class=\"line\">MEM_ACCESS_ST, 0x67, 0x0, PMC</span><br><span class=\"line\"></span><br><span class=\"line\">nvidia@miivii-tegra:~$ perf <span class=\"built_in\">stat</span> -e r013,r066,r067 -- <span class=\"built_in\">ls</span></span><br><span class=\"line\">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class=\"line\"></span><br><span class=\"line\"> Performance counter stats <span class=\"keyword\">for</span> <span class=\"string\">&#x27;ls&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">           156,045      r013:u</span><br><span class=\"line\">           118,079      r066:u</span><br><span class=\"line\">            37,966      r067:u</span><br><span class=\"line\"></span><br><span class=\"line\">       0.003111539 seconds time elapsed</span><br><span class=\"line\"></span><br><span class=\"line\">       0.003294000 seconds user</span><br><span class=\"line\">       0.000000000 seconds sys</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"record\"><a href=\"#record\" class=\"headerlink\" title=\"record\"></a>record</h4><ol>\n<li><code>perf record ./test</code></li>\n<li><code>perf record -e LLC-load-misses</code> 只记录某个热点，可生成火焰图</li>\n<li>perf record 对可以同时记录的事件数量有限制。这个限制由硬件性能监视器计数器（hardware performance monitor counters）决定。</li>\n<li>多进程也不行， 开多个实例记录会不准，flopsc, bandwidth 可以用来验证是否准确</li>\n<li><code>likwid-perfctr -e</code>可以查看支持的 PMC 个数</li>\n</ol>\n<h4 id=\"report\"><a href=\"#report\" class=\"headerlink\" title=\"report\"></a>report</h4><h4 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h4><ol>\n<li><code>perf script -v</code> -v 查看调试信息</li>\n</ol>\n<h4 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a><a href=\"https://zhuanlan.zhihu.com/p/385519404\">stat</a></h4><ol>\n<li><code>perf stat -I 1000 -a sleep 10</code> -I 1000 每隔 1000ms 输出一次</li>\n<li><code>CPUs utilized = task_clock / 总时间</code> task_clock 统计所有核的无意义，肯定是 1; 统计单个程序的才有意义; 可以测量一个程序对 cpu 利用率， sleep 的时间会去掉</li>\n<li><code>频率 = cpu_cycles / cpu_clock or task_clock time</code>多核不准</li>\n<li><code>perf stat -ddd -- ./test</code> 可以查看 cpu 运行频率，运行 cycle 数，指令数, 程序运行时间</li>\n<li>性能有一些损耗，影响不大（-ddd 打开细节越多损失越大）</li>\n<li><code>sudo perf stat -a -- sleep 10</code></li>\n<li>不计算分布，仅仅进行统计, 可以看总体性能(IPC 等)</li>\n<li><code>sudo perf stat -d -d -d -a -- sleep 10</code></li>\n<li><code>sudo perf stat -e cache-misses ls</code></li>\n<li>可以查看 CPU 真实利用率： CPUs utilized, 不包括等待时间，自旋时间等。真实利用率比 top 查看的利用率要低很多。</li>\n<li>top 查看的利用率： 如果 CPU 没有运行在内核的 idle 线程，就认为 CPU 在被使用。当 cpu 阻塞并等待内存访问时，也可能显示较高的利用率。</li>\n</ol>\n<h4 id=\"annotate\"><a href=\"#annotate\" class=\"headerlink\" title=\"annotate\"></a><a href=\"https://developer.ibm.com/tutorials/l-analyzing-performance-perf-annotate-trs/\">annotate</a></h4><ol>\n<li>将热点函数精确到代码行，用于对问题进行精确定位。</li>\n<li>perf report 可以选中 sympol, 按快捷键 a</li>\n<li>h 显示快捷键</li>\n<li>k 显示行号</li>\n<li><tab> Cycle thru hottest instructions</li>\n<li>t Circulate percent, total period, samples view</li>\n<li>Cross-arch annotate: 需要 vmlinux</li>\n<li><a href=\"https://ctf-wiki.org/pwn/linux/kernel-mode/environment/build-kernel/\">build-kernel</a></li>\n<li><a href=\"https://phoenixnap.com/kb/build-linux-kernel\">build-linux-kernel</a></li>\n<li><a href=\"https://patchwork.ozlabs.org/project/linuxppc-dev/patch/1474472876-2706-2-git-send-email-ravi.bangoria@linux.vnet.ibm.com/\">cross arch</a></li>\n</ol>\n<h4 id=\"list-1\"><a href=\"#list-1\" class=\"headerlink\" title=\"list\"></a>list</h4><ol>\n<li>查看支持的 events</li>\n<li><code>perf stat -e</code>查看 events</li>\n<li><code>strace perf stat</code>strace 跟踪系统调用</li>\n</ol>\n<h4 id=\"top-1\"><a href=\"#top-1\" class=\"headerlink\" title=\"top\"></a>top</h4><ol>\n<li>我们知道 perf top 是通过读取 PMU 的 PC 寄存器来获取当前执行的指令进而根据汇编的 symbol 信息获得是执行的哪条指令。</li>\n<li>能够快速的定位热点函数</li>\n<li>(只统计栈顶)可以看到具体函数占用 cpu 比例，与火焰图从上往下看，越宽的函数占比越高，被遮盖的函数占比少</li>\n<li>lib 不能被 strip， 否则函数名显示地址</li>\n<li>perf top -p xxxx<ul>\n<li>perf top -p 23015,32476 &#x2F;&#x2F; 查看这两个进程的 cpu cycles 使用情况</li>\n<li>perf top &#x2F;&#x2F; 默认配置</li>\n<li>perf top -G &#x2F;&#x2F; 得到调用关系图</li>\n<li>perf top -e cycles &#x2F;&#x2F; 指定性能事件</li>\n<li>perf top -s comm,pid,symbol &#x2F;&#x2F; 显示调用 symbol 的进程名和进程号</li>\n<li>perf top –comms nginx,top &#x2F;&#x2F; 仅显示属于指定进程的符号</li>\n<li>perf top –symbols kfree &#x2F;&#x2F; 仅显示指定的符号</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"mem\"><a href=\"#mem\" class=\"headerlink\" title=\"mem\"></a>mem</h4><h3 id=\"perfetto\"><a href=\"#perfetto\" class=\"headerlink\" title=\"perfetto\"></a><a href=\"https://perfetto.dev/docs/\">perfetto</a></h3><ol>\n<li><a href=\"https://perfetto.dev/docs/tracing-101\">tracing-101</a><ul>\n<li>Logging vs tracing vs profiling vs metrics</li>\n<li>profiling 使用采样技术，tracing 会跟踪每个细节</li>\n<li>Traces cannot feasibly capture execution of extreme high frequency events e.g. every function call. Profiling tools fill this niche: by sampling, they can significantly cut down on how much information they store.</li>\n<li>跟踪无法捕获高频时间， profiling 弥补了空白</li>\n<li>Traces are excellent at providing this exact context: application instrumentation and low-level kernel events together provide deep insight into why code was run in the first place.</li>\n<li>跟踪非常适合提供这种精确的上下文：应用程序检测和低级内核事件一起提供了对代码最初运行原因的深入了解。</li>\n<li>metrics: why bother with high level metrics at all? Why not instead just use tracing and compute metrics on resulting traces? In some settings, this may indeed be the right approach. In local and lab situations using trace-based metrics, where metrics are computed from traces instead of collecting them directly, is a powerful approach. If a metric regresses, it’s easy to open the trace to root cause why that happened.</li>\n<li>指标是跟踪系统随时间变化的性能的数值。通常指标映射到高级概念。指标的示例包括：CPU 使用率、内存使用率、网络带宽等。指标是在程序运行时直接从应用程序或操作系统收集的。</li>\n<li>metrics 比 tracing 要轻量级很多</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"hotspot\"><a href=\"#hotspot\" class=\"headerlink\" title=\"hotspot\"></a><a href=\"https://github.com/KDAB/hotspot\">hotspot</a></h3><ol>\n<li>the Linux perf GUI for performance analysis</li>\n<li><code>sudo apt install hotspot</code></li>\n<li><code>sudo strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</code></li>\n<li><code>sudo perf record -F 99 -p 81163 --call-graph dwarf -- sleep 60</code></li>\n</ol>\n<h3 id=\"pyroscope\"><a href=\"#pyroscope\" class=\"headerlink\" title=\"pyroscope\"></a><a href=\"https://github.com/grafana/pyroscope\">pyroscope</a></h3><h3 id=\"speedscope\"><a href=\"#speedscope\" class=\"headerlink\" title=\"speedscope\"></a><a href=\"https://github.com/jlfwong/speedscope\">speedscope</a></h3><ol>\n<li><a href=\"https://www.speedscope.app/\">在线网页</a></li>\n<li>需要 perf script 后的 unfold(可以显示各个线程结果) 或 fold(显示整体结果, 有些信息缺失) 文件， 不是原始文件</li>\n<li>页面上边中间可选择具体线程来看占用时间</li>\n<li>time order: 时间变化</li>\n<li>left heavy: 类似火焰图</li>\n<li>Sandwidth: 占用时间比例，及调用栈</li>\n<li>点击符号可以看到在哪个动态库中，助于调试</li>\n<li>调用堆栈按照它们在输入文件中出现的顺序从左到右排列，这通常是安排它们被记录的时间顺序。这个视图对于理解应用程序随时间变化的行为非常有帮助，比如 “首次从数据库获取到数据，然后为序列化准备数据，数据被序列化为 JSON”。</li>\n<li>可以用来看调用关系</li>\n<li>调用栈过长可以上下滚动滑轮</li>\n</ol>\n<h3 id=\"flamescope\"><a href=\"#flamescope\" class=\"headerlink\" title=\"flamescope\"></a><a href=\"https://github.com/Netflix/flamescope\">flamescope</a></h3><ol>\n<li><a href=\"https://www.brendangregg.com/blog/2018-11-08/flamescope-pattern-recognition.html\">flamescope recognition</a></li>\n<li><a href=\"https://netflixtechblog.com/netflix-flamescope-a57ca19d47bb\">netflix-flamescope</a></li>\n<li>heatmap + flamegraph</li>\n<li>需要 npm install</li>\n<li>将生成的 perf 文件 copy 到 examples 目录下</li>\n<li>可以看 pagefault</li>\n<li>perf 可以看 all， 也可以看单独进程</li>\n<li>斜线可以大概分辨出程序帧率，因为周期性活动</li>\n<li>为什么以 49 赫兹采样？因为 50 赫兹可能会与定时活动同步进行采样，并且计数过高或过低。为什么一开始大约是 50 赫兹？它不太慢也不太快。太慢了，我们没有足够的样本来绘制 FlameScope 的 50 行热图（行数可以更改）。太快和采样的开销会减慢应用程序。</li>\n<li>注意显示火焰图时 url 会显示时间区间</li>\n</ol>\n<h3 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a><a href=\"https://github.com/brendangregg/FlameGraph\">火焰图</a></h3><ol>\n<li><p><a href=\"https://cloud.tencent.com/developer/article/1517979\">用 CPI 火焰图分析 Linux 性能问题</a> 使用 CPI 火焰图，可以很方便地做 CPU 利用率的分析，找到和定位引发 CPU 停顿的函数。一旦找到相关的函数，就可以通过 perf annotate 命令对引起停顿的指令作出进一步确认。</p>\n</li>\n<li><p><a href=\"https://www.slideshare.net/brendangregg/usenix-atc-2017-visualizing-performance-with-flame-graphs\">作者 slice</a></p>\n</li>\n<li><p>可以跑多次，看看优化效果</p>\n</li>\n<li><p>开发板交叉编译 perf，或者找相同 aarch 机器，copy。perf 之后将结果 copy 到开发机生成火焰图</p>\n</li>\n<li><p>release 模式显示不全，debug 模式更全,可能是 release 符号被保护了？因为 release 模式用到的库被 strip 了</p>\n</li>\n<li><p>库不能 strip</p>\n</li>\n<li><p>函数名可能被 mangle，需要 demangle <code>./stackcollapse-perf.pl data.unfold | c++filt &gt; data.folded</code></p>\n</li>\n<li><p>If you are profiling C++ code, you may want to pipe stacks through c++filt to get readable frames.</p>\n</li>\n<li><p><a href=\"https://github.com/flamegraph-rs/flamegraph\">flamegraph-rust</a></p>\n</li>\n<li><p><a href=\"https://www.infoq.cn/article/a8kmnxdhbwmzxzsytlga\">火焰图类型</a></p>\n<ul>\n<li>on-cpu(默认): 分析 cpu 瓶颈</li>\n<li>off-cpu: 阻塞时间</li>\n<li>内存火焰图：内存问题</li>\n<li>Hot&#x2F;Cold 火焰图： on-cpu and off-cpu 结合</li>\n</ul>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/162375221\">性能分析之 off-cpu</a></p>\n</li>\n<li><p>Top edge shows who is running on cpu and how much(width)</p>\n</li>\n<li><p><code>flamegraph.pl --color=java</code> C++和系统调用显示颜色不一样,</p>\n</li>\n<li><p>平顶山的火苗是瓶颈，perf top 也可以看出来 1. <code>flamegraph.pl --color=java</code> C++, 注意 C++ 普通函数会被认为是其他，比较傻瓜，索引::</p>\n</li>\n<li><p>第一要想到的是优化平顶</p>\n</li>\n<li><p>栈上空白处是没有函数调用，栈上没信息，所以不显示，也在计算，比如 for</p>\n</li>\n<li><p>为什么要叫火焰图，形象的理解：整个图形看起来就像一团跳动的火焰，这也正是其名字的由来。燃烧的火苗尖部就是 CPU 正在执行的操纵，图纵向表示调用栈的深度，横向表示消耗的时间。一个格子的宽度越大越说明其可能是瓶颈。当我们分析火焰图时，主要就是看那些比较宽大的火苗，<code>特别留意那些类似平顶山的火苗</code>。<br>火焰图是基于 stack 信息生成的 SVG 图片，用来展示 CPU 的调用栈。<br>y 轴表示调用栈，每一层都是一个函数，调用栈越深，火焰图的层数就越高，火焰就看起来越高，顶部就是正在执行的函数，下方就是它的父函数。<br>x 轴表示抽样数，表示一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长，注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。<br>火焰图是 SVG 图片，可以很方便的使用：<br>（1）鼠标悬浮<br>火焰的每一层都会标注函数名，鼠标悬浮时会显示完整的函数名、抽样抽中的次数、<code>占据总抽样次数的百分比</code>；<br>（2）点击放大<br>在某一层点击，火焰图会水平放大，该层会占据所有宽度，显示详细信息；<br>左上角会同时显示“Reset Zoom”，点击该链接，图片就会恢复原样；<br>（3）搜索<br>按下 Ctrl+F 会显示一个搜索框，用户可以输入关键词或正则表达式，所有复合条件的函数名会<code>高亮显示</code>。</p>\n</li>\n<li><p>火焰图生成<br>生成和创建火焰图需要以下几个步骤：<br>（1）捕获堆栈<br>使用 perf&#x2F;systemtap&#x2F;dtrace 等工具抓取程序的运行堆栈。<br>（2）折叠堆栈<br>trace 工具抓取的系统和程序运行每一时刻的堆栈信息，需要对他们进行分析组合，将重复的堆栈累计在一起，从而体现出负载和关键路径。<br>（3）生成火焰图<br>分析 stackcollapse 输出的堆栈信息生成火焰图。</p>\n</li>\n<li><p>static 函数可能不显示，会展开</p>\n</li>\n<li><p>火焰图结合 perf(on-cpu) 实际使用方法</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sudo apt install -y linux-tools-generic</span></span><br><span class=\"line\"><span class=\"comment\"># sudo rm /usr/bin/perf</span></span><br><span class=\"line\"><span class=\"comment\"># sudo ln -s /usr/lib/linux-tools/4.15.0-162-generic/perf /usr/bin/perf</span></span><br><span class=\"line\"><span class=\"comment\"># git clone https://github.com/brendangregg/FlameGraph.git</span></span><br><span class=\"line\"><span class=\"comment\"># cd FlameGraph</span></span><br><span class=\"line\"><span class=\"comment\"># perf record -F 99 -p $&#123;PID&#125; -a -g -- sleep 60</span></span><br><span class=\"line\"><span class=\"comment\"># perf record -m 1 -F 99(出现mmap问题)</span></span><br><span class=\"line\"><span class=\"comment\"># perf script &gt; out.perf</span></span><br><span class=\"line\"><span class=\"comment\"># ./stackcollapse-perf.pl out.perf &gt; out.folded</span></span><br><span class=\"line\"><span class=\"comment\"># ./stackcollapse-perf.pl out.perf | c++flit &gt; out.folded</span></span><br><span class=\"line\"><span class=\"comment\"># ./flamegraph.pl out.folded &gt; out.svg</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>很轻松的分析出，哪些代码会经常性的触发 pagefault，以及比重。</li>\n<li><a href=\"https://github.com/lrita/lrita.github.io/blob/master/_posts/2019-09-27-systemtap-profiling-pagefault.md#L29\">page-faults</a> flamegraph 作者给的例子有些错误,<br>map, vector clear 会调用 explicit_bzero，容易产生 pagefault</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># perf record -e page-faults -p $1 -g -- sleep 60</span></span><br><span class=\"line\"><span class=\"comment\"># perf script &gt; out.perf</span></span><br><span class=\"line\"><span class=\"comment\"># ./stackcollapse-perf.pl out.perf &gt; out.folded</span></span><br><span class=\"line\"><span class=\"comment\"># ./flamegraph.pl out.folded &gt; out.svg</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://seekstar.github.io/2021/09/20/linux-perf%E5%BE%97%E5%88%B0%E5%AE%8C%E6%95%B4%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB/\">调用关系混乱</a></li>\n<li><a href=\"https://blog.csdn.net/bandaoyu/article/details/108765693\">出现 e 大量 unknown</a> 加<code>--call-graph dwarf</code>, 而 -g 就相当于 –call-graph fp. fp 就是 Frame Pointer，即 x86 中的 EBP 寄存器，fp 指向当前栈帧栈底地址，此地址保存着上一栈帧的 EBP 值</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo perf record -F 99 -p 81163 --call-graph dwarf -- <span class=\"built_in\">sleep</span> 60</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>问题：<ul>\n<li>perf 还有一个问题是对中断的要求，perf 很多事件都依赖中断，但 Linux 内核是可以关中断的，关中断以后，你就无法击中关中断的点了，你的中断会被延迟到开中断的时候，所以，在这样的平台上，你会看到很多开中断之后的函数被密集击中。但它们是无辜的。但更糟糕的是，如果在关中断的时候，发生了多个事件，由于中断控制器会合并相同的中断，你就会失去多次事件，让你的统计发生错误。现代的 Intel 平台，基本上已经把 PMU 中断都切换为 NMI 中断了（不可屏蔽），所以前面这个问题不存在。但在大部分 ARM&#x2F;ARM64 平台上，这个问题都没有解决，所以看这种平台的报告，都要特别小心，特别是你看到_raw_spin_unlock()一类的函数击中极高，你就要怀疑一下你的测试结果了（注意，这个结果也是能用的，只是看你怎么用）。</li>\n<li>你每次看 perf report 的报告，首先要去注意一下总共收集了多少个点，如果你只有几十个点，你这个报告就可能很不可信了。</li>\n</ul>\n</li>\n<li>哪些场景下可以利用火焰图来帮助我们处理问题<br>（1）版本更新时，对比前后两个版本的火焰图差别，有助于我们分析新旧两个版本的异同；<br>（2）CPU 异常占用时（CPU 异常打满或者 CPU 利用率一直上不去），通过火焰图，有助于我们定位异常代码；<br>（3）性能分析时，通过火焰图来了解程序实际执行时各模块对 CPU 资源的占用情况；<br>（4）问题排查，通过分析火焰图的调用栈是否符合预期，排查程序逻辑执行是否符合预期；</li>\n</ol>\n<h2 id=\"benchmark\"><a href=\"#benchmark\" class=\"headerlink\" title=\"benchmark\"></a>benchmark</h2><ol>\n<li><a href=\"https://github.com/martinus/nanobench\">nanobench</a><ul>\n<li>可以测 IPC, cache miss</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结-搜索-speed-up-C\"><a href=\"#总结-搜索-speed-up-C\" class=\"headerlink\" title=\"总结(搜索 speed up C++)\"></a>总结(搜索 speed up C++)</h2><ol>\n<li>内存连续读写速度远快于随机读写。(尽可能顺序访问内存)</li>\n<li>内存的写入速度比读取慢不少(减少内存写操作)</li>\n<li>用连续内存(多线程分配内存？)</li>\n<li>少分配内存, 尽量原位操作</li>\n<li>函数满足 RVO(return value optimization)</li>\n<li>不满足 RVO, 用 move, 例如返回 tuple, 构造时元素要用 move</li>\n<li>多维 vector 内存分配比较耗时</li>\n<li>尽量用一维 vector 或 array，多维 vector 慢很多</li>\n<li>transform 不要用 back_inserter,先分配好，然后用 begin()</li>\n<li>lamda 是内联函数，比普通函数快</li>\n<li>多用 for, transform, 少用 push_back, emplace_back</li>\n<li>transform 应用到连续内存会比较快， 比如 array, 应用到 vector 比 array 慢很多</li>\n<li>range 应用到连续内存比较快，array 比 vector 快很多，array 的 range 比 for 快很多，vector 的 range 比 for 慢</li>\n<li>range 比 transform 快</li>\n<li>矩阵运算用一维矩阵比二维矩阵快很多。</li>\n<li>vector: resize 会调用构造函数，reserve 不会调用。reserve 比 resize 快很多。需要 empalce_back 的要先 reserve。初始化为 0 比较慢？</li>\n<li>动态内存分配、STL 容器、string 都是一些常容易 cache 不友好的场景，核心代码处尽量不用</li>\n</ol>\n<h2 id=\"cpu-mem-实时利用率\"><a href=\"#cpu-mem-实时利用率\" class=\"headerlink\" title=\"cpu mem 实时利用率\"></a>cpu mem 实时利用率</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ResouceUsageCatch</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ResouceUsageCatch runing ...&#x27;</span>)</span><br><span class=\"line\">    msg = os.popen(<span class=\"string\">&#x27;ps -aux | grep -v grep | grep  \\&#x27;PID\\&#x27;&#x27;</span>).read()</span><br><span class=\"line\">    msg_head = msg.split()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg_head)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg_head.index(<span class=\"string\">&#x27;%CPU&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg_head.index(<span class=\"string\">&#x27;RSS&#x27;</span>))</span><br><span class=\"line\">    cpu_val_list = []</span><br><span class=\"line\">    mem_val_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">20</span>) <span class=\"comment\"># wait the demo run stable</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;cpu_mem.csv&#x27;</span>,<span class=\"string\">&#x27;w+&#x27;</span>) <span class=\"keyword\">as</span> file_out:</span><br><span class=\"line\">        run_times = <span class=\"number\">0</span></span><br><span class=\"line\">        cpu_mem_writer = csv.writer(file_out)</span><br><span class=\"line\">        cpu_mem_writer.writerow([<span class=\"string\">&#x27;cpu&#x27;</span>, <span class=\"string\">&#x27;mem&#x27;</span>])</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            msg = os.popen(<span class=\"string\">&#x27;ps -aux | grep -v grep | grep  \\&#x27;visual_radar_by_camera_demo\\&#x27;&#x27;</span>).read()</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(msg) == <span class=\"number\">0</span>):</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            msg_list = msg.split()</span><br><span class=\"line\">            <span class=\"comment\"># print(msg_list[msg_head.index(&#x27;%CPU&#x27;)])</span></span><br><span class=\"line\">            <span class=\"comment\"># print(msg_list[msg_head.index(&#x27;RSS&#x27;)])</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cpu_mem_writer.writerow([<span class=\"built_in\">float</span>(msg_list[msg_head.index(<span class=\"string\">&#x27;%CPU&#x27;</span>)]), <span class=\"built_in\">float</span>(msg_list[msg_head.index(<span class=\"string\">&#x27;RSS&#x27;</span>)])])</span><br><span class=\"line\"></span><br><span class=\"line\">            cpu_val_list.append(<span class=\"built_in\">float</span>(msg_list[msg_head.index(<span class=\"string\">&#x27;%CPU&#x27;</span>)]))</span><br><span class=\"line\">            mem_val_list.append(<span class=\"built_in\">float</span>(msg_list[msg_head.index(<span class=\"string\">&#x27;RSS&#x27;</span>)]))</span><br><span class=\"line\"></span><br><span class=\"line\">            run_times = run_times + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;run times : &quot;</span>, run_times)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> run_times &gt; <span class=\"number\">3600</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">            time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;killall visual_radar_by_camera_demo&#x27;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;test_report.csv&#x27;</span>,<span class=\"string\">&#x27;w+&#x27;</span>) <span class=\"keyword\">as</span> file_out:</span><br><span class=\"line\">        csv_writer = csv.writer(file_out)</span><br><span class=\"line\">        csv_writer.writerow([<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;max&#x27;</span>, <span class=\"string\">&#x27;average&#x27;</span>, <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;data_unit&#x27;</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=************************= cpu usage =************************=&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(cpu_val_list) &gt; <span class=\"number\">0</span>):</span><br><span class=\"line\">            cpu_max = <span class=\"built_in\">max</span>(cpu_val_list)</span><br><span class=\"line\">            cpu_min = <span class=\"built_in\">min</span>(cpu_val_list)</span><br><span class=\"line\">            cpu_ave = <span class=\"built_in\">sum</span>(cpu_val_list)/<span class=\"built_in\">len</span>(cpu_val_list)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cpu max : %d&quot;</span>, cpu_max)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cpu min : %d&quot;</span>, cpu_min)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cpu ave : %d&quot;</span>, cpu_ave)</span><br><span class=\"line\">            csv_writer.writerow([<span class=\"string\">&#x27;cpu&#x27;</span>, <span class=\"built_in\">round</span>(cpu_max, <span class=\"number\">1</span>), <span class=\"built_in\">round</span>(cpu_ave, <span class=\"number\">1</span>), <span class=\"built_in\">round</span>(cpu_min, <span class=\"number\">1</span>), <span class=\"string\">&#x27;%&#x27;</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---------------------------------------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=************************= mem usage =************************=&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(mem_val_list) &gt; <span class=\"number\">0</span>):</span><br><span class=\"line\">            mem_max = <span class=\"built_in\">max</span>(mem_val_list)/<span class=\"number\">1000.</span></span><br><span class=\"line\">            mem_min = <span class=\"built_in\">min</span>(mem_val_list)/<span class=\"number\">1000.</span></span><br><span class=\"line\">            mem_ave = <span class=\"built_in\">sum</span>(mem_val_list)/<span class=\"built_in\">len</span>(mem_val_list)/<span class=\"number\">1000.</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;mem max : &quot;</span>, mem_max)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;mem min : &quot;</span>, mem_min)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;mem ave : &quot;</span>, mem_ave)</span><br><span class=\"line\">            csv_writer.writerow([<span class=\"string\">&#x27;mem&#x27;</span>, <span class=\"built_in\">round</span>(mem_max, <span class=\"number\">1</span>), <span class=\"built_in\">round</span>(mem_ave, <span class=\"number\">1</span>), <span class=\"built_in\">round</span>(mem_min, <span class=\"number\">1</span>), <span class=\"string\">&#x27;M&#x27;</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---------------------------------------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"profiling-result\"><a href=\"#profiling-result\" class=\"headerlink\" title=\"profiling result\"></a>profiling result</h2><ol>\n<li>多线程分配内存(申请内存足够大，且时间大于线程开销)（或申请内存时可以做其他操作）</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEST : 4955us</span><br><span class=\"line\">TEST_MT : 2786us</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; test1(<span class=\"number\">1000000</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">  vector&lt;int&gt; test2(<span class=\"number\">1000000</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">  vector&lt;int&gt; test11(<span class=\"number\">1000000</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">  __TOC__(TEST)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(TEST_MT)</span><br><span class=\"line\">  std::vector&lt;int&gt; test3;</span><br><span class=\"line\">  std::vector&lt;int&gt; test4;</span><br><span class=\"line\">  std::vector&lt;int&gt; test5;</span><br><span class=\"line\">  auto <span class=\"function\"><span class=\"keyword\">fun</span> = []<span class=\"params\">(std::<span class=\"type\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;<span class=\"type\">v</span>, int num)</span></span> &#123; v.resize(num); &#125;;</span><br><span class=\"line\">  auto f1 = async(<span class=\"function\"><span class=\"keyword\">fun</span>, <span class=\"title\">ref</span><span class=\"params\">(test3)</span></span>, <span class=\"number\">1000000</span>);</span><br><span class=\"line\">  auto f2 = async(<span class=\"function\"><span class=\"keyword\">fun</span>, <span class=\"title\">ref</span><span class=\"params\">(test4)</span></span>, <span class=\"number\">1000000</span>);</span><br><span class=\"line\">  auto f3 = async(<span class=\"function\"><span class=\"keyword\">fun</span>, <span class=\"title\">ref</span><span class=\"params\">(test5)</span></span>, <span class=\"number\">1000000</span>);</span><br><span class=\"line\">  f1.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">  f2.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">  f3.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">  __TOC__(TEST_MT)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>vector construct, reserve, resize （resize 会调用构造函数，reserve 不会调用。需要 empalce_back 的要先 reserve。初始化为 0 比较慢？）</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEST_RESERVE : <span class=\"number\">6275</span>us</span><br><span class=\"line\">TEST_NOT_RESERVE : <span class=\"number\">10727</span>us</span><br><span class=\"line\">TEST : <span class=\"number\">3740</span>us</span><br><span class=\"line\">TEST_zero : <span class=\"number\">3763</span>us</span><br><span class=\"line\">TEST_one : <span class=\"number\">3292</span>us</span><br><span class=\"line\">TEST_RESIZE : <span class=\"number\">3575</span>us</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(TEST_RESERVE)</span><br><span class=\"line\">  vector&lt;int&gt; test0;</span><br><span class=\"line\">  test0<span class=\"selector-class\">.reserve</span>(<span class=\"number\">2000000</span>);</span><br><span class=\"line\">  for (auto i = <span class=\"number\">0</span>u; i &lt; <span class=\"number\">2000000</span>; ++i) &#123;</span><br><span class=\"line\">    test0<span class=\"selector-class\">.emplace_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(TEST_RESERVE)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(TEST_NOT_RESERVE)</span><br><span class=\"line\">  vector&lt;int&gt; test1;</span><br><span class=\"line\">  for (auto i = <span class=\"number\">0</span>u; i &lt; <span class=\"number\">2000000</span>; ++i) &#123;</span><br><span class=\"line\">    test1<span class=\"selector-class\">.emplace_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(TEST_NOT_RESERVE)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(TEST)</span><br><span class=\"line\">  vector&lt;int&gt; <span class=\"built_in\">test</span>(<span class=\"number\">2000000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(TEST)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(TEST_zero)</span><br><span class=\"line\">  vector&lt;int&gt; <span class=\"built_in\">test2</span>(<span class=\"number\">2000000</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(TEST_zero)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(TEST_one)</span><br><span class=\"line\">  vector&lt;int&gt; <span class=\"built_in\">test4</span>(<span class=\"number\">2000000</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(TEST_one)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">__TIC__</span>(TEST_RESIZE)</span><br><span class=\"line\">  vector&lt;int&gt; test3;</span><br><span class=\"line\">  test3<span class=\"selector-class\">.resize</span>(<span class=\"number\">2000000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(TEST_RESIZE)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>range and transform (array 的 transform 比 vector 的快)</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">ARRAY_RANGE : <span class=\"number\">1084</span>us</span><br><span class=\"line\">VECTOR_RANGE : <span class=\"number\">6421</span>us</span><br><span class=\"line\">ARRAY_TRANSFORM : <span class=\"number\">1603</span>us</span><br><span class=\"line\">VECTOR_TRANSFORM : <span class=\"number\">8252</span>us</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(ARRAY)</span></span><br><span class=\"line\">  <span class=\"built_in\">array</span>&lt;<span class=\"built_in\">int</span>, <span class=\"number\">1000000</span>&gt; a;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (auto i = <span class=\"number\">0</span>u; i &lt; <span class=\"number\">1000000</span>; ++i) &#123;</span><br><span class=\"line\">    a<span class=\"literal\">[<span class=\"identifier\">i</span>]</span> = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(ARRAY)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(ARRAY_TRAN)</span></span><br><span class=\"line\">  <span class=\"built_in\">array</span>&lt;<span class=\"built_in\">int</span>, <span class=\"number\">1000000</span>&gt; a1;</span><br><span class=\"line\">  transform(a1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, a1.<span class=\"keyword\">end</span><span class=\"literal\">()</span>, a1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, <span class=\"literal\">[]</span>(auto &amp;a) &#123; return a + <span class=\"number\">1</span>; &#125;);</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(ARRAY_TRAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(VECTOR)</span></span><br><span class=\"line\">  vector&lt;<span class=\"built_in\">int</span>&gt; v(<span class=\"number\">1000000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (auto i = <span class=\"number\">0</span>u; i &lt; <span class=\"number\">1000000</span>; ++i) &#123;</span><br><span class=\"line\">    v<span class=\"literal\">[<span class=\"identifier\">i</span>]</span> = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(VECTOR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(VECTOR_TRAN)</span></span><br><span class=\"line\">  vector&lt;<span class=\"built_in\">int</span>&gt; v1(<span class=\"number\">1000000</span>);</span><br><span class=\"line\">  transform(v1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, v1.<span class=\"keyword\">end</span><span class=\"literal\">()</span>, v1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, <span class=\"literal\">[]</span>(auto &amp;v) &#123; return v + <span class=\"number\">1</span>; &#125;);</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(VECTOR_TRAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(VECTOR_TRAN2)</span></span><br><span class=\"line\">  vector&lt;<span class=\"built_in\">int</span>&gt; v2(<span class=\"number\">1000000</span>);</span><br><span class=\"line\">  transform(v1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, v1.<span class=\"keyword\">end</span><span class=\"literal\">()</span>, v2.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, <span class=\"literal\">[]</span>(auto &amp;v) &#123; return v + <span class=\"number\">1</span>; &#125;);</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(VECTOR_TRAN2)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>一维 vector 和二维 vector(一维比多维快很多)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">VECTOR2 : <span class=\"number\">3770u</span>s</span><br><span class=\"line\">VECTOR1 : <span class=\"number\">554u</span>s</span><br><span class=\"line\">ARRAY : <span class=\"number\">627u</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"> __TIC__(VECTOR2)</span><br><span class=\"line\">  vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">v</span>(<span class=\"number\">10000</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; v.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0u</span>; j &lt; <span class=\"number\">5</span>; ++j) &#123;</span><br><span class=\"line\">      v[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(VECTOR2)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(VECTOR1)</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v1</span><span class=\"params\">(<span class=\"number\">10000</span> * <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; <span class=\"number\">10000</span> * <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    v1[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(VECTOR1)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(ARRAY)</span><br><span class=\"line\">  array&lt;<span class=\"type\">int</span>, 10000 * 5&gt; a;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; <span class=\"number\">10000</span> * <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(ARRAY)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>array and vector, transform and for(array 配合 transform 比较快， vector 配合 transform 很慢)</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">ARRAY : <span class=\"number\">1372</span>us</span><br><span class=\"line\">ARRAY_TRAN : <span class=\"number\">1078</span>us</span><br><span class=\"line\">VECTOR : <span class=\"number\">1219</span>us</span><br><span class=\"line\">VECTOR_TRAN : <span class=\"number\">4595</span>us</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(ARRAY)</span></span><br><span class=\"line\">  <span class=\"built_in\">array</span>&lt;<span class=\"built_in\">int</span>, <span class=\"number\">100000</span>&gt; a;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (auto i = <span class=\"number\">0</span>u; i &lt; <span class=\"number\">100000</span>; ++i) &#123;</span><br><span class=\"line\">    a<span class=\"literal\">[<span class=\"identifier\">i</span>]</span> = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(ARRAY)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(ARRAY_TRAN)</span></span><br><span class=\"line\">  <span class=\"built_in\">array</span>&lt;<span class=\"built_in\">int</span>, <span class=\"number\">100000</span>&gt; a1;</span><br><span class=\"line\">  transform(a1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, a1.<span class=\"keyword\">end</span><span class=\"literal\">()</span>, a1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, <span class=\"literal\">[]</span>(auto a) &#123; return a + <span class=\"number\">1</span>; &#125;);</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(ARRAY_TRAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(VECTOR)</span></span><br><span class=\"line\">  vector&lt;<span class=\"built_in\">int</span>&gt; v(<span class=\"number\">100000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (auto i = <span class=\"number\">0</span>u; i &lt; <span class=\"number\">100000</span>; ++i) &#123;</span><br><span class=\"line\">    v<span class=\"literal\">[<span class=\"identifier\">i</span>]</span> = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(VECTOR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(VECTOR_TRAN)</span></span><br><span class=\"line\">  vector&lt;<span class=\"built_in\">int</span>&gt; v1(<span class=\"number\">100000</span>);</span><br><span class=\"line\">  transform(v1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, v1.<span class=\"keyword\">end</span><span class=\"literal\">()</span>, v1.<span class=\"keyword\">begin</span><span class=\"literal\">()</span>, <span class=\"literal\">[]</span>(auto v) &#123; return v + <span class=\"number\">1</span>; &#125;);</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(VECTOR_TRAN)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>function return</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">3000000</span>, <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">m2</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">move</span>(std::<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">3000000</span>, <span class=\"number\">1</span>)); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fastest</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">m3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(<span class=\"number\">3000000</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">m4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(<span class=\"number\">3000000</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> std::<span class=\"built_in\">move</span>(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">M1 : <span class=\"number\">16538117</span>ns</span><br><span class=\"line\">M2 : <span class=\"number\">15113944</span>ns</span><br><span class=\"line\">M3 : <span class=\"number\">14415912</span>ns</span><br><span class=\"line\">M4 : <span class=\"number\">15932611</span>ns</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>range: vector and array(array 的 range 比 for 快很多，vector 的 range 比 for 慢)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">VECTOR : <span class=\"number\">648u</span>s</span><br><span class=\"line\">VECTOR_RANGE : <span class=\"number\">1784u</span>s</span><br><span class=\"line\">ARRAY : <span class=\"number\">743u</span>s</span><br><span class=\"line\">ARRAY_RANGE : <span class=\"number\">177u</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">__TIC__(VECTOR)</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v1</span><span class=\"params\">(<span class=\"number\">10000</span> * <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; <span class=\"number\">10000</span> * <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    v1[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(VECTOR)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(VECTOR_RANGE)</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(<span class=\"number\">10000</span> * <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : v2) &#123;</span><br><span class=\"line\">    i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(VECTOR_RANGE)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(ARRAY)</span><br><span class=\"line\">  array&lt;<span class=\"type\">int</span>, 10000 * 5&gt; a;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; <span class=\"number\">10000</span> * <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(ARRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(ARRAY_RANGE)</span><br><span class=\"line\">  array&lt;<span class=\"type\">int</span>, 10000 * 5&gt; a1;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : a) &#123;</span><br><span class=\"line\">    i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(ARRAY_RANGE)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>range and for</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"> std::vector&lt;int&gt; <span class=\"built_in\">vec</span>(<span class=\"number\">500000</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(M1);</span><br><span class=\"line\">  for (int i = <span class=\"number\">0</span>; i &lt; vec.size(); ++<span class=\"selector-tag\">i</span>) &#123;</span><br><span class=\"line\">    vec<span class=\"selector-attr\">[i]</span>++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(M1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(M2);</span><br><span class=\"line\">  for (auto item : vec) &#123;</span><br><span class=\"line\">    item++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(M2);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">__TIC__</span>(M3);</span><br><span class=\"line\">  for (auto&amp; item : vec) &#123;</span><br><span class=\"line\">    item++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">__TOC__</span>(M3);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">M1 : <span class=\"number\">5885</span>us</span><br><span class=\"line\">M2 : <span class=\"number\">12406</span>us</span><br><span class=\"line\">M3 : <span class=\"number\">11534</span>us</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>transform and for</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(<span class=\"number\">10000</span>, <span class=\"number\">1.111</span>)</span></span>;</span><br><span class=\"line\"> <span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec1</span><span class=\"params\">(<span class=\"number\">10000</span>, <span class=\"number\">2.111</span>)</span></span>;</span><br><span class=\"line\"> std::vector&lt;<span class=\"type\">float</span>&gt; result;</span><br><span class=\"line\"> <span class=\"comment\">// 操作一个vector</span></span><br><span class=\"line\"> std::<span class=\"built_in\">transform</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">back_inserter</span>(result),</span><br><span class=\"line\">                [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> item) -&gt; <span class=\"type\">float</span> &#123; <span class=\"keyword\">return</span> item + <span class=\"number\">100</span>; &#125;);</span><br><span class=\"line\"> <span class=\"comment\">// for_each(vec.begin(), vec.end(), [](auto &amp;item) &#123; item += 100; &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 性能好很多，不要用back_inserter</span></span><br><span class=\"line\"> <span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">result5</span><span class=\"params\">(vec.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"> std::<span class=\"built_in\">transform</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), result5.<span class=\"built_in\">begin</span>(),</span><br><span class=\"line\">                [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item) -&gt; <span class=\"type\">float</span> &#123; <span class=\"keyword\">return</span> item + <span class=\"number\">100</span>; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 操作两个vector <span class=\"doctag\">NOTE:</span> 使用前需要检查vec, vec1 size是否匹配。</span></span><br><span class=\"line\"> <span class=\"comment\">// 性能好 797us 13us(-O3)</span></span><br><span class=\"line\"> <span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">result1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">0.0</span>)</span></span>;</span><br><span class=\"line\"> std::<span class=\"built_in\">transform</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec1.<span class=\"built_in\">begin</span>(), result1.<span class=\"built_in\">begin</span>(),</span><br><span class=\"line\">                [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item1, <span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item2) -&gt; <span class=\"type\">float</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> item1 + item2;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 性能差 2605us 173us(-O3)</span></span><br><span class=\"line\"> std::vector&lt;<span class=\"type\">float</span>&gt; result2;</span><br><span class=\"line\"> std::<span class=\"built_in\">transform</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec1.<span class=\"built_in\">begin</span>(),</span><br><span class=\"line\">                std::<span class=\"built_in\">back_inserter</span>(result2),</span><br><span class=\"line\">                [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item1, <span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;item2) -&gt; <span class=\"type\">float</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> item1 + item2;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"> <span class=\"comment\">// for 463us 70us(-O3)</span></span><br><span class=\"line\"> <span class=\"function\">std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">result3</span><span class=\"params\">(vec.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; result3.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">   result[i] = vec[i] + vec1[i];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>lambda and fun</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 322ns</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> result = a + b;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 233ns</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">add_inline</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> result = a + b;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 233ns</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> l = [](<span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b) &#123; <span class=\"keyword\">return</span> a + b; &#125;; <span class=\"comment\">// 使用lambda函数的效率与使用函数对象是一样的，都要快于函数指针。他们都能够在编译期将代码内联展开，减少函数调用的时间。</span></span><br><span class=\"line\"><span class=\"comment\">// 编译为类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">__lambda_6_11</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"comment\">/*constexpr */</span> <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> retType_6_11 = <span class=\"built_in\">int</span> (*)(<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"comment\">/*constexpr */</span> <span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">retType_6_11</span> <span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> __invoke;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"keyword\">inline</span> <span class=\"type\">int</span> __invoke(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>4 for and memset</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">int</span> a<span class=\"literal\">[<span class=\"number\">800000</span>]</span>;</span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(M1)</span>;</span><br><span class=\"line\">  memset(a, <span class=\"number\">0</span>, <span class=\"number\">800000</span><span class=\"operator\"> * </span>sizeof(<span class=\"built_in\">int</span>)); <span class=\"comment\">// memset 只能用于连续内存，不能用于vector</span></span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(M1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(M2)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (auto i = <span class=\"number\">0</span>u; i &lt; <span class=\"number\">800000</span>; ++i) &#123;</span><br><span class=\"line\">    a<span class=\"literal\">[<span class=\"identifier\">i</span>]</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(M2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">M1 : <span class=\"number\">1401</span>us</span><br><span class=\"line\">M2 : <span class=\"number\">1908</span>us</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>for, transform, push_back, emplace_back(少用 push_back, emplace_back)</li>\n</ol>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">vector&lt;float&gt; vec(<span class=\"number\">1000000</span>, <span class=\"number\">-1235.23</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"name\">FOR</span>)</span><br><span class=\"line\">  vector&lt;float&gt; result_for(<span class=\"number\">1000000</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  for (<span class=\"name\">auto</span> i = <span class=\"number\">0</span>u<span class=\"comment\">; i &lt; result_for.size(); ++i) &#123;</span></span><br><span class=\"line\">    result_for[i] = vec[i]<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(<span class=\"name\">FOR</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"name\">TRANSFORM</span>)</span><br><span class=\"line\">  vector&lt;float&gt; result_trans(<span class=\"number\">1000000</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  std:<span class=\"symbol\">:transform</span>(<span class=\"name\">vec</span>.begin(), vec.end(), result_trans.begin(),</span><br><span class=\"line\">                 [](<span class=\"name\">auto</span> i) -&gt; float &#123; return i<span class=\"comment\">; &#125;);</span></span><br><span class=\"line\">  __TOC__(<span class=\"name\">TRANSFORM</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"name\">PUSH_BACK</span>)</span><br><span class=\"line\">  vector&lt;float&gt; result0<span class=\"comment\">;</span></span><br><span class=\"line\">  for (<span class=\"name\">auto</span> i : vec) &#123;</span><br><span class=\"line\">    result0.push_back(<span class=\"name\">i</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(<span class=\"name\">PUSH_BACK</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"name\">PUSH_BACK1</span>)</span><br><span class=\"line\">  vector&lt;float&gt; result<span class=\"comment\">;</span></span><br><span class=\"line\">  for (<span class=\"name\">auto</span> i : vec) &#123;</span><br><span class=\"line\">    result.push_back(<span class=\"name\">std</span>:<span class=\"symbol\">:move</span>(<span class=\"name\">i</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(<span class=\"name\">PUSH_BACK1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"name\">EMPLACE_BACK</span>)</span><br><span class=\"line\">  vector&lt;float&gt; result1<span class=\"comment\">;</span></span><br><span class=\"line\">  for (<span class=\"name\">auto</span> i : vec) &#123;</span><br><span class=\"line\">    result1.emplace_back(<span class=\"name\">i</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(<span class=\"name\">EMPLACE_BACK</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"name\">EMPLACE_BACK2</span>)</span><br><span class=\"line\">  vector&lt;float&gt; result2<span class=\"comment\">;</span></span><br><span class=\"line\">  for (<span class=\"name\">auto</span> <span class=\"symbol\">&amp;i</span> : vec) &#123;</span><br><span class=\"line\">    result2.emplace_back(<span class=\"name\">i</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(<span class=\"name\">EMPLACE_BACK2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"name\">EMPLACE_BACK3</span>)</span><br><span class=\"line\">  vector&lt;float&gt; result3<span class=\"comment\">;</span></span><br><span class=\"line\">  for (<span class=\"name\">auto</span> <span class=\"symbol\">&amp;i</span> : vec) &#123;</span><br><span class=\"line\">    result3.emplace_back(<span class=\"name\">std</span>:<span class=\"symbol\">:move</span>(<span class=\"name\">i</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(<span class=\"name\">EMPLACE_BACK3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  cout &lt;&lt; vec[<span class=\"number\">0</span>] &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  for (<span class=\"name\">auto</span> <span class=\"symbol\">&amp;i</span> : vec) &#123;</span><br><span class=\"line\">    // cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">FOR : <span class=\"number\">2042</span>us</span><br><span class=\"line\">TRANSFORM : <span class=\"number\">2161</span>us</span><br><span class=\"line\">PUSH_BACK : <span class=\"number\">4369</span>us</span><br><span class=\"line\">PUSH_BACK1 : <span class=\"number\">5835</span>us</span><br><span class=\"line\">EMPLACE_BACK : <span class=\"number\">5175</span>us</span><br><span class=\"line\">EMPLACE_BACK2 : <span class=\"number\">5075</span>us</span><br><span class=\"line\">EMPLACE_BACK3 : <span class=\"number\">5364</span>us</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>struct bindings(多用引用)</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">  vector&lt;<span class=\"built_in\">float</span>&gt; vec(<span class=\"number\">1000000</span>, -<span class=\"number\">1235.23</span>);</span><br><span class=\"line\">  auto tup = std::make<span class=\"constructor\">_tuple(<span class=\"params\">vec</span>, <span class=\"params\">vec</span>, <span class=\"params\">vec</span>)</span>;</span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(TUP1)</span></span><br><span class=\"line\">  auto <span class=\"literal\">[<span class=\"identifier\">x</span>, <span class=\"identifier\">y</span>, <span class=\"identifier\">z</span>]</span> = tup;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(TUP1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(TUP2)</span></span><br><span class=\"line\">  auto &amp;<span class=\"literal\">[<span class=\"identifier\">l</span>, <span class=\"identifier\">m</span>, <span class=\"identifier\">n</span>]</span> = tup;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(TUP2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">TUP1 : <span class=\"number\">6940</span>us</span><br><span class=\"line\">TUP2 : <span class=\"number\">0</span>us</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三种方式等价</span></span><br><span class=\"line\">  vector&lt;<span class=\"built_in\">float</span>&gt; vec(<span class=\"number\">1000000</span>, -<span class=\"number\">1235.23</span>);</span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(TUP1)</span></span><br><span class=\"line\">  auto tup = std::make<span class=\"constructor\">_tuple(<span class=\"params\">vec</span>, <span class=\"params\">vec</span>, <span class=\"params\">vec</span>)</span>;</span><br><span class=\"line\">  auto <span class=\"literal\">[<span class=\"identifier\">x</span>, <span class=\"identifier\">y</span>, <span class=\"identifier\">z</span>]</span> = std::move(tup);</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(TUP1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(TUP2)</span></span><br><span class=\"line\">  auto tup2 = std::make<span class=\"constructor\">_tuple(<span class=\"params\">vec</span>, <span class=\"params\">vec</span>, <span class=\"params\">vec</span>)</span>;</span><br><span class=\"line\">  auto &amp;<span class=\"literal\">[<span class=\"identifier\">x2</span>, <span class=\"identifier\">y2</span>, <span class=\"identifier\">z2</span>]</span> = tup;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(TUP2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"constructor\">__TIC__(TUP3)</span></span><br><span class=\"line\">  auto <span class=\"literal\">[<span class=\"identifier\">x1</span>, <span class=\"identifier\">y1</span>, <span class=\"identifier\">z1</span>]</span> = std::make<span class=\"constructor\">_tuple(<span class=\"params\">vec</span>, <span class=\"params\">vec</span>, <span class=\"params\">vec</span>)</span>;</span><br><span class=\"line\">  <span class=\"constructor\">__TOC__(TUP3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">TUP1 : <span class=\"number\">10087</span>us</span><br><span class=\"line\">TUP2 : <span class=\"number\">10126</span>us</span><br><span class=\"line\">TUP3 : <span class=\"number\">10127</span>us</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造时能用Move用move</span></span><br><span class=\"line\">tuple&lt;vector&lt;<span class=\"type\">float</span>&gt;, vector&lt;<span class=\"type\">float</span>&gt;, vector&lt;<span class=\"type\">float</span>&gt;&gt; <span class=\"built_in\">get_tup</span>() &#123;</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec1</span><span class=\"params\">(<span class=\"number\">1000000</span>, <span class=\"number\">-1235.23</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec2</span><span class=\"params\">(<span class=\"number\">1000000</span>, <span class=\"number\">-1235.23</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec3</span><span class=\"params\">(<span class=\"number\">1000000</span>, <span class=\"number\">-1235.23</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;vec1, vec2, vec3&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tuple&lt;vector&lt;<span class=\"type\">float</span>&gt;, vector&lt;<span class=\"type\">float</span>&gt;, vector&lt;<span class=\"type\">float</span>&gt;&gt; <span class=\"built_in\">get_tup1</span>() &#123;</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec1</span><span class=\"params\">(<span class=\"number\">1000000</span>, <span class=\"number\">-1235.23</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec2</span><span class=\"params\">(<span class=\"number\">1000000</span>, <span class=\"number\">-1235.23</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">vec3</span><span class=\"params\">(<span class=\"number\">1000000</span>, <span class=\"number\">-1235.23</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;std::<span class=\"built_in\">move</span>(vec1), std::<span class=\"built_in\">move</span>(vec2), std::<span class=\"built_in\">move</span>(vec3)&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(TUP3)</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> [x1, y1, z1] = <span class=\"built_in\">get_tup</span>();</span><br><span class=\"line\">  __TOC__(TUP3)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(TUP4)</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> [x4, y4, z4] = <span class=\"built_in\">get_tup1</span>();</span><br><span class=\"line\">  __TOC__(TUP4)</span><br><span class=\"line\"></span><br><span class=\"line\">TUP3 : <span class=\"number\">18522u</span>s</span><br><span class=\"line\">TUP4 : <span class=\"number\">6687u</span>s</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>if and std::max (简单比较用 if，无函数调用)</li>\n</ol>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"keyword\">test</span>(<span class=\"number\">100000</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  for (auto i = 0u<span class=\"comment\">; i &lt; 100000; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">test</span>[i] = rand()<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(<span class=\"keyword\">TEST</span>)</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max_value = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">  for (auto i = 0u<span class=\"comment\">; i &lt; 100000; ++i) &#123;</span></span><br><span class=\"line\">    if (<span class=\"keyword\">test</span>[i] &gt; max_value) &#123;</span><br><span class=\"line\">      max_value = <span class=\"keyword\">test</span>[i]<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(<span class=\"keyword\">TEST</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  __TIC__(TEST2)</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max_value2 = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">  for (auto i = 0u<span class=\"comment\">; i &lt; 100000; ++i) &#123;</span></span><br><span class=\"line\">    max_value2 = <span class=\"keyword\">std</span>::max(max_value2, <span class=\"keyword\">test</span>[i])<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  __TOC__(TEST2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">TEST</span> : 570us</span><br><span class=\"line\">TEST2 : 994us</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/33638344\">C++性能优化</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000040755126\">C++性能调优</a></li>\n</ol>\n<h2 id=\"优化的问题\"><a href=\"#优化的问题\" class=\"headerlink\" title=\"优化的问题\"></a>优化的问题</h2><ol>\n<li>j5 模型定点对齐输出， 后处理在需要的地方进行定浮点转换与取有效数据</li>\n<li>模型输出 chw， 按 c 取最大值，形成 h*w mask；如果按 for i j k 来取，不连续。解决方法：设置第一层为最大值，后续 k-1 层没一层和第 k-1 层做对比，最大值保存在第一层，max 对应的 index 存起来</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> net_output: NCHW; net_output_shape: NHWC</span><br><span class=\"line\">auto frame_w = net_output_shape[<span class=\"number\">0</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">auto frame_h = net_output_shape[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">auto channel_num = net_output_shape[<span class=\"number\">0</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"regexp\">//</span> cv::Mat mask_mat(frame_h,frame_w, CV_8UC1);</span><br><span class=\"line\">cv::Mat mask_mat = cv::Mat::zeros(frame_h, frame_w, CV_8UC1);</span><br><span class=\"line\">unsigned char *maskdata = mask_mat.data;</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"keyword\">for</span>(int i=<span class=\"number\">0</span>; i&lt;frame_h; i++)&#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>   <span class=\"keyword\">for</span>(int j=<span class=\"number\">0</span>; j&lt;frame_w; j++)&#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     int index = i*frame_w+j;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     float tmp = net_output[index];</span><br><span class=\"line\"><span class=\"regexp\">//</span>     int maxk = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     <span class=\"keyword\">for</span>(int k=<span class=\"number\">1</span>; k&lt;channel_num; k++)&#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>       int index1 = k*frame_h*frame_w+index;</span><br><span class=\"line\"><span class=\"regexp\">//</span>       <span class=\"keyword\">if</span> (tmp &lt; net_output[index1]) &#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>         tmp = net_output[index1];</span><br><span class=\"line\"><span class=\"regexp\">//</span>         maxk = k;</span><br><span class=\"line\"><span class=\"regexp\">//</span>       &#125;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     &#125;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     maskdata[index] = maxk;</span><br><span class=\"line\"><span class=\"regexp\">//</span>   &#125;</span><br><span class=\"line\"><span class=\"regexp\">//</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> net_output 和 maskdata 都连续访存, 提高cache命中率</span><br><span class=\"line\">int wxh = frame_h *frame_w;</span><br><span class=\"line\"><span class=\"regexp\">//</span> set layer <span class=\"number\">0</span> to max_value;</span><br><span class=\"line\">std::vector&lt;float&gt; max_value(wxh, <span class=\"number\">0</span>);</span><br><span class=\"line\">memcpy(&amp;max_value[<span class=\"number\">0</span>], net_output, wxh * sizeof(float));</span><br><span class=\"line\"><span class=\"regexp\">//</span> get max index from layer <span class=\"number\">1</span></span><br><span class=\"line\">int index = wxh;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (auto k = <span class=\"number\">1</span>u; k &lt; channel_num; ++k) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (auto offset = <span class=\"number\">0</span>u; offset &lt; wxh; ++offset) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (net_output[index] &gt; max_value[offset]) &#123;</span><br><span class=\"line\">      max_value[offset] = net_output[index];</span><br><span class=\"line\">      maskdata[offset] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"regexp\">//</span> not copy: <span class=\"number\">7</span>ms</span><br><span class=\"line\"><span class=\"regexp\">//</span> int index = wxh;</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"keyword\">for</span> (auto k = <span class=\"number\">1</span>u; k &lt; channel_num; ++k) &#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>   <span class=\"keyword\">for</span> (auto offset = <span class=\"number\">0</span>u; offset &lt; wxh; ++offset) &#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     <span class=\"keyword\">if</span> (net_output[index] &gt; net_output[offset]) &#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>       net_output[offset] = net_output[index];</span><br><span class=\"line\"><span class=\"regexp\">//</span>       maskdata[offset] = k;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     &#125;</span><br><span class=\"line\"><span class=\"regexp\">//</span>     index++;</span><br><span class=\"line\"><span class=\"regexp\">//</span>   &#125;</span><br><span class=\"line\"><span class=\"regexp\">//</span> &#125;</span><br></pre></td></tr></table></figure>\n","categories":["Program","Cpp"],"tags":["Profiling","Perf"]},{"title":"First-Emacs-Plugin","url":"/2021/03/12/First-Emacs-Plugin/","content":"<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>保存位置，高亮所在行，单个buffer跳转</p>\n<h2 id=\"参考插件\"><a href=\"#参考插件\" class=\"headerlink\" title=\"参考插件\"></a>参考插件</h2><ol>\n<li>hightlight</li>\n<li>symbol-overlay</li>\n<li>dogears</li>\n<li>set-mark-command</li>\n</ol>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>dogears加高亮</li>\n<li>symbol-overlay改造</li>\n<li><a href=\"https://stackoverflow.com/questions/14454219/how-to-highlight-a-particular-line-in-emacs\">函数修改</a></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2>","categories":["Tools","Emacs"],"tags":["Emacs"]},{"title":"Cuda","url":"/2022/03/10/Cuda/","content":"<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li><code>CUDA_LAUNCH_BLOCKING=1</code> 有错误立即停下来，效率会差一点，主要用于调试</li>\n<li><a href=\"https://github.com/pytorch/pytorch/blob/main/aten/src/ATen/cuda/detail/KernelUtils.h\">kernel utils</a> 简化写 kernel 流程</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/480719273\">手动释放显存</a></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install psmisc</span><br><span class=\"line\">fuser -v /dev/nvidia*</span><br><span class=\"line\">kill -9 ***(PID)</span><br><span class=\"line\">killall python</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>fp32, tf32, fp16, bf16, fp8<br><img src=\"https://i.ibb.co/vdTGHkJ/txy-EFVOs5-P.png\" alt=\"data type\"></li>\n<li>NVIDIA GPU 的缓存行（cache line）大小一般是 128 字节。</li>\n<li>cache line 又分为 4 个 sectors, 1 个 sector 32B</li>\n<li>sector 是 global memory 访问的最小单位，32 个线程一起运行，最少访问 32B</li>\n<li>gridDim 划分的是数据，blockDim 划分的是线程：例如: sgemm 分块矩阵乘</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">N=M=<span class=\"number\">1024</span>;</span><br><span class=\"line\">BN=BM=<span class=\"number\">128</span>, TN=TB=<span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"function\">dim3 <span class=\"title\">blockDim</span><span class=\"params\">(BN / TN, BM / TM)</span></span>;  <span class=\"comment\">// block 按线程分为 16x16 thread,threadDim=(16, 16) 每个线程处理8x8数据; x维度是列，y维度是行;</span></span><br><span class=\"line\"><span class=\"function\">dim3 <span class=\"title\">gridDim</span><span class=\"params\">((N + BN - <span class=\"number\">1</span>) / BN, (M + BM - <span class=\"number\">1</span>) / BM)</span></span>; <span class=\"comment\">// grid 按数据分为 8x8 block, blockDim=(8, 8)</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>GPU通过计算而不是深度缓存层次结构来隐藏访存延迟</code><ul>\n<li>当数据访存的时候，就让 warp stall，而后再选一个 warp 进行计算，通过这种方式交错开计算和访存，让访存单元一直忙碌，带宽打满。计算延迟的时候也会让 warp stall</li>\n</ul>\n</li>\n<li>并发的 warp 切换没有开销，因为每个 warp 都分配了硬件资源<ul>\n<li>不需要上下文切换</li>\n<li>以空间换时间</li>\n</ul>\n</li>\n<li>假如 GPU 有 108 个 SM。每个 SM 可以并行处理多个线程块，具体取决于所使用的内核；为了获得最佳并行化，隐式 GEMM 应包含 108 个图块的整数倍。</li>\n<li>gpu sram 带宽为什么比主存大很多：<ul>\n<li>并行，多个 SM 访问 shared memory， 如有 80 个 sm，每个 sm4 个 partition， 每个 shared memory 有 32 个 bank， 等效位宽为：<code>80*4*32*8 = 81920</code>, hbm 位宽为 8192， 带宽为 1.5TB&#x2F;s, sram 为 19TB&#x2F;s</li>\n<li>shared memory 带宽：<code>2(?) * freq * 32(banks) * 8/8 *4(sm partion) * 80(sm num)</code></li>\n</ul>\n</li>\n<li><code>kernel融合主要是使用sram来减少对显存的访问，注意不是device和host数据搬移</code> 也会减少调度开销</li>\n<li>kernel 在编译的时候需要明确 block grid size 吗？不需要， 这些参数通常在运行时通过 CUDA 内核启动语法指定，这提供了更高的灵活性和动态调整的可能性。</li>\n<li>nvcc 在翻译单元的顶部隐式包含了 cuda_runtime.h 。</li>\n<li>核函数 K（kernel function）就是指 K(x, y) &#x3D; ，其中 x 和 y 是 n 维的输入值，f(·) 是从 n 维到 m 维的映射（通常而言，m&gt;&gt;n）。是 x 和 y 的内积（inner product），严格来说 应该叫欧式空间的标准内积，也就是很多人常说的点积（dot product）。</li>\n<li><code>sudo update-alternatives --display cuda</code>显示系统 cuda 版本</li>\n<li><code>export PATH=/usr/local/cuda/bin/:$&#123;PATH&#125;</code>找不到 nvcc 可能需要 export PATH</li>\n<li><code>sudo apt install -y nvidia-cuda-toolkit</code> 安装 cuda 工具链, 不能乱用，需要和系统 cuda 匹配</li>\n<li>在 CUDA 中，你会以类似于 C&#x2F;C++函数的形式来表达想要在 GPU 上运行的计算，这个函数被称为 kernel。</li>\n<li>GPU 函数耗时统计不能只记录一次的，GPU 可能做一些准备工作，教训： nppiResize_8u_C3R 不管大小第一次运行耗时都很大 The cuda context is lazily initialized</li>\n<li><code>autotuning</code> 搜索 kernel grid 划分参数(结果不变)，找性能最优</li>\n<li>L1 和 shared memory 共享一块存储 可动态分配比例; 可用比例见<a href=\"https://www.nvidia.com/content/PDF/nvidia-ampere-ga-102-gpu-architecture-whitepaper-v2.pdf\">link</a><ul>\n<li>多用 shared memory 就多分点给 shared memory 多用寄存器就多分点给 L1 cache</li>\n</ul>\n</li>\n<li>warp 调度:延时隐藏 只执行 warp 一部分 当 warp 需要等待时 先执行其他 warp</li>\n<li>shared memory 和 register 是 SM 中的稀缺资源.</li>\n<li>warp 执行类似 simd</li>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/2023.3/ProfilingGuide/index.html#metrics-hw-model\">Hardware Model</a><ul>\n<li>对 sm 介绍比较好</li>\n<li>Each SM is partitioned into four processing blocks, called SM sub partitions.</li>\n<li>一个 SM 又可以由若干个 SMP（SM Partition）组成</li>\n<li>A warp is allocated to a sub partition and resides on the sub partition from launch to completion. warp 被分配给子分区，并且从启动到完成都驻留在子分区上。</li>\n</ul>\n</li>\n<li><code>FMA (Fused Multiply Add)</code>: z&#x3D;a*x+y …z,x,y are vectors or scalars</li>\n<li><code>4FMA (Quad FMA)</code>: z&#x3D;A*x+z …A is a FP32 matrix; x,z are vectors</li>\n<li><code>WMMA: Warp-level Matrix Mulitply and Accumulate (Tensor Core)</code>: Z&#x3D;AB+C …A,B are FP16 matrices; Z,C are FP32</li>\n<li>global memory -&gt; shared memory 时，计算每个线程需要搬移的数据量。假如每个线程要搬移 A，B 矩阵为 4 个 single float point, 4x4 &#x3D; 16B<ul>\n<li>A_tile（128,8): 256 个线程， 每个线程搬移 4 个数，每行由 2 个线程处理， 假如线程一维索引为 tid； 行 m &#x3D; tid &#x2F; 2 &#x3D; tid &gt;&gt; 1; 列 k &#x3D; (tid % 2) x 4 &#x3D; (tid &amp; 1) &lt;&lt; 2</li>\n<li>B_tile（8,128): 256 个线程， 每个线程搬移 4 个数，每行由 32 个线程处理， 假如线程一维索引为 tid； 行 k &#x3D; tid &#x2F; 32 &#x3D; tid &gt;&gt; 5; 列 n &#x3D; (tid % 32) x 4 &#x3D; (tid &amp; 31) &lt;&lt; 2</li>\n</ul>\n</li>\n<li>load&#x2F;store 关键点在行列索引(分别计算各 tile 维度的 m, n, k)， 通过行列可以找到起始地址。<code>#define OFFSET(row, col, ld) ((row) * (ld) + (col))</code></li>\n<li>load&#x2F;store memory 的时候先通过行列坐标找到 global 起始点，然后再算偏移，用宏定义来访问矩阵，先找最外层的 tile，再找里层的 tile。</li>\n<li>sgemm 分块 A 矩阵 global 到 shared load 时，shared memory 需要列优先排列，一次 load 四个数都寄存器，然后再分别赋值给列。</li>\n<li>shred memory double buffering: 在 for 循环里只用 sync 一次<ul>\n<li>load tile[0] 到 buffer[0]; sync</li>\n<li>for: load tile[i]; compute tile[i-1]; sync</li>\n<li>comute tile[-1]; sync</li>\n</ul>\n</li>\n<li>wave 的概念：wave 表示 GPU 上同时执行的 thread block。例如一个 kernel 中 thread block 为 256 线程，每个线程使用了 128 个寄存器，那么在 GV100 上每个 SM 可同时执行 2 个 thread block，GV100 共 80 个 SM，一个 wave 就是 160 个 thread block。</li>\n<li>cuda 遵循 IEEE 754 standard for binary floating-point representation； 由于融合和乘加， 其结果与分别乘加结果略有不同 <a href=\"https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#ieee-754-compliance\">ieee-754-compliance</a><ul>\n<li>One of the key differences is the fused multiply-add (FMA) instruction, which combines multiply-add operations into a single instruction execution. <code>Its result will often differ slightly from results obtained by doing the two operations separately.</code></li>\n</ul>\n</li>\n<li>每个浮点算术运算都涉及一定量的舍入。因此，算术运算的执行顺序很重要。如果 A、B 和 C 是浮点值，则 (A+B)+C 不能保证等于 A+(B+C)</li>\n<li>我们可以将 CUDA 内核编写为许多短 <code>__device__</code> 函数的集合，而不是一个大型的整体 <code>__global__</code> 函数；每个设备功能可以在将它们连接在一起之前进行独立测试。</li>\n<li>如果大多数函数都定义为 <code>__host__ __device__</code> 而不仅仅是 <code>__device__</code> 函数，那么这些函数就可以在 CPU 和 GPU 上进行测试，</li>\n<li><code>local memory</code>之所以如此命名，是因为它的作用域是线程本地的，而不是因为它的物理位置。事实上，本地存储器位于片外。因此，访问本地内存与访问全局内存一样昂贵。换句话说，名称中的“本地”一词并不意味着访问速度更快。本地内存仅用于保存自动变量。当 nvcc 编译器确定没有足够的寄存器空间来保存变量时，就会执行此操作。可能放置在本地内存中的自动变量是大型结构或数组，它们会消耗太多寄存器空间，并且编译器确定可以动态索引的数组。</li>\n<li><code>constent memory</code></li>\n<li><code>The NVIDIA Management Library (NVML)</code> is a C-based interface that provides direct access to the queries and commands exposed via nvidia-smi intended as a platform for building 3rd-party system management applications.</li>\n<li>可以通过 CUDA_VISIBLE_DEVICES 环境变量重新排列已安装的 CUDA 设备的集合; <code>CUDA_VISIBLE_DEVICES=0,2,1,3</code></li>\n<li>Starting with CUDA 11.0, devices of compute capability 8.0 and above have the capability to influence persistence of data in the L2 cache, potentially providing higher bandwidth and lower latency accesses to global memory.</li>\n<li>从 Hopper 开始，CUTLASS 3.0 将 Warp Specialization 的概念纳入了内核设计的一部分。线程块被划分为两组 warp，生产者 warp 组和消费者 warp 组。生产者 warp 组使用新的张量内存加速器（TMA）将数据从全局内存加载到共享内存缓冲区中。<a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/efficient_gemm.md#warp-specialization\">link</a></li>\n<li>TMA 可以异步一次 load 大块数据到 shared memory， ampere 一次最多只能 load 128 bit 数据(指令限制)</li>\n<li>想象 shared memory 和 register 是二维的, bank 不冲突<ul>\n<li>shared memory: <code>smem[n][32]</code></li>\n<li>register: <code>re[n][4]</code></li>\n</ul>\n</li>\n<li>虽然 block 可以划分为二维 thread, 但调度时按一维调度，每 32 个一个 warp</li>\n<li>laneID 是 warp 内第几个线程 threadIdx.x %32</li>\n<li>WarpID &#x3D; threadIdx.x &#x2F;32</li>\n<li>常量内存位于显存中 片上有缓存 类似于 shared memeory warp 内多个线程读同一个地址最快，不同地址要串行</li>\n<li>常量内存对于 kernel 是只读的 对于主机可读写</li>\n<li>constant 由主机代码准备 kernel 中直接用</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">__constant__ <span class=\"type\">float</span> coef[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setup_coef_constant</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cudaMemorycpyToSymbol</span>(coef, h_coef, size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>kernel 第三个参数是动态共享内存的大小</li>\n</ol>\n<h2 id=\"driver\"><a href=\"#driver\" class=\"headerlink\" title=\"driver\"></a><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/index.html\">driver</a></h2><h2 id=\"runtime\"><a href=\"#runtime\" class=\"headerlink\" title=\"runtime\"></a>runtime</h2><h2 id=\"cuda-graph\"><a href=\"#cuda-graph\" class=\"headerlink\" title=\"cuda graph\"></a>cuda graph</h2><ol>\n<li>减少 Launch 开销</li>\n<li><a href=\"https://developer.nvidia.com/blog/cuda-graphs/\">cuda-graphs blog</a></li>\n<li>trtexec 有参数指定</li>\n</ol>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><ol>\n<li>想办法喂饱硬件, 好好调教它，让它努力打工, 工作饱和，不能偷懒</li>\n<li>分析计算部件停顿的原因。</li>\n<li>主要由下列因素决定：<ul>\n<li>算力(peak)</li>\n<li>带宽(peak)</li>\n<li>指令和访存延迟</li>\n</ul>\n</li>\n<li>性能 roofline bound 是满流水线时分析，一直忙; 指令和访存延迟会使得处理器空闲</li>\n<li>一直忙条件：<code>warp 数量 = 延迟 x 吞吐</code>, 如：延迟 20 cycle; SM 吞吐为 64 fma 每 cycle；SM warp 数量为： 20 x 64 &#x2F; 32 &#x3D; 40</li>\n<li>Use peak performance metrics to guide optimization</li>\n<li>Optimize your algorithm, then unroll loops</li>\n<li>Use template parameters to generate optimal code</li>\n<li>bandwidth(带宽)和 throughput(吞吐)区别：<ul>\n<li>bandwitdh: 理论最大吞吐</li>\n<li>throughput: 实际吞吐</li>\n</ul>\n</li>\n<li><a href=\"https://developer.download.nvidia.com/GTC/PDF/1083_Wang.pdf\">Fundamental Optimizations in CUDA</a></li>\n<li>kernels are too small -&gt; kernel launch bound; gpu is idle in many time, reason:kernels are too small <a href=\"https://github.com/jiaxiyang/CUDA-PPT/blob/main/GTC2020/s21417-faster-transformer.pdf\">link</a><ul>\n<li>a simple solution: using tensorflow XLA to fuse kernel automaticlly</li>\n</ul>\n</li>\n<li>在 CUDA 编程中，<code>谓词替换</code>通常指的是一种编程技巧，它通过使用谓词（即条件表达式）来代替显式的分支语句（如 if-else 或 switch 语句）。这种技巧可以帮助<code>减少线程发散</code>，从而提高在 GPU 上的并行执行效率。使用条件运算符（如? :）或逻辑运算符（如&amp;&amp;和||）来替换 if-else 语句。这样可以保证所有线程执行相同数量的指令，尽管这些指令的实际作用可能因条件而异。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__global__ void traditionalBranch(int *data, int value, int threshold) &#123;</span><br><span class=\"line\">    int index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class=\"line\">    if (data[index] &gt; threshold) &#123;</span><br><span class=\"line\">        data[index] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__global__ void predicateReplacement(int *data, int value, int threshold) &#123;</span><br><span class=\"line\">    int index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class=\"line\">    data[index] = (data[index] &gt; threshold) * value + !(data[index] &gt; threshold) * data[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cache locality 表示程序对缓存中数据的访问 locality 和重用情况。如果同一个 warp 中的线程迭代访问同一缓存线(cache line)上的数据(比如遍历一个数组),那么可以最大化利用 cache,称之为良好的 cache locality。</li>\n</ol>\n<h3 id=\"papers\"><a href=\"#papers\" class=\"headerlink\" title=\"papers\"></a>papers</h3><ol>\n<li><a href=\"http://impact.crhc.illinois.edu/shared/papers/optimization2008.pdf\">Optimization Principles and Application Performance Evaluation</a></li>\n</ol>\n<h3 id=\"cuda-performance-guidelines\"><a href=\"#cuda-performance-guidelines\" class=\"headerlink\" title=\"cuda performance-guidelines\"></a><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#performance-guidelines\">cuda performance-guidelines</a></h3><ol>\n<li><code>整体优化策略</code> Overall Performance Optimization Strategies；Performance optimization revolves around four basic strategies:<ul>\n<li>Maximize parallel execution to achieve maximum utilization; 最大化并行执行以达到最大利用率；</li>\n<li>Optimize memory usage to achieve maximum memory throughput; 优化存储使用，实现最大存储吞吐量；</li>\n<li>Optimize instruction usage to achieve maximum instruction throughput; 优化指令使用，实现最大指令吞吐量；</li>\n<li>Minimize memory thrashing. 最大限度地减少内存抖动。(减少内存申请释放频率)</li>\n</ul>\n</li>\n<li>Which strategies will yield the best performance gain for a particular portion of an application depends on the performance limiters for that portion;根据情况使用哪种策略，比如 reduction 时受 memory bound，因此我们应该争取峰值带宽</li>\n<li>compute-bound 需要争取达到最大算力，memory bound 需要争取达到最大带宽</li>\n</ol>\n<h3 id=\"优化技术\"><a href=\"#优化技术\" class=\"headerlink\" title=\"优化技术\"></a>优化技术</h3><ol>\n<li>memory coalescing<ul>\n<li>让连续的线程访问连续的内存地址。这样就有合并机会，多个线程间会合并访存，可能并不是 32 个线程都合并, 比如一个线程访问 4 个 32bit float 数据，8 个线程可合并，8 x 4 x 32 &#x2F; 8 &#x3D; 128Bx</li>\n</ul>\n</li>\n<li>swizzle</li>\n<li>bank conflict</li>\n<li>分支优化<ul>\n<li>谓词替换</li>\n<li>分支预测</li>\n<li>循环展开</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"访存优化\"><a href=\"#访存优化\" class=\"headerlink\" title=\"访存优化\"></a>访存优化</h3><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/600489819\">漫谈高性能计算与性能优化：访存</a></li>\n<li>访存优化是第一性原理</li>\n<li>当我们在说访存优化的时候，我们具体需要做些什么。总的来说，就是三板斧。<ul>\n<li>减少数据搬运<ul>\n<li>如何减少数据搬运，最主要的手段就是分块，或者说 tiling。</li>\n<li>要尽可能地保证数据连续访问，其中最主要的一个原因就是提高 cache 命中率，从而避免不必要的数据搬运</li>\n</ul>\n</li>\n<li>减少数据访存延时(数据搬运确定)<ul>\n<li>减少 bank 冲突</li>\n<li>pipeline (double buffer, 预取)</li>\n<li>就是切分更多的块，启动更多的 warp 来掩盖访存延时。</li>\n</ul>\n</li>\n<li>保证负载均衡。<ul>\n<li>关于负载均衡的话题，主要是在 sparse 里面谈的比较多</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如果发现实际带宽比较差，数据搬运效率比较低，这个时候就要去思考，是不是可以有办法，通过分块的一些技巧来减少数据搬运。如果数据搬运不能够再减少了的话，是否可以通过一些方式来提高数据的搬运效率，比如向量化访存、合并访问来提高对 DRAM 的访存性能、避免 bank 冲突来提高对 shared memory 的访存性能、调整分块大小来让更多的 warp 跑起来从而减少访存的延时，如果不是 SIMT 架构，就需要精细地设计各级访存的 pipeline，让访存操作尽可能地 pingpong 起来，从而让访存流水尽可能地连续起来不要被打断。理论大概是这样，但是每一个问题都有着不同的处理方式，每一个问题可能都是不同的瓶颈。总之就是万变不离其宗，准确地评估每一级存储的访存效率然后尽可能地提高每一级的访存效率，尽可能地把访存流水打满，不要有空跑。</li>\n<li>其实所谓“加速”或者“性能优化”的本质就是让软件充分利用计算硬件，提升利用率，从而逼近理论性能上限。从这个角度，“通用方法”就是：<code>分析计算部件停顿的原因-选择合理的计算模型减少数据依赖和对流水线的破坏(能兼顾缓解访存墙更好)-通过专用硬件或者结构优化消除剩下的瓶颈，然后不断迭代上述过程，直至各方面因素达到平衡</code>。</li>\n<li>cuda gemm 为什么是三级分块，不是四级或者两级。因为 NV 的 GPU 内存结构是三级的，global mem-&gt;shared mem，shared mem-&gt;register。</li>\n</ol>\n<h3 id=\"reduction-优化\"><a href=\"#reduction-优化\" class=\"headerlink\" title=\"reduction 优化\"></a>reduction 优化</h3><ol>\n<li>(great)<a href=\"https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf\">Optimizing Parallel Reduction in CUDA</a><ul>\n<li>Memory coalescing</li>\n<li>Divergent branching</li>\n<li>Bank conflicts</li>\n<li>Latency hiding</li>\n</ul>\n</li>\n<li><code>What is Our Optimization Goal?</code> 先确定最大目标 We should strive to reach GPU peak performance Choose the right metric:<ul>\n<li>GFLOP&#x2F;s: for compute-bound kernels</li>\n<li>Bandwidth: for memory-bound kernels</li>\n</ul>\n</li>\n<li>通过不断迭代优化，从而达到硬件最优性能。</li>\n<li>Reductions have very low arithmetic intensity; Therefore we should strive for <code>peak bandwidth</code></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/426978026\">中文解析</a></li>\n</ol>\n<h3 id=\"elementwise-优化\"><a href=\"#elementwise-优化\" class=\"headerlink\" title=\"elementwise 优化\"></a>elementwise 优化</h3><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/488601925\">elementwise 优化</a></li>\n</ol>\n<h2 id=\"NVCC\"><a href=\"#NVCC\" class=\"headerlink\" title=\"NVCC\"></a>NVCC</h2><ol>\n<li>交叉编译时用本地 nvcc 就行，不存在 x86 和 aarch64 区别</li>\n<li><a href=\"https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html\">NVIDIA CUDA Compiler Driver NVCC</a></li>\n<li><a href=\"https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#supported-input-file-suffixes\">编译过程中各类型文件作用说明</a></li>\n<li><a href=\"https://www.linmao.dev/joy/1165/\">CUDA 编译过程</a></li>\n</ol>\n<h2 id=\"PTX-Parallel-Thread-Execution\"><a href=\"#PTX-Parallel-Thread-Execution\" class=\"headerlink\" title=\"PTX(Parallel Thread Execution)\"></a>PTX(Parallel Thread Execution)</h2><ol>\n<li>a low-level parallel thread execution virtual machine and instruction set architecture (ISA)</li>\n<li>PTX 是上承 GPU 编程语言 CUDA C++，下启 GPU 硬件 SASS 指令，可以借助 NVRTC 实现运行时优化，某些层面上来说可以称之为 GPU 设备无关代码，因此 PTX 可以理解为<code>CUDA IR</code></li>\n<li>PTX 独立于特定 GPU 架构,可以重用相同的代码适用于不同的 GPU 架构,相当于前端</li>\n<li>使用虚拟架构生成 PTX 中间文件，虚拟框架由<code>compute_</code>开头。虚拟架构通常是从大的 GPU 代上控制的，真实框架必须大于等于虚拟框架，真实框架对应真正运行的 GPU，即编译阶段就确定要运行的 GPU 是什么。真实框架由<code>sm_</code>开头。</li>\n<li><code>nvcc -ptx program.cu -o _program.ptx -arch=sm_86</code></li>\n<li><code>cat program.ptx | cu++filt &gt; program_demangle.ptx</code> demangle ptx</li>\n</ol>\n<h2 id=\"SASS-Shader-Assembly\"><a href=\"#SASS-Shader-Assembly\" class=\"headerlink\" title=\"SASS(Shader-Assembly)\"></a>SASS(Shader-Assembly)</h2><ol>\n<li>真正的机器汇编，由 cubin 文件经过 cuobjdump 工具转换而来。目前没有官方的 sass to cubin 的工具。</li>\n<li>cuobjdump 可以用来分析 cubin 文件和 host 文件。而 nvdisasm 只能用来分析 cubin 文件，但是可以得到更多的输出信息。我用的比较多的是 nvdisasm。用来看代码的控制流图。</li>\n<li>只有官方反汇编器，没有官方汇编器</li>\n<li>generate</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ptxas -arch=sm_86 mma_gemm_demangle.ptx -o mma_gemm.cubin</span><br><span class=\"line\">cuobjdump -sass mma_gemm.cubin &gt; mma_gemm.sass</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h2><ol>\n<li><code>block level</code>: <code>__syncthreads()</code></li>\n<li><code>grid level</code>: <code>__threadfence()</code></li>\n<li><code>stream level</code>: <code>cudaStreamSynchronize(cudaStream_t stream)</code><ul>\n<li>这个函数会阻塞 CPU 线程，直到特定的 CUDA stream 中的所有操作完成。</li>\n</ul>\n</li>\n<li><code>device level</code>: <code>cudaDeviceSynchronize()</code></li>\n</ol>\n<h3 id=\"event-sync\"><a href=\"#event-sync\" class=\"headerlink\" title=\"event sync\"></a>event sync</h3><ol>\n<li>CUDA 事件（CUDA Event）是 CUDA 编程中用于时间测量和流同步的一种机制。</li>\n<li>Event 是 stream 相关的一个重要概念，其用来标记 strean 执行过程的某个特定的点。</li>\n<li>Cuda api 提供了相关函数来插入 event 到 stream 中和查询该 event 是否完成（或者叫满足条件？）。只有当该 event 标记的 stream 位置的所有操作都被执行完毕，该 event 才算完成。关联到默认 stream 上的 event 则对所有的 stream 有效。</li>\n<li>Events 标记了 stream 执行过程中的一个点，我们就可以检查正在执行的 stream 中的操作是否到达该点，</li>\n<li><a href=\"https://blog.csdn.net/qq_24990189/article/details/89602618\">使用 event 测量性能</a><ul>\n<li>cudaEventSynchronize</li>\n</ul>\n</li>\n<li>CUDA Events 是 NVIDIA 的 CUDA（Compute Unified Device Architecture）编程模型中的一个特性，用于在 GPU 上进行高精度的计时操作。<code>它们允许开发者在异步任务和内核（kernel）执行中精确地测量时间，帮助分析和优化 CUDA 应用程序的性能</code></li>\n<li>主要功能<ul>\n<li><code>时间测量</code>：CUDA Events 可以用于测量 CUDA kernel 执行时间，或数据传输操作的持续时间。这对于性能分析和调优非常有用。</li>\n<li><code>同步操作</code>：CUDA Events 可以作为同步点，确保在某些操作完成后再执行下一步。例如，可以等待一个 event 完成后再启动另一个 kernel。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"stream-sync\"><a href=\"#stream-sync\" class=\"headerlink\" title=\"stream sync\"></a>stream sync</h3><h2 id=\"bank-conflict\"><a href=\"#bank-conflict\" class=\"headerlink\" title=\"bank conflict\"></a>bank conflict</h2><ol>\n<li><a href=\"https://stackoverflow.com/a/3842483/23011500\">概念</a></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Bank    |      1      |      2      |      3      |     ...     |      16     |</span><br><span class=\"line\">Address |  0  1  2  3 |  4  5  6  7 |  8  9 10 11 |     ...     | 60 61 62 63 |</span><br><span class=\"line\">Address | 64 65 66 67 | 68 69 70 71 | 72 73 74 75 |     ...     |     ...     |</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Each bank has a bandwidth of 32 bits per clock cycle</li>\n<li>shared memory 一次不冲突只能读 32x4B， 看一次读取的数据量，多于 32x4B 需要读取多次 n&#x2F;(32x4)，只要在 n&#x2F;(32x4) 次内读完就是最高效的。</li>\n<li>使用 float4 类型访存，用向量化的 LDG.128 和 STG.128 指令一次读 4 个元素，以减少访存指令数， 提高计算访存比</li>\n<li>thread tile 时如果 TM 是 8，一个 warp 需要读 32*8 个 TM 的数(shared memory 上)，至少需要 8 次(如果有 32 个 bank)<ul>\n<li>如果一个线程一次处理 8 个连续的数，一个 warp 一次只有 4 个线程不 bank 冲突，<ul>\n<li>如果一个线程 1 次读 1 个数，一个 warp 一次只读 4 个数， 需要 64 次读完，</li>\n<li>如果一个线程一次读 4 个数，一个 warp 一次读 16 个数， 需要读 16 次，</li>\n<li>如果一个线程一次读 8 个数，一个 warp 一次读 32 个数，需要读 8 次（最优），但不存在一次读 8 个数的指令。</li>\n</ul>\n</li>\n<li>如果一个线程一次操作 4 个连续的数(处理两个在空间上属于同一 bank 的数)， 那么一个 warp 一次有 8 个线程 bank 不冲突， 一次操作 4*8 个数， 需要 8 次能读完。与 bank 不冲突等效。</li>\n</ul>\n</li>\n<li>这种情况也可以看作是：shared memory 基本单元为 16byte，总 bank 数为 8，冲突与否的分析不在是 32 线程，而变成 4 个 phase 中的不同线程。如果采用 64bit 的访问形式，则相应的基本单元可以看作是 8byte，总 bank 数目为 16，冲突与否的条件变成两个 phase 内的线程是否冲突。</li>\n<li>4x32 or 8x16 or 16x8 (16B, 8bank)</li>\n</ol>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><ol>\n<li><code>__restrict__</code> 用于限定指针,表示该指针是唯一访问目标内存的途径。可以避免出现不同指针引用同一内存区域的情况,编译器可以更自由地进行优化。这意味着编译器可以假设这个指针没有别名（alias），即没有其他指针指向相同的内存位置。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__global__ <span class=\"type\">void</span> <span class=\"title\">myKernel</span><span class=\"params\">(<span class=\"type\">float</span>* __restrict__ ptrA, <span class=\"type\">float</span>* __restrict__ ptrB, <span class=\"type\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 内核代码，假设 ptrA 和 ptrB 指向不重叠的内存区域</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"occupancy-设计\"><a href=\"#occupancy-设计\" class=\"headerlink\" title=\"occupancy 设计\"></a>occupancy 设计</h2><ol>\n<li>(重要) <code>最理想的情况下为 sm max threads 个 thread 都分配资源，占用率 100%， 但受限于 Max warps or max blocks per SM, registers per SM, shared memory per SM, register, 占用率可能不到 100%</code></li>\n<li>想得到令人满意的 GPU 性能<code>关键是找到合适的group size与资源的平衡点</code></li>\n<li><code>--ptxas-options=-v</code> or <code>-Xptxas -v</code> or <code>--resource-usage</code> 加上编译选项， 显示 register， shared memory 使用<ul>\n<li><code>nvcc  -Xptxas=&quot;-v&quot; --ptxas-options=-v -O3 -o my_sgemm my_sgemm.cu -lcublas  2&gt;&amp;1 | c++filt</code> demangle</li>\n</ul>\n</li>\n<li>nishgt compute 里 occupancy 有详细显示</li>\n<li><a href=\"https://xmartlabs.github.io/cuda-calculator/\">cuda-calculator</a> 填入数值，计算 occupancy</li>\n<li>注意 shared memory 是动态配置的，可以尝试改变 shared memory 大小来提升性能</li>\n</ol>\n<h2 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h2><ol>\n<li>cudaStream_t 和 cudaEvent_t 都是数字类型， stream 默认为 0，如果使用默认 stream，直接用 0，如果使用其他 stream，需要 <code>cudaStream_t stream; cudaStreamCreate(&amp;stream);doing_something(); cudaStreamDestroy(stream);</code></li>\n</ol>\n<figure class=\"highlight c++\"><figcaption><span>cuda_runtime.h</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> cudaEvent_t;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> cudaStream_t;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>stream 主要为了隐藏 host device 之间数据搬移的延迟，不是内存和计算</li>\n<li>CUDA 流表示一个 GPU 操作队列，该队列中的操作将以添加到流中的先后顺序而依次执行。</li>\n<li>stream 作用：在 Stream 的帮助下，CUDA 程序可以有效地将内存读取和数值运算并行，从而提升数据的吞吐量。 <a href=\"https://zhuanlan.zhihu.com/p/51402722\">link</a><br>由于 GPU 和 CPU 不能直接读取对方的内存，CUDA 程序一般会有一下三个步骤：1）将数据从 CPU 内存转移到 GPU 内存，2）GPU 进行运算并将结果保存在 GPU 内存，3）将结果从 GPU 内存拷贝到 CPU 内存。</li>\n<li>cuda7 可以开启每个线程有一个默认 stream, 之前每个设备有一个 stream <a href=\"https://developer.nvidia.com/zh-cn/blog/gpu-pro-tip-cuda-7-streams-simplify-concurrency/\">gpu-pro-tip-cuda-7-streams-simplify-concurrency&#x2F;</a><ul>\n<li><code>nvcc --default-stream per-thread ./pthread_test.cu -o pthreads_per_thread</code>需要加编译选项</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"cuda-grammer\"><a href=\"#cuda-grammer\" class=\"headerlink\" title=\"cuda grammer\"></a>cuda grammer</h2><ol>\n<li>所有的 kernel 函数返回类型都是 void</li>\n<li><code>&lt;&lt;&lt; M , T &gt;&gt;&gt;</code> Which indicate that a kernel launches with a grid of M thread blocks. Each thread block has T parallel threads.</li>\n<li><code>vectorAdd&lt;&lt;&lt;blocksPerGrid, threadsPerBlock&gt;&gt;&gt;</code></li>\n<li>可以认为 M, T 对应图片的 H, W; 一个 thread 对应一个像素点；一个 block 对应一行，一个 grid 对应一张图片</li>\n<li><code>int tid = blockIdx.x * blockDim.x + threadIdx.x; =&gt; int index = h * W + w;</code></li>\n<li><a href=\"https://github.com/NVIDIA/cuda-samples/blob/master/Common/helper_cuda.h#L595\">checkCudaErrors</a> helper_cuda.h</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">check</span><span class=\"params\">(T result, <span class=\"type\">char</span> <span class=\"type\">const</span> *<span class=\"type\">const</span> func, <span class=\"type\">const</span> <span class=\"type\">char</span> *<span class=\"type\">const</span> file,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">           <span class=\"type\">int</span> <span class=\"type\">const</span> line)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;CUDA error at %s:%d code=%d(%s) \\&quot;%s\\&quot; \\n&quot;</span>, file, line,</span><br><span class=\"line\">            <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span>&gt;(result), _cudaGetErrorEnum(result), func);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This will output the proper CUDA error strings in the event</span></span><br><span class=\"line\"><span class=\"comment\">// that a CUDA host call returns an error</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> checkCudaErrors(val) check((val), #val, __FILE__, __LINE__)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cutil.h NVIDIA 公司在 CUDA5 之后便不再使用 cutil.h <a href=\"https://github.com/NVIDIA/cuda-samples/blob/master/Samples/2_Concepts_and_Techniques/EGLSync_CUDAEvent_Interop/EGLSync_CUDAEvent_Interop.cu#L83\">CUDA_SAFE_CALL </a></li>\n<li><a href=\"https://bohipat.wordpress.com/2014/07/11/replacing-cutil-in-cuda-5-0/\">replacing-cutil-in-cuda-5-0</a></li>\n</ol>\n<h2 id=\"tensor-core\"><a href=\"#tensor-core\" class=\"headerlink\" title=\"tensor core\"></a>tensor core</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/620185229\">4 种 tensor core 调用方法</a><ul>\n<li>WMMA (Warp-level Matrix Multiply Accumulate) API</li>\n<li>WMMA PTX (Parallel Thread Execution)</li>\n<li>MMA (Matrix Multiply Accumulate) PTX</li>\n<li>SASS</li>\n</ul>\n</li>\n<li><a href=\"https://www.nvidia.com/en-us/data-center/tensor-cores/\">tensor-cores</a></li>\n<li><code>--set roofline</code>能看到 tensor core roofline; 例如运行<code>cuda-samples/Samples/3_CUDA_Features/cudaTensorCoreGemm</code></li>\n<li>cuda-samples&#x2F;Samples&#x2F;3_CUDA_Features 包含多个 tensor core 实例</li>\n<li><code>Samples/3_CUDA_Features/cudaTensorCoreGemm</code>比<code>Samples/0_Introduction/matrixMul</code> 计算性能高很多<ul>\n<li>cudaTensorCoreGemm 测试的是 fp16 性能</li>\n</ul>\n</li>\n<li>cublas 满足特定条件才会使用 tensor core <a href=\"https://docs.nvidia.com/cuda/cublas/index.html#tensor-core-usage\">link</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc\">Tensor Core Requirements</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1893665\">FP32 vs TF32</a><ul>\n<li>tf32 整数部分精度与 fp32 相同，小数部分与 fp16 相同， 只用了 19 位</li>\n<li>包含 Amphere 架构性能</li>\n<li>A100、H100 tf32 算力比 fp32 算力高 8 倍左右</li>\n<li>3090 上 tf32 算力跟 fp32 算力相同</li>\n<li>最新 trtexec 默认是 tf32，注意和 python fp32 计算比较时结果误差可能较大</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"wmma-vs-mma\"><a href=\"#wmma-vs-mma\" class=\"headerlink\" title=\"wmma vs mma\"></a>wmma vs mma</h2><ol>\n<li><a href=\"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-multiply-accumulate-instructions\">warp-level-matrix-multiply-accumulate-instructions</a></li>\n</ol>\n<h3 id=\"tenosr-core-和-cuda-core\"><a href=\"#tenosr-core-和-cuda-core\" class=\"headerlink\" title=\"tenosr core 和 cuda core\"></a>tenosr core 和 cuda core</h3><ol>\n<li>计算层级：CUDA Core 是线程级别，Tensor Core 是 warp 级别</li>\n<li>计算维度：CUDA Core 是一维逐点计算，Tensor Core 是二维逐 tile 计算</li>\n<li>CUDA Core 是为通用计算设计，而 Tensor Core 是为特定类型的计算（主要是深度学习中的矩阵运算）优化。</li>\n<li>在 NVIDIA 的某些 GPU 架构中，例如 Volta、Turing 和 Ampere，CUDA Core 和 Tensor Core 共同存在。它们可以根据计算任务的性质协同工作，提高整体的计算效率。</li>\n<li>在执行深度学习任务时，Tensor Core 可以显著加速计算过程，相较于仅使用 CUDA Core，能实现更快的训练和推理速度。</li>\n<li>RT core 用于光线追踪</li>\n<li>芯片手册中有 cuda core 算力和 tensor core 算力</li>\n<li>利用 tensor core 才能达到最大算力</li>\n</ol>\n<h2 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h2><ol>\n<li><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#application-compatibility\">application-compatibility</a></li>\n<li><code>-arch=sm_70</code> is a shorthand for <code>-arch=compute_70 -code=compute_70,sm_70</code> (which is the same as <code>-gencode arch=compute_70,code=\\&quot;compute_70,sm_70\\&quot;</code>)</li>\n<li><a href=\"https://developer.nvidia.com/cuda-gpus\">Your GPU Compute Capability</a> 包含各种 gpu arch</li>\n</ol>\n<h2 id=\"cuda-samples\"><a href=\"#cuda-samples\" class=\"headerlink\" title=\"cuda samples\"></a><a href=\"https://github.com/NVIDIA/cuda-samples\">cuda samples</a></h2><ol>\n<li>可以全部 sample 一起编译</li>\n<li><code>cuobjdump -all  ./matrixMulDrv</code>可以看可执行程序 arch 等信息</li>\n<li><code>make SMS=&quot;86&quot;</code>选择 arch</li>\n<li><code>make dbg=1</code> debug 编译</li>\n<li><code>Samples/1_Utilities/bandwidthTest</code> 可以查看 host &lt;-&gt; memory 之间传输速度</li>\n<li>(good)<code>Samples/1_Utilities/deviceQuery</code> 可以查看设备信息, 包含 arch 信息, 多少 sm，每个 sm 多少 cuda core</li>\n<li>11.6 之后代码放在 github 上</li>\n<li><a href=\"https://cuda-tutorial.readthedocs.io/en/latest/tutorials/tutorial01/\">hello world</a></li>\n<li><code>/usr/local/cuda-11.4/samples</code> tree -L 2</li>\n<li><code>/usr/local/cuda-10.2/samples/0_Simple/vectorAdd</code></li>\n<li><code>nvprof ./vectorAdd</code> 查看 kenerl 耗时</li>\n</ol>\n<h2 id=\"CUDALibrarySamples\"><a href=\"#CUDALibrarySamples\" class=\"headerlink\" title=\"CUDALibrarySamples\"></a><a href=\"https://github.com/NVIDIA/CUDALibrarySamples\">CUDALibrarySamples</a></h2><ol>\n<li>cublas</li>\n<li>cutlass</li>\n<li>npp</li>\n</ol>\n<h3 id=\"cuda-info\"><a href=\"#cuda-info\" class=\"headerlink\" title=\"cuda info\"></a>cuda info</h3><ol>\n<li><a href=\"https://linuxconfig.org/how-to-get-cuda-cores-count-on-linux\">查看 cuda core</a><br><code>cd /usr/local/cuda-11.4/samples/1_Utilities/deviceQuery &amp;&amp; make &amp;&amp; ./deviceQuery</code></li>\n<li>bandwith test<br><code>cd /usr/local/cuda-11.4/samples/1_Utilities/bandwidthTest &amp;&amp; make &amp;&amp; ./bandwidthTest</code></li>\n</ol>\n<h2 id=\"NVIDIA-Developer-Tools\"><a href=\"#NVIDIA-Developer-Tools\" class=\"headerlink\" title=\"NVIDIA Developer Tools\"></a><a href=\"https://developer.nvidia.com/tools-overview\">NVIDIA Developer Tools</a></h2><ol>\n<li>各工具关系<br><img src=\"https://i.ibb.co/2qN87rv/QVJcq2r-QQ3.png\" alt=\"tools\"></li>\n</ol>\n<h3 id=\"nsight-system\"><a href=\"#nsight-system\" class=\"headerlink\" title=\"nsight system\"></a>nsight system</h3><ol>\n<li><a href=\"https://developer.nvidia.com/nsight-systems/get-started\">cuda toolkit 不自带 需要下载安装</a><ul>\n<li>wget 下载 linux CLI Only deb, dpkg 安装</li>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/InstallationGuide/index.html#package-manager-installation\">package-manager-installation</a><ul>\n<li>apt install</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>viztracer + nsys + ncu + nvtx 分析性能瓶颈</li>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/UserGuide/index.html#python-profiling\">nsight system python-profiling</a></li>\n<li>分析系统性能， help you to pinpoint performance issues and identify optimization opportunities; 帮助分析性能问题和识别优化机会<ul>\n<li>gpu kernel 运行时间太长</li>\n<li>某些 process cpu 处理时间太长</li>\n<li>cpu gpu pcie copy 耗时过大</li>\n</ul>\n</li>\n<li>GPU timeline 方便分析</li>\n<li>profiling 可以简单地分为粗粒度和细粒度。粗粒度主要是判断瓶颈是不是在 GPU 上，具体又是哪个 kernel，典型代表就是 nsight system 工具，会显示出整个程序的 timeline。可以从 timeline 上直接清晰明了地看到瓶颈是在 CPU 还是 GPU，如果是 GPU，那又是在 GPU 的哪个 kernel 上。</li>\n<li>如果是 timeline 中 GPU kernel 的占比很小，CPU 占比很大，那说明瓶颈在 CPU 侧，需要注意是不是数据读取花了太多时间。如果 GPU kernel 的占比很大，说明瓶颈在 GPU 侧，需要重点花精力去优化 GPU kernel 实现。还有一种情况是，如果数据一直放在 GPU 上，但是 kernel 的时间占比不是特别多，那可能是因为 kernel 本身不太耗时，可能只运行了 4us。但 kernel lauch 就花了 6us。这个时间就要想着采用 kernel fusion 的方式，尽可能地在一个 kernel 里面多干点活。</li>\n<li>点击时注意竖线上的小三角号, 表示关联</li>\n<li>从结果分析看多个 stream 下 kernel 可以同时运行<ul>\n<li>all stream 或者 kernels 显示不出所有的 kernel 运行，起始位置被其他 kernel 覆盖的检测不出来</li>\n<li>all stream 显示不出的 kernel 可能在被隐藏的 stream 里，鼠标放到 kernel 上能显示出在第几个 stream</li>\n</ul>\n</li>\n<li><code>enqueue</code>异步接口没有很快返回的原因：<ul>\n<li>nsight system 上看 tensorrt node 调用， 对应 cuda api 里有 cudaStreamSync()函数， 会阻塞 cpu 导致 enqueue 不返回</li>\n<li>有多个 stream sync, 每个 stream sync 执行之后之前通过 cuda api 调用的 kernel 都已执行完</li>\n<li>为什么要多个 stream？node 不相关可以并行加速, 可以看到 kernel 执行时间有并行， 为什么要 sync? 后面的节点需要前面的节点都执行完，有关联</li>\n<li>点击 tensorrt 下的 node 可以看到 node 执行信息</li>\n</ul>\n</li>\n<li>打开文件注意生成 log 时的错误</li>\n<li>gui 可以远程 profiling， 将 nsys 安装到 target 机器, 类似 compute<ul>\n<li><code>~/.local/share/nsight_systems/nsys</code>安装路径</li>\n</ul>\n</li>\n<li><code>nsys profile</code> 类似 perf record 来记录信息<ul>\n<li><code>nsys profile --trace=cuda --gpu-metrics-device all</code></li>\n</ul>\n</li>\n<li><code>--trace</code> 可以看看参数：cuda,nvtx, cudnn, python-gil …</li>\n<li><code>nsys status --all</code>打印 nsys 支持的状态，比如是否支持采集 cpu 信息</li>\n<li>nsys stats 类似 perf stats 来查看统计信息<ul>\n<li><code>nsys stats report1.nsys-rep</code></li>\n<li><code>nsys stats --report cuda_gpu_trace report1.nsys-rep</code></li>\n</ul>\n</li>\n<li>gui summary 里可以看 log 具体执行命令</li>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/UserGuide/index.html#python-profiling\">python-profiling</a><ul>\n<li>Python Sampling requires Python version 3.9 or later. Python Sampling is therefore disabled.</li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/UserGuide/index.html#cuda-trace\">跟踪 cuda</a><ul>\n<li><code>--trace=cuda</code></li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/UserGuide/index.html#gpu-metrics\">可以收集 gpu-metrics</a><ul>\n<li>Is my GPU idle?</li>\n<li>Is my GPU full? Enough kernel grids size and streams? Are my SMs and warp slots full?</li>\n<li>Am I using TensorCores?</li>\n<li>Is my instruction rate high?</li>\n<li>Am I possibly blocked on IO, or number of warps, etc</li>\n</ul>\n</li>\n<li>分析系统性能</li>\n<li><code>nvprof</code> 旧版本</li>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/UserGuide/index.html\">user guide</a></li>\n<li>NsightSystems-2023.2.1.122-3259852.msi 安装包</li>\n<li>Nsight_Systems_User_Guide_2023.2.1.122-3259852.pdf 文档</li>\n<li>鼠标放到 kernel 上有 kernel 详细信息，<ul>\n<li>24.5.1 版本之后点击 kernel，可以在左侧(蓝边)找到关联的事项，如 cuda 调用对应的 kernel</li>\n<li>包括执行时间</li>\n<li>latency：launch latency, 与执行时间不一样，latency 是 api 调用到 kernel 开始执行时间<ul>\n<li><a href=\"https://forums.developer.nvidia.com/t/nsys-timeline-end-start-is-not-the-same-as-latency/238043\">NSys Timeline: End - Start is not the same as latency</a></li>\n<li>CUDA kernel launch latency could be defined as the time range from the beginning of the launch API call to the beginning of the kernel execution.</li>\n<li>执行的是 <code>cudaStreamSynchronize</code>, 没执行这个函数之前，stream 中的 kernel 不会 launch</li>\n</ul>\n</li>\n<li>gird, block 设置;(注意，同一个 stream 下相同函数调用可能设置不一样导致时间不同)</li>\n<li>一个线程用多少 register</li>\n<li>理论 occupancy, 打开 gpu metrics 可以看对应的实际 occupancy</li>\n<li>注意各种颜色</li>\n</ul>\n</li>\n<li>可以在 thread 上看到 <code>cpu call stack</code><ul>\n<li>每个线程对应行分层的最后一层 <code>sampling point</code></li>\n<li>gpu 空闲时看 CPU 采样点 可以知道 CPU 在干啥</li>\n<li>是否可以生成火焰图？</li>\n</ul>\n</li>\n<li>timeline 上点击 stream 下的 tensorrt node， 可以显示对应的 kernel 执行和 cuda api 调用时间点, 注意竖线上的小三角号</li>\n<li>tensorrt 多个维度来看<ul>\n<li>thread</li>\n<li>stream</li>\n<li>cuda</li>\n</ul>\n</li>\n<li>左上角 timeline view 可以选择 analysis summary，有各种总结</li>\n<li>左侧右键选<code>show in events view</code>， 可以看具体时间, 可以在 all 上操作，看所有 event 运行时间</li>\n<li>右键 reset room 显示全部</li>\n<li><code>shift + mouseleftdoubleclick</code> timeline 可以找到对应 event 在 event view 位置, 刚打开时可以按 name 排序，会看到相关算子集中到一起，再按其他指标排序会混乱</li>\n<li><code>ctrl + mouseleftdoubleclick</code> timeline 可以 fit to screen</li>\n<li><code>backspace</code> timeline 可以 undo room</li>\n<li><code>ctrl + mouseleftdoubleclick</code> 可以找到 event view 对应的 timeline 位置</li>\n<li><code>sudo nsys profile &lt;app&gt;</code></li>\n<li><code>nsys stats report1.nsys-rep</code> 输出各种 report</li>\n<li>可以看 cpu 执行情况， tensort 可以看详细算子耗时，也有对应 cuda 执行情况</li>\n<li>analysis summary 中有各个线程的 cpu 利用率总结</li>\n<li>可以关注 cpu 空闲的地方，为什么会空闲(同步数据？)</li>\n<li>可以缩小看颜色占比，关注占比大的模块</li>\n<li>cudaMemcpy 会阻塞 cpu 执行， 可以多注意 cudaMemcpy 影响</li>\n<li>cudaStreamSynchronize 是 CUDA API 中的一个函数，用于等待指定的 CUDA 流上的所有 CUDA 核函数执行完毕。当 CUDA 核函数被执行时，它们会被添加到一个 CUDA 流中，这些核函数的执行可能是异步的，也可能是同步的，具体取决于如何在代码中调用它们。当我们调用 cudaStreamSynchronize 时，它将会阻塞当前 CPU 线程，直到指定的流上的所有核函数都执行完毕。</li>\n</ol>\n<h3 id=\"nsight-compute\"><a href=\"#nsight-compute\" class=\"headerlink\" title=\"nsight compute\"></a>nsight compute</h3><ol>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/UserGuide/index.html#enable-docker-collection\">enable-docker-collection</a></li>\n<li><a href=\"https://developer.nvidia.com/nsight-compute\">cudatoolkit 自带</a></li>\n<li><code>balance throughput</code> compute and memory throughput are near; 平衡比较重要，不平衡时说明使用率较高的是瓶颈</li>\n<li>Both SM (Compute) and Memory SOL report the categories’ throughput as the achieved percentage of utilization with respect to the theoretical maximum, i.e. the “Speed Of Light”. Both metrics are composed of sub-metrics, with the respective highest contributor defining the resulting value. The Breakdown tables below the chart can be used to identify all such contributors and their values. SM（计算）和内存 SOL 都将类别的吞吐量报告为相对于理论最大值（即“speed of light”）所实现的利用率百分比</li>\n<li>SOL(speed of light): 相对于理论最大值的比例</li>\n<li>有开销 <a href=\"https://docs.nvidia.com/nsight-compute/2023.3/ProfilingGuide/index.html#overhead\">overhead</a></li>\n<li><code>metrics</code> 是指性能指标，这些指标用于衡量 CUDA 应用程序的性能和行为。性能指标可以包括各种硬件级别的统计数据，如内存访问效率、计算操作的执行时间、流处理器（SM）的利用率、寄存器使用情况、分支效率等等。</li>\n<li><a href=\"https://developer.nvidia.com/nvidia-development-tools-solutions-err_nvgpuctrperm-permission-issue-performance-counters\">permission 问题</a><ul>\n<li>可以增加临时权限</li>\n</ul>\n</li>\n<li>分析 kernel 性能, 可以选 kernel</li>\n<li>NVIDIA Nsight Compute is an interactive kernel profiler for CUDA applications. It provides detailed performance metrics and API debugging via a user interface and command line tool. In addition, its baseline feature allows users to compare results within the tool. NVIDIA Nsight Compute provides a customizable and data-driven user interface and metric collection and can be extended with analysis scripts for post-processing results.</li>\n<li>需要 windows 客户端通过 connect 将 ncu 送到开发环境<ul>\n<li>可以通过 activity 复制命令到板端执行</li>\n<li>metrics 可以选择 Sets 和 rules</li>\n</ul>\n</li>\n<li>profile -&gt; metrics details<ul>\n<li>点击统计界面某个 metrics 可以看 metrics 详细信息</li>\n</ul>\n</li>\n<li><code>--import-source yes --source-folders ./</code> 导入 source</li>\n<li><code>ncu --replay-mode application --set full  ./preprocess</code> 详细信息显示到命令行<ul>\n<li>Duration 为 kernel 执行时间</li>\n</ul>\n</li>\n<li><code>ncu -k matrixMul --print-summary per-gpu ./test</code> 查看某个 kernel 信息</li>\n<li><code>/tmp/var/target/linux-desktop-glibc_2_11_3-x64/ncu --config-file off --export &quot;/tmp/var/test&quot; --force-overwrite --section-folder /tmp/var/sections --set full ./test</code></li>\n<li><code>ncu --set full -f --export nsight_compute ./test</code></li>\n<li><code>docker run -itd -v /mnt:/mnt -p 30022:22 --user root --gpus all --name=Ubuntu20.04-CUDA-admin --shm-size 2g --cap-add=SYS_ADMIN nvidia/cuda:11.4.3-cudnn8-devel-ubuntu20.04</code> 尽量使用官方 docker<ul>\n<li>需要 <code>--gpus all --cap-add=SYS_ADMIN</code></li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/index.html\">nsight-compute docs</a><ul>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html\">ProfilingGuide</a></li>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/NsightCompute/index.html\">user manual</a></li>\n</ul>\n</li>\n<li>左上角可以显示：<ul>\n<li>session: gpu cpu 等信息</li>\n<li>detailed：overview, compute, memory 等</li>\n<li>source: 汇编代码及耗时</li>\n<li>summary: 耗时，compute and memory throughput; 底下有优化建议</li>\n</ul>\n</li>\n<li>可以添加 baseline，对比多次结果, 分析结果变化</li>\n<li><code>ncu --set roofline</code>可以测量详细 roofline</li>\n<li><code>ncu --metrics smsp__inst_executed.sum ./matrixMul</code> 打印 metrics</li>\n<li><code>--set roofline</code>能看到 tensor core roofline; 例如运行<code>cuda-samples/Samples/3_CUDA_Features/cudaTensorCoreGemm</code></li>\n</ol>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ol>\n<li>The application returned an error code (9).<ul>\n<li><code>ncu --replay-mode &lt;application/kernel&gt;</code> 加参数； 见<a href=\"https://forums.developer.nvidia.com/t/nsight-profiling-crashes-with-error-code-9/230094/5\">link</a></li>\n<li>可以使用<code>–replay-mode application</code>切换到应用程序重播。 这避免了内存存储需要重放。</li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/2023.3/ProfilingGuide/index.html#replay\">replay</a><ul>\n<li>kernels might need to be replayed one or more times, since not all metrics can be collected in a single pass</li>\n<li>the number of metrics originating from hardware (HW) performance counters that the GPU can collect at the same time is limited.</li>\n<li>kernal replay 只重跑 kernel, application replay 重跑应用</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"metrics\"><a href=\"#metrics\" class=\"headerlink\" title=\"metrics\"></a><a href=\"https://docs.nvidia.com/nsight-compute/2023.3/ProfilingGuide/index.html#metrics-guide\">metrics</a></h4><ol>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/2023.3/ProfilingGuide/index.html#metrics-reference\">metrics-reference</a></li>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/2019.5/NsightComputeCli/index.html#nvprof-metric-comparison\">nvprof-metric-comparison</a></li>\n<li><code>ncu --devices 0 --query-metrics &gt;my_metrics.txt</code> 查看 metrics</li>\n</ol>\n<h4 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h4><ol>\n<li>每项下面会有建议</li>\n<li>compute 分析延迟很关键 目标是计算要掩盖延迟; 分析 stall 原因，stall 就是 warp 闲着</li>\n<li>避免 bank 冲突能解决指令的延迟</li>\n<li>overview(GPU speed of light throughput)<ul>\n<li><code>用于查看计算和内存吞吐对理论值的占比以及roofline</code></li>\n<li>High-level overview of the <code>throughput for compute and memory</code> resources of the GPU 主要关注计算和内存</li>\n<li>Achieved compute throughput and&#x2F;or memory bandwidth below 60.0% of peak typically indicate latency issues.</li>\n<li>低于 60% 表明有延迟问题, 例如：指令有延迟，可以看 scheduler statistics 和 warp state statistics 进一步分析;延迟问题可能是由于 occupancy 较低， 也可能是指令执行延迟太大，无法隐藏;</li>\n<li>roofline</li>\n</ul>\n</li>\n<li>comupte workload<ul>\n<li><code>用于分析 SM 计算资源使用情况</code></li>\n<li>IPC</li>\n<li>指令执行占比</li>\n<li>LSU: load store unit</li>\n</ul>\n</li>\n<li>memory workload<ul>\n<li><code>用于分析 GPU memory 使用情况</code></li>\n<li>可以选择看 transfer size 和 throughput</li>\n<li>要提升 cache 命中率</li>\n<li>多用 shared memory(可作为中间结果)</li>\n<li>多种 memory<ul>\n<li>global</li>\n<li>local: 线程私有的。local memory 不是物理空间，而是 global memory 的一部分，所以延时较大。</li>\n<li>texture: 只读?</li>\n<li>surface</li>\n<li>load global stroe shared</li>\n<li>shared</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>scheduler statistics<ul>\n<li><code>用于分析每个 scheduler active, eligible, issue warp 情况</code></li>\n<li>Issued Warp Per Scheduler: 平均每个 cycle 发射的 warp 数</li>\n<li>On cycles with no eligible warps, the issue slot is skipped and no instruction is issued. Having many skipped issue slots indicates poor latency hiding.</li>\n<li>Out of the maximum of 12 warps per scheduler(Ampere 1 个 SM 有 4 个 scheduler), this kernel allocates an average of 2.00 active warps per scheduler, but only an average of 0.07 warps were eligible(合格的) per cycle.</li>\n<li>可以看出平局每个 sm 有几个 warps; 参考可以看 Theoretical Occupancy 是多少，有可能受 regitster 和 shared memory 等限制</li>\n<li>Eligible warps are the subset of active warps that are ready to issue their next instruction.</li>\n</ul>\n</li>\n<li>warp state statistics<ul>\n<li><code>用于分析 warp stall 原因</code></li>\n<li>Check the Warp Stall Sampling (source counters 中) table for the top stall locations in your source based on sampling data. 查看 stalll source 位置</li>\n<li>statll 解决办法： Try to increase the number of active warps to hide the existent latency or try changing the instruction mix to utilize all available pipelines in a more balanced way.</li>\n<li>The warp cycles per instruction define the latency between two consecutive instructions. 每条指令的 warp 周期定义两个连续指令之间的延迟</li>\n<li>可以查看两个 warp instruction 之间 cyles 组成： stall math pipe throttle, stall mio throttle;</li>\n</ul>\n</li>\n<li>instructions statistics<ul>\n<li><code>用于查看指令的类型和执行次数</code></li>\n<li>Statistics of the executed low-level assembly instructions (SASS). SASS 指令统计</li>\n<li>统计执行的指令数，可以看出哪些指令执行的较多</li>\n</ul>\n</li>\n<li>launch statistics<ul>\n<li><code>用于查看 grid, block 设置和 register, shared memory 使用情况</code></li>\n</ul>\n</li>\n<li>occupancy<ul>\n<li><code>用于查看occupancy情况及限制原因</code></li>\n<li>Occupancy is the ratio of the number of active warps per multiprocessor to the maximum number of possible active warps.</li>\n<li>可以看出理论占用率及不能到 100%的原因</li>\n<li>一个 warp 中用太多 register 和 shared memory 会影响 Occupancy， Occupancy 会影响 scheduler， 进而会影响延迟隐藏</li>\n<li>Occupancy 是 CUDA 编程中一个重要的性能指标,它表示 GPU 中 Streaming Multiprocessor (SM)上的处理单元被运用的比例。</li>\n<li>右上角点开 table，可以可视化</li>\n</ul>\n</li>\n<li>source counters<ul>\n<li><code>用于分析分支指令是否有影响，是否合并访存</code></li>\n<li>Source metrics, including branch efficiency and sampled warp stall reasons.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"NVTX\"><a href=\"#NVTX\" class=\"headerlink\" title=\"NVTX\"></a>NVTX</h3><ol>\n<li><a href=\"https://github.com/karpathy/llm.c/blob/2ddf128365773670ceb4e76ab7b04ab671edda64/llmc/cuda_common.h#L108-L117\">(good)llm.c nvtx 使用</a></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NvtxRange</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">NvtxRange</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* s) &#123; <span class=\"built_in\">nvtxRangePush</span>(s); &#125;</span><br><span class=\"line\">    <span class=\"built_in\">NvtxRange</span>(<span class=\"type\">const</span> std::string&amp; base_str, <span class=\"type\">int</span> number) &#123;</span><br><span class=\"line\">        std::string range_string = base_str + <span class=\"string\">&quot; &quot;</span> + std::<span class=\"built_in\">to_string</span>(number);</span><br><span class=\"line\">        <span class=\"built_in\">nvtxRangePush</span>(range_string.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">NvtxRange</span>() &#123; <span class=\"built_in\">nvtxRangePop</span>(); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NVTX_RANGE_FN() NvtxRange nvtx_range(__FUNCTION__)</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>和 nsight system, viztracer 一起非常好用</li>\n<li><a href=\"https://nvtx.readthedocs.io/en/latest/\">doc</a><ul>\n<li>Annotate code ranges and events in Python 在 Python 中注释代码范围和事件</li>\n</ul>\n</li>\n<li>sample</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@nvtx.annotate()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_func</span>():</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> nvtx.annotate(<span class=\"string\">&quot;for_loop&quot;</span>, color=<span class=\"string\">&quot;green&quot;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        sleep_for(i)</span><br><span class=\"line\">        my_func()</span><br><span class=\"line\"></span><br><span class=\"line\">rng = nvtx.start_range(message=<span class=\"string\">&quot;my_message&quot;</span>, color=<span class=\"string\">&quot;blue&quot;</span>, domain=<span class=\"string\">&quot;rng&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># ... do something ... #</span></span><br><span class=\"line\">nvtx.end_range(rng)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://developer.nvidia.com/blog/nvidia-tools-extension-api-nvtx-annotation-tool-for-profiling-code-in-python-and-c-c/\">NVIDIA Tools Extension API: An Annotation Tool for Profiling Code in Python and C&#x2F;C++</a></li>\n</ol>\n<h3 id=\"cupti\"><a href=\"#cupti\" class=\"headerlink\" title=\"cupti\"></a><a href=\"https://developer.nvidia.com/cupti\">cupti</a></h3><h3 id=\"nsgiht-graphics\"><a href=\"#nsgiht-graphics\" class=\"headerlink\" title=\"nsgiht graphics\"></a>nsgiht graphics</h3><h2 id=\"cuda-debug\"><a href=\"#cuda-debug\" class=\"headerlink\" title=\"cuda-debug\"></a><a href=\"https://docs.nvidia.com/nsight-visual-studio-code-edition/cuda-debugger/index.html\">cuda-debug</a></h2><ol>\n<li><a href=\"https://github.com/NVIDIA/cutlass/tree/main/examples/02_dump_reg_shmem\">02_dump_reg_shmem</a><ul>\n<li>dump_shmem</li>\n<li>dump_fragment</li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/cuda/cuda-gdb/index.html#compiling-the-application\">compiling 要求</a><ul>\n<li><code>nvcc -g -G foo.cu -o foo</code></li>\n</ul>\n</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=NVIDIA.nsight-vscode-edition\">vs code plugin: nsight-vscode-edition</a></li>\n<li>shared memory(L1 cache?) dump<ul>\n<li>申请 shared memory 变量，存中间结果， shared memory 对 block 全局可见。</li>\n<li>可以申请多于 L1 cache 大小的存储，系统会自动调度</li>\n</ul>\n</li>\n<li>传递主存指针到 kernel，用于 dump</li>\n<li>print<ul>\n<li><code>if(threadIdx.x == 0) printf...</code> 条件打印</li>\n<li>cudaDeviceReset(); 不打印可以加</li>\n</ul>\n</li>\n<li><a href=\"https://developer.nvidia.com/nsight-visual-studio-code-edition\">nsight-visual-studio-code-edition</a></li>\n<li>cuda-gdb<ul>\n<li><a href=\"https://forums.developer.nvidia.com/t/cant-use-cuda-gdb/235380/4\">Can’t use Cuda-gdb</a></li>\n<li><a href=\"https://stackoverflow.com/a/46676907/23011500\">Error disabling address space randomization</a></li>\n</ul>\n</li>\n<li>cuda-memcheck</li>\n</ol>\n<h2 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h2><ol>\n<li><a href=\"https://developer.nvidia.com/cuda-zone\">cuda 相关开发</a></li>\n<li><a href=\"https://developer.nvidia.com/gpu-accelerated-libraries\">gpu-accelerated-libraries</a></li>\n</ol>\n<h2 id=\"build-1\"><a href=\"#build-1\" class=\"headerlink\" title=\"build\"></a>build</h2><h3 id=\"cmake\"><a href=\"#cmake\" class=\"headerlink\" title=\"cmake\"></a>cmake</h3><ol>\n<li><a href=\"https://developer.download.nvidia.com/video/gputechconf/gtc/2019/presentation/s9444-build-systems-exploring-modern-cmake-cuda-v2.pdf\">build-systems-exploring-modern-cmake-cuda-v2.pdf</a></li>\n<li><a href=\"https://developer.nvidia.com/blog/building-cuda-applications-cmake/\">building-cuda-applications-cmake</a></li>\n<li><a href=\"https://github.com/NVIDIA/CUDALibrarySamples/blob/master/cuBLAS/Level-3/gemm/CMakeLists.txt\">CUDALibrarySamples</a></li>\n<li>basic sample</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.8</span>)</span><br><span class=\"line\"><span class=\"comment\"># project(my_cuda_project LANGUAGES CXX CUDA)</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(my_cuda_project)</span><br><span class=\"line\"><span class=\"keyword\">enable_language</span>(CUDA) <span class=\"comment\"># 需要enable language</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(preprocess kernel.cu preprocess.cpp )</span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(CUDA REQUIRED)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(preprocess <span class=\"variable\">$&#123;CUDA_cudart_LIBRARY&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h3><ol>\n<li>混合编译, 注意-lcudart 顺序</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvcc -O3 -c kernel.cu -o kernel.o</span><br><span class=\"line\">g++ -L /usr/local/cuda/targets/x86_64-linux/lib/ preprocess.cpp kernel.o -o preprocess -lcuda -lcudart &amp;&amp; ./preprocess</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unified-memory\"><a href=\"#unified-memory\" class=\"headerlink\" title=\"unified memory\"></a>unified memory</h2><ol>\n<li>不明白原理时不推荐使用</li>\n<li>优缺点<ul>\n<li>优点<ul>\n<li>简化代码编写和内存管理：cudaMallocManaged 可以简化 CPU 和 GPU 之间数据传递的代码，无需手动管理内存迁移。</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>可能降低性能：在某些情况下，统一内存可能会降低性能，例如在数据访问模式为稀疏的情况下。</li>\n<li>可能增加内存占用：统一内存可能会增加内存占用，因为它需要在 CPU 和 GPU 内存中都保留一份数据副本。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>cudaMalloc -&gt; cudaMallocManaged(&amp;x, N*sizeof(float));</code></li>\n<li><a href=\"https://stackoverflow.com/a/21990899/23011500\">使用 cudaMallocManaged 情况</a><ul>\n<li>You are working on a Jetson device.</li>\n</ul>\n</li>\n<li>runtime 负责 copy</li>\n<li>unified memory cpu 访问时需要同一个线程。不同线程会 bus error。</li>\n<li><a href=\"https://developer.nvidia.com/blog/unified-memory-cuda-beginners/\">Unified Memory for CUDA Beginners</a></li>\n<li><a href=\"https://developer.nvidia.com/blog/maximizing-unified-memory-performance-cuda/\">Maximizing Unified Memory Performance in CUDA</a></li>\n</ol>\n<h2 id=\"design\"><a href=\"#design\" class=\"headerlink\" title=\"design\"></a>design</h2><ol>\n<li>lidar prprocess; 三重 for, 最外层作为 x, 一个线程执行一个最里面 for 的内容，</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TransposeDim</span><span class=\"params\">(<span class=\"type\">int</span> kmax_num_point_pillar,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                   <span class=\"type\">int</span> kmax_num_point,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                   <span class=\"type\">int</span> kdim,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                   <span class=\"type\">int</span> voxel_num, <span class=\"type\">float</span> *voxel_data, <span class=\"type\">int8_t</span> *features_s8)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> kWC = kmax_num_point_pillar * kdim;</span><br><span class=\"line\">  <span class=\"type\">int</span> kHW = kmax_num_point * kmax_num_point_pillar;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = <span class=\"number\">0</span>; c &lt; kdim; ++c)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> w = <span class=\"number\">0</span>; w &lt; kmax_num_point_pillar; ++w)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> h = <span class=\"number\">0</span>; h &lt; voxel_num; ++h)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> old_index = h * kWC + w * kdim + c;</span><br><span class=\"line\">        <span class=\"type\">int</span> new_index = c * kHW + w * kmax_num_point + h;</span><br><span class=\"line\">        <span class=\"type\">float</span> features_tmp = <span class=\"built_in\">round</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(voxel_data[old_index]));</span><br><span class=\"line\">        features_tmp = std::<span class=\"built_in\">min</span>(std::<span class=\"built_in\">max</span>(features_tmp, <span class=\"number\">-128.f</span>), <span class=\"number\">127.f</span>);</span><br><span class=\"line\">        features_s8[new_index] = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int8_t</span>&gt;(features_tmp);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">__global__ <span class=\"type\">void</span> <span class=\"title\">TransposeDim5Kernel</span><span class=\"params\">(<span class=\"type\">int</span> kmax_num_point_pillar,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"type\">int</span> kmax_num_point,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"type\">int</span> kdim,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"type\">int</span> voxel_num,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"type\">float</span> *voxel_data,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                    <span class=\"type\">int8_t</span> *features_s8)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> c = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class=\"line\">  <span class=\"type\">int</span> w = blockIdx.y * blockDim.y + threadIdx.y;</span><br><span class=\"line\">  <span class=\"type\">int</span> h = blockIdx.z * blockDim.z + threadIdx.z;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c &lt; kdim &amp;&amp; w &lt; kmax_num_point_pillar &amp;&amp; h &lt; voxel_num)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> kWC = kmax_num_point_pillar * kdim;</span><br><span class=\"line\">    <span class=\"type\">int</span> kHW = kmax_num_point * kmax_num_point_pillar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> old_index = h * kWC + w * kdim + c;</span><br><span class=\"line\">    <span class=\"type\">int</span> new_index = c * kHW + w * kmax_num_point + h;</span><br><span class=\"line\">    <span class=\"type\">float</span> features_tmp = <span class=\"built_in\">round</span>(voxel_data[old_index]);</span><br><span class=\"line\"></span><br><span class=\"line\">    features_tmp = <span class=\"built_in\">fmaxf</span>(<span class=\"built_in\">fminf</span>(features_tmp, <span class=\"number\">127.f</span>), <span class=\"number\">-128.f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    features_s8[new_index] = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int8_t</span>&gt;(features_tmp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">dim3 <span class=\"title\">blockSize</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">32</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">dim3 <span class=\"title\">gridSize</span><span class=\"params\">((kdim + blockSize.x - <span class=\"number\">1</span>) / blockSize.x,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                (kmax_num_point_pillar + blockSize.y - <span class=\"number\">1</span>) / blockSize.y,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                (voxel_num + blockSize.z - <span class=\"number\">1</span>) / blockSize.z)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">TransposeDim5Kernel&lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;(kmax_num_point_pillar,</span><br><span class=\"line\">                                               kmax_num_point,</span><br><span class=\"line\">                                               kdim,</span><br><span class=\"line\">                                               voxel_num,</span><br><span class=\"line\">                                               d_voxel_data,</span><br><span class=\"line\">                                               d_features_s8);</span><br></pre></td></tr></table></figure>\n","categories":["Program","Cuda"],"tags":["Cuda"]},{"title":"GPU","url":"/2023/10/07/GPU/","content":"<h2 id=\"DLA-Deep-Learning-Accelerator-。\"><a href=\"#DLA-Deep-Learning-Accelerator-。\" class=\"headerlink\" title=\"DLA (Deep Learning Accelerator)。\"></a>DLA (Deep Learning Accelerator)。</h2><ol>\n<li>NVIDIA DLA 是一个专门设计的硬件加速器，用于加速深度学习推断在边缘设备上的性能。DLA 被设计为与 NVIDIA 的 Jetson 平台（例如 Jetson AGX Xavier、Jetson Xavier NX 等）一同工作，这些平台主要用于嵌入式和边缘计算应用。</li>\n<li><code>专为推断优化</code>：与训练深度学习模型的 GPU 不同，DLA 专门针对推断进行了优化，使其能够在功耗有限的边缘设备上高效运行。</li>\n<li><code>集成与Jetson平台</code>：DLA 被集成到了某些 NVIDIA Jetson 模块中，提供了与 GPU 和 CPU 协同工作的能力，以实现多任务处理。</li>\n<li><code>低功耗</code>：DLA 的设计重点是在保持低功耗的同时实现高效的推断处理，这对于需要长时间运行但电源有限的嵌入式应用非常重要。</li>\n<li><code>支持多种网络</code>：DLA 支持多种流行的深度学习模型和框架，使开发者能够灵活地部署各种应用。</li>\n<li><code>TensorRT兼容</code>：NVIDIA 的 TensorRT 是一个用于优化深度学习模型的推断的 SDK，它可以与 DLA 结合，进一步提高推断速度和效率。</li>\n</ol>\n"},{"title":"Gitlab-CI","url":"/2022/02/15/Gitlab-CI/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://lrita.github.io/2022/07/30/auto-clang-format-cpp-code/\">使用 clang-format 在 CI 中自动格式化 C++代码</a></li>\n</ol>\n<h2 id=\"badges\"><a href=\"#badges\" class=\"headerlink\" title=\"badges\"></a>badges</h2><ol>\n<li>显示 build 状态</li>\n<li><a href=\"https://www.benjaminrancourt.ca/what-are-gitlab-badges/\">what-are-gitlab-badges</a></li>\n</ol>\n<h2 id=\"format-check\"><a href=\"#format-check\" class=\"headerlink\" title=\"format check\"></a>format check</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">check-format:</span><br><span class=\"line\">  image:</span><br><span class=\"line\">    name: witekio/clang-format-checker</span><br><span class=\"line\">    entrypoint: [&quot;&quot;]</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - run-clang-format.py -r src</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a><a href=\"https://docs.gitlab.com/ee/ci/yaml/#includelocal\">include</a></h2><ol>\n<li>可以 include local file, private project and remote file。</li>\n</ol>\n<h2 id=\"release-artifacts\"><a href=\"#release-artifacts\" class=\"headerlink\" title=\"release artifacts\"></a><a href=\"https://gitlab.phigent.io/help/user/project/releases/index\">release artifacts</a></h2><ol>\n<li><a href=\"https://crypt.codemancers.com/posts/2021-08-31-release-artifacts-using-gitlab-cicd/#generating-the-artifacts\">release-artifacts-using-gitlab-cicd</a></li>\n<li><a href=\"https://gitlab.phigent.io/help/user/project/releases/index#use-a-generic-package-for-attaching-binaries\">gitlab release 和 artifactory 结合</a><ul>\n<li>notes: 注意 tag-name， ci 跑完之后会打 tag，然后又会运行 ci, 总共会跑两次</li>\n<li>不能缺少 tag-name， 使用 rules: - if: $CI_COMMIT_TAG, 只有打 tag 的时候才运行</li>\n<li><a href=\"https://kinsta.com/knowledgebase/401-error/\">401 error</a></li>\n</ul>\n</li>\n<li>删除 tag 就能删除 release 对应内容</li>\n<li>gitlab release comment 支持 markdown 和 mermaid</li>\n</ol>\n<h2 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a>pipeline</h2><ol>\n<li><a href=\"https://docs.gitlab.com/ee/ci/triggers/\">trigger other pipeline</a></li>\n<li>前面加 dot，可以隐藏 job <a href=\"https://docs.gitlab.com/ee/ci/jobs/#hide-jobs\">link</a></li>\n</ol>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a><a href=\"https://docs.gitlab.com/ee/ci/ssh_keys/\">ssh</a></h2><ol>\n<li>区分多种执行方式：<ul>\n<li>shell: 需要 runenr</li>\n<li>docker: 在 docker 下执行，不需要指定 runner</li>\n<li>ssh</li>\n</ul>\n</li>\n<li><a href=\"https://gitlab.com/gitlab-examples/ssh-private-key/-/blob/master/.gitlab-ci.yml\">example</a></li>\n<li><a href=\"https://gitlab.com/gitlab-examples/ssh-private-key/-/issues/1#note_48526556\">ssh-key 要求</a></li>\n<li>需要在 deploy 机器上生成 ssh， private key 作为变量传入配置中</li>\n<li>shell 需要在 runner 机器上秘钥对，把公钥复制到部署板子上 <code>ssh-copy-id -i ~/.ssh/id_rsa.pub xxx@xxx</code></li>\n</ol>\n<h2 id=\"runner\"><a href=\"#runner\" class=\"headerlink\" title=\"runner\"></a><a href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runners-section\">runner</a></h2><ol>\n<li>可以 reset token <a href=\"https://docs.gitlab.com/runner/commands/#gitlab-runner-reset-token\">link</a></li>\n<li>gitlab repo ci 配置可以显示安装 runner 命令</li>\n<li><a href=\"https://docs.gitlab.com/runner/commands/\">commands</a></li>\n<li><code>gitlab-ci-multi-runner list</code> list runners</li>\n<li><code>gitlab-ci-multi-runner status</code></li>\n<li><code>/etc/gitlab-runner/</code> 配置路径</li>\n<li>注册 project for runner:<ul>\n<li><code>gitlab-runner register</code></li>\n<li><code>gitlab-runner verify</code> 如果是感叹号执行这条命令</li>\n<li><code>gitlab-runner unregister --name test-runner</code> 删除 runner</li>\n</ul>\n</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#docker-in-docker-with-tls-enabled-in-the-docker-executor\">docker in docker</a></li>\n<li><a href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runnersdocker-section\">docker image param setting</a><ul>\n<li>需要再创建 runner 的时候设置</li>\n<li>&#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml 可以直接改传递参数</li>\n</ul>\n</li>\n<li>使用 <a href=\"https://docs.gitlab.com/ee/ci/runners/runners_scope.html\">shared runner</a>:<ul>\n<li>需要 admin 用户</li>\n<li>group 下默认有</li>\n</ul>\n</li>\n<li>Group runners:This project does not belong to a group and cannot make use of group runners. 只需要 group tocken 就好</li>\n</ol>\n<h2 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h2><ol>\n<li>所有 job 都执行</li>\n</ol>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">default:</span></span><br><span class=\"line\"><span class=\"symbol\">  before_script:</span></span><br><span class=\"line\">    - echo <span class=\"string\">&quot;Execute this script in all jobs that don&#x27;t already have a before_script section.&quot;</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">job1:</span></span><br><span class=\"line\"><span class=\"symbol\">  script:</span></span><br><span class=\"line\">    - echo <span class=\"string\">&quot;This script executes after the global before_script.&quot;</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">job:</span></span><br><span class=\"line\"><span class=\"symbol\">  before_script:</span></span><br><span class=\"line\">    - echo <span class=\"string\">&quot;Execute this script instead of the global before_script.&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  script:</span></span><br><span class=\"line\">    - echo <span class=\"string\">&quot;This script executes after the job&#x27;s `before_script`&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><ol>\n<li><code>sshpass -p $PASSWORD scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ./build $CUSTOM_USERNAME@$CUSTOM_IP:/var/www/html</code> sshpass 设置 ci 变量</li>\n<li><code>sshpass -p $PASSWORD sshpass -p root rsync -avz -e &quot;ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null&quot; -r ./build $CUSTOM_USERNAME@$CUSTOM_IP:/var/www/html</code></li>\n</ol>\n<h2 id=\"prefill-variables\"><a href=\"#prefill-variables\" class=\"headerlink\" title=\"prefill variables\"></a>prefill variables</h2><ol>\n<li><a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/300106\">how to use prefill variables</a></li>\n<li>两种方式：<ul>\n<li>yml 文件中<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\"><span class=\"attr\">PASSWORD:</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">pdescription:</span> <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"><span class=\"attr\">CUSTOM_USERNAME:</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">&quot;petalinux&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">description:</span> <span class=\"string\">&quot;username&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>project CI&#x2F;CD variable settings</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"workflow\"><a href=\"#workflow\" class=\"headerlink\" title=\"workflow\"></a><a href=\"https://docs.gitlab.com/14.8/ee/ci/yaml/workflow.html\">workflow</a></h2><h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys\"></a>keys</h2><h3 id=\"needs\"><a href=\"#needs\" class=\"headerlink\" title=\"needs\"></a>needs</h3><ol>\n<li>可以用来串联 stage</li>\n<li>传递 stage 文件需要 <a href=\"https://docs.gitlab.com/ee/ci/yaml/index.html#needsartifacts\">link</a></li>\n<li>可以看 pipeline efficiency <a href=\"https://docs.gitlab.com/ee/ci/pipelines/pipeline_efficiency.html\">link</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/directed_acyclic_graph/\">DAG</a></li>\n</ol>\n<h2 id=\"rules\"><a href=\"#rules\" class=\"headerlink\" title=\"rules\"></a>rules</h2><ol>\n<li><a href=\"https://github.com/gitlabhq/gitlabhq/blob/2ea638391497c495798e0bab7c704af112789299/.gitlab/ci/rules.gitlab-ci.yml\">rules 模板</a></li>\n<li>只手动编译， 有个按键可以执行所有 job</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">.rules:if-tag-or-manual:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*if-tag</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">when:</span> <span class=\"string\">manual</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.rules:always:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">when:</span> <span class=\"string\">always</span></span><br><span class=\"line\">      <span class=\"attr\">allow_failure:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## fix mr detach issue； merge_request_event or push 禁止一个</span></span><br><span class=\"line\"><span class=\"attr\">workflow:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">if:</span> <span class=\"string\">&#x27;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">never</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">when:</span> <span class=\"string\">always</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Build::GPU_ubuntu20.04:</span></span><br><span class=\"line\">  <span class=\"attr\">extends:</span></span><br><span class=\"line\">    <span class=\"string\">.rules:if-tag-or-manual</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>失败自动 format</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Build::Format:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">if:</span> <span class=\"string\">&#x27;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">on_failure</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">when:</span> <span class=\"string\">never</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">bash</span> <span class=\"string\">ci/format.sh</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在 mr 时自动运行全流程，or 手动选择要编译的平台</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.if-tag:</span> <span class=\"string\">&amp;if-tag</span></span><br><span class=\"line\">  <span class=\"attr\">if:</span> <span class=\"string\">&#x27;$CI_COMMIT_TAG&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.if-merge-request:</span> <span class=\"string\">&amp;if-merge-request</span></span><br><span class=\"line\">  <span class=\"attr\">if:</span> <span class=\"string\">$CI_PIPELINE_SOURCE</span> <span class=\"string\">==</span> <span class=\"string\">&quot;merge_request_event&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.if-tag-or-mr:</span> <span class=\"string\">&amp;if-tag-or-mr</span></span><br><span class=\"line\">  <span class=\"attr\">if:</span> <span class=\"string\">&#x27;$CI_COMMIT_TAG&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">if:</span> <span class=\"string\">$CI_PIPELINE_SOURCE</span> <span class=\"string\">==</span> <span class=\"string\">&quot;merge_request_event&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.rules:if-tag-or-mr-or-manual:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*if-tag-or-mr</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">when:</span> <span class=\"string\">manual</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.rules:always:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">when:</span> <span class=\"string\">always</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Build::GPU_ubuntu20.04:</span></span><br><span class=\"line\">  <span class=\"attr\">extends:</span></span><br><span class=\"line\">    <span class=\"string\">.rules:if-tag-or-mr-or-manual</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Build::Vitis:</span></span><br><span class=\"line\">  <span class=\"attr\">extends:</span></span><br><span class=\"line\">    <span class=\"string\">.rules:if-tag-or-mr-or-manual</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/#workflowrules\">workflowrules 控制整个 pipeline</a></li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">workflow:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">if:</span> <span class=\"string\">$CI_COMMIT_TITLE</span> <span class=\"string\">=~</span> <span class=\"string\">/-draft$/</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">never</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">if:</span> <span class=\"string\">$CI_PIPELINE_SOURCE</span> <span class=\"string\">==</span> <span class=\"string\">&quot;merge_request_event&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">if:</span> <span class=\"string\">$CI_COMMIT_BRANCH</span> <span class=\"string\">==</span> <span class=\"string\">$CI_DEFAULT_BRANCH</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>when, can only be always or never when used with workflow. 不能 when: manual, 不支持</li>\n<li>可以设置一个伪 job， manual 触发，后续 job 依赖伪 job</li>\n<li>完善解决方案： 使用 <a href=\"https://github.com/GNOME/gnome-shell/blob/4bbf6d497d34793693e5ac24fbe23854b481002b/.gitlab-ci.yml#L41\">temlate</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/jobs/job_control.html#avoid-duplicate-pipelines\">avoid-duplicate-pipelines</a></li>\n</ol>\n<figure class=\"highlight cos\"><table><tr><td class=\"code\"><pre><span class=\"line\">rules:</span><br><span class=\"line\">   - <span class=\"keyword\">if</span>: &#x27;<span class=\"built_in\">$CI</span>_PIPELINE_SOURCE == <span class=\"string\">&quot;merge_request_event&quot;</span>&#x27;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://docs.gitlab.com/ee/ci/jobs/job_control.html#reuse-rules-in-different-jobs\">default-rules(&gt;&#x3D;14.3)</a></li>\n</ol>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><ol>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/script.html#split-long-commands\">split-long-commands</a></li>\n<li>gtest 结果 xml 可以显示到 ci pipeline 结果中去 <a href=\"https://docs.gitlab.com/ee/ci/unit_test_reports.html\">link</a></li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cpp:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gtxxx</span> <span class=\"string\">--gtest_output=xml:report.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">reports:</span></span><br><span class=\"line\">      <span class=\"attr\">junit:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">report.xml</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">fail.xml</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cache 时相同的 Key path 文件内容要完全一样，否则不能 cache</li>\n<li>deploy 两种方式：<ul>\n<li>runner shell Executor: 交叉编译后传到板子上执行</li>\n<li>runner ssh Executor: 登录到板子，Mount 服务器执行(板子存储受限，不可重复，慢)</li>\n</ul>\n</li>\n<li><code>sudo su - gitlab-runner</code> ssh board 时要进入 runner 服务器 gitlab-runner 用户</li>\n<li>如果想在板子上运行脚本，需要 ssh 执行器<a href=\"https://blog.csdn.net/lihao21/article/details/109820904\">link</a></li>\n<li>ssh 后跟在远端执行的命令</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">script:</span><br><span class=\"line\">    - echo <span class=\"string\">&quot;ssh board......................&quot;</span></span><br><span class=\"line\">    - ssh -o <span class=\"attribute\">StrictHostKeyChecking</span>=<span class=\"literal\">no</span> -o <span class=\"attribute\">UserKnownHostsFile</span>=/dev/null root@10.31.1.170 <span class=\"string\">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runners-section\">修改 runner build 位置 builds_dir</a> 配置路径<code>/etc/gitlab-runner/</code>或<code>~/.gitlab-runner/</code></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/184936276\">Gitlab-ci:从零开始的前端自动化部署</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/\">GitLab CI&#x2F;CD</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/variables/index.html#enable-debug-logging\">Enable Debug logging</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/variables/index.html#list-all-environment-variables\">List all environment variables</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/examples/#cicd-templates\">CI&#x2F;CD templates</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/ssh_keys/\">Using SSH keys with GitLab CI&#x2F;CD</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006120164\">概念</a></li>\n<li><a href=\"https://docs.gitlab.cn/jh/ci/variables/\">gitlab 中文文档</a></li>\n<li><a href=\"https://gitlab.phigent.io/help/ci/unit_test_reports\">test reports</a></li>\n<li><a href=\"https://juejin.cn/post/6847902219837292558\">搭建一个使用 GitLab CI 的项目</a></li>\n<li><a href=\"https://blog.csdn.net/yejingtao703/article/details/83065591\">Gitlab-Runner 原理与实现</a></li>\n</ol>\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li>gitlab release + jfrog artifactory（如果 docker 有问题，通过 artifacts 传递文件， 在 release 传文件和配置链接）</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">release</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">TEST_FILE0:</span> <span class=\"string\">&quot;test0-$&#123;PACKAGE_VERSION&#125;-$&#123;CI_COMMIT_TAG&#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">TEST_FILE1:</span> <span class=\"string\">&quot;test1-$&#123;PACKAGE_VERSION&#125;-$&#123;CI_COMMIT_TAG&#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">PACKAGE_VERSION:</span> <span class=\"string\">&quot;1.2.3&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">PACKAGE_REGISTRY_URL:</span> <span class=\"string\">&quot;http://artifacts.xxx.io/artifactory/dcv-cpp&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">JFROG_USER=release</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">JFROG_PASSWD=xxx</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      push_to_jfrog() &#123;</span></span><br><span class=\"line\"><span class=\"string\">          FILE=$1;</span></span><br><span class=\"line\"><span class=\"string\">          JFROG_PATH=http://artifacts.xxx.io/artifactory/$2;</span></span><br><span class=\"line\"><span class=\"string\">          MD5=$(md5sum $FILE | awk &#x27;&#123;print $1&#125;&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">          curl -u&quot;$&#123;JFROG_USER&#125;:$&#123;JFROG_PASSWD&#125;&quot; -T $FILE -H &quot;X-Checksum-MD5:$&#123;MD5&#125;&quot; -L &quot;$&#123;JFROG_PATH&#125;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">hub.xxx.io/avp/cuda11.3.1-trt8.0.3.4-ros2-desktop-ubuntu20.04:v2.0</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">phigent_runner_gpu</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">$CI_COMMIT_TAG</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mkdir</span> <span class=\"string\">bin</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;$&#123;TEST_FILE0&#125;&quot;</span> <span class=\"string\">&gt;</span> <span class=\"string\">bin/$&#123;TEST_FILE0&#125;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;$&#123;TEST_FILE1&#125;&quot;</span> <span class=\"string\">&gt;</span> <span class=\"string\">bin/$&#123;TEST_FILE1&#125;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      if [ &quot;$CI_COMMIT_TAG&quot; != &#x27;&#x27; ]; then</span></span><br><span class=\"line\"><span class=\"string\">        push_to_jfrog bin/$&#123;TEST_FILE0&#125; dcv-cpp/$&#123;CI_COMMIT_TAG&#125;/$&#123;TEST_FILE0&#125;</span></span><br><span class=\"line\"><span class=\"string\">        push_to_jfrog bin/$&#123;TEST_FILE1&#125; dcv-cpp/$&#123;CI_COMMIT_TAG&#125;/$&#123;TEST_FILE1&#125;; fi</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">release:</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">phigent_runner_gpu</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">release</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">registry.gitlab.com/gitlab-org/release-cli:latest</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">if:</span> <span class=\"string\">$CI_COMMIT_TAG</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      release-cli create --name &quot;Release $CI_COMMIT_TAG&quot; --tag-name $CI_COMMIT_TAG \\</span></span><br><span class=\"line\"><span class=\"string\">        --assets-link &quot;&#123;\\&quot;name\\&quot;:\\&quot;$&#123;TEST_FILE0&#125;\\&quot;,\\&quot;url\\&quot;:\\&quot;$&#123;PACKAGE_REGISTRY_URL&#125;/$&#123;CI_COMMIT_TAG&#125;/$&#123;TEST_FILE0&#125;\\&quot;&#125;&quot; \\</span></span><br><span class=\"line\"><span class=\"string\">        --assets-link &quot;&#123;\\&quot;name\\&quot;:\\&quot;$&#123;TEST_FILE1&#125;\\&quot;,\\&quot;url\\&quot;:\\&quot;$&#123;PACKAGE_REGISTRY_URL&#125;/$&#123;CI_COMMIT_TAG&#125;/$&#123;TEST_FILE1&#125;\\&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["Tools","CI"],"tags":["Tools","CI"]},{"title":"Gstreamer","url":"/2021/02/23/Gstreamer/","content":"<h2 id=\"Why-Gstreamer\"><a href=\"#Why-Gstreamer\" class=\"headerlink\" title=\"Why Gstreamer\"></a>Why Gstreamer</h2><ol>\n<li>构建一个视频分析应用，需要考虑的内容有：视频流获取、视频流解码、预处理、算法推理、数据编码、数据显示、数据传输等。常常需要引入一些第三方的开发包，如 OpenCV，FFmpeg，Caffe，TensorRT，OpenGL 等。GStreamer 是一个用于开发流式多媒体应用的跨平台开源框架，应用程序可以通过管道(Pipeline)的方式，<code>将多媒体处理的各个步骤串联起来</code>，达到预期的效果。</li>\n</ol>\n<h2 id=\"Gstreamer\"><a href=\"#Gstreamer\" class=\"headerlink\" title=\"Gstreamer\"></a>Gstreamer</h2><ol>\n<li><code>核心</code>为<code>Pipeline</code>框架以及用于扩展功能的<code>Plugins</code>。plugin 负责实现音视频传输协议、音视频输入输出源、音视频编解转码等真实的媒体处理功能，而 plugin 之间通过 pipeline 关联在一起，pipeline 负责将上一个 plugin 的数据流(data flow)传输给下一个 plugin，最终形成一个完整的多媒体处理应用；</li>\n<li>原理：GStreamer 的程序通过连接数字媒体处理的元素注入管道（pipeline）。每个元素(element)是由一个插件提供。元素可组合为箱（bins），箱可以进一步聚合，从而形成架构图。元素沟通是透过垫（pads）。来源垫（source pad）上一个元素可以被连接到一个接收垫（sink pad）在另一个。当管道是在播放状态，数据缓冲流（data buffers flow）从来源垫（source pad）流向接收垫（sink pad）。</li>\n<li>箱柜(bin)是由多个 element 构成的容器，同时 bin 本身也是一种 element，所以能够像操作普通 element 一样操作一个 bin，改变 bin 的状态可以改变 bin 内部所有 elements 的状态。bin 可以发送总线消息给它的子集 elements ，包括：错误消息(error messages)，标签消息(tag messages)，EOS 消息(EOS messages)。</li>\n<li>管道(pipeline)是一个特殊的 bin，当设定管道暂停或播放状态的时候，数据流将开始流动，并且媒体数据处理也开始处理。</li>\n<li>element 被封装成 plugin 才能被 gstreamer 使用。</li>\n</ol>\n<h2 id=\"3-层架构（plugin-core-app\"><a href=\"#3-层架构（plugin-core-app\" class=\"headerlink\" title=\"3 层架构（plugin, core, app)\"></a>3 层架构（plugin, core, app)</h2><p><img src=\"https://gstreamer.freedesktop.org/documentation/application-development/introduction/images/gstreamer-overview.png\" alt=\"overview\"></p>\n<ol>\n<li>最底层：element(plugins)</li>\n<li>中间层：插件框架、pipeline 架构、媒体类型处理机制、等等，也就是处理 Elements 的方式方法.</li>\n<li>最上层：tools, 多媒体应用</li>\n</ol>\n<h2 id=\"GStreamer-plug-ins-could-be-classified\"><a href=\"#GStreamer-plug-ins-could-be-classified\" class=\"headerlink\" title=\"GStreamer plug-ins could be classified\"></a>GStreamer plug-ins could be classified</h2><ol>\n<li>protocols handling</li>\n<li>sources: for audio and video (involves protocol plugins)</li>\n<li>formats: parsers, formaters, muxers, demuxers, metadata, subtitles</li>\n<li>codecs: coders and decoders</li>\n<li>filters: converters, mixers, effects, …</li>\n<li>sinks: for audio and video (involves protocol plugins)</li>\n</ol>\n<h2 id=\"GStreamer-tools\"><a href=\"#GStreamer-tools\" class=\"headerlink\" title=\"GStreamer tools\"></a>GStreamer tools</h2><ol>\n<li>gst-launch-1.0: 命令行建立和运行 pipeline, 不用编写 C 代码； <code>gst-launch-1.0 videotestsrc ! autovideosink</code></li>\n<li>gst-inspect-1.0: 查看可用的插件和它们的相关信息； <code>gst-inspect-1.0 videotestsrc</code></li>\n<li>gst-discoverer-1.0: 查看媒体文件的内部结构； <code>gst-discoverer-1.0 /root/Desktop/video.mp4</code></li>\n<li>GST*DEBUG&#x3D;”GST_TRACER:7” GST_TRACERS&#x3D;”proctime” gst-launch-1.0 … <code>查看每个element性能</code> <a href=\"https://developer.ridgerun.com/wiki/index.php?title=GstShark*-_Processing_Time_tracer\">link</a></li>\n<li><a href=\"https://github.com/RidgeRun/gst-shark\">gst-shark</a></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://gstreamer.freedesktop.org/documentation/application-development/introduction/index.html?gi-language=c\">About Gstreamer</a></li>\n<li><a href=\"https://gstreamer.freedesktop.org/documentation/tutorials/basic/gstreamer-tools.html?gi-language=c\">Gstreamer tools</a></li>\n<li><a href=\"https://gstreamer.freedesktop.org/documentation/tutorials/basic/index.html?gi-language=c\">Gstreamer tutorials</a></li>\n<li><a href=\"https://github.com/sdroege/gstreamer-rs/tree/master/tutorials\">Gstreamer tutorials rust</a></li>\n<li><a href=\"http://orangeamoy.com/2019/06/28/GStreamerAndDeepStream/\">由 GStreamer 到 DeepStream</a></li>\n<li><a href=\"http://ericnode.info/post/gstreamer_intro/\">插件例子</a></li>\n<li><a href=\"https://www.shangyexinzhi.com/article/571316.html\">中文基础概念</a></li>\n</ol>\n","categories":["Program","Gstreamer"],"tags":["Gstreamer"]},{"title":"Haskell","url":"/2021/06/22/Haskell/","content":"<h2 id=\"Higher-Order-Functions\"><a href=\"#Higher-Order-Functions\" class=\"headerlink\" title=\"Higher Order Functions\"></a>Higher Order Functions</h2><ol>\n<li>Haskell functions can take functions as parameters and return functions as return values. A function that does either of those is called a higher order function.</li>\n<li>Every function in Haskell officially only takes one parameter.</li>\n<li><code>map</code> takes a function and a list and applies that function to every element in the list, producing a new list.</li>\n<li><code>filter</code> is a function that takes a predicate (a predicate is a function that tells whether something is true or not, so in our case, a function that returns a boolean value) and a list and then returns the list of elements that satisfy the predicate.</li>\n<li><code>folds</code> They’re sort of like the map function, only they reduce the list to some <code>single value</code>.<br>1.<a href=\"https://excalidraw.com/#json=5033777575231488,ixM2dP13DMyzxCvIDEpzqg\">map, filter, fold 示意图</a></li>\n<li>map是一种抽象，屏蔽了对list操作的具体实现，不用关心是迭代或是递归实现的，只能感受到list每个元素都经过了转化，不用考虑控制结构，只需要考虑策略。(link: SICP)</li>\n</ol>\n<h2 id=\"Functors-Applicatives-And-Monads\"><a href=\"#Functors-Applicatives-And-Monads\" class=\"headerlink\" title=\"Functors, Applicatives And Monads\"></a>Functors, Applicatives And Monads</h2><ol>\n<li>defination</li>\n</ol>\n<figure class=\"highlight xl\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Functor f <span class=\"keyword\">where</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">fmap</span> :: (a -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">f</span> a -&gt;</span> f b</span><br><span class=\"line\"></span><br><span class=\"line\">class (Functor f) =&gt; Applicative f <span class=\"keyword\">where</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">pure</span> :: a -&gt;</span> f a</span><br><span class=\"line\">    (&lt;*&gt;) :: <span class=\"function\"><span class=\"title\">f</span> (a -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">f</span> a -&gt;</span> f b</span><br><span class=\"line\"></span><br><span class=\"line\">class (Applicative m) =&gt; Monad m <span class=\"keyword\">where</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">return</span> :: a -&gt;</span> m a</span><br><span class=\"line\">    (&gt;&gt;=) :: <span class=\"function\"><span class=\"title\">m</span> a -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">m</span> b) -&gt;</span> m b</span><br><span class=\"line\">    (&gt;&gt;) :: <span class=\"function\"><span class=\"title\">m</span> a -&gt;</span> <span class=\"function\"><span class=\"title\">m</span> b -&gt;</span> m b</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">x</span> &gt;&gt; y = x &gt;&gt;= \\_ -&gt;</span> y</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">fail</span> :: String -&gt;</span> m a</span><br><span class=\"line\">    fail msg = error msg</span><br><span class=\"line\"></span><br><span class=\"line\">class Monoid m <span class=\"keyword\">where</span>  -- 注意是Monoid不是Monad</span><br><span class=\"line\">    mempty :: m</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mappend</span> :: m -&gt;</span> <span class=\"function\"><span class=\"title\">m</span> -&gt;</span> m</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mconcat</span> :: [m] -&gt;</span> m</span><br><span class=\"line\">    mconcat = foldr mappend mempty</span><br></pre></td></tr></table></figure>\n<ol>\n<li>type of fmap, (&lt;*&gt;) and (&gt;&gt;&#x3D;)</li>\n</ol>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">fmap :: <span class=\"function\"><span class=\"params\">(Functor f)</span> =&gt; <span class=\"params\">(a -&gt; b)</span> -&gt;</span> f a -&gt; f b           -- 先解f a封装到a, a -&gt; b, b再封装到f b; 操作<span class=\"number\">2</span>次封装</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(&lt;*&gt;)</span> :: <span class=\"params\">(Applicative f)</span> =&gt; <span class=\"title\">f</span> <span class=\"params\">(a -&gt; b)</span> -&gt;</span> f a -&gt; f b    -- 先解f a封装到a, 解f(a -&gt; b)封装， a -&gt; b, b再封装到f b; 操作<span class=\"number\">3</span>次封装</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(&gt;&gt;=)</span> :: <span class=\"params\">(Monad m)</span> =&gt; <span class=\"title\">m</span> <span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"params\">(a -&gt; m b)</span> -&gt;</span> m b          -- 先解m a封装到a, a -&gt; mb; 操作<span class=\"number\">1</span>次封装</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Functor, Applicative and Monad都是封装，可以封装原始类型。</li>\n<li>&lt;$&gt; 是 fmap 的中缀表达式版本</li>\n<li>functors: you apply a function to a wrapped value using fmap or &lt;$&gt;</li>\n<li>applicatives: you apply a wrapped function to a wrapped value using &lt;*&gt; or liftA</li>\n<li>monads: you apply a function that returns a wrapped value, to a wrapped value using &gt;&gt;&#x3D; or liftM</li>\n<li>conclusion</li>\n</ol>\n<ul>\n<li>A functor is a data type that implements the Functor typeclass.</li>\n<li>An applicative is a data type that implements the Applicative typeclass.</li>\n<li>A monad is a data type that implements the Monad typeclass.</li>\n<li>A Maybe implements all three, so it is a functor, an applicative, and a monad.</li>\n</ul>\n<ol start=\"9\">\n<li>区别</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://learnyouahaskell.com/chapters\">Learn you haskell book</a></li>\n<li><a href=\"https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html\">Functors, Applicatives, And Monads In Pictures</a></li>\n</ol>\n"},{"title":"write blog","url":"/2020/06/26/How-to-start-writing-blog/","content":"<h2 id=\"Set-up-githubio\"><a href=\"#Set-up-githubio\" class=\"headerlink\" title=\"Set up githubio\"></a>Set up githubio</h2><ol>\n<li>Follow <a href=\"https://guides.github.com/features/pages/\">github pages guide</a> to apply a web.</li>\n<li><a href=\"https://docs.github.com/cn/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site\">configuring-a-publishing-source-for-your-github-pages-site</a></li>\n</ol>\n<h2 id=\"Use-hexo-or-JekyII\"><a href=\"#Use-hexo-or-JekyII\" class=\"headerlink\" title=\"Use hexo (or JekyII)\"></a>Use hexo (or JekyII)</h2><ol>\n<li><a href=\"https://github.com/nodesource/distributions/blob/master/README.md\">ubuntu16.04 nodejs install</a><ul>\n<li>Need sudo to use npm install packages.</li>\n<li><a href=\"https://www.jianshu.com/p/3fd7d90db01a\">npm install error solve</a></li>\n</ul>\n</li>\n<li>on Windows<ul>\n<li>install node.js on windows and <a href=\"https://blog.csdn.net/chengyuweng7838/article/details/100996272\">set env</a></li>\n<li><code>npm install --force hexo-cli -g --registry=https://registry.npm.taobao.org</code></li>\n</ul>\n</li>\n<li><a href=\"https://hexo.io/zh-cn/\">hexo tutorial</a></li>\n<li><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">hexo theme 3-hexo</a><ul>\n<li><code>_config.yml</code> theme: 3-hexo</li>\n</ul>\n</li>\n<li><a href=\"https://yelog.org/2017/03/23/3-hexo-instruction/\">3-hexo tutorial</a></li>\n</ol>\n<h2 id=\"Write-blog\"><a href=\"#Write-blog\" class=\"headerlink\" title=\"Write blog\"></a>Write blog</h2><ol>\n<li><a href=\"https://guides.github.com/features/mastering-markdown/\">markdown tutorial</a></li>\n</ol>\n<h2 id=\"Push-blog-to-githubio\"><a href=\"#Push-blog-to-githubio\" class=\"headerlink\" title=\"Push blog to githubio\"></a>Push blog to githubio</h2><ol>\n<li><a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">hexo tutorial</a></li>\n</ol>\n<h2 id=\"Hexo-basic-comamnd\"><a href=\"#Hexo-basic-comamnd\" class=\"headerlink\" title=\"Hexo basic comamnd\"></a>Hexo basic comamnd</h2><ol>\n<li>Create a new post<br><code>$ hexo new \"My New Post\"</code></li>\n<li>Generate static files<br><code>$ hexo generate</code></li>\n<li>Run server(local site)<br><code>$ hexo server</code><br><code>$ hexo server -p 5900</code></li>\n<li>Deploy to remote sites<br><code>$ hexo clean &amp;&amp; hexo deploy</code></li>\n<li>shortcuts<br><code>alias hs='hexo clean &amp;&amp; hexo g &amp;&amp; hexo s'</code><br><code>alias hd='hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m \"update\" &amp;&amp; git push -f'</code></li>\n</ol>\n<h2 id=\"hexo-plugins\"><a href=\"#hexo-plugins\" class=\"headerlink\" title=\"hexo plugins\"></a>hexo plugins</h2><ol>\n<li>hexo-generator-searchdb</li>\n<li>hexo-symbols-count-time</li>\n<li>hexo-auto-excerp</li>\n<li>hexo-related-popular-posts</li>\n<li>hexo-filter-mermaid-diagrams</li>\n<li>hexo-generator-topindex</li>\n</ol>\n<h2 id=\"hexo-config\"><a href=\"#hexo-config\" class=\"headerlink\" title=\"hexo config\"></a>hexo config</h2><ol>\n<li><a href=\"https://theme-next.js.org/docs/theme-settings/posts\">theme-settings/posts</a></li>\n<li><a href=\"https://cs-cshi.github.io/hexo-blog/Hexo-NexT%20%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E3%80%81%E6%A0%87%E7%AD%BE/\">Hexo 博客 NexT 主题下如何添加分类、标签</a> <a href=\"https://github.com/cs-cshi/hexo-theme-next\">对应的主题配置</a></li>\n<li><a href=\"http://yelog.org/2019/11/12/3-hexo-support-mermaid/\">mermaid support</a></li>\n<li><a href=\"https://github.com/jiaxiyang/blog/commit/e293840421fb4510c5a3499ff4c828b2cca7f51a\">3-hexo theme nav settings</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></li>\n<li><a href=\"https://theme-next.org/\">theme-next.org</a></li>\n<li><a href=\"https://plantegg.github.io/2021/05/16/CPU_Cache_Line%E5%92%8C%E6%80%A7%E8%83%BD/\">next sample1</a></li>\n<li><a href=\"https://neuyilan.github.io/\">hexo sample2</a></li>\n</ol>\n<h2 id=\"next-theme\"><a href=\"#next-theme\" class=\"headerlink\" title=\"next theme\"></a>next theme</h2><ol>\n<li><a href=\"https://vonsdite.github.io/posts/13afd8d4.html\">links 颜色设置</a></li>\n<li><code>&lt;!-- more --&gt;</code> It’s a common need to show some part of article in home page and then give a link to full article.</li>\n<li><a href=\"https://github.com/stevenjoezhang/live2d-widget\">live2d-widget</a></li>\n<li><a href=\"https://github.com/next-theme/theme-next-docs\">theme-next-docs 可以看各主题效果</a><ul>\n<li>参考如何配置</li>\n</ul>\n</li>\n<li><a href=\"https://www.idefun.com/\">good 参考</a></li>\n<li><a href=\"https://justdong.net/wexin/weixin_03google-analytics\">如何添加 google analytics</a></li>\n<li><a href=\"https://www.gaotianyang.top/archives/20200814f023bd8e/\">sitemap 让 google 和百度搜索到</a></li>\n<li><a href=\"https://valine.js.org/quickstart.html\">valine 评论系统</a></li>\n<li><a href=\"https://blog.51cto.com/u_12877374/4977880\">显示网站运行时间</a></li>\n<li><a href=\"https://github.com/theme-next/theme-next-three\">显示动画</a></li>\n<li><a href=\"https://github.com/next-theme/theme-next-pdf\">pdf 支持</a></li>\n<li><a href=\"https://github.com/next-theme/hexo-filter-mathjax\">hexo-filter-mathjax 处理数学公式</a><ul>\n<li><code>npm install hexo-filter-mathjax</code></li>\n<li><a href=\"https://www.mathjax.org/#demo\">mathjax live #demo</a></li>\n</ul>\n</li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.575ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.765ex\" height=\"5.291ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1642.5 9178 2338.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(849.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1905.6,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1429.2,0)\"><path data-c=\"B1\" d=\"M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z\"></path></g><g data-mml-node=\"msqrt\" transform=\"translate(2429.4,0)\"><g transform=\"translate(853,0)\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(462,289) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1087.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2088,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2588,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3117,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,106.5)\"><path data-c=\"221A\" d=\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\"></path></g><rect width=\"3550\" height=\"60\" x=\"853\" y=\"846.5\"></rect></g></g><g data-mml-node=\"mrow\" transform=\"translate(3121.7,-686)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g></g><rect width=\"7032.4\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.602ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25.832ex\" height=\"5.018ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1509.9 11417.6 2217.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(345,0)\"><path data-c=\"210F\" d=\"M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(907,0)\"><g data-mml-node=\"mi\" transform=\"translate(400.5,676)\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"></path></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><rect width=\"1127\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mi\" transform=\"translate(2274,0)\"><path data-c=\"1D713\" d=\"M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3202.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4258.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(5036.6,0)\"><g data-mml-node=\"msup\" transform=\"translate(384.2,676)\"><g data-mml-node=\"mi\"><path data-c=\"210F\" d=\"M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(646.1,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g><rect width=\"1578\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"msup\" transform=\"translate(6854.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"2207\" d=\"M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(866,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(8124.1,0)\"><path data-c=\"1D713\" d=\"M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8997.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9997.6,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10766.6,0)\"><path data-c=\"1D713\" d=\"M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z\"></path></g></g></g></svg></mjx-container></li>\n<li><a href=\"https://eblog.gitee.io/posts/hexo/hexo-theme-beautify.html\">(good)hexo-theme-beautify</a></li>\n<li><a href=\"https://theme-next.js.org/docs/tag-plugins/mermaid\">mermaid 支持</a><ul>\n<li><code>sudo npm install hexo-cli -g</code> 工程目录下升级 hexo</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md\">高亮支持的语言</a></li>\n<li><a href=\"https://theme-next.js.org/highlight/\">高亮预览</a></li>\n</ol>\n<h2 id=\"shareX\"><a href=\"#shareX\" class=\"headerlink\" title=\"shareX\"></a><a href=\"https://getsharex.com/\">shareX</a></h2><ol>\n<li>使用 shareX 保存图像，链接到 blog 里, 一篇 blog 一个文件夹</li>\n</ol>\n","categories":["Tools","Blog"],"tags":["Blog"]},{"title":"How to use org mode","url":"/2020/09/05/How-to-use-org-mode/","content":"<h2 id=\"Shortkeys\"><a href=\"#Shortkeys\" class=\"headerlink\" title=\"Shortkeys\"></a>Shortkeys</h2><ol>\n<li>next&#x2F;previous heading <code>C-c C-n/p</code></li>\n<li>next&#x2F;previous heading, same level <code>C-c C-f/b</code></li>\n<li><code>org-agenda-list</code> show agenda list</li>\n<li><code>org-open-at-point</code> <code>C-c C-o</code> open links</li>\n</ol>\n<h2 id=\"capture-refile-archiving\"><a href=\"#capture-refile-archiving\" class=\"headerlink\" title=\"capture -&gt; refile -&gt; archiving\"></a>capture -&gt; refile -&gt; archiving</h2><ol>\n<li>C-c c capture a new item (C-u C-u &#x3D; goto last)</li>\n<li>C-c C-w refile subtree (C-u C-u &#x3D; goto last)</li>\n<li>C-c C-x C-a archive subtree using the default command</li>\n<li>C-c C-x C-s move subtree to archive file</li>\n<li>C-c C-x a&#x2F;A toggle ARCHIVE tag &#x2F; to ARCHIVE sibling</li>\n</ol>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><ol>\n<li><code>&lt;src</code> to insert src block</li>\n<li><code>(org-babel-do-load-languages &#39;org-babel-load-languages &#39;((shell . t)))</code> enable sh</li>\n<li><code>(org-babel-do-load-languages &#39;org-babel-load-languages &#39;((C . t)))</code> enable c++</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">#+begin_src cpp</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;hello world!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#+end_src</span><br><span class=\"line\"></span><br><span class=\"line\">#+RESULTS:</span><br><span class=\"line\">: hello world!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Table\"><a href=\"#Table\" class=\"headerlink\" title=\"Table\"></a>Table</h2><ol>\n<li><code>|------+-----------|</code> 是 row 0</li>\n<li><code>org-table-export</code> test.csv 导出 csv</li>\n<li>公式<ul>\n<li><code>:=</code> 只对当前单元格起作用</li>\n<li><code>=</code> 对一行或一列起作用</li>\n<li><code>@</code> 指定行</li>\n<li><code>$</code> 指定列</li>\n<li><code>C-c &#39;</code> 编辑公式</li>\n<li><code>C-u C-c *</code> 整个表格求公式</li>\n<li>show line, column, formula reference <code>C-c ?</code></li>\n<li>toggle table coordinate grid <code>C-c &#125;</code></li>\n</ul>\n</li>\n<li><code>C-c -</code> insert hline below (C-u : above) current row</li>\n<li><code>C-c RET</code> insert hline and move to line below it</li>\n<li>convert region to table <code>C-c |</code></li>\n<li>move the current column left <code>M-LEFT/RIGHT</code></li>\n<li>move the current row up&#x2F;down <code>M-UP/DOWN</code></li>\n<li>sum numbers in current column&#x2F;rectangle <code>C-c +</code></li>\n<li>re-align the table without moving the cursor <code>C-c C-c</code></li>\n<li>re-align the table, move to next field <code>TAB</code></li>\n<li>move to previous field <code>S-TAB</code></li>\n<li>re-align the table, move to next row <code>RET</code></li>\n</ol>\n<h2 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h2><ol>\n<li>set tags for current heading <code>C-c C-q</code></li>\n<li>create sparse tree with matching tags <code>C-c \\</code></li>\n<li><code>#+FILETAGS: :work</code> all the item in file has work tag</li>\n<li>globally (agenda) match tags at cursor <code>C-c C-o</code></li>\n</ol>\n<h2 id=\"Priority\"><a href=\"#Priority\" class=\"headerlink\" title=\"Priority\"></a>Priority</h2><ol>\n<li>raise&#x2F;lower priority of current item <code>S-UP/DOWN</code></li>\n<li>select next&#x2F;previous state <code>S-LEFT/RIGHT</code></li>\n<li><code>C-c , [ABC]</code> set the priority of the current item</li>\n<li><code>C-c , SPC</code> remove priority cookie from current item</li>\n</ol>\n<h2 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a><a href=\"https://orgmode.org/manual/Checkboxes.html\">checkbox</a></h2><ol>\n<li><code>- [ ]</code></li>\n<li><code>C-c C-c</code> org-toggle-checkbox</li>\n<li>…..[&#x2F;] show [1&#x2F;5]</li>\n<li>…..[%] show [20%]</li>\n</ol>\n<h2 id=\"agenda\"><a href=\"#agenda\" class=\"headerlink\" title=\"agenda\"></a>agenda</h2><ol>\n<li><code>calfw-org-mode</code> M-c</li>\n<li><code>tab</code> open on other window</li>\n<li>start&#x2F;stop&#x2F;cancel the <code>clock</code> on current item <code>I / O / X</code></li>\n<li>view mode dispatcher <code>v</code></li>\n<li>add&#x2F;move current file to front of agenda <code>C-c [</code></li>\n<li>remove current file from your agenda <code>C-c ]</code></li>\n<li>cycle through agenda file list <code>C-’</code></li>\n<li>display next&#x2F;previous day,week,… <code>f / b</code></li>\n<li>goto today &#x2F; some date (prompt) <code>. / j</code></li>\n<li><code>d</code> org-agenda-day-view</li>\n<li><code>w</code> org-agenda-week-view</li>\n<li>toggle entry text &#x2F; clock report <code>E / R</code></li>\n</ol>\n<h2 id=\"clock\"><a href=\"#clock\" class=\"headerlink\" title=\"clock\"></a>clock</h2><ol>\n<li>start&#x2F;stop&#x2F;cancel the <code>clock</code> on current item <code>I / O / X</code></li>\n<li>start clock on current item <code>C-c C-x C-i</code></li>\n<li>stop&#x2F;cancel clock on current item <code>C-c C-x C-o/x</code></li>\n</ol>\n<h3 id=\"Calfw-org-mode\"><a href=\"#Calfw-org-mode\" class=\"headerlink\" title=\"Calfw-org-mode\"></a><a href=\"https://github.com/kiwanami/emacs-calfw\">Calfw-org-mode</a></h3><h2 id=\"Timestamp\"><a href=\"#Timestamp\" class=\"headerlink\" title=\"Timestamp\"></a>Timestamp</h2><ol>\n<li>prompt for date and insert timestamp <code>C-c .</code></li>\n<li>insert DEADLINE timestamp <code>C-c C-d</code></li>\n<li>insert SCHEDULED timestamp <code>C-c C-s</code>. <code>.</code> goto today</li>\n<li>stampe: <code>+1 20:00+1</code> +1day and 20:00-21:00</li>\n<li>change timestamp at cursor ±1 day <code>S-RIGHT/LEFT</code></li>\n<li>change year&#x2F;month&#x2F;day at cursor by ±1 <code>S-UP/DOWN</code></li>\n</ol>\n<h1 id=\"startup\"><a href=\"#startup\" class=\"headerlink\" title=\"startup\"></a><a href=\"https://orgmode.org/manual/Initial-visibility.html\">startup</a></h1><figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#+STARTUP: overview</span></span><br><span class=\"line\"><span class=\"meta\">#+STARTUP: content</span></span><br><span class=\"line\"><span class=\"meta\">#+STARTUP: showall</span></span><br><span class=\"line\"><span class=\"meta\">#+STARTUP: show2levels</span></span><br><span class=\"line\"><span class=\"meta\">#+STARTUP: show3levels</span></span><br><span class=\"line\"><span class=\"meta\">#+STARTUP: show4levels</span></span><br><span class=\"line\"><span class=\"meta\">#+STARTUP: show5levels</span></span><br><span class=\"line\"><span class=\"meta\">#+STARTUP: showeverything</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Configs\"><a href=\"#Configs\" class=\"headerlink\" title=\"Configs\"></a>Configs</h1><figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">global-set-key</span> (<span class=\"name\">kbd</span> <span class=\"string\">&quot;&lt;f9&gt;&quot;</span>) &#x27;org-clock-jump-to-current-clock)</span><br><span class=\"line\">(<span class=\"name\">global-set-key</span> (<span class=\"name\">kbd</span> <span class=\"string\">&quot;&lt;f12&gt;&quot;</span>) &#x27;org-agenda-list)</span><br><span class=\"line\">(<span class=\"name\">global-set-key</span> (<span class=\"name\">kbd</span> <span class=\"string\">&quot;C-c l&quot;</span>) &#x27;org-store-link)</span><br><span class=\"line\">(<span class=\"name\">global-set-key</span> (<span class=\"name\">kbd</span> <span class=\"string\">&quot;C-c a&quot;</span>) &#x27;org-agenda)</span><br><span class=\"line\">(<span class=\"name\">global-set-key</span> (<span class=\"name\">kbd</span> <span class=\"string\">&quot;C-c c&quot;</span>) &#x27;org-capture)</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"name\">setq</span> org-clock-out-remove-zero-time-clocks <span class=\"literal\">t</span>)</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-startup-folded &#x27;content</span><br><span class=\"line\">      org-agenda-span &#x27;day</span><br><span class=\"line\">      org-agenda-window-setup &#x27;current-window</span><br><span class=\"line\">      org-agenda-start-on-weekday <span class=\"literal\">nil</span>)</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-agenda-inhibit-startup <span class=\"literal\">t</span>) <span class=\"comment\">;; ~50x speedup</span></span><br><span class=\"line\"><span class=\"comment\">;;(setq org-agenda-use-tag-inheritance nil) ;; 3-4x speedup</span></span><br><span class=\"line\">(<span class=\"name\">setq</span> org-tags-column <span class=\"number\">80</span>)</span><br><span class=\"line\">(<span class=\"name\">set-time-zone-rule</span> <span class=\"string\">&quot;Asia/Shanghai&quot;</span>) <span class=\"comment\">;; show china time zone</span></span><br><span class=\"line\">(<span class=\"name\">add-hook</span> &#x27;org-agenda-mode-hook</span><br><span class=\"line\">            (<span class=\"name\">lambda</span> () (<span class=\"name\">add-hook</span> &#x27;window-configuration-change-hook</span><br><span class=\"line\">                                 &#x27;org-agenda-align-tags <span class=\"literal\">nil</span> <span class=\"literal\">t</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"name\">setq</span> org-directory <span class=\"string\">&quot;~/org&quot;</span>)</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-default-notes-file (<span class=\"name\">concat</span> org-directory <span class=\"string\">&quot;/notes.org&quot;</span>))</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-agenda-files &#x27;(<span class=\"string\">&quot;~/org/gtd.org&quot;</span></span><br><span class=\"line\">\t\t\t <span class=\"string\">&quot;~/org/daily.org&quot;</span></span><br><span class=\"line\">\t\t\t <span class=\"string\">&quot;~/org/weekly.org&quot;</span></span><br><span class=\"line\">\t\t\t <span class=\"string\">&quot;~/org/ideas.org&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"name\">setq</span> org-highest-priority ?A)</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-lowest-priority  ?D)</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-default-priority ?D)</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-priority-faces</span><br><span class=\"line\">      &#x27;((?A . (:background <span class=\"string\">&quot;red&quot;</span> :foreground <span class=\"string\">&quot;white&quot;</span> :weight bold))</span><br><span class=\"line\">        (?B . (:background <span class=\"string\">&quot;DarkOrange&quot;</span> :foreground <span class=\"string\">&quot;white&quot;</span> :weight bold))</span><br><span class=\"line\">        (?C . (:background <span class=\"string\">&quot;yellow&quot;</span> :foreground <span class=\"string\">&quot;DarkGreen&quot;</span> :weight bold))</span><br><span class=\"line\">        (?D . (:background <span class=\"string\">&quot;DodgerBlue&quot;</span> :foreground <span class=\"string\">&quot;black&quot;</span> :weight bold))</span><br><span class=\"line\">        ))</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-todo-keywords</span><br><span class=\"line\">      &#x27;((sequence <span class=\"string\">&quot;TODO(t)&quot;</span> <span class=\"string\">&quot;|&quot;</span> <span class=\"string\">&quot;DONE(d)&quot;</span> <span class=\"string\">&quot;CANCELED(c@/!)&quot;</span>)))</span><br><span class=\"line\">        <span class=\"comment\">;; (sequence &quot;|&quot; &quot;CANCELED(c)&quot;)))</span></span><br><span class=\"line\">(<span class=\"name\">setq</span> org-todo-keyword-faces &#x27;(</span><br><span class=\"line\">                               ;; (<span class=\"string\">&quot;TODO&quot;</span> . org-warning)</span><br><span class=\"line\">                               ;; (<span class=\"string\">&quot;DONE&quot;</span> . <span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">                               (<span class=\"string\">&quot;CANCELED&quot;</span> . <span class=\"string\">&quot;grey&quot;</span>)</span><br><span class=\"line\">                               ))</span><br><span class=\"line\">(<span class=\"name\">setq</span> org-agenda-prefix-format</span><br><span class=\"line\">      (<span class=\"name\">quote</span></span><br><span class=\"line\">       ((<span class=\"name\">agenda</span> . <span class=\"string\">&quot; %-10:c%?-12t% s&quot;</span>))))</span><br><span class=\"line\">(<span class=\"name\">defun</span> my<span class=\"symbol\">:open-org-calendar</span> ()</span><br><span class=\"line\">  <span class=\"string\">&quot;Open an org schedule calendar in the new buffer.&quot;</span></span><br><span class=\"line\">  (<span class=\"name\">interactive</span>)</span><br><span class=\"line\">  (<span class=\"name\">save-excursion</span></span><br><span class=\"line\">    (<span class=\"name\">let*</span> ((<span class=\"name\">source1</span> (<span class=\"name\">cfw</span><span class=\"symbol\">:org-create-source</span>))</span><br><span class=\"line\">           (<span class=\"name\">curr-keymap</span> (<span class=\"name\">if</span> cfw<span class=\"symbol\">:org-overwrite-default-keybinding</span> cfw<span class=\"symbol\">:org-custom-map</span> cfw<span class=\"symbol\">:org-schedule-map</span>))</span><br><span class=\"line\">           (<span class=\"name\">cp</span> (<span class=\"name\">cfw</span><span class=\"symbol\">:create-calendar-component-buffer</span></span><br><span class=\"line\">                <span class=\"symbol\">:view</span> &#x27;week</span><br><span class=\"line\">                <span class=\"symbol\">:contents-sources</span> (<span class=\"name\">list</span> source1)</span><br><span class=\"line\">                <span class=\"symbol\">:custom-map</span> curr-keymap</span><br><span class=\"line\">                <span class=\"symbol\">:sorter</span> &#x27;cfw<span class=\"symbol\">:org-schedule-sorter</span>)))</span><br><span class=\"line\">      (<span class=\"name\">switch-to-buffer</span> (<span class=\"name\">cfw</span><span class=\"symbol\">:cp-get-buffer</span> cp))</span><br><span class=\"line\">      (<span class=\"name\">when</span> (<span class=\"name\">not</span> org-todo-keywords-for-agenda)</span><br><span class=\"line\">        (<span class=\"name\">message</span> <span class=\"string\">&quot;Warn : open org-agenda buffer first.&quot;</span>)))))</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"name\">defun</span> calfw-org-mode()</span><br><span class=\"line\">  <span class=\"string\">&quot;Open calfw org&quot;</span></span><br><span class=\"line\">  (<span class=\"name\">interactive</span>)</span><br><span class=\"line\">  (<span class=\"name\">load-file</span> <span class=\"string\">&quot;~/.emacs.d/straight/build/calfw-org/calfw-org.el&quot;</span>)</span><br><span class=\"line\">  (<span class=\"name\">my</span><span class=\"symbol\">:open-org-calendar</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"name\">defun</span> get-pic-from-url (<span class=\"name\">url</span> filename)</span><br><span class=\"line\">  (<span class=\"name\">shell-command</span> (<span class=\"name\">concat</span> <span class=\"string\">&quot;wget -O &quot;</span> filename <span class=\"string\">&quot; &quot;</span> url)))</span><br><span class=\"line\">(<span class=\"name\">defun</span> org-pomodoro-get-pictures ()</span><br><span class=\"line\">  <span class=\"string\">&quot;Get pomodoro notification pictures&quot;</span></span><br><span class=\"line\">  (<span class=\"name\">interactive</span>)</span><br><span class=\"line\">  <span class=\"comment\">;; (get-pic-from-url &quot;https://pic3.zhimg.com/e76fc9f4120b9bd6ca2a7ae03a447f19_1440w.jpg?source=172ae18b&quot; &quot;~/begin_short_break.jpg&quot;)</span></span><br><span class=\"line\">  (<span class=\"name\">get-pic-from-url</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://previews.123rf.com/images/vaselena/vaselena1507/vaselena150700001/42287443-white-alarm-clock-with-red-clock-face-with-inscription-coffee-time-without-figures-on-white-backgrou.jpg&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;~/coffe_time.jpg&quot;</span>)</span><br><span class=\"line\">  (<span class=\"name\">get-pic-from-url</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://previews.123rf.com/images/vaselena/vaselena1510/vaselena151000045/47728782-white-alarm-clock-with-red-clock-face-with-inscription-work-time-without-figures-on-white-background.jpg&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;~/work_time.jpg&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"name\">add-hook</span> &#x27;org-pomodoro-finished-hook</span><br><span class=\"line\">          (<span class=\"name\">lambda</span> ()</span><br><span class=\"line\">            (<span class=\"name\">w32-shell-execute</span> <span class=\"string\">&quot;open&quot;</span> <span class=\"string\">&quot;~/coffe_time.jpg&quot;</span>)))</span><br><span class=\"line\">(<span class=\"name\">add-hook</span> &#x27;org-pomodoro-break-finished-hook</span><br><span class=\"line\">          (<span class=\"name\">lambda</span> ()</span><br><span class=\"line\">            (<span class=\"name\">w32-shell-execute</span> <span class=\"string\">&quot;open&quot;</span> <span class=\"string\">&quot;~/work_time.jpg&quot;</span>)))</span><br><span class=\"line\">(<span class=\"name\">add-hook</span> &#x27;org-pomodoro-long-break-finished-hook</span><br><span class=\"line\">          (<span class=\"name\">lambda</span> ()</span><br><span class=\"line\">            (<span class=\"name\">w32-shell-execute</span> <span class=\"string\">&quot;open&quot;</span> <span class=\"string\">&quot;~/work_time.jpg&quot;</span>)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pdf\"><a href=\"#pdf\" class=\"headerlink\" title=\"pdf\"></a>pdf</h2><ol>\n<li><a href=\"https://gist.github.com/melvincabatuan/350f86611bc012a5c1c6\">link</a></li>\n<li><code>sudo yum -y --skip-broken install texlive-\\*</code></li>\n<li>install texlive-full <a href=\"https://baohaojun.github.io/blog/2016/12/13/0-How-to-export-Chinese-with-Org-mode-Latex-backend.html\">link</a></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf\">cheatsheat</a></li>\n<li><a href=\"https://orgmode.org/\">Org Mode</a></li>\n<li><a href=\"https://orgmode.org/worg/orgcard.html\">org card</a></li>\n<li><a href=\"https://orgmode.org/orgguide.pdf\">Org Guide</a></li>\n<li><a href=\"https://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html\">Org Mode Chinese Tutorial</a></li>\n</ol>\n","categories":["Emacs"],"tags":["Emacs"]},{"title":"IDL","url":"/2022/09/06/IDL/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li><a href=\"https://zh.m.wikipedia.org/zh-hans/%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80\">接口描述语言（Interface description language，缩写 IDL）</a></li>\n<li>是用来描述软件组件介面的一种计算机语言。IDL 通过一种独立于编程语言的方式来描述接口，使得在不同平台上运行的对象和用不同语言编写的程序可以相互通信交流；比如，一个组件用 C++写成，另一个组件用 Java 写成。<br>IDL 通常用于远程调用软件。在这种情况下，一般是由远程客户终端调用不同操作系统上的对象组件，并且这些对象组件可能是由不同计算机语言编写的。IDL 建立起了两个不同操作系统间通信的桥梁。</li>\n<li><a href=\"https://p1.itc.cn/q_70/images03/20220217/2bd3a649a51c4cd08a37ac5c0e864e97.png\">idl 开发示意图</a></li>\n</ol>\n"},{"title":"IREE","url":"/2023/10/16/IREE/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.iree.dev/\">iree</a></li>\n</ol>\n","categories":["AI","IR"],"tags":["AI","IR","Compiler"]},{"title":"J5","url":"/2022/09/14/J5/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://developer.horizon.cc/forumDetail/185446371330059350\">多模型优先级调度</a></li>\n</ol>\n<h2 id=\"software-development\"><a href=\"#software-development\" class=\"headerlink\" title=\"software development\"></a>software development</h2><ol>\n<li>功能</li>\n<li>指标</li>\n<li>性能</li>\n</ol>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><ol>\n<li><a href=\"https://hub.docker.com/r/openexplorer/ai_toolchain_ubuntu_20_j5_cpu/tags\">ai_toolchain_ubuntu_20_j5_cpu</a></li>\n<li><a href=\"https://hub.docker.com/r/openexplorer/ai_toolchain_ubuntu_20_j5_gpu/tags\">ai_toolchain_ubuntu_20_j5_gpu</a></li>\n</ol>\n<h2 id=\"Model-Convert\"><a href=\"#Model-Convert\" class=\"headerlink\" title=\"Model Convert\"></a>Model Convert</h2><ol>\n<li>PTQ 根据算法计算 scale, QAT 训练的时候学习 scale</li>\n<li><code>PTQ</code> 后量化（即：Post-training Quantization，浮点定点转换方案 ）：先训练浮点模型，然后使用校准图片计算量化参数，将浮点模型转为量化模型。该方法简单、快捷，但将浮点模型直接转为量化模型难免会有一些量化损失，地平线浮点转换工具链中提供的后量化工具能做到 80%以上的模型量化误差小于 1%。</li>\n<li><code>QAT</code> 量化训练 （Quantization Aware Training）通过在训练过程中融入量化和反量化过程，来实现量化模型的精度恢复, 由于量化是每层独立进行的，所以每层的量化是不依赖于前一层量化的结果的，这就导致了在实际的 inference 过程中会出现误差累积的情况，我们需要一种可学习的 scale。QAT 就是在做这样一件事情</li>\n<li>浮点转定点工具链生成物是异构混合模型 bin 文件，与量化训练方案中最后的定点模型 hbm 文件有概念上的差异。</li>\n</ol>\n<h2 id=\"Runtime-部署\"><a href=\"#Runtime-部署\" class=\"headerlink\" title=\"Runtime 部署\"></a>Runtime 部署</h2><ol>\n<li><code>format</code>: NV12, NV12_SEPERATE, BGR, YUV</li>\n<li><code>layout</code>: NCHW or NHWC</li>\n<li><code>type</code>: float, S32, int8; quant and dequant 定浮点转换</li>\n<li><code>memory</code>: alloc, free, sync</li>\n<li><code>inference</code>: setinput, do, getoutput</li>\n<li><code>align</code>: model output align</li>\n</ol>\n<h2 id=\"hardware-acceleration\"><a href=\"#hardware-acceleration\" class=\"headerlink\" title=\"hardware acceleration\"></a>hardware acceleration</h2><ol>\n<li>VPS 硬件：提供了缩放，镜像，旋转，矫正，流控，金字塔等图像处理能力。硬件上由单个 IPU，单个金字塔 PYM，两个 GDC 组成。软件上则采用分组来实现分时复用硬件，最大支持 8 个组的分时复用。</li>\n<li>VENC&#x2F;VDEC 模块：编解码</li>\n</ol>\n<h2 id=\"金字塔配置\"><a href=\"#金字塔配置\" class=\"headerlink\" title=\"金字塔配置\"></a>金字塔配置</h2><ol>\n<li>参考《MU-3020-12-J5-视频通路配置指南》vpm 配置</li>\n<li>1920 _ 1080 -&gt; 896 _ 512（需要 16 的倍数)<ul>\n<li>bl 线性变换到 960 * 540</li>\n<li>ds roi 设置 960 * 540 roi 0, 0, 960, 540</li>\n<li>ds 设置 output 为 896 * 512</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><ol>\n<li>交叉编译: OE(OpenExplorer 天工开物开发平台)</li>\n<li>系统升级</li>\n<li>查看模型信息</li>\n<li>profiling</li>\n<li>dump 对数</li>\n<li><code>hrut_ddr -t all -p 1000000 -n 1</code> 查看 ddr 读写带宽</li>\n<li><code>hrut_bpuprofile -b 2 -r 0</code>查看 bpu 使用率</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://blog.csdn.net/m0_38043555/article/details/118278641\">一文了解模型量化中的 QAT 和 PTQ</a></li>\n<li><a href=\"https://developer.horizon.ai/api/v1/fileData/horizon_j5_open_explorer_v1_1_40c_py38cn_doc/oe_mapper/source/appendix/hardware/dev_board_kit.html\">j5 开发板信息</a></li>\n<li><a href=\"https://developer.horizon.ai/api/v1/fileData/horizon_j5_open_explorer_v1_1_40c_py38cn_doc/vdsp/dsp_rpc_api_doc/source/index.html\">horizon_j5_open_explorer_v1_1_40c_py38cn_doc</a></li>\n<li><a href=\"https://github.com/cad-rlc/ndsp-kp6\">Cadence NatureDSP Library for MathX KP6 DSP cores</a></li>\n<li><a href=\"https://developer.horizon.ai/api/v1/fileData/doc/ddk_doc/navigation/ai_toolchain/docs_cn/horizon_ai_toolchain_user_guide/chapter_6_appendix.html\">x3 模型官方性能</a></li>\n<li><a href=\"https://developer.horizon.cc/api/v1/fileData/horizon_j5_open_explorer_cn_doc/vdsp/dsp_example_doc/source/dsp_example.html#pointpillars\">pointpillar dps 加速</a></li>\n</ol>\n"},{"title":"JFrog","url":"/2023/01/16/JFrog/","content":"<h2 id=\"Artifactory\"><a href=\"#Artifactory\" class=\"headerlink\" title=\"Artifactory\"></a><a href=\"https://zhuanlan.zhihu.com/p/274996585\">Artifactory</a></h2><ol>\n<li>上传最好不要用 sudo 用户，否则容易覆盖之前文件，不好管理</li>\n<li>guest 用户可以禁止 ui 登录，防止用户被锁</li>\n<li>可以通过界面上传文件</li>\n<li>作为一个二进制包管理工具，可以用于管理构建产物：即把生成的 jar 包存放到 JFrog，当在生产环境进行部署时，Jenkins 直接从 JFrog 中拉取对应的 jar 包即可。</li>\n<li>官方的介绍：JFrog Artifactory 是一个可扩展的通用二进制存储库管理器，可在整个应用程序开发和交付过程中自动管理你的工件和依赖项。一句话概括：Artifactory 是一个存放制品（Artifacts）的工具。</li>\n<li>左下角 getting started</li>\n<li>允许匿名用户，否则 wget curl 下载不下来， <a href=\"https://juejin.cn/post/7080707817778184205\">link</a></li>\n<li>先创建 repo，再上传</li>\n<li>repo 分为：local, remote 和 virtual</li>\n<li>monitoring -&gt; storage 可以看各 repo 存储大小</li>\n<li>Application -&gt; Artifactory -&gt; artifacts 右上角 Set me up 可以查看 deploy 和 resolve 命令</li>\n<li>set me up 中可以设置 configue 来隐藏密码</li>\n<li>artifacts 中的文件可以单独下载，右上角下载符号</li>\n<li>有些文件可以预览，右上角…展开, 或者选中文件，右击</li>\n<li>可以查看下载次数和被谁下载</li>\n<li><a href=\"https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts\">artifacts 布局 layouts</a> 可以查看版本, 可以生成各种工具依赖的版本信息</li>\n<li>MD5 check：<code>echo 99 &gt; test.txt &amp;&amp; MD5=$(md5sum test.txt | awk &#39;&#123;print $1&#125;&#39;) &amp;&amp; curl -uxiyang.jia:APAQR97hg1swsSNZ -T test.txt -H &quot;X-Checksum-MD5:$&#123;MD5&#125;&quot; -L &quot;http://artifacts.phigent.io/artifactory/xiyang-test/test/test/test-1.0.3.txt&quot; -v</code></li>\n<li>可以通过 name, checksum, property 搜索 artifacts</li>\n<li><code>wget -O test.tar.gz --no-check-certificate  https://guest:Guest.123@xxx/artifactory/test.tar.gz</code> 下载, 覆盖原来文件</li>\n<li><code>curl -sSfLO https://guest:Guest.123@xxx/artifactory/test.tar.gz</code> 下载</li>\n</ol>\n<h2 id=\"with-gilab\"><a href=\"#with-gilab\" class=\"headerlink\" title=\"with gilab\"></a><a href=\"https://jfrog.com/blog/gitlab-and-artifactory-on-your-mark-get-set-build/\">with gilab</a></h2><h3 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h3><ol>\n<li>curl -L http:xxx 不加 -L 会自动转换为 https</li>\n<li>curl -v 查看中间过程</li>\n<li>shell</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">JFROG_USER=xiyang.jia</span><br><span class=\"line\">JFROG_PASSWD=APAQR97hg1swsSNZ</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">push_to_jfrog</span></span>() &#123;</span><br><span class=\"line\">        FILE=<span class=\"variable\">$1</span></span><br><span class=\"line\">        JFROG_PATH=http://artifacts.phigent.io/artifactory/<span class=\"variable\">$2</span></span><br><span class=\"line\">        MD5=$(<span class=\"built_in\">md5sum</span> <span class=\"variable\">$FILE</span> | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\">        curl -u<span class=\"string\">&quot;<span class=\"variable\">$&#123;JFROG_USER&#125;</span>:<span class=\"variable\">$&#123;JFROG_PASSWD&#125;</span>&quot;</span> -T <span class=\"variable\">$FILE</span> -H <span class=\"string\">&quot;X-Checksum-MD5:<span class=\"variable\">$&#123;MD5&#125;</span>&quot;</span> -L <span class=\"string\">&quot;<span class=\"variable\">$&#123;JFROG_PATH&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">push_dir_to_jfrog</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> $(find <span class=\"variable\">$1</span> -<span class=\"built_in\">type</span> f); <span class=\"keyword\">do</span></span><br><span class=\"line\">                push_to_jfrog <span class=\"variable\">$&#123;file&#125;</span> <span class=\"variable\">$2</span>/<span class=\"variable\">$&#123;file&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$1</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        push_dir_to_jfrog <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        push_to_jfrog <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Jenkins","url":"/2022/08/19/Jenkins/","content":"<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><ol>\n<li><a href=\"https://www.jenkins.io/doc/\">Doc</a></li>\n<li></li>\n</ol>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">% wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -</span><br><span class=\"line\">% sudo sh -c <span class=\"string\">&#x27;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#x27;</span></span><br><span class=\"line\">% sudo apt-get update</span><br><span class=\"line\">% sudo apt-get install jenkins</span><br><span class=\"line\">% sudo vi /etc/default/jenkins <span class=\"comment\">## change port</span></span><br><span class=\"line\">% sudo /etc/init.d/jenkins start</span><br><span class=\"line\"><span class=\"comment\">## http://localhost:port</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h2><ol>\n<li><a href=\"https://plugins.jenkins.io/ui/search?sort=installed&categories=&labels=&view=List&page=1&query=\">插件下载量排名</a></li>\n<li>在 Jenkins 界面，系统管理-&gt;管理插件-&gt;安装 SSH Plugin <a href=\"https://plugins.jenkins.io/ssh/\">ssh</a> <a href=\"https://fanlychie.github.io/post/jenkins-remote-ssh.html\">link</a></li>\n<li><a href=\"https://plugins.jenkins.io/gitlab-plugin/\">gitlab-plugin</a></li>\n<li><a href=\"https://plugins.jenkins.io/git-parameter/\">git parameter</a></li>\n<li><a href=\"https://plugins.jenkins.io/build-timeout/\">build timeout</a></li>\n<li><a href=\"https://plugins.jenkins.io/jobConfigHistory/\">jobConfigHistory</a></li>\n<li><a href=\"https://plugins.jenkins.io/rebuild/\">rebuild</a></li>\n<li><a href=\"https://plugins.jenkins.io/material-theme/\">material-theme</a> Indigo is good</li>\n<li><a href=\"https://plugins.jenkins.io/ansicolor/\">ansicolor</a></li>\n<li><a href=\"https://plugins.jenkins.io/display-console-output/\">display-console-output</a></li>\n</ol>\n<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><a href=\"https://www.cnblogs.com/mingerlcm/p/12728873.html\">jenkins 状态反馈给 gitlab</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1599050\">gitlab hook</a><ul>\n<li>使用 webhook, webhook 与异步编程中”订阅-发布模型”非常类似，一端触发事件，一端监听执行。<br><img src=\"https://segmentfault.com/img/remote/1460000020249992?w=1000&h=690\" alt=\"数据更新后通过 webhook主动推送\"></li>\n</ul>\n</li>\n<li>匿名用户查看权限 Manager Jenkins —&gt; Configure Global Security —&gt; 授权策略</li>\n<li>修改记录里有 git commit 历史</li>\n<li>可以看工作空间</li>\n<li>log rotation Job Configuration –&gt;Discard Old Builds:(丢弃旧的构建), job 描述正下方</li>\n<li>Add timestamps to the Console Output</li>\n<li>归档时记录所有归档成品的指纹</li>\n<li>工作区 job 目录下的 config.xml 文件比较重要，可以 git 管理起来，能恢复配置</li>\n<li>下载.war 包 <a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a></li>\n<li>使用命令： java -jar jenkins.war</li>\n<li>参考文档： <a href=\"https://jenkins.io/doc/book/\">https://jenkins.io/doc/book/</a></li>\n<li>远程部署：安装插件 <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+FTP+Plugin\">Publish Over FTP Plugin</a> publish over ssh FTP 用于传文件 SSH 用于在远程机器上执行命令</li>\n<li>定时构建： <a href=\"https://www.cnblogs.com/caoj/p/7815820.html\">https://www.cnblogs.com/caoj/p/7815820.html</a></li>\n<li>存档： <a href=\"https://blog.csdn.net/liqiangeastsun/article/details/79062806\">https://blog.csdn.net/liqiangeastsun/article/details/79062806</a> 文件位置 : .&#x2F;jobs&#x2F;test&#x2F;builds&#x2F;57&#x2F;archive ， deephi*</li>\n<li>文件命名：日期 + git 号 。gitnum&#x3D;<code>git log --pretty=oneline -1 | cut -b 1-8</code> date<em>temp&#x3D;<code>date +%m%d</code> mv app.c app</em>${date_temp}_${gitnum}.c</li>\n<li>文件 md5 值： <a href=\"http://ju.outofmemory.cn/entry/117335\">http://ju.outofmemory.cn/entry/117335</a></li>\n<li>邮箱：管理员地址 <a href=\"https://blog.csdn.net/songjiaping/article/details/51496977\">https://blog.csdn.net/songjiaping/article/details/51496977</a> 126 开启 smtp <a href=\"https://www.cnblogs.com/yangxia-test/p/4366172.html\">https://www.cnblogs.com/yangxia-test/p/4366172.html</a> <a href=\"https://www.jianshu.com/p/2afb099f2a79\">https://www.jianshu.com/p/2afb099f2a79</a> <a href=\"http://skyfar666.iteye.com/blog/1973434\">http://skyfar666.iteye.com/blog/1973434</a></li>\n<li>本地文件管理，源码管理不用 git 仓库，选择 none。就能在其他目录下工作，可以把要保留的文件传回到工作区，保存。</li>\n<li>如何获取远程机器的 log?</li>\n<li>Timestamper 控制台输出显示</li>\n<li>Workspace Cleanup Plugin</li>\n<li>blue ocean 插件</li>\n<li>增加项目描述 <a href=\"https://www.cnblogs.com/chongyou/p/7365351.html\">https://www.cnblogs.com/chongyou/p/7365351.html</a></li>\n<li>配置变更记录 <a href=\"https://blog.csdn.net/j3T9Z7H/article/details/78422565\">https://blog.csdn.net/j3T9Z7H/article/details/78422565</a></li>\n<li>配置</li>\n</ol>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>jenkins ssh 登录找不到 cmake, 因为 jenkins 会从&#x2F;usr&#x2F;bin 下找，和登录环境不一样。解决办法：修改客户端 ssh 配置，允许 PermitUserEnvironment <a href=\"https://docs.cloudbees.com/docs/cloudbees-ci-kb/latest/client-and-managed-masters/how-to-set-up-a-jenkins-agent-to-have-the-same-path-as-the-user-when-connected-via-remote-desktop\">link</a></li>\n</ol>\n"},{"title":"Jetson test","url":"/2021/05/14/Jetson-test/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>使用TensorRT中的trtexec测性能</li>\n<li>模型转化为engine后运行</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/NVIDIA-AI-IOT/jetson_benchmarks\">https://github.com/NVIDIA-AI-IOT/jetson_benchmarks</a></li>\n<li><a href=\"https://developer.nvidia.com/embedded/jetson-benchmarks\">https://developer.nvidia.com/embedded/jetson-benchmarks</a></li>\n<li><a href=\"https://github.com/dusty-nv/jetson-inference\">https://github.com/dusty-nv/jetson-inference</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/release/7.1/samples/opensource/trtexec\">https://github.com/NVIDIA/TensorRT/tree/release/7.1/samples/opensource/trtexec</a></li>\n</ol>\n","categories":["Computer","GPU"],"tags":["Jetson"]},{"title":"Kalman Filters","url":"/2021/01/30/Kalman-Filters/","content":"<h2 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept\"></a>Concept</h2><ol>\n<li>卡尔曼滤波是一个递归的<code>估计</code>，只要获知<code>上一时刻的状态估计</code>和<code>当前状态的观测</code>就可以计算<code>当前状态的估计</code>。</li>\n<li>卡尔曼滤波器不需要观测&#x2F;估计的历史记录。</li>\n<li>卡尔曼滤波器是一个纯粹的<code>时域滤波器</code>，而不像低通滤波器那样，需要在频率设计，然后转到时域应用。</li>\n<li>两个阶段：<ul>\n<li><code>预测</code>：由上一状态的估计做出对当前状态的估计</li>\n<li><code>更新</code>：利用当前状态的观测值<code>优化</code>预测阶段的估计值，以获取一个<code>更精确的当前状态估计</code></li>\n</ul>\n</li>\n<li>两种数据：<ul>\n<li><code>估计值</code></li>\n<li><code>观测值</code>：传感器测量值，如GPS位置。</li>\n</ul>\n</li>\n<li>线性系统与非线性系统：<ul>\n<li>判断标准：能不能通过上一次系统估计状态直接乘以某个矩阵得到预测状态？ 矩阵都是具体的值，与估计状态相乘后只是估计状态的线性变换。（还是测量状态不能直接与估计状态求差？）</li>\n<li><code>线性系统</code>： 预测状态 &#x3D; F * 上一次估计状态。例如：预测汽车位置，传感器获得位置值，假设很短时间内，系统是匀速运动或匀加速运动（对应两种模型）。可以通过上一时刻状态乘以矩阵得到预测值。</li>\n<li><code>非线性系统</code>：预测状态不能直接由上一次估计状态乘以一个矩阵得到。 如雷达跟踪飞机，估计状态为(x, y). 测量状态为径向距离r和夹脚。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Formulas\"><a href=\"#Formulas\" class=\"headerlink\" title=\"Formulas\"></a>Formulas</h2><ol>\n<li><img src=\"/images/kalman/formulas.jpg\" alt=\"5 basic formulas\"></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python\">Kalman-and-Bayesian-Filters-in-Python</a></li>\n<li><a href=\"https://blog.csdn.net/codesamer/article/details/81191487\">Using in car</a></li>\n<li><a href=\"https://www.jianshu.com/p/d51a3a7736ca\">基于Kalman滤波器的进行物体的跟踪</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/39912633\">图说卡尔曼滤波</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VFXf1lIZ3p8\">Youtube Matlab tutorial</a></li>\n</ol>\n","categories":["Algorithm","Kalman"],"tags":["Filters"]},{"title":"KataOS","url":"/2022/10/20/KataOS/","content":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://github.com/AmbiML/sparrow-manifest\">sparrow-manifest</a></li>\n<li><a href=\"https://opensource.googleblog.com/2022/10/announcing-kataos-and-sparrow.html\">announcing-kataos-and-sparrow</a></li>\n<li><a href=\"https://antmicro.com/blog/2022/08/running-rust-programs-in-sel4/\">Running Rust programs in seL4 using the sel4-sys crate</a></li>\n</ol>\n"},{"title":"LLM","url":"/2023/11/21/LLM/","content":"<h2 id=\"LLM-进化树\"><a href=\"#LLM-进化树\" class=\"headerlink\" title=\"LLM 进化树\"></a><a href=\"https://github.com/Mooler0410/LLMsPracticalGuide\">LLM 进化树</a></h2><p><img src=\"https://github.com/Mooler0410/LLMsPracticalGuide/raw/main/imgs/tree.jpg\" alt=\"LLM 进化树\"></p>\n<h2 id=\"语言模型质量评测\"><a href=\"#语言模型质量评测\" class=\"headerlink\" title=\"语言模型质量评测\"></a>语言模型质量评测</h2><ol>\n<li>信息论中，困惑度度量概率分布或概率模型的预测结果与样本的契合程度，困惑度越低则契合越准确。该度量可以用于比较不同模型之优劣。</li>\n<li><a href=\"https://huggingface.co/docs/transformers/perplexity\">PPL: perplexity</a></li>\n<li><a href=\"https://github.com/ggerganov/llama.cpp?tab=readme-ov-file#perplexity-measuring-model-quality\">perplexity-measuring-model-quality</a></li>\n</ol>\n<h2 id=\"concept\"><a href=\"#concept\" class=\"headerlink\" title=\"concept\"></a>concept</h2><ol>\n<li>“zero-shot”, “one-shot”, 和 “few-shot” 学习是指训练模型以使其能够处理它在训练过程中未直接遇到过的任务或类别的方法。<ul>\n<li>zero shot: 实际应用时，它需要对它在训练时从未见过的类别做出预测或决策。</li>\n<li>one shot: 模型对每个类别仅看到一个样本就要学会识别该类别</li>\n</ul>\n</li>\n<li><code>General Matrix Multiply (GeMM)</code><ul>\n<li><code>C = αAB + βC</code></li>\n<li>GEMM 是一种更通用的矩阵乘法操作。它不仅包括两个矩阵的乘法，还可以包括对这两个矩阵进行转置或共轭转置，以及将结果乘以一个标量或与另一个矩阵的和。</li>\n<li>在函数接口上,GEMM 通常需要传入更多的参数,包括缩放因子、转置选项等。而 matmul 接口更加简洁。</li>\n<li>在一些深度学习框架如 TensorFlow 和 PyTorch 中,matmul 是矩阵乘法的默认操作。而 GEMM 则由于其优化,常被用在需要高性能的场景。</li>\n</ul>\n</li>\n<li>奇怪的话可以放到 midjouney(or dell-e) 画出图像，助于理解</li>\n<li>token(令牌?) 是某个领域中一个抽象的语法或逻辑单元的称呼。在自然语言处理中,token 指一个文本串中基本的符号。比如一个句子可以被切分为多个词(word),每个词就是一个 token。</li>\n<li>prompt 提示很重要</li>\n<li>机器来找 prompt(提示)： hard prompt, soft prompt(adpter 放在 input), using reinforcement learning(加 generator), 让 llm 自己产生自己 prompt</li>\n<li>toolformer: 使用工具</li>\n<li>token 中文是字， 英文是 word piece, word 太多; unbreakable -&gt; un break able</li>\n<li>model 本质是函数</li>\n<li>prompting 给 chatgpt 催眠，设置限制，让 chatgpt 回答某方便问题，如设置中文聊天</li>\n<li>neural editing 训练好模型改参数</li>\n<li>machine unlearning 忘记曾经学过的东西， 遗忘某些涉密问题</li>\n<li>hyperparameter 超参数，学习算法的参数，不是神经网络的参数</li>\n<li>文字冒险游戏： chatgpt + midjourney + 语音</li>\n<li>腾讯语音情感 <a href=\"https://arxiv.org/abs/2301.13662\">https://arxiv.org/abs/2301.13662</a> <a href=\"https://dongchaoyang.top/InstructTTS/\">https://dongchaoyang.top/InstructTTS/</a></li>\n<li>embeddings:在某种程度上，就是用来降维的，降维的原理就是矩阵乘法 <a href=\"https://zhuanlan.zhihu.com/p/164502624\">一文读懂 Embedding 的概念</a></li>\n<li><a href=\"https://platform.openai.com/tokenizer\">tokenizer</a></li>\n<li>tokenizer 是将文本进行分词,通常分为单词(word)或子词(subword)单元。它的目标是划分语料的基本符号。embeddings 是将语料库中的词或字符映射到 dense 向量表示。通常先经过 tokenizer 得到词单元,然后再映射为稠密词向量。tokenizer 侧重文本符号的划分,主要方法是基于词典或规则进行分割。embeddings 侧重语义信息的编码,主要方法是基于语料训练词向量。</li>\n<li>AGI (Artificial General Intelligence): 人工通用智能或通用人工智能，是指在任何智能任务上都能表现得与人类智能相媲美的人工智能系统。</li>\n<li>AIGC (AI-Generated Content): 人工智能生成内容，指的是通过人工智能算法和模型自动或半自动生成的内容。这包括文本、图像、音乐、视频和其他媒体形式。</li>\n<li>大模型（Large Language Model，LLM）<br><img src=\"https://storage.googleapis.com/gweb-uniblog-publish-prod/original_images/1_Welcome_GenerativeMeena_CL_V02_150521_v2_720_25fps.gif\" alt=\"示意\"></li>\n<li>模型大小 7B(billion), 7B 表示 70 亿个可训练参数。吉比（gigabyte）是一个信息技术单位，。十亿（billion）是一个计数单位， 参数类型(float, int8)和数量(billion)决定模型的大小(gigabyte)</li>\n<li>Bard 是由 Google 开发的生成式人工智能聊天机器人，最初基于大型语言模型的 LaMDA 系列，后来基于 PaLM2。</li>\n<li>基础架构 transformer</li>\n<li><a href=\"https://claude.ai/chats\">claude</a> chatgpt 主要竞争对手</li>\n<li>webgpt: 产生的内容带引用网址, 先 gpt 处理文字， 得到关键字用于搜索引擎搜索，得到各网页结果，然后处理搜索结果，然后点选，处理网页中的内容，关联的收藏起来， 可以产生多个关键字， 多次搜索， 最终有多个收藏， 只处理这些收藏</li>\n<li>chatgpt 文字接龙， bert 文字填空</li>\n<li>大模型可以帮助完成强有力的事情 “A mouse riding on the head of an elephant, using reins to steer the giant creature.” (powered by Midjourney )</li>\n<li>对于大模型的期待：专才(finetune, adapter)，通才(instruction learning， in-context learning)</li>\n<li>finetune: update network parameters by gradient descent</li>\n<li>adapter(efficient fine tuning): 大模型加入插件(例如：加一层)， 只调整新添加插件参数, 优势：不用调整大模型原始参数</li>\n<li>in-context learning(示例学习): 给一些例子， 例子可能只是用于启动任务, 唤醒记忆。 更大的模型可能从例子学习到信息更多, 输入一些分类 feature 例子(直接给数字和 label)，可以将大模型变为一个分类器</li>\n<li>learing in-context learning: 学习示例学习结果更好，但数据难收集</li>\n<li>instruction learning</li>\n<li>chain-of-thought(CoT) prompting: 训练时给出推论再给结果， 结果正确率会高很多。多次推论有不同的答案再投票.。 （chatgpt 默认列出计算过程，如果不让列详细过程， 结果可能会差）</li>\n<li>参数越多，数据越多， 效果越好</li>\n<li>emergent ability 顿悟时刻 <a href=\"https://arxiv.org/pdf/2206.07682.pdf\">Emergent Abilities of Large Language Models</a> 10B</li>\n<li><a href=\"https://arxiv.org/abs/2207.05221\">Language Models (Mostly) Know What They Know</a></li>\n<li>calibration: 大模型 softmax 分数越高，正确率越高，大模型知道知己是否在瞎掰</li>\n<li>模型越大结果越差例子： <a href=\"https://github.com/inverse-scaling/prize\">inverse-scaling&#x2F;prize</a>, 更大的模型可能会顿悟，结果会更好; U-shaped U 型曲线</li>\n<li><a href=\"https://www.jmlr.org/papers/v23/21-0998.html\">Switch Transformers</a> 训练时用所有参数，推理时只用部分参数，加快推理运行</li>\n<li>从数据中学习语言：世界知识(尝试)， 语言知识</li>\n<li>data preparation: 数据处理<ul>\n<li><a href=\"https://arxiv.org/abs/2112.11446\">Scaling Language Models: Methods, Analysis &amp; Insights from Training Gopher</a></li>\n<li><a href=\"https://arxiv.org/abs/2107.06499\">Deduplicating Training Data Makes Language Models Better</a></li>\n</ul>\n</li>\n<li>固定算力资源情况下：模型参数(思考)， data(学习) 成反比； 大模型小数据(思而不学)， 小模型大数据(学而不思); 学思应该平衡<ul>\n<li><a href=\"https://arxiv.org/abs/2203.15556\">Training Compute-Optimal Large Language Models</a> 给出算力，参数量和数据量如何确定</li>\n<li>LLaMa 使用了这个知识</li>\n</ul>\n</li>\n<li>fintuning 和 reinforcement lerning 效果很好 <a href=\"https://arxiv.org/abs/2203.02155\">Training language models to follow instructions with human feedback</a> 小模型也可以胜大模型</li>\n<li>openai 收齐了很多问题，所以即使 chatgpt 模型不那么大，也比更大模型好</li>\n<li><code>MoE(Mixture of Experts)</code>模型指的是专家混合模型,是一类将多个模型专家进行混合的组合结构。例如： Mixtral 8x7B</li>\n</ol>\n<h2 id=\"生成内容\"><a href=\"#生成内容\" class=\"headerlink\" title=\"生成内容\"></a>生成内容</h2><ol>\n<li>文本</li>\n<li>语音</li>\n<li>声音</li>\n<li>图像</li>\n<li>视频</li>\n</ol>\n<h2 id=\"生成方式\"><a href=\"#生成方式\" class=\"headerlink\" title=\"生成方式\"></a>生成方式</h2><ol>\n<li><p>各个击破 Autoregressive(AR) model</p>\n<ul>\n<li>速度慢 无法并行</li>\n<li>质量高</li>\n<li>常用于文字生成</li>\n</ul>\n</li>\n<li><p>一次到位 Non-autoregressive(NAR) model</p>\n<ul>\n<li>速度快</li>\n<li>质量较差</li>\n<li>冲用于图片生成</li>\n</ul>\n</li>\n<li><p>各个击破和一次到位结合</p>\n<ul>\n<li>先各个击破产生中间产物(先决定大方向)，再一次到位</li>\n<li>一次到位改成 N 次到位(先一次到位再各个击破) diffusion model</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"多任务学习-Multi-Task-Learning-和多模态学习-Multimodal-Learning\"><a href=\"#多任务学习-Multi-Task-Learning-和多模态学习-Multimodal-Learning\" class=\"headerlink\" title=\"多任务学习(Multi-Task Learning)和多模态学习(Multimodal Learning)\"></a>多任务学习(Multi-Task Learning)和多模态学习(Multimodal Learning)</h3><ol>\n<li><p>目标差异</p>\n<ul>\n<li>多任务学习的目标是同时学习多个相关的任务,在不同任务间实现知识迁移,从而 mutually improve 模型的泛化性能。</li>\n<li>而多模态学习是为了建模和理解包含多个模态(文本、图像、语音等)的单一任务或场景。</li>\n</ul>\n</li>\n<li><p>方法差异</p>\n<ul>\n<li>多任务学习通常是共享底层特征表示,在顶层分出多个 task-specific 的输出层。</li>\n<li>多模态学习则更关注不同模态间的交互建模、对齐、融合,学习联合的媒体表征。</li>\n</ul>\n</li>\n<li><p>应用差异</p>\n<ul>\n<li>多任务学习的应用更广泛,从计算机视觉、NLP 到健康领域都有。</li>\n<li>多模态应用更集中在人机交互、信息检索、场景理解等领域。</li>\n</ul>\n</li>\n<li><p>总结</p>\n<ul>\n<li>多任务学习 optimize 同一模型在不同任务上的泛化性能</li>\n<li>多模态学习 optimize 不同媒体表征的融合,用于理解复杂的多模态场景或问题。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"多模态\"><a href=\"#多模态\" class=\"headerlink\" title=\"多模态\"></a>多模态</h3><ol>\n<li><a href=\"https://openai.com/research/clip\">clip</a> <a href=\"https://imzhanghao.com/2022/10/27/multimodal-learning/\">multimodal-learning 中文解析</a></li>\n</ol>\n<h2 id=\"排名\"><a href=\"#排名\" class=\"headerlink\" title=\"排名\"></a>排名</h2><ol>\n<li><a href=\"https://crfm.stanford.edu/helm/lite/latest/#/leaderboard\">stanford helm leaderboard</a></li>\n<li><a href=\"https://github.com/CLUEbenchmark/SuperCLUE\">SuperCLUE 中文通用大模型综合性基准</a></li>\n<li><a href=\"https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard\">open_llm_leaderboard</a></li>\n<li><a href=\"https://arena.lmsys.org/\">UC 伯克利发布大模型排行榜 需要查看 leaderboard</a></li>\n</ol>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><ol>\n<li><a href=\"https://laion.ai/\">laion</a> 5B images, 图像生成训练集<ul>\n<li><a href=\"https://rom1504.github.io/clip-retrieval/?back=https://knn.laion.ai&index=laion5B-H-14&useMclip=false\">online search</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"huggine-face\"><a href=\"#huggine-face\" class=\"headerlink\" title=\"huggine face\"></a>huggine face</h2><ol>\n<li><a href=\"https://huggingface.co/models\">models</a></li>\n<li><a href=\"https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard\">open_llm_leaderboard</a></li>\n<li><code>dataset = load_dataset(&quot;/mnt/data-2/home/xiyang.jia/TensorRT-LLM/examples/bloom/cnn_dailymail/cnn_dailymail.py&quot;, &quot;3.0.0&quot;)</code> 从本地加载数据集</li>\n</ol>\n<h2 id=\"sota-models\"><a href=\"#sota-models\" class=\"headerlink\" title=\"sota models\"></a>sota models</h2><ol>\n<li><a href=\"https://openai.com/gpt-4\">gpt-4</a></li>\n<li><a href=\"https://ai.meta.com/llama/\">llama</a></li>\n<li><a href=\"https://ai.google/discover/palm2/\">palm2</a></li>\n<li><a href=\"https://www.anthropic.com/index/claude-2\">claude-2</a></li>\n</ol>\n<h2 id=\"llama\"><a href=\"#llama\" class=\"headerlink\" title=\"llama\"></a><a href=\"https://github.com/facebookresearch/llama\">llama</a></h2><ol>\n<li>读音： 拉马（西班牙语通话的意思)</li>\n<li>clone 之后执行 download.sh, 需要官网申请的 url</li>\n<li><a href=\"https://github.com/facebookresearch/llama-recipes/tree/main/demo_apps\">demo_apps</a></li>\n</ol>\n<h2 id=\"gpt\"><a href=\"#gpt\" class=\"headerlink\" title=\"gpt\"></a>gpt</h2><ol>\n<li><a href=\"https://www.youtube.com/watch?v=kCc8FmEb1nY\">Let’s build GPT: from scratch, in code, spelled out.</a></li>\n<li>GPT(generative pre-trained transformer)</li>\n<li><a href=\"https://github.com/run-llama/rags\">rags</a> RAGs is a Streamlit app that lets you create a RAG pipeline from a data source using natural language.</li>\n<li>chatgpt：文字接龙</li>\n<li>gpt 自监督学习(pre train)得到的模型(基础模型)，chatgpt 在 gpt 基础上监督学习(finetune)</li>\n<li>chatgpt 实际是分类问题， 从使用者角度是生成式学习（生成句子：多个分类问题）</li>\n<li>chatgpt 评价是增强学习</li>\n<li>chatgpt: gpt -&gt; 监督学习 -&gt; 增强学习</li>\n</ol>\n<h2 id=\"bing-copilot\"><a href=\"#bing-copilot\" class=\"headerlink\" title=\"bing copilot\"></a><a href=\"https://www.bing.com/\">bing copilot</a></h2><h2 id=\"precision-精度\"><a href=\"#precision-精度\" class=\"headerlink\" title=\"precision 精度\"></a>precision 精度</h2><ol>\n<li>float32</li>\n<li>float16</li>\n<li>bfloat16</li>\n<li>8bit</li>\n<li>4bit</li>\n<li>GPTQ</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/Mooler0410/LLMsPracticalGuide\">LLMsPracticalGuide</a></li>\n<li><a href=\"https://z7nobhiey2.feishu.cn/file/JTa0bZ38RohzwTx9zjucuDmunVe\">oneflow 技术年货 2023</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=yiY4nPOzJEg&list=PLJV_el3uVTsOePyfmkfivYZ7Rqr2nMk3W\">李宏毅 生成式 AI</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=zjkBMFhNj_g\">Intro to Large Language Models</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLFXJ6jwg0qW-7UM8iUTj3qKqdhbQULP5I\">李沐论文精度</a></li>\n<li><a href=\"https://openai.com/research/clip\">openai.com&#x2F;research</a></li>\n</ol>\n"},{"title":"LaTeX","url":"/2022/09/25/LaTeX/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>LaTeX: Lamport TeX</li>\n<li>读音：莱泰克</li>\n<li><a href=\"https://www.overleaf.com/learn/latex/Font_sizes%2C_families%2C_and_styles\">调整字体大小</a></li>\n<li>中文问题 <code>\\begin&#123;CJK&#125;&#123;UTF8&#125;</code> 换成 <code>\\begin&#123;CJK&#125;&#123;gbsn&#125;</code> <a href=\"https://www.cnblogs.com/zyl910/archive/2013/06/02/doxygen_pdf_chinese.html\">link</a></li>\n<li>换页问题： <code>\\doxysection</code> 之前加 <code>\\newpage</code></li>\n<li><a href=\"https://www.overleaf.com/learn/latex/Headers_and_footers\">fancy Headers_and_footers</a><ul>\n<li><code>O</code> or <code>E</code>: to specify Odd or Even pages</li>\n<li><code>H</code> or <code>F</code>: to indicate Header or Footer</li>\n<li><code>L</code>, <code>C</code> or <code>R</code>: for the Left, Centre and Right “zone” of the header or footer</li>\n</ul>\n</li>\n<li><code>\\pagestyle&#123;fancyplain&#125;</code> doxygen refman.tex 删除之后页眉页脚不再有横杠</li>\n<li>pagestyle <code>\\pagestyle&#123;⟨style⟩&#125;</code> <a href=\"https://www.overleaf.com/learn/latex/Headers_and_footers\">link</a><ul>\n<li>empty: no headers or footers on pages</li>\n<li>plain: no page headers, footers consist of a centered page number</li>\n<li>headings: no footers, headers contains class-specific information and page number</li>\n<li>myheadings: no footers, headers contains page number and user-supplied information</li>\n</ul>\n</li>\n<li>picture in header <a href=\"https://tex.stackexchange.com/a/122936\">link</a> picture 下可以添加官网网址，并加上点击链接 <code>\\fancyhead[L]&#123;\\includegraphics[width=3cm]&#123;logo1&#125; \\\\\\href&#123;https://www.wikibooks.org&#125;&#123;Wikibooks home&#125;&#125;</code></li>\n<li>oneside or twoside <a href=\"https://www.overleaf.com/learn/latex/Single_sided_and_double_sided_documents#Difference_between_one-side_and_two-side_documents\">link</a></li>\n<li>chapter style <a href=\"https://tex.stackexchange.com/a/18605\">link</a></li>\n<li><a href=\"https://www.overleaf.com/learn/latex/Lists_of_tables_and_figures\">list of features and tables</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">% Headers &amp; footers</span><br><span class=\"line\">\\usepackage&#123;fancyhdr&#125;</span><br><span class=\"line\">\\pagestyle&#123;fancy&#125;</span><br><span class=\"line\">\\setlength\\headheight&#123;32pt&#125;</span><br><span class=\"line\">\\fancyhead&#123;&#125;</span><br><span class=\"line\">\\fancyhead[L]&#123;\\includegraphics[width=3cm]&#123;logo1&#125;&#125;</span><br><span class=\"line\">\\fancyhead[R]&#123;\\text&#123;dcv-cpp 开发手册&#125; \\\\[4pt] \\\\\\text&#123;\\fancyplain&#123;&#125;&#123;\\rightmark&#125;&#125;&#125;</span><br><span class=\"line\">% \\renewcommand&#123;\\headrulewidth&#125;&#123;0pt&#125;</span><br><span class=\"line\">% \\renewcommand&#123;\\footrulewidth&#125;&#123;0pt&#125;</span><br><span class=\"line\">\\renewcommand&#123;\\headruleskip&#125;&#123;2.5pt&#125;</span><br><span class=\"line\">% \\renewcommand&#123;\\footruleskip&#125;&#123;0pt&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首页设置</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin&#123;titlepage&#125;</span><br><span class=\"line\">\\vspace*&#123;7cm&#125;</span><br><span class=\"line\">\\begin&#123;center&#125;%</span><br><span class=\"line\">\\includegraphics[width=4cm]&#123;logo1&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\textbf&#123;\\Huge heimdallr-\\/sdk 用户手册 \\\\[3ex]\\Large v1.\\+0.\\+0 &#125;\\\\</span><br><span class=\"line\">\\vfill</span><br><span class=\"line\">\\vspace*&#123;1cm&#125;</span><br><span class=\"line\">&#123;\\large 制作者 PhiGent Robotics&#125;\\\\</span><br><span class=\"line\">\\end&#123;center&#125;</span><br><span class=\"line\">\\end&#123;titlepage&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"editer\"><a href=\"#editer\" class=\"headerlink\" title=\"editer\"></a>editer</h2><ol>\n<li><a href=\"https://github.com/James-Yu/LaTeX-Workshop\">vscode</a></li>\n<li><a href=\"https://www.overleaf.com/\">online editer overleaf</a><ul>\n<li>点击可以到对应代码</li>\n<li>可以修改主题， 编译器, 字体大小，style 等</li>\n<li>添加 package <a href=\"https://tex.stackexchange.com/a/536730\">link</a></li>\n<li>doxygen 需要的 sty: tabu_doxygen.sty, ongtable_doxygen.sty, doxygen.sty</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Tutorial\"><a href=\"#Tutorial\" class=\"headerlink\" title=\"Tutorial\"></a>Tutorial</h2><ol>\n<li><a href=\"https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes\">overleaf Learn_LaTeX_in_30_minutes</a></li>\n<li><a href=\"https://github.com/luong-komorebi/Begin-Latex-in-minutes\">Begin-Latex-in-minutes</a></li>\n<li><a href=\"https://github.com/luong-komorebi/Begin-Latex-in-minutes/blob/master/Translation-Chinese.md\">Begin-Latex-in-minutes Chinese</a></li>\n</ol>\n<h2 id=\"简历模板\"><a href=\"#简历模板\" class=\"headerlink\" title=\"简历模板\"></a>简历模板</h2><ol>\n<li><p>The CV presents a full history of your academic credentials, so the length of the document is variable. In contrast, a resume presents a concise picture of your skills and qualifications for a specific position, so length tends to be shorter and dictated by years of experience (generally 1-2 pages).</p>\n</li>\n<li><p>CV 是履历，Resume 是简历。</p>\n<ul>\n<li>Resume，简述于求职相关的教育背景和工作经历，其目的在于说服用人单位雇用自己；</li>\n<li>CV，Curriculum Vitae 事集中说明学术工作，不重视与文化程度和学习成绩无直接关系的资料。</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/posquit0/Awesome-CV\">Awesome-CV</a> CV: Curriculum Vitae 个人简历</p>\n</li>\n<li><p><a href=\"https://www.overleaf.com/latex/templates/awesome-cv/dfnvtnhzhhbm\">overleaf awesome-cv template</a></p>\n</li>\n<li><p><a href=\"https://github.com/jankapunkt/latexcv/tree/master/sidebar\">latexcv</a></p>\n</li>\n<li><p><a href=\"https://github.com/dyweb/awesome-resume-for-chinese\">awesome-resume-for-chinese</a></p>\n</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/HarisIqbal88/PlotNeuralNet\"> drawing neural networks for reports and presentation</a></li>\n<li><a href=\"https://github.com/Wandmalfarbe/pandoc-latex-template\">pandoc-latex-template</a></li>\n<li><a href=\"https://www.ti.com/lit/an/spracz2/spracz2.pdf?ts=1664353778597&ref_url=https%253A%252F%252Fwww.google.com%252F\">TI 文档参考</a></li>\n</ol>\n"},{"title":"Life-experience","url":"/2022/10/09/Life-experience/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><code>找到内心的召唤</code>， 做事要培养兴趣，不然很难做好 <code>Hackers write better code when it&#39;s for their own satisfaction instead of for pay.</code></li>\n<li><code>多尝试</code>，别怕出错</li>\n<li><code>不要用反问</code> 老板要是换个说法，说“这个文件需要打印两份”。你觉得哪种说法更容易接受呢？明显后者听起来舒服多了。 比如你打印文件，老板跟你说“你怎么只打印一份啊？老板要是换个说法，说“这个文件需要打印两份”。你觉得哪种说法更容易接受呢？明显后者听起来舒服多了。老板要是换个说法，说“这个文件需要打印两份”。你觉得哪种说法更容易接受呢？明显后者听起来舒服多了。</li>\n<li><code>能够轻易得到答案的简单问题不要问出口</code>，那并不会显得你很好学，反而会显得你无知又懒惰。</li>\n<li><code>不经过思考后的答案不要脱口而出</code>，控制住嘴巴是你学会成熟的第一步。</li>\n<li><code>说话尽量不要带“吧”字</code>，好和好吧，行和行吧，听你的和听你的吧，前者是直接坦率的，后者是犹豫而无奈的。要做就做，干脆一点，不然为何答应</li>\n<li><code>要把自己当作一个公司去运营</code>，要有战略方向（你的人生目标），要有运营路径（你的行动方案），要有产品竞争力（你的个人能力维度），要有营销（你的公开表达），要有财务思维（你的收支平衡）</li>\n<li><code>职场没有功劳就没有苦劳</code> 只有建立在功劳基础上的苦劳，才有价值。</li>\n<li><code>远离抱怨的人</code></li>\n<li><code>生气时，学会闭嘴</code> 生气时，情绪完全被动物大脑控制，很容易得罪人。像钉子钉墙一样，就算把钉子拔出来，墙依然会有孔 最好的办法就是深呼吸，闭嘴。</li>\n<li><code>如果找不到热爱的事业，先做最擅长的工作</code></li>\n<li><code>别糊弄</code></li>\n<li>别人找你帮忙的时候，不要果断答应。如果对方是爽快之人，你可以同样爽快交往。但对大部分人，不要急于表露自己的热情好客，你的直爽只会把你的付出变得廉价，在他眼里你办这事没有任何难度，不会从心里感激你，只是把你当工具人。</li>\n</ol>\n"},{"title":"MLIR","url":"/2023/10/12/MLIR/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>MLIR 即 Multi-Level Intermediate Representation，多级的中间表示。</li>\n<li>mlir 只是个编译器框架，本身并没有什么完整功能。所以可以参考一些基于 MLIR 做的开源项目。</li>\n<li>MLIR 能够很好地桥接高层 DSL 和底层编译器（如 LLVM）。</li>\n<li>we do not intend MLIR to be a source language that end-users would themselves write kernels in (analogous to CUDA C++). On the other hand, MLIR provides the backbone for representing any such DSL and integrating it in the ecosystem.</li>\n</ol>\n","categories":["AI","IR"],"tags":["AI","IR","Compiler"]},{"title":"Links","url":"/2021/11/29/Links/","content":"<h2 id=\"Usefull-Tools\"><a href=\"#Usefull-Tools\" class=\"headerlink\" title=\"Usefull Tools\"></a>Usefull Tools</h2><ol>\n<li><a href=\"https://sourcegraph.com/\"><code>搜代码</code>：sourcegrah</a></li>\n<li><a href=\"https://readthedocs.org/\"><code>搜文档</code>：readthedocs</a></li>\n<li><a href=\"https://unbug.github.io/codelf/\"><code>搜名字</code>：codelf</a></li>\n<li><a href=\"http://libgen.rs/\"><code>搜图书</code>：创世纪图书馆</a></li>\n<li><a href=\"https://sci-hub.se/\"><code>搜文章</code>：SCI Hub</a></li>\n<li><a href=\"https://unsplash.com/\"><code>搜图片</code>：unsplash</a></li>\n<li><a href=\"https://www.programmingfonts.org/#ubuntu\"><code>搜主题</code>：programmingfonts</a></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol>\n<li><a href=\"https://github.com/EbookFoundation/free-programming-books/blob/main/books/free-programming-books-zh.md\">free-programming-books</a></li>\n<li><a href=\"https://epochai.org/trends\">ai trends</a></li>\n<li><a href=\"https://jiaxiyang-streamlit-example-streamlit-app-t8698c.streamlit.app/\">csv view server</a></li>\n<li><a href=\"https://it-tools.tech/\">it-tools</a><ul>\n<li><a href=\"https://it-tools.tech/text-diff\">text-diff</a></li>\n<li><a href=\"https://it-tools.tech/json-diff\">json-diff</a></li>\n<li><a href=\"https://it-tools.tech/json-prettify\">json-prettify</a></li>\n</ul>\n</li>\n<li><a href=\"https://discord.com/app\">discord</a></li>\n<li><a href=\"https://github.com/kamranahmedse/developer-roadmap\">developer-roadmap</a></li>\n<li><a href=\"https://github.com/codecrafters-io/build-your-own-x\">build-your-own-x</a></li>\n<li><a href=\"https://github.com/donnemartin/system-design-primer\">system-design-primer(200K star)</a></li>\n<li><a href=\"https://github.com/gradio-app/gradio\">gradio 机器学习应用</a></li>\n<li><a href=\"https://imgbb.com/\">图片共享</a></li>\n<li><a href=\"https://imgur.com/\">imgur</a></li>\n<li><a href=\"https://poe.com/Sage\">Sage</a></li>\n<li><a href=\"https://github.com/lencx/ChatGPT\">ChatGPT app</a></li>\n<li><a href=\"https://chat.openai.com/\">chat.openai</a></li>\n<li><a href=\"https://aicodehelper.com/chat/index.html\">aicodehelper</a></li>\n<li><a href=\"https://code.meideng.dev/\">在线 coding</a></li>\n<li><a href=\"https://www.speedscope.app/\">性能分析：speedscope</a></li>\n<li><a href=\"https://fossies.org/\">代码仓库 fossies(可以设置 theme)</a></li>\n<li><a href=\"https://fossies.org/dox/all.html\">fossies doxygen lists</a></li>\n<li><a href=\"https://mermaid.live/\">mermaid 在线 uml</a></li>\n<li><a href=\"http://www.plantuml.com/plantuml/uml/\">plantUML 在线 uml</a></li>\n<li><a href=\"https://dreampuf.github.io/GraphvizOnline\">GraphvizOnline</a></li>\n<li><a href=\"https://devhints.io/\">cheatsheat 汇总</a></li>\n<li><a href=\"https://manned.org/\">Linux man pages online</a></li>\n<li><a href=\"https://excalidraw.com/\">在线画图工具 excalidraw</a></li>\n<li><a href=\"https://www.canva.com/\">在线设计工具 canva</a></li>\n<li><a href=\"https://express.adobe.com/zh-Hans-CN/sp\">在线设计工具 express.adobe</a></li>\n<li><a href=\"https://www.processon.com/\">在线流程图 processon</a></li>\n<li><a href=\"https://wandbox.org/\">在线代码运行</a></li>\n<li><a href=\"https://regex101.com/\">正则表达测试</a></li>\n<li><a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\">正则表达式解释</a></li>\n<li><a href=\"https://www.desmos.com/calculator?lang=zh-CN\">数学公式可视化</a></li>\n<li><a href=\"https://www.mathjax.org/#demo\">mathjax</a></li>\n<li><a href=\"https://coolors.co/palettes/palettes\">color palettes</a></li>\n<li><a href=\"https://paperswithcode.com/\">paperwithcode</a></li>\n<li><a href=\"https://stackedit.io/\">在线 markdown</a></li>\n<li><a href=\"https://www.overleaf.com/\">在线 LaTeX</a></li>\n<li><a href=\"https://picwish.cn/upload\">在线抠图</a></li>\n<li><a href=\"https://www.web2pdfconvert.com/\">在线 web2pdf</a></li>\n<li><a href=\"https://manytools.org/hacker-tools/convert-images-to-ascii-art/\">在线 image to ASCII art</a></li>\n<li><a href=\"http://patorjk.com/software/taag/#p=testall&c=c%2B%2B&f=3D%20Diagonal&t=PhiGent%20Heimdallr\">在线 string to ASCII art</a> Larry 3D</li>\n<li><a href=\"https://fontawesome.com/icons\">fontawesome</a></li>\n<li><a href=\"https://threejs.org/examples/#webgl_animation_skinning_morph\">threejs 网页动画</a></li>\n<li><a href=\"http://www.daojishiqi.com/bjtime.asp\">北京时间，用于拍屏测延迟</a></li>\n<li><a href=\"https://github.com/nadermx/backgroundremover\">移除图片视频背景 backgroundremover</a></li>\n</ol>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h2><ol>\n<li><a href=\"https://roadmap.sh/cpp\">c++ roadmap</a></li>\n<li><a href=\"https://cppcli.net/\">cling online</a></li>\n<li><a href=\"https://github.com/root-project/cling/\">cling the-interactive-c++-interpreter</a></li>\n<li><a href=\"https://cpp.sh/\">cpp.sh online cpp compiler</a></li>\n<li><a href=\"https://github.com/changkun/modern-cpp-tutorial/blob/master/book/zh-cn/toc.md\">modern-cpp-tutorial</a></li>\n<li><a href=\"https://github.com/fffaraz/awesome-cpp#readme\">Awesome cpp</a></li>\n<li><a href=\"https://github.com/gabime/spdlog\">更快的 log spdlog</a></li>\n<li><a href=\"https://github.com/catchorg/Catch2\">新 test 框架 Catch2</a>a</li>\n<li><a href=\"https://www.techiedelight.com/generate-random-float-value-in-cpp/\">代码在线运行</a></li>\n<li><a href=\"https://wandbox.org/\">Compiler on line wandbox</a></li>\n<li><a href=\"https://cppinsights.io/\">CppInsights</a></li>\n<li><a href=\"https://godbolt.org/\">Godbolt</a></li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\">Cppreference</a></li>\n<li><a href=\"https://github.com/changkun/modern-cpp-tutorial/tree/master/book/zh-cn\">modern-cpp-tutorial</a></li>\n<li><a href=\"https://github.com/AnthonyCalandra/modern-cpp-features\">modern-cpp-features</a></li>\n<li><a href=\"https://stroustrup.com/videos.html\">Bjarne Stroustrup</a></li>\n<li><a href=\"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#main\">CppCoreGuidelines</a></li>\n<li><a href=\"https://cppcon.org/\">CppCon</a></li>\n<li><a href=\"https://cppcon.org/b2b/\">Back to Basics</a></li>\n<li><a href=\"https://www.youtube.com/user/CppCon/\">Youtube CppCon video</a></li>\n<li><a href=\"https://github.com/CppCon\">CppCon resources</a></li>\n<li><a href=\"https://github.com/compiler-explorer/compiler-explorer\">Compiler explore</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=kIoZDUd5DKw\">Compiler explore video</a></li>\n<li><a href=\"https://quick-bench.com/\">Quick C++ benchmark</a></li>\n<li><a href=\"https://en.cppreference.com/w/cpp/compiler_support\">Compile support</a></li>\n<li><a href=\"https://github.com/CppCon/CppCon2019/blob/master/Presentations/modern_linux_cpp_debugging_tools__under_the_covers/modern_linux_cpp_debugging_tools__under_the_covers__greg_law_and_dewang_li__cppcon_2019.pdf\">Debug tools</a></li>\n<li><a href=\"https://github.com/CppCon/CppCon2019/blob/master/Presentations/lifetime_analysis_for_everyone/lifetime_analysis_for_everyone__matthias_gehre_gabor_horvath__cppcon_2019.pptx\">Lifetime analysis for everyone</a></li>\n<li><a href=\"https://github.com/huihut/interview\">Interview</a></li>\n<li><a href=\"https://github.com/CyC2018/CS-Notes\">CS-Notes</a></li>\n<li><a href=\"https://blog.csdn.net/qq_38238296/article/details/79841395?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param\">Factory pattern</a></li>\n</ol>\n<h2 id=\"C-Concurrent-Programming\"><a href=\"#C-Concurrent-Programming\" class=\"headerlink\" title=\"C++ Concurrent Programming\"></a>C++ Concurrent Programming</h2><ol>\n<li><a href=\"https://github.com/taskflow/awesome-parallel-computing\">awesome-parallel-computing</a></li>\n<li><a href=\"https://github.com/taskflow/taskflow\">taskflow</a></li>\n<li><a href=\"https://b-ok.lat/book/3688262/d57395?dsource=recommend&regionChanged=&redirect=4729105\">C++ Concurrency in action 2</a></li>\n<li><a href=\"https://github.com/xiaoweiChen/CPP-Concurrency-In-Action-2ed-2019\">C++ Concurrency in action Chinese</a></li>\n<li><a href=\"https://github.com/CppCon/CppCon2019/blob/master/Presentations/back_to_basics_atomics_locks_and_tasks/back_to_basics_atomics_locks_and_tasks__rainer_grimm__cppcon_2019.pdf\">Back to basics locks and tasks</a></li>\n<li><a href=\"https://github.com/thrust/thrust\">thrust</a></li>\n<li><a href=\"https://github.com/vesoft-inc/nebula\">nebula</a></li>\n</ol>\n<h2 id=\"Emacs\"><a href=\"#Emacs\" class=\"headerlink\" title=\"Emacs\"></a>Emacs</h2><ol>\n<li><a href=\"https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf\">GNU Emacs</a></li>\n<li><a href=\"http://melpa.org/\">Melpa</a></li>\n<li><a href=\"https://manateelazycat.github.io/emacs/2019/05/12/emacs-hackers.html\">Emacs 黑客列表</a></li>\n<li><a href=\"https://emacs-china.org/\">Emacs China</a></li>\n<li><a href=\"https://www.gnu.org/software/emacs/tour/index.html\">Tour Of Emacs</a></li>\n<li><a href=\"https://github.com/emacs-tw/awesome-emacs\">Awesome emacs</a></li>\n<li><a href=\"https://github.com/purcell/emacs.d\">Purcell config</a></li>\n<li><a href=\"http://ergoemacs.org/emacs/emacs.html\">Xah Lee</a></li>\n<li><a href=\"https://github.com/zamansky/dot-emacs\">Zamansky Config</a></li>\n<li><a href=\"https://cestlaz.github.io/stories/emacs/\">Zamansky Tutorial</a></li>\n<li><a href=\"https://github.com/jiaxiyang/100ms_dot_emacs\">My Config</a></li>\n<li><a href=\"https://github.com/jiaxiyang/leader-key-mode/blob/master/leader-key-mode.el\">My Leader Key</a></li>\n<li><a href=\"https://github.com/wcy123/100ms_dot_emacs\">Wcy Config</a></li>\n<li><a href=\"http://ergoemacs.org/emacs/emacs_pinky_2020.html\">Emacs Pinky</a></li>\n<li><a href=\"https://orgmode.org/\">Org Mode</a></li>\n<li><a href=\"https://orgmode.org/orgguide.pdf\">Org Guide</a></li>\n<li><a href=\"https://orgmode.org/worg/orgcard.html\">org card</a></li>\n<li><a href=\"https://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html\">Org Mode Chinese Tutorial</a></li>\n</ol>\n<h2 id=\"Haskell\"><a href=\"#Haskell\" class=\"headerlink\" title=\"Haskell\"></a>Haskell</h2><ol>\n<li><a href=\"http://learnyouahaskell.com/chapters\">learn you haskell book</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=02_H3LjqMr8\">haskell Tutorial</a></li>\n<li><a href=\"https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html\">Functors, Applicatives, And Monads In Pictures</a></li>\n</ol>\n<h2 id=\"Rust\"><a href=\"#Rust\" class=\"headerlink\" title=\"Rust\"></a>Rust</h2><ol>\n<li><a href=\"https://rustmagazine.github.io/rust_magazine_2021/\">Rust 中文杂志</a></li>\n<li><a href=\"https://www.zhihu.com/people/tchen/posts\">陈天</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ZVIlcsYaDZY\">陈天 rust 培训</a></li>\n<li><a href=\"https://cheats.rs/\">Cheats</a></li>\n<li><a href=\"https://www.rust-lang.org/\">Officail website</a></li>\n<li><a href=\"https://www.rust-lang.org/learn\">Official resource</a></li>\n<li><a href=\"https://github.com/rust-unofficial/awesome-rust#readme\">Awesome Rust</a></li>\n<li><a href=\"https://github.com/ctjhoa/rust-learning\">Rust learning</a></li>\n<li><a href=\"https://users.rust-lang.org/\">Forum</a></li>\n<li><a href=\"https://crates.io/\">crates.io</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/\">Rust book</a></li>\n<li><a href=\"http://120.78.128.153/rustbook/\">Rust book Chinese</a></li>\n<li><a href=\"https://doc.rust-lang.org/edition-guide/editions/index.html\">Editions</a></li>\n<li><a href=\"https://doc.rust-lang.org/reference/index.html\">The Rust Reference</a></li>\n<li><a href=\"https://doc.rust-lang.org/nomicon/index.html\">The Rustonomicon</a></li>\n<li><a href=\"https://doc.rust-lang.org/cargo/\">Cargo book</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/rust-by-example/\">Rust examples</a></li>\n<li><a href=\"https://rust-by-example.budshome.com/index.html\">Rust examples Chinese</a></li>\n<li><a href=\"https://doc.rust-lang.org/std/index.html\">STD library</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/embedded-book/interoperability/index.html\">Rust with C</a></li>\n<li><a href=\"https://play.rust-lang.org/\">Rust online programming</a></li>\n<li><a href=\"https://rustacean.net/\">Ferris pictures</a></li>\n<li><a href=\"https://github.com/mohanson/gameboy\">Rust gameboy</a></li>\n<li><a href=\"https://www.zhihu.com/topic/19674381/intro\">Rust zhihu</a></li>\n<li><a href=\"https://www.infoq.cn/article/Uugi_eIJusEka1aSPmQM\">Rust 张汉东</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=SZvs15hC81U\">Concept video</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCaYhcUwRBNscFNUKTjgPFiA\">Youtube Rust channel</a></li>\n</ol>\n<h2 id=\"Cmake\"><a href=\"#Cmake\" class=\"headerlink\" title=\"Cmake\"></a>Cmake</h2><ol>\n<li><a href=\"https://cmake.org/cmake/help/v3.19/guide/tutorial/\">Cmake Tutorial</a></li>\n<li><a href=\"https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html\">Cmake Buildsystem</a></li>\n<li><a href=\"https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1\">Effective Modern Cmake</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=y9kSr5enrSk\">Deniz Bahadir 2019</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=y7ndUhdQuU8\">Deniz Bahadir 2018 traditional and modern camke</a></li>\n<li><a href=\"https://github.com/Bagira80/More-Modern-CMake\">Beniz Bahadir PPT</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/76975231\">OO Cmake</a></li>\n<li><a href=\"https://ukabuer.me/blog/more-modern-cmake\">Cmake Concept</a></li>\n</ol>\n<h2 id=\"Cheatsheet\"><a href=\"#Cheatsheet\" class=\"headerlink\" title=\"Cheatsheet\"></a>Cheatsheet</h2><ol>\n<li><a href=\"http://users.ece.utexas.edu/~adnan/gdb-refcard.pdf\">Gdb</a></li>\n<li><a href=\"https://github.com/nblock/pdb-cheatsheet/releases/download/v1.2/pdb-cheatsheet.pdf\">Pdb</a></li>\n<li><a href=\"https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf\">Emacs</a></li>\n<li><a href=\"https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf\">Org mode</a></li>\n<li><a href=\"https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf\">Dired</a></li>\n<li><a href=\"https://linuxhandbook.com/vim-cheat-sheet/\">Vim</a></li>\n<li><a href=\"https://github.com/zhouyiqi91/awesome-cheatsheets/blob/master/languages/bash.sh\">Bash</a></li>\n<li><a href=\"http://comtronic.com.au/blog/wp-content/uploads/comtronic_cheatsheet_tmux_A4.pdf\">Tmux</a></li>\n<li><a href=\"https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf\">Github Git</a></li>\n<li><a href=\"http://sites.nd.edu/gfu/files/2019/07/cheatsheet.pdf\">Matlab</a></li>\n<li><a href=\"https://www.markdownguide.org/cheat-sheet/\">Markdown</a></li>\n<li><a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet\">Oh my zsh</a></li>\n<li><a href=\"https://cheats.rs/rust_cheat_sheet.pdf\">Rust</a></li>\n</ol>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ol>\n<li><a href=\"https://www.youtube.com/watch?v=4XpnKHJAok8\">git linus</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain\">Git Book</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\">Git Book Chinese</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain\">Git Internals: the most important concept</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/132573100\">Useful Git Commands</a></li>\n</ol>\n<h2 id=\"AI\"><a href=\"#AI\" class=\"headerlink\" title=\"AI\"></a>AI</h2><ol>\n<li><a href=\"https://github.com/lutzroeder/Netron\">Netron</a></li>\n</ol>\n<h2 id=\"Data-Structures-and-Algorithms\"><a href=\"#Data-Structures-and-Algorithms\" class=\"headerlink\" title=\"Data Structures and Algorithms\"></a>Data Structures and Algorithms</h2><ol>\n<li><a href=\"https://github.com/krahets/hello-algo?tab=readme-ov-file\">hello-algo</a></li>\n<li><a href=\"https://visualgo.net/zh\">算法动画</a></li>\n<li><a href=\"https://www.boost.org/doc/libs/1_74_0/libs/graph/doc/\">Boost Graph Library(BGL)</a></li>\n</ol>\n<h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><ol>\n<li><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff650706(v=pandp.10)\">Microsoft Application Architecture Guide, 2nd Edition</a></li>\n<li><a href=\"https://refactoring.guru/\">Refactoring Guru</a></li>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/index.html\">Picture of Design Patterns</a></li>\n<li><a href=\"https://github.com/DovAmir/awesome-design-patterns\">Awesome Design Patterns</a></li>\n</ol>\n<h2 id=\"Awesome\"><a href=\"#Awesome\" class=\"headerlink\" title=\"Awesome\"></a>Awesome</h2><ol>\n<li><a href=\"https://github.com/sindresorhus/awesome\">Awesome</a></li>\n</ol>\n<h2 id=\"Code-Style\"><a href=\"#Code-Style\" class=\"headerlink\" title=\"Code Style\"></a>Code Style</h2><ol>\n<li><a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/#\">C++</a></li>\n<li><a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/\">Python</a></li>\n<li><a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/\">Shell</a></li>\n</ol>\n<h2 id=\"Code-Format\"><a href=\"#Code-Format\" class=\"headerlink\" title=\"Code Format\"></a>Code Format</h2><ol>\n<li>All: <a href=\"https://github.com/lassik/emacs-format-all-the-code\">format-all</a></li>\n<li>C&#x2F;C++: <a href=\"https://clang.llvm.org/docs/ClangFormat.html\">ClangFormat</a></li>\n<li>Rust: <a href=\"https://github.com/rust-lang/rustfmt\">rustfmt</a></li>\n<li>Python: <a href=\"https://github.com/ambv/black\">black</a></li>\n<li>Shell: <a href=\"https://github.com/mvdan/sh\">shfmt</a> (install from github release)</li>\n<li>Cmake: <a href=\"https://github.com/cheshirekow/cmake_format\">cmake-format</a></li>\n<li>Markdown: <a href=\"https://prettier.io/\">prettier</a></li>\n</ol>\n<h2 id=\"Code-Analysis\"><a href=\"#Code-Analysis\" class=\"headerlink\" title=\"Code Analysis\"></a>Code Analysis</h2><ol>\n<li><a href=\"http://clang.llvm.org/extra/clang-tidy/index.html\">Clang-tidy</a></li>\n</ol>\n","categories":["Summary"],"tags":["Links"]},{"title":"Markdown","url":"/2022/10/14/Markdown/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><a href=\"https://stackoverflow.com/a/73613628\">color</a></li>\n<li>page break: <code>&lt;div style=&quot;page-break-after: always; break-after: page;&quot;&gt;&lt;/div&gt;</code></li>\n<li>check box <code>- [x]</code>: 好好利用，写好 worklog</li>\n<li><code>&gt;</code> 注意符号</li>\n<li>diff</li>\n</ol>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Hello1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   public static void Main()</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"><span class=\"deletion\">-      System.Console.WriteLine(&quot;Hello, World!&quot;);</span></span><br><span class=\"line\"><span class=\"addition\">+      System.Console.WriteLine(&quot;Rock all night long!&quot;);</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"emoji\"><a href=\"#emoji\" class=\"headerlink\" title=\"emoji\"></a>emoji</h2><ol>\n<li>直接复制就能用</li>\n<li><a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">webfx</a></li>\n<li><a href=\"https://emojipedia.org/\">emojipedia</a></li>\n<li><a href=\"https://gist.github.com/rxaviers/7360908\">总结</a></li>\n<li><a href=\"https://github.com/ikatyang/emoji-cheat-sheet#table-of-contents\">cheatsheet</a></li>\n<li>✅ 🔥 😀</li>\n</ol>\n<h2 id=\"Keybindings-emacs\"><a href=\"#Keybindings-emacs\" class=\"headerlink\" title=\"Keybindings(emacs)\"></a>Keybindings(emacs)</h2><ol>\n<li>stying test: C-c C-s</li>\n<li>toggle: C-c C-x</li>\n<li>help: C-c C-h</li>\n<li>outline navigation: same as org-mode</li>\n<li>running: C-c C-c</li>\n</ol>\n<h3 id=\"Links-and-Images\"><a href=\"#Links-and-Images\" class=\"headerlink\" title=\"Links and Images\"></a>Links and Images</h3><ol>\n<li>C-c C-l: insert link</li>\n<li>C-c C-i: insert image</li>\n</ol>\n<h3 id=\"Text-Styles-C-c-C-s\"><a href=\"#Text-Styles-C-c-C-s\" class=\"headerlink\" title=\"Text Styles C-c C-s\"></a>Text Styles C-c C-s</h3><ol>\n<li>C-c C-s i: <em>italic</em></li>\n<li>C-c C-s b: <strong>bold</strong></li>\n<li>C-c C-s c: <code>inline code</code></li>\n<li>C-c C-s C: code block</li>\n</ol>\n<h3 id=\"Headings-C-c-C-s\"><a href=\"#Headings-C-c-C-s\" class=\"headerlink\" title=\"Headings C-c C-s\"></a>Headings C-c C-s</h3><h3 id=\"Horizontal-Rules-C-c-C-s\"><a href=\"#Horizontal-Rules-C-c-C-s\" class=\"headerlink\" title=\"Horizontal Rules C-c C-s -\"></a>Horizontal Rules C-c C-s -</h3><h3 id=\"Footnodes-C-c-C-s-f\"><a href=\"#Footnodes-C-c-C-s-f\" class=\"headerlink\" title=\"Footnodes: C-c C-s f\"></a>Footnodes: C-c C-s f</h3><h3 id=\"Wiki-Links\"><a href=\"#Wiki-Links\" class=\"headerlink\" title=\"Wiki Links\"></a>Wiki Links</h3><h3 id=\"…TODO\"><a href=\"#…TODO\" class=\"headerlink\" title=\"…TODO\"></a>…TODO</h3><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://eblog.gitee.io/posts/hexo/hexo-writing-skills.html\">(good)markdown 教程</a></li>\n<li><a href=\"https://eblog.gitee.io/posts/hexo/hexo-theme-beautify.html\">写的好的 markdown, 供参考</a></li>\n<li><a href=\"https://github.com/jrblevin/markdown-mode\">markdown mode tutorial</a></li>\n</ol>\n"},{"title":"Memory concept and issues","url":"/2020/07/26/Memory-concept-and-issues/","content":"<h2 id=\"内存层次结构\"><a href=\"#内存层次结构\" class=\"headerlink\" title=\"内存层次结构\"></a>内存层次结构</h2><ol>\n<li><a href=\"https://excalidraw.com/#json=-Jyt8n2_jgQDOsSsLHgc-,7u5WEbNh-76yPmNJw4AUqQ\">示意图</a><br><img src=\"https://i.ibb.co/M2KRtV9/6-Lx-Su-Yv-CJI.png\" alt=\"示意图\"></li>\n<li>nsight compute 可以显示各 memory 速率</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://github.com/stressapptest/stressapptest\">stressapptest</a><ul>\n<li>Stressful Application Test - userspace memory and IO test</li>\n</ul>\n</li>\n<li><a href=\"https://blog.51cto.com/quantfabric/2593578\">stress 压力测试工具</a><ul>\n<li>stress 是 Linux 的一个压力测试工具，可以对 CPU、Memory、IO、磁盘进行压力测试。</li>\n</ul>\n</li>\n<li><code>加权访存带宽计算</code>：只读带宽最高约 520 GB&#x2F;s，L2 Cache 带宽 1.9TB&#x2F;s，当 L2 cache 命中率为 30% 时，加权后的平均访存带宽为 520 x 0.7 + 1900 x 0.3 &#x3D; 934 GB&#x2F;s</li>\n<li>gpu sram 带宽为什么比主存大很多：<ul>\n<li>并行，多个 SM 访问 shared memory， 如有 80 个 sm，每个 sm4 个 partition， 每个 shared memory 有 32 个 bank， 等效位宽为：<code>80*4*32*8 = 81920</code>, hbm 位宽为 8192， 带宽为 1.5TB&#x2F;s, sram 为 19TB&#x2F;s</li>\n</ul>\n</li>\n<li>可以按照是否在芯片上分为片上内存(<code>on chip</code>)和片下内存(<code>off chip</code>)。</li>\n<li><a href=\"https://github.com/freelancer-leon/notes/blob/master/kernel/mm/meminfo.md\">&#x2F;proc&#x2F;meminfo</a></li>\n<li>RES&#x3D;CODE+DATA 进程使用的、未被换出的物理内存大小</li>\n<li>内存主要关注物理内存, 虚拟内存表示程序文件及链接库大小，并不是所有的都加载到内存</li>\n<li>used mem &#x3D; total - free - buffers - cache （man free 可以看计算公式),</li>\n<li>主要看 <code>avaliable</code> &lt; free + buff&#x2F;cache <code> top | grep avail</code> or <code>free -s 1(100)</code> 间隔长好看趋势</li>\n<li>纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到 free 中去，因此在 linux 上 free 内存会越来越少。</li>\n<li>%MEM – Memory Usage (RES) A task’s currently used share of available physical memory. 当前使用的物理内存 &#x2F; 总的物理内存</li>\n<li>进程内存不增长， 系统整体内存一直增长可能是 log 文件写到&#x2F;tmp 目录下</li>\n</ol>\n<h2 id=\"内存墙\"><a href=\"#内存墙\" class=\"headerlink\" title=\"内存墙\"></a>内存墙</h2><ol>\n<li><a href=\"https://mp.weixin.qq.com/s/P6rlEFZGZ6jZqhldmH5UKg\">英伟达、高通、特斯拉、Mobileye 芯片真实算力大比拼</a> 包含各种内存芯片参数<ul>\n<li>芯片和内存分开， 芯片有最高支持的内存类型。开发板上 ddr 类型才是确认的。所以开发板和实际用的产品可能性能不一样。</li>\n</ul>\n</li>\n<li><a href=\"https://mp.weixin.qq.com/s/tSTRBtdNG55COBlUWyCDIg\">汽车领域拥抱 Transformer 需要多少算力？1200TOPS 都不够</a></li>\n<li><code>内存墙</code>是指随着计算能力的持续增长，内存的访问速度相对于处理器的速度提升相对滞后，导致处理器频繁地等待数据。这个不平衡造成的性能瓶颈常常被称为“内存墙”。</li>\n<li><code>处理器速度的增长</code>：在过去的几十年里，处理器的速度增长迅速，遵循摩尔定律（每 18-24 个月，晶体管的数量翻倍）。这导致了处理器每秒可以执行的指令数大幅增加。</li>\n<li><code>内存速度的增长相对较慢</code>：尽管 DRAM 技术也在不断进步，但与处理器的增速相比，其访问速度和带宽的增长较为缓慢。</li>\n<li><code>访问延迟</code>：当处理器需要从主内存中读取数据时，它经常需要等待几百个周期才能获取数据。由于处理器的速度比内存快得多，这种等待成为了一个瓶颈，限制了性能。</li>\n<li><code>缓存的引入</code>：为了缓解这个问题，现代计算机系统引入了缓存（L1、L2、L3 等）来存储频繁访问的数据。这些缓存比主内存快得多，但容量较小。当缓存未命中时，处理器必须从主内存中获取数据，这会引入延迟。</li>\n<li><code>带宽与延迟</code>：除了访问延迟外，带宽也是一个问题。<code>即使内存的延迟得到改善，处理器仍然可能会被大量的并发内存访问操作所限制，导致带宽成为瓶颈</code></li>\n<li><code>解决方案</code>：有许多方法被提出来试图克服内存墙的问题，包括更智能的缓存策略、预取策略、多线程、多核处理器设计等。此外，新的内存技术，如 HBM (High Bandwidth Memory) 和 3D 堆叠内存，也被引入来提供更高的带宽。<br>总的来说，内存墙描述了一个关键的挑战：随着处理器速度的增长，如何确保它们能够及时地获取所需的数据。这是计算机架构领域的一个核心问题，研究者持续致力于开发新的技术和策略来解决这个问题。</li>\n</ol>\n<h2 id=\"内存类型\"><a href=\"#内存类型\" class=\"headerlink\" title=\"内存类型\"></a>内存类型</h2><ol>\n<li>HBM (High Bandwidth Memory) 是一种高性能、高带宽的堆叠式 DRAM（动态随机存取存储器）技术。HBM 是由 AMD 和 Hynix 合作开发，旨在解决高性能计算应用中带宽和功耗的瓶颈问题。<ul>\n<li>将多个 DRAM 以一种堆叠的方式嵌入到统一处理器封装内部，可降低访问延迟。从而允许处理器和 DRAM 间建立更多更快的连接。</li>\n</ul>\n</li>\n<li>LPDDR4 是 “Low Power Double Data Rate 4” 的缩写，它是一种移动 DRAM（Dynamic Random-Access Memory）标准。这种类型的内存主要用于移动设备（如智能手机、平板电脑和某些高端笔记本电脑）中，因为它设计为在较低电压下运行，从而减少功耗和延长电池寿命。</li>\n<li>LPDDR4x 是 LPDDR4 的一个增强版本，它主要优化了功耗，适用于电池供电的移动设备，如智能手机和平板电脑。LPDDR4x 为 “Low Power Double Data Rate 4x” 的缩写。</li>\n</ol>\n<h2 id=\"内存概念\"><a href=\"#内存概念\" class=\"headerlink\" title=\"内存概念\"></a>内存概念</h2><ol>\n<li>page 是磁盘和内存交换数据基本单位， cache line 是内存和缓存交换数据基本单位。</li>\n<li>&lt;&lt;计算机体系结构&gt;&gt; 第 2 章存储器层次机构设计</li>\n<li>栈和堆都是代码在运行时可供使用的内存。</li>\n<li>栈中的所有数据都必须占用已知且固定大小。</li>\n<li>栈的读写比堆要快。</li>\n<li>当代码调用一个函数时，传递给函数的值和数据的局部变量被压入栈中，当函数结束时，这些值被移除栈。</li>\n<li>Rust 所有权的存在是为了管理堆数据。</li>\n<li>数据在堆上才需要释放</li>\n<li>数据在堆上赋值时无指出是浅拷贝(C++)或移动(Rust，原来的变量不在有效)，而不是深拷贝。</li>\n<li>Rust 数据在栈上，赋值是都是拷贝，原来的变量依旧有效。在堆上，赋值都是移动，原来变量无效。</li>\n<li>Rust String 由三部分组成，ptr，len，capacity，这一组数据在栈上，ptr 是指向在堆上数据的指针。（数据结构的固定长度数据在栈上，可变数据在堆上）</li>\n</ol>\n<h2 id=\"内存-堆栈-错误类型\"><a href=\"#内存-堆栈-错误类型\" class=\"headerlink\" title=\"内存(堆栈)错误类型\"></a>内存(堆栈)错误类型</h2><ol>\n<li>引用空指针</li>\n<li>使用未初始化的内存</li>\n<li>释放后使用，也就是使用悬垂指针</li>\n<li>缓冲区溢出，比如数组越界</li>\n<li>非法释放已经释放过的或者未分配的指针</li>\n</ol>\n<h2 id=\"内存管理方式\"><a href=\"#内存管理方式\" class=\"headerlink\" title=\"内存管理方式\"></a>内存管理方式</h2><ol>\n<li>垃圾回收机制，在程序运行时不断的寻找不再使用的内存</li>\n<li>程序员亲自分配内存和释放内存</li>\n<li>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列规则进行检查，拥有数据所有者在离开作用域后自动清除其数据</li>\n</ol>\n<h2 id=\"内存信息\"><a href=\"#内存信息\" class=\"headerlink\" title=\"内存信息\"></a><a href=\"https://www.cnblogs.com/wardensky/p/4274180.html\">内存信息</a></h2><ol>\n<li><p><code>lshw -class memory</code></p>\n</li>\n<li><p><code>dmidecode|grep Speed</code></p>\n</li>\n<li><p><a href=\"https://www.aida64.com/downloads/YWY1MWUxM2E=\">windows aida64</a></p>\n<ul>\n<li>工具 -&gt; 内存缓存测试 -&gt; 有内存类型</li>\n<li>最下面有性能测试</li>\n<li><a href=\"https://www.extremexbb.com/aida64-keys/\">破解</a> 使用: 6.85.6300 版本</li>\n</ul>\n</li>\n<li><p><code>DDR4-2666</code></p>\n<ul>\n<li><code>I/O 时钟频率</code>： 1333 MHz</li>\n<li><code>数据传输速率</code>： 2666 MT&#x2F;s， 即每秒 2666 MT&#x2F;s（Mega Transfers per second）</li>\n<li>位宽决定带宽；如果位宽为 64， 带宽为： 2666 * 8 &#x3D; 21GB&#x2F;s</li>\n</ul>\n</li>\n<li><p>内存带宽和位宽都是评估和描述内存性能的关键指标。它们涉及到数据在内存与其他组件（如 CPU）之间传输的速率以及每次传输的数据量。以下是这两个术语的解释：</p>\n</li>\n<li><p><code>内存带宽 (Memory Bandwidth)</code>：</p>\n<ul>\n<li>定义：内存带宽描述了数据可以在特定时间内从内存传输到 CPU 或其他设备的最大速度。它是衡量内存性能的关键参数。</li>\n<li>单位：常用的单位是 GB&#x2F;s（吉字节每秒）。</li>\n<li>计算方法：内存带宽 &#x3D; 内存时钟频率 x 数据传输次数 x 位宽; 其中，数据传输次数通常基于内存类型，例如，DDR（Double Data Rate）内存每个时钟周期有两次数据传输。</li>\n</ul>\n</li>\n<li><p><code>位宽 (Memory Bus Width)</code>：</p>\n<ul>\n<li>定义：位宽描述了内存总线一次能够传输的数据量。它决定了每次数据传输的宽度。</li>\n<li>单位：位（bit）。常见的位宽有 8-bit, 16-bit, 32-bit, 64-bit, 128-bit 等。</li>\n<li>例如，一个 64-bit 宽的内存总线意味着它可以一次性传输 64 位（8 字节）的数据。</li>\n</ul>\n</li>\n<li><p><code>sample</code>：假设我们有一个 DDR3 内存，其时钟频率为 1600 MHz，位宽为 64-bit。那么内存带宽的计算方法为：内存带宽 &#x3D; 1600 MHz x 2 x 64 bits &#x3D; 25600 Mbits&#x2F;s &#x3D; 25.6 GB&#x2F;s, 因此，此内存的带宽是 25.6 GB&#x2F;s。</p>\n</li>\n</ol>\n<h2 id=\"理论峰值带宽-compare-with-cpu\"><a href=\"#理论峰值带宽-compare-with-cpu\" class=\"headerlink\" title=\"理论峰值带宽(compare with cpu)\"></a>理论峰值带宽(compare with cpu)</h2><ol>\n<li>和 cpu 比较</li>\n</ol>\n<h2 id=\"内存性能测试\"><a href=\"#内存性能测试\" class=\"headerlink\" title=\"内存性能测试\"></a><a href=\"https://blog.csdn.net/pcokk/article/details/90733871\">内存性能测试</a></h2><ol>\n<li><p><a href=\"https://github.com/LucaCanali/Miscellaneous/blob/master/Spark_Notes/Tools_Linux_Memory_Perf_Measure.md\">Tools_Linux_Memory_Perf_Measure.md</a></p>\n</li>\n<li><p><a href=\"https://github.com/RRZE-HPC/likwid/tree/master/groups\">各平台各性能指标计算方法</a></p>\n</li>\n<li><p>因为 cache 比较小，需要频繁交换数据，读写大块数据几乎每次都要从 ddr 读数；例如：模型推理，每次推理都要从 ddr 重新读权重, 并不是将权重一直放在 cache 中。</p>\n<ul>\n<li>从磁盘到 ddr 可能只需要加载一次</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/imsnif/bandwhich\">rust net bandwidth</a></p>\n</li>\n<li><p><code>mbw 32 -b 4096</code></p>\n</li>\n<li><p><code>sysbench memory run</code></p>\n</li>\n<li><p><code>lmbench</code></p>\n</li>\n<li><p><code>Memtest86+</code></p>\n</li>\n</ol>\n<h3 id=\"perf\"><a href=\"#perf\" class=\"headerlink\" title=\"perf\"></a>perf</h3><ol>\n<li><code>perf list and perf stat -e &lt;memory_access&gt;</code>获取 memory access, 根据时间，位宽算带宽<ul>\n<li><code>sudo perf record -F 99 -e armv8_pmuv3/mem_access/ -ag -- sleep 1</code></li>\n<li><code>sudo perf list -n</code> 还能看到带宽占用比例</li>\n<li>可以画火焰图</li>\n<li>bandwidth &#x3D; 位宽 * count &#x2F; second; 可以与 bandwidth 对比</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">timeout</span>=2</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  perf record -e mem_access -ag -- <span class=\"built_in\">sleep</span> <span class=\"variable\">$timeout</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  db=$(perf report | grep <span class=\"string\">&quot;Event&quot;</span> | awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span> | <span class=\"built_in\">head</span> -n 1)</span><br><span class=\"line\">  result=$(( <span class=\"number\">8</span> * <span class=\"variable\">$&#123;db&#125;</span> / <span class=\"variable\">$&#123;timeout&#125;</span>  / <span class=\"number\">1000000</span> ))</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$result</span> MB/s&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://developer.arm.com/documentation/100442/0100/debug-descriptions/pmu/pmu-events?lang=en\">arm55 pmu 手册</a></li>\n<li><code>likwid-perfctr -e</code> 列出所有 PMC</li>\n<li><code>likwid-perfctr -e | grep MEM</code>列出所有内存相关 PMC, <code>perf stat -e r013,r066,r067</code> r + mask + eventsel 监控对应事件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvidia@miivii-tegra:~$ likwid-perfctr -e | grep MEM</span><br><span class=\"line\">MEM_ACCESS, 0x13, 0x0, PMC</span><br><span class=\"line\">MEMORY_ERROR, 0x1A, 0x0, PMC</span><br><span class=\"line\">MEM_ACCESS_LD, 0x66, 0x0, PMC</span><br><span class=\"line\">MEM_ACCESS_ST, 0x67, 0x0, PMC</span><br><span class=\"line\"></span><br><span class=\"line\">nvidia@miivii-tegra:~$ perf <span class=\"built_in\">stat</span> -e r013,r066,r067 -- <span class=\"built_in\">ls</span></span><br><span class=\"line\">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class=\"line\"></span><br><span class=\"line\"> Performance counter stats <span class=\"keyword\">for</span> <span class=\"string\">&#x27;ls&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">           156,045      r013:u</span><br><span class=\"line\">           118,079      r066:u</span><br><span class=\"line\">            37,966      r067:u</span><br><span class=\"line\"></span><br><span class=\"line\">       0.003111539 seconds time elapsed</span><br><span class=\"line\"></span><br><span class=\"line\">       0.003294000 seconds user</span><br><span class=\"line\">       0.000000000 seconds sys</span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## [stream](https://www.cs.virginia.edu/stream/stream2/)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### [BabelStream](https://github.com/UoB-HPC/BabelStream)</span></span><br><span class=\"line\"></span><br><span class=\"line\">1. use</span><br><span class=\"line\"></span><br><span class=\"line\">``` sh</span><br><span class=\"line\">cmake -Bbuild -H. -DMODEL=cuda -DCUDA_ARCH=sm_86 -DCMAKE_CUDA_COMPILER=nvcc</span><br><span class=\"line\">./cuda-stream</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result</span></span><br><span class=\"line\">Running kernels 100 <span class=\"built_in\">times</span></span><br><span class=\"line\">Precision: double</span><br><span class=\"line\">Array size: 268.4 MB (=0.3 GB)</span><br><span class=\"line\">Total size: 805.3 MB (=0.8 GB)</span><br><span class=\"line\">Using CUDA device Orin</span><br><span class=\"line\">Driver: 11040</span><br><span class=\"line\">Memory: DEFAULT</span><br><span class=\"line\">Reduction kernel config: 56 <span class=\"built_in\">groups</span> of (fixed) size 1024</span><br><span class=\"line\">Init: 0.091487 s (=8802.387996 MBytes/sec)</span><br><span class=\"line\">Read: 0.014568 s (=55279.816972 MBytes/sec)</span><br><span class=\"line\">Function    MBytes/sec  Min (sec)   Max         Average</span><br><span class=\"line\">Copy        103377.883  0.00519     0.00764     0.00553</span><br><span class=\"line\">Mul         99863.044   0.00538     0.01373     0.00577</span><br><span class=\"line\">Add         134846.743  0.00597     0.01092     0.00642</span><br><span class=\"line\">Triad       134462.719  0.00599     0.00829     0.00637</span><br><span class=\"line\"></span><br><span class=\"line\">Triad 是一个计算模式，通常在性能测试和基准测试中使用，特别是在评估计算机系统的内存带宽和处理能力时。在最简单的形式中，Triad 操作涉及到以下三个操作：</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = 0; i &lt; N; i++) &#123;</span><br><span class=\"line\">    A[i] = B[i] + scalar * C[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### [(good) bandwidth](https://zsmith.co/bandwidth.php#download)</span></span><br><span class=\"line\"></span><br><span class=\"line\">1. 可以抠出来源码，实时检测内存使用</span><br><span class=\"line\">1. [不同处理器的带宽](https://zsmith.co/bw-table.php)</span><br><span class=\"line\">1. 测试多核性能时，运行多个实例，相加结果。Is bandwidth actually showing the maximum bandwidth to and from main memory? There is an easy way to <span class=\"built_in\">test</span> this. We can run one instance of bandwidth on each core of a multi-core CPU (<span class=\"keyword\">in</span> my <span class=\"keyword\">case</span>, two instances, one <span class=\"keyword\">for</span> each core) and add up the access bandwidths to/from main memory <span class=\"keyword\">for</span> all instances to see whether they approach the published limits <span class=\"keyword\">for</span> our main memory system.</span><br><span class=\"line\">1. 使用</span><br><span class=\"line\"></span><br><span class=\"line\">```sh</span><br><span class=\"line\">wget -c https://zsmith.co/archives/bandwidth-1.12.3.tar.bz2</span><br><span class=\"line\">sudo apt install nasm</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>上图可以看出来在三个地方曲线有明显的转折。分别是 32k、256K、12MB。这分别是三级缓存的大小。就跟下图所示一样, 也就是说：当读写的 size 大小落在相应的 cache 里面的时候，吞吐量是最大的。当读写的大小的 size 超过这个 cache，而落入到下一个 cache 的时候，吞吐量就会降低。内存是最低的。<a href=\"https://neuyilan.github.io/2017/03/07/bandwidth%E6%95%99%E7%A8%8B/\">link</a></li>\n</ol>\n<h3 id=\"likwid\"><a href=\"#likwid\" class=\"headerlink\" title=\"likwid\"></a>likwid</h3><ol>\n<li><a href=\"https://github.com/RRZE-HPC/likwid/wiki/Tutorial%3A-Empirical-Roofline-Model\">测内存性能</a></li>\n</ol>\n<h3 id=\"TheBandwidthBenchmark\"><a href=\"#TheBandwidthBenchmark\" class=\"headerlink\" title=\"TheBandwidthBenchmark\"></a><a href=\"https://github.com/RRZE-HPC/TheBandwidthBenchmark\">TheBandwidthBenchmark</a></h3><h2 id=\"内存压测\"><a href=\"#内存压测\" class=\"headerlink\" title=\"内存压测\"></a><a href=\"https://blog.51cto.com/u_14900374/2533353\">内存压测</a></h2><ol>\n<li>memtester</li>\n</ol>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><h3 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h3><ol>\n<li><a href=\"https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory\">memory-allocators-101-write-a-simple-memory</a></li>\n<li>malloc 缺点：<ul>\n<li>易内存泄漏</li>\n<li>碎片化，影响性能</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"memory-profiler\"><a href=\"#memory-profiler\" class=\"headerlink\" title=\"memory profiler\"></a>memory profiler</h2><ol>\n<li><p>jemolloc</p>\n<ul>\n<li><a href=\"https://www.yuanguohuo.com/2019/01/02/jemalloc-heap-profiling/\">内存泄漏调试 —- jemalloc 的 heap profiling</a></li>\n<li>jeprof 工具不仅可以查看详细信息或者生成调用路径图(如上所示)，还可以用来比较两个 dump(显示增量部分)：</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/KDE/heaptrack\">heaptrack</a></p>\n<ul>\n<li>allocations 次数：<ul>\n<li>.&#x2F;bin&#x2F;heaptrack ls</li>\n<li>.&#x2F;bin&#x2F;heaptrack_print heaptrack.ls.5400.gz -F stacks.txt</li>\n<li>flamegraph.pl –title “heaptrack: allocations” –colors mem –countname allocations &lt; stacks.txt &gt; heaptrack.someapp.PID.svg</li>\n</ul>\n</li>\n<li>内存大小（–flamegraph-cost-type 指定 allocations: number of allocations; peak: bytes consumed at highest total memory consumption …)<ul>\n<li>.&#x2F;bin&#x2F;heaptrack_print heaptrack.example.6433.gz –flamegraph-cost-type peak -F stacks2.txt</li>\n<li>&#x2F;home&#x2F;xiyang&#x2F;d&#x2F;working&#x2F;FlameGraph&#x2F;flamegraph.pl –title “heaptrack: bytes” –colors mem –countname bytes &lt; stacks2.txt &gt; heaptrack.example_peak.svg</li>\n</ul>\n</li>\n<li>gui: <code>sudo apt-get install heaptrack-gui</code><ul>\n<li>使用 vnc</li>\n<li>注意 top-down 可以看堆栈</li>\n<li>caller&#x2F;callee 右下角有代码具体位置</li>\n</ul>\n</li>\n<li>加编译 debug 能显示具体某一行分配的内存</li>\n<li><a href=\"https://milianw.de/blog/heaptrack-a-heap-memory-profiler-for-linux.html\">usage</a></li>\n<li>.&#x2F;bin&#x2F;heaptrack_print heaptrack.example.6433.gz -M .&#x2F;test.txt 生成 massif 数据，可以用 massif-visualizer 可视化</li>\n<li><code>sudo apt install heaptrack</code> 会出现 free(): invalid pointer;</li>\n<li><a href=\"https://github.com/KDE/heaptrack?tab=readme-ov-file#compiling\">源码编译</a><ul>\n<li><code>sudo apt install elfutils libdw-dev libunwind-dev</code></li>\n<li><code>cmake -DLIBDW_INCLUDE_DIR=/usr/include/ -DLIBDW_LIBRARIES=/lib/aarch64-linux-gnu/ ..</code> (不好使)</li>\n</ul>\n</li>\n<li><code>heaptrack -d ./example</code>debug， 会使用 gdb</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html\">FlameGraphs&#x2F;memoryflamegraphs</a></p>\n</li>\n<li><p><a href=\"https://github.com/RudjiGames/MTuner?tab=readme-ov-file\">MTuner</a></p>\n</li>\n<li><p><a href=\"https://valgrind.org/docs/manual/ms-manual.html\">valgrind Massif: a heap profiler</a></p>\n<ul>\n<li>valgrind –tool&#x3D;massif prog</li>\n<li>ms_print massif.out.8855 (加-g 选项也可以看具体哪一行分配的内存)</li>\n</ul>\n</li>\n<li><p><a href=\"https://apps.kde.org/zh-cn/massif-visualizer/\">massif-visualizer</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/34a495c3067b\">procmem 和 procrank 查看动态库占用的内存</a></p>\n</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/apache/arrow\">apache&#x2F;arrow 内存分析工具</a></li>\n<li><a href=\"https://people.freebsd.org/~lstewart/articles/cpumemory.pdf\">What Every Programmer Should Know About Memory</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/611133924\">每个程序员都应该了解的内存知识</a></li>\n<li><a href=\"https://github.com/freelancer-leon/notes/blob/master/kernel/mm/meminfo.md\">meminfo</a></li>\n<li><a href=\"https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory\">memory-allocators-101-write-a-simple-memory</a></li>\n</ol>\n","categories":["Program","Basic"],"tags":["Rust","Memory","C++"]},{"title":"Model-deploy","url":"/2022/06/30/Model-deploy/","content":"<h2 id=\"pgpredict\"><a href=\"#pgpredict\" class=\"headerlink\" title=\"pgpredict\"></a>pgpredict</h2><ol>\n<li>负责模型推理</li>\n<li>接口:<ul>\n<li>load model</li>\n<li>set input data</li>\n<li>forward</li>\n<li>get output data</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"dcv-cpp\"><a href=\"#dcv-cpp\" class=\"headerlink\" title=\"dcv-cpp\"></a>dcv-cpp</h2><ol>\n<li>负责将全流程（前后处理+模型推理）运行起来（单路）</li>\n</ol>\n<h2 id=\"sdk\"><a href=\"#sdk\" class=\"headerlink\" title=\"sdk\"></a>sdk</h2><ol>\n<li>负责模型相关业务逻辑（多路)</li>\n</ol>\n"},{"title":"Network","url":"/2020/08/11/Network/","content":"","categories":["Computer","Network"],"tags":["Network"]},{"title":"Mojo","url":"/2023/10/10/Mojo/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU5ODY2MTk3Nw==&mid=2247492618&idx=1&sn=a20f4828b9ab3e3cee3fedfd906e0eb2&chksm=fe426a3cc935e32a8312ce9efbb4f2640787508d3e811579bbffe918685cdb07a8bd8e3ffc4b&scene=132&exptype=timeline_recommend_article_extendread_samebiz#wechat_redirect\">LLVM 之父 Chris Lattner：我的 AI 基础设施软件构建理念</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&mid=2247597850&idx=1&sn=679ccdcaf76e8b6ab97ca42687769da1\">未来的人工智能语言，是 Rust 还是 Mojo ？</a></li>\n<li><a href=\"https://github.com/modularml/mojo\">github mojo</a></li>\n</ol>\n"},{"title":"Ninja","url":"/2022/07/05/Ninja/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><code>sudo apt-install ninja-build</code></li>\n<li><code>cmake .. -G Ninja</code></li>\n<li>除了加上<code>-G Ninja</code>使用方式与<code>make</code>一致</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">BUILD_TYPE=Release</span><br><span class=\"line\">BUILD_DIR=build_gpu_tensorrt</span><br><span class=\"line\">INSTALL_DIR=<span class=\"variable\">$&#123;BUILD_DIR&#125;</span>/$(<span class=\"built_in\">basename</span> <span class=\"string\">&quot;<span class=\"variable\">$PWD</span>&quot;</span>)_$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;BUILD_TYPE&#125;</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27;[:upper:]&#x27;</span> <span class=\"string\">&#x27;[:lower:]&#x27;</span>)</span><br><span class=\"line\">BUILD_SYSTEM=Ninja</span><br><span class=\"line\"><span class=\"keyword\">if</span> ! [ -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v ninja)</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    BUILD_SYSTEM=<span class=\"string\">&#x27;Unix Makefiles&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">cmake -G <span class=\"string\">&quot;<span class=\"variable\">$&#123;BUILD_SYSTEM&#125;</span>&quot;</span> -S . -B <span class=\"variable\">$&#123;BUILD_DIR&#125;</span> \\</span><br><span class=\"line\">    -DCMAKE_BUILD_TYPE=<span class=\"variable\">$&#123;BUILD_TYPE&#125;</span> \\</span><br><span class=\"line\">    -DUSE_API_V2=OFF \\</span><br><span class=\"line\">    -DUSE_ASCEND=OFF \\</span><br><span class=\"line\">    -DUSE_NEUWARE=OFF \\</span><br><span class=\"line\">    -DUSE_GPU=ON \\</span><br><span class=\"line\">    -DUSE_TENSORRT=ON \\</span><br><span class=\"line\">    -DUSE_GPU_PRE_PROCESS=ON \\</span><br><span class=\"line\">    -DDEBUG_INPUT_OUTPUT=OFF \\</span><br><span class=\"line\">    -DCMAKE_VERBOSE_MAKEFILE=ON \\</span><br><span class=\"line\">    <span class=\"comment\"># -DCMAKE_C_COMPILER=clang-10 \\</span></span><br><span class=\"line\">    <span class=\"comment\"># -DCMAKE_CXX_COMPILER=clang++-10 \\</span></span><br><span class=\"line\">    -DARCH_PLAT_VENDOR=x86_64-ubuntu-linux-gcc9.3.0 \\</span><br><span class=\"line\">    <span class=\"variable\">$@</span></span><br><span class=\"line\">cmake --build <span class=\"variable\">$&#123;BUILD_DIR&#125;</span> -j4</span><br><span class=\"line\">cmake --install <span class=\"variable\">$&#123;BUILD_DIR&#125;</span> --prefix <span class=\"variable\">$&#123;INSTALL_DIR&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>ninja color output</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span> <span class=\"keyword\">STREQUAL</span> <span class=\"string\">&quot;GNU&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">add_compile_options</span> (-fdiagnostics-color=always)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> (<span class=\"string\">&quot;$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span> <span class=\"keyword\">STREQUAL</span> <span class=\"string\">&quot;Clang&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">add_compile_options</span> (-fcolor-diagnostics)</span><br><span class=\"line\"><span class=\"keyword\">endif</span> ()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>错误信息绝对路径</li>\n</ol>\n<h2 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h2><ol>\n<li><a href=\"https://zh.m.wikipedia.org/zh-hans/Ninja_(%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F)\">wikipedia</a></li>\n</ol>\n"},{"title":"Nvidia-NPP","url":"/2022/03/02/Nvidia-NPP/","content":"<h2 id=\"notes\"><a href=\"#notes\" class=\"headerlink\" title=\"notes\"></a>notes</h2><ol>\n<li>need <code>sudo</code> to run exe</li>\n<li><code>export CUDACXX=/usr/local/cuda/bin/nvcc</code> when build cuda</li>\n<li>CMakeLists.txt: <code>CUDA_ADD_EXECUTABLE(resize resize.cpp)</code></li>\n</ol>\n<h2 id=\"yuyv-2-rgb\"><a href=\"#yuyv-2-rgb\" class=\"headerlink\" title=\"yuyv 2 rgb\"></a>yuyv 2 rgb</h2><ol>\n<li><a href=\"https://stackoverflow.com/a/71473363\">link</a> nvcc 替换成 g++也可用</li>\n</ol>\n<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>install path: <code>/usr/local/cuda-xxx/</code></li>\n<li><a href=\"https://docs.nvidia.com/cuda/npp/nppi_conventions_lb.html\">函数名称中简写的意义</a></li>\n<li></li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;A&quot; <span class=\"keyword\">if</span> the image <span class=\"keyword\">is</span> a <span class=\"number\">4</span> channel image this indicates the result alpha channel <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> affected <span class=\"keyword\">by</span> the primitive.</span><br><span class=\"line\">&quot;Cn&quot; the image consists <span class=\"keyword\">of</span> n channel packed pixels, <span class=\"keyword\">where</span> n can be <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> <span class=\"keyword\">or</span> <span class=\"number\">4.</span></span><br><span class=\"line\">&quot;Pn&quot; the image consists <span class=\"keyword\">of</span> n separate image planes, <span class=\"keyword\">where</span> n can be <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> <span class=\"keyword\">or</span> <span class=\"number\">4.</span></span><br><span class=\"line\">&quot;C&quot; (<span class=\"keyword\">following</span> the channel information) indicates that the primitive <span class=\"keyword\">only</span> operates <span class=\"keyword\">on</span> one <span class=\"keyword\">of</span> the color channels, the &quot;channel-of-interest&quot;. <span class=\"keyword\">All</span> other output channels are <span class=\"keyword\">not</span> affected <span class=\"keyword\">by</span> the primitive.</span><br><span class=\"line\">&quot;I&quot; indicates that the primitive works &quot;in-place&quot;. <span class=\"keyword\">In</span> this <span class=\"keyword\">case</span> the image-data pointer <span class=\"keyword\">is</span> usually named pSrcDst <span class=\"keyword\">to</span> indicate that the image data serves <span class=\"keyword\">as</span> source <span class=\"keyword\">and</span> destination at the same <span class=\"type\">time</span>.</span><br><span class=\"line\">&quot;M&quot; indicates &quot;masked operation&quot;. These <span class=\"keyword\">types</span> <span class=\"keyword\">of</span> primitives have an additional &quot;mask image&quot; <span class=\"keyword\">as</span> <span class=\"keyword\">as</span> <span class=\"keyword\">input</span>. <span class=\"keyword\">Each</span> pixel <span class=\"keyword\">in</span> the destination image corresponds <span class=\"keyword\">to</span> a pixel <span class=\"keyword\">in</span> the mask image. <span class=\"keyword\">Only</span> pixels <span class=\"keyword\">with</span> a corresponding non-zero mask pixel are being processed.</span><br><span class=\"line\">&quot;R&quot; indicates the primitive operates <span class=\"keyword\">only</span> <span class=\"keyword\">on</span> a rectangular &quot;region-of-interest&quot; <span class=\"keyword\">or</span> &quot;ROI&quot;. <span class=\"keyword\">All</span> ROI primitives take an additional <span class=\"keyword\">input</span> parameter <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> NppiSize, which specifies the width <span class=\"keyword\">and</span> height <span class=\"keyword\">of</span> the rectangular region that the primitive should process. <span class=\"keyword\">For</span> details <span class=\"keyword\">on</span> how primitives operate <span class=\"keyword\">on</span> ROIs see: Region-<span class=\"keyword\">of</span>-Interest (ROI).</span><br><span class=\"line\">&quot;Sfs&quot; indicates the result <span class=\"keyword\">values</span> are processed <span class=\"keyword\">by</span> fixed scaling <span class=\"keyword\">and</span> saturation <span class=\"keyword\">before</span> they<span class=\"string\">&#x27;re written out.</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://docs.nvidia.com/cuda/npp/nppi__support__functions_8h_source.html\">image malloc functions</a></li>\n<li><a href=\"https://docs.nvidia.com/cuda/npp/nppi__geometry__transforms_8h_source.html\">resize function</a></li>\n<li><a href=\"https://github.com/NVIDIA/cuda-samples/tree/master/Common/UtilNPP\">npp utils</a></li>\n<li><a href=\"https://docs.nvidia.com/cuda/npp/group__image__color__model__conversion.html\">cvtcolor</a></li>\n</ol>\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/CUDALibrarySamples.git\">NVIDIA-CUDALibrarySamples</a></li>\n<li><a href=\"https://blog.51cto.com/u_15357586/3790330\">simple sample</a></li>\n<li><a href=\"https://sourcegraph.com/github.com/PacktPublishing/Learn-CUDA-Programming/-/blob/Chapter08/08_cuda_libs_and_other_languages/05_npp/imageFilter.cpp\">malloc sample</a></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://docs.nvidia.com/cuda/npp/index.html\">main page</a></li>\n</ol>\n"},{"title":"OpenCL","url":"/2024/01/25/OpenCL/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><code>OpenCL(Open Computing Language)</code></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.khronos.org/opencl/\">opencl</a></li>\n</ol>\n"},{"title":"OS","url":"/2020/08/11/OS/","content":"<h2 id=\"page-faults\"><a href=\"#page-faults\" class=\"headerlink\" title=\"page faults\"></a>page faults</h2><ol>\n<li></li>\n</ol>\n<h2 id=\"C-变量内存分配区域\"><a href=\"#C-变量内存分配区域\" class=\"headerlink\" title=\"C++ 变量内存分配区域\"></a>C++ 变量内存分配区域</h2><ol>\n<li>栈区（stack） 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>\n<li>堆区（heap）就是那些由 malloc 等分配的内存块，他和堆是十分相似的，不过它是用 free 来结束自己的生命的。一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链。堆可以动态地扩展和收缩。</li>\n<li>自由存储区(也在堆区？) 就是那些由 new 分配的内存块，一般一个 new 就要对应一个 delete。</li>\n<li>全局区&#x2F;静态区（static）全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域 data 段， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域 bss 段。程序结束后有系统释放</li>\n<li>常量存储区 存放的是常量，不允许修改。常量字符串就是放在这里的。常量字符串不能修改, 否则程序会在运行期崩溃（当然，你要通过非正当手段也可以修改，而且方法很多）.程序结束后由系统释放</li>\n</ol>\n<h3 id=\"C-自由存储区和堆区\"><a href=\"#C-自由存储区和堆区\" class=\"headerlink\" title=\"C++ 自由存储区和堆区\"></a><a href=\"https://blog.csdn.net/Q_1849805767/article/details/107376682\">C++ 自由存储区和堆区</a></h3><ol>\n<li>堆是操作系统维护的一块内存，而自由存储是 C++中通过 new 与 delete 动态分配和释放对象的抽象概念。堆与自由存储区并不等价</li>\n<li>new &#x2F; new[]：完成两件事，先底层调用 malloc 分配了内存，然后调用构造函数（创建对象）。</li>\n<li>delete&#x2F;delete[]：也完成两件事，先调用析构函数（清理资源），然后底层调用 free 释放空间。</li>\n<li>new 在申请内存时会自动计算所需字节数，而 malloc 则需我们自己输入申请内存空间的字节数。</li>\n</ol>\n<h2 id=\"linux-虚拟内存空间分区\"><a href=\"#linux-虚拟内存空间分区\" class=\"headerlink\" title=\"linux 虚拟内存空间分区\"></a>linux 虚拟内存空间分区</h2><ol>\n<li><code>cat /proc/pid/maps 或 pmap pid</code> 看进程映射区域</li>\n<li>64 位系统虚拟内存 <img src=\"https://fanlv.wiki/2021/07/25/linux-mem/Linux-Memory-X86-64.jpg\" alt=\"linux 64 memory\"></li>\n<li>ELF 在装载时按照 Segment 划分。一个 Segment 包含一个或多个属性类型的 Section。实际上 Segment 的概念是从装载的角度重新定划分了 ELF 的各个段。<a href=\"https://maodanp.github.io/2019/06/02/linux-virtual-space/\">link</a>， 映射的时候，这里面的 segment 会对应一个 VMA。Linux 将进程虚拟地址空间中的一个段叫做虚拟内存区域（VMA）。<img src=\"https://maodanp.github.io/pic/2019/2019-06-02-linux-virtual-space-02.png\" alt=\"示意图\"></li>\n<li>ELF 可执行文件中有两个概念，分别是段(segment)和节(section)。通过 <code>readelf -S name.elf</code> 可以查看 ELF 可执行文件的节头表，这里面有所有节的信息。使用命令 <code>readelf -l name.elf</code> 来查看 ELF 的段。而系统正是按照“segment”而不是“section”来映射可执行文件的。</li>\n<li>readelf -a test 先显示 section 信息， 然后显示 segment(Program Headers)信息，接着显示 Section to Segment mapping 信息</li>\n<li>从装载的角度看，我们只关心”LOAD”型的 segment，因为只有它是需要被映射的，其他诸如“NOTE”,”GNU_STACK”都是在装载时起辅助作用的。<a href=\"https://blog.csdn.net/weixin_44395686/article/details/104761488\">link</a></li>\n<li>总体而言，Segment 和 Section 是从不同角度来划分同一个 ELF 文件。从 Section 角度来看 ELF 文件就是链接视图（Linking View），从 Segment 角度来看 ELF 文件则是执行视图（Execution View）。</li>\n</ol>\n<h3 id=\"进程虚拟存储器\"><a href=\"#进程虚拟存储器\" class=\"headerlink\" title=\"进程虚拟存储器\"></a>进程虚拟存储器</h3><ol>\n<li>只读区(.init, .text, .rodata)</li>\n<li>已初始化的数据(.data 段)</li>\n<li>未初始化的数据(.bss 段)</li>\n<li>堆</li>\n<li>映射区(mmap, 共享库等)</li>\n<li>栈</li>\n</ol>\n<h3 id=\"内核虚拟存储器\"><a href=\"#内核虚拟存储器\" class=\"headerlink\" title=\"内核虚拟存储器\"></a>内核虚拟存储器</h3><ol>\n<li>内核代码和数据</li>\n<li>物理存储器</li>\n<li>与进程相关的数据结构(每个进程不同)</li>\n</ol>\n<h2 id=\"ELF\"><a href=\"#ELF\" class=\"headerlink\" title=\"ELF\"></a>ELF</h2><ol>\n<li><a href=\"https://stackoverflow.com/a/16557699\">变量根据情况分配在.bss 段上</a><ul>\n<li>int bigvar_in_bss[16300];</li>\n<li>int bigvar_in_bss[16300] &#x3D; {0};</li>\n<li>int bigvar_in_data[16300] &#x3D; {1};</li>\n<li>int var_in_data[5] &#x3D; {1, 2, 3, 4, 5};</li>\n</ul>\n</li>\n<li><code>file -A</code> 查看各 section 大小</li>\n<li><code>nm test</code> 查看变量是否在 bss 段上</li>\n<li><code>readelf -s test 或 nm -S test</code> 查看变量大小, 在其他模块定义的符号 size 为 0</li>\n<li><code>nm -S --size-sort test</code> 按 size 排序</li>\n<li>初始化为 0 的在 bss 段上？<a href=\"https://stackoverflow.com/a/16557776\">link</a></li>\n</ol>\n<h2 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h2><h3 id=\"同步异步，阻塞非阻塞区别\"><a href=\"#同步异步，阻塞非阻塞区别\" class=\"headerlink\" title=\"同步异步，阻塞非阻塞区别\"></a><a href=\"https://www.cnblogs.com/mhq-martin/p/9035640.html\">同步异步，阻塞非阻塞区别</a></h3><ol>\n<li><p><code>不同的的概念，同步与异步区别是什么时候拿到最终结果，阻塞和非阻塞区别进程线程是是否等待结果， 同步可以是阻塞的， 也可以是非阻塞的(一次非阻塞拿不全结果， 轮询try_lock或read noblock)，异步可以是阻塞的，也可以是非阻塞的，阻塞是同步的，但非阻塞不一定异步的. 比如非阻塞系统调用read，返回的是字节数，不是最终结果。</code></p>\n</li>\n<li><p>组合：</p>\n<ul>\n<li>同步阻塞：同步接口里使用阻塞方式拿到最终结果</li>\n<li>同步非阻塞：同步接口里通过非阻塞方式轮询拿到最终结果</li>\n<li>异步阻塞：异步接口里通过阻塞方式拿到最终结果</li>\n<li>异步非阻塞：异步接口里通过非阻塞方式拿到最终结果</li>\n</ul>\n</li>\n<li><p>同步与异步是更高层次上的概念</p>\n</li>\n<li><p>同步与异步区别是什么时候拿到最终结果。如果是在调用函数就拿到最终结果，则是同步的，</p>\n</li>\n<li><p>同步异步区别是在调用一个功能时，没得到<code>结果</code>之前，是否继续后续操作（有问题，非阻塞也是没拿到结果，也往后继续进行， 但是非阻塞不一定是异步的）</p>\n</li>\n<li><p>阻塞非阻塞区别是<code>线程/程序</code>在等待调用结果时，是否一直等待（挂起当前线程）</p>\n</li>\n<li><p>阻塞和非阻塞关注的是程序在<code>等待调用结果</code>（消息，返回值）时的<code>状态</code>.</p>\n</li>\n<li><p>进程线程锁是用来同步的，lock()函数是阻塞式，不拿到锁不返回，线程被阻塞。try_lock()是非阻塞式的，如果拿不到锁也返回。</p>\n</li>\n<li><p>异步是目的，而多线程是实现这个目的的方法</p>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/19732473/answer/241673170\">非阻塞 I&#x2F;O 和异步 I&#x2F;O</a><br>非阻塞 I&#x2F;O 系统调用( nonblocking system call )的另一个替代品是 异步 I&#x2F;O 系统调用 （asychronous system call）。 与非阻塞 I&#x2F;O 系统调用类似，asychronous system call 也是会立即返回， 不会等待 I&#x2F;O 操作的完成， 应用程序可以继续执行其他的操作， 等到 I&#x2F;O 操作完成了以后，操作系统会通知调用进程（设置一个用户空间特殊的变量值 或者 触发一个 signal 或者 产生一个软中断 或者 调用应用程序的回调函数）。<br>此处， 非阻塞 I&#x2F;O 系统调用( nonblocking system call ) 和 异步 I&#x2F;O 系统调用 （asychronous system call）的区别是：</p>\n<ul>\n<li>一个非阻塞 I&#x2F;O 系统调用 read() 操作立即返回的是任何可以立即拿到的数据， 可以是完整的结果， 也可以是不完整的结果， 还可以是一个空值。</li>\n<li>而异步 I&#x2F;O 系统调用 read（）结果必须是完整的， 但是这个操作完成的通知可以延迟到将来的一个时间点。<br>上面提到的 非阻塞 I&#x2F;O 系统调用( nonblocking system call ) 和 异步 I&#x2F;O 系统调用 都是非阻塞式的行为（non-blocking behavior）。 他们的差异仅仅是返回结果的方式和内容不同。</li>\n</ul>\n</li>\n<li><p>我们所说的 “阻塞”是指进程在发起了一个系统调用（System Call） 后， 由于该系统调用的操作不能立即完成，需要等待一段时间，于是内核将进程挂起为等待 （waiting）状态， 以确保它不会被调度执行， 占用 CPU 资源。</p>\n</li>\n<li><p>在进程通信层面， 阻塞&#x2F;非阻塞， 同步&#x2F;异步基本是同义词， 但是需要注意区分讨论的对象是发送方还是接收方。发送方阻塞&#x2F;非阻塞（同步&#x2F;异步）和接收方的阻塞&#x2F;非阻塞（同步&#x2F;异步） 是互不影响的。</p>\n</li>\n<li><p>在 IO 系统调用层面（ IO system call ）层面， 非阻塞 IO 系统调用 和 异步 IO 系统调用存在着一定的差别， 它们都不会阻塞进程， 但是返回结果的方式和内容有所差别， 但是都属于非阻塞系统调用（ non-blocing system call ）</p>\n</li>\n<li><p>举例：从磁盘读 50000 字节到内存</p>\n</li>\n</ol>\n<ul>\n<li>同步：调用 api，api 内不拿到结果或出错不返回。</li>\n<li>异步：调用 api, 直接返回，结果通过 callback 等方式通知。结果是完整的。</li>\n<li>阻塞：线程系统调用 read(), 不读 50000 字节不返回，线程挂起，内核态在执行。</li>\n<li>非阻塞：线程系统调用 read(NO_BLOCK), 达到某个条件，如出现’\\n’直接返回，结果不完整，线程要多次调用来得到结果。</li>\n</ul>\n<h3 id=\"Linux-异步-I-O-框架-io-uring：基本原理、程序示例与性能压测\"><a href=\"#Linux-异步-I-O-框架-io-uring：基本原理、程序示例与性能压测\" class=\"headerlink\" title=\"Linux 异步 I&#x2F;O 框架 io_uring：基本原理、程序示例与性能压测\"></a><a href=\"http://arthurchiao.art/blog/intro-to-io-uring-zh/\">Linux 异步 I&#x2F;O 框架 io_uring：基本原理、程序示例与性能压测</a></h3><h2 id=\"CFS\"><a href=\"#CFS\" class=\"headerlink\" title=\"CFS\"></a>CFS</h2><ol>\n<li><a href=\"http://arthurchiao.art/blog/linux-cfs-design-and-implementation-zh/\">Linux CFS 调度器：原理、设计与内核实现</a></li>\n</ol>\n<h2 id=\"linux-src\"><a href=\"#linux-src\" class=\"headerlink\" title=\"linux src\"></a>linux src</h2><ol>\n<li><a href=\"https://askubuntu.com/a/159842\">apt-get source linux-source</a></li>\n</ol>\n","categories":["Computer","OS"],"tags":["OS"]},{"title":"OpenCV","url":"/2022/08/18/OpenCV/","content":"<h2 id=\"doc\"><a href=\"#doc\" class=\"headerlink\" title=\"doc\"></a>doc</h2><ol>\n<li>注意 doc 中函数说明下面有 examples</li>\n<li><a href=\"https://docs.opencv.org/4.6.0/d3/d63/classcv_1_1Mat.html\">Mat</a></li>\n</ol>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>debug opencv:<code>OPENCV_LOG_LEVEL=DEBUG</code></li>\n<li>nv12 type 是 <code>CV_8UC1， h = real_h * 3 / 2</code></li>\n<li>opencv 不支持 nv12 resize， 需要 <code>to rgb -&gt; resize -&gt; to nv12</code> 或 <a href=\"https://github.com/lemenkov/libyuv\">libyuv</a> 来 resize</li>\n</ol>\n<h2 id=\"Mat\"><a href=\"#Mat\" class=\"headerlink\" title=\"Mat\"></a><a href=\"https://docs.opencv.org/4.6.0/d3/d63/classcv_1_1Mat.html\">Mat</a></h2><ol>\n<li><code>mata.mul(matb)</code> 矩阵相乘</li>\n<li><code>cv::Mat Z_c2 = Z_w * std::cos(phi) + hc * std::sin(phi);</code> Z_w 为 Mat，直接做运算</li>\n<li><a href=\"https://fossies.org/dox/opencv-4.6.0/classcv_1_1Mat.html\">fossies 依赖关系</a> 点图右上角能展开图片</li>\n<li>(代理模式？) opencv 接口使用代理类 <em>InputArray，This is the proxy class for passing read-only input arrays into OpenCV functions. _InputArray is a class that can be constructed from Mat, Mat</em><T>, Matx&lt;T, m, n&gt;, std::vector<T>, std::vector&lt;std::vector<T> &gt;, std::vector<Mat>, std::vector&lt;Mat_<T> &gt;, UMat, std::vector<UMat> or double. It can also be constructed from a matrix expression.</li>\n<li><a href=\"https://fossies.org/dox/opencv-4.6.0/classcv_1_1__InputArray.html\">_InputArray</a></li>\n<li>cv::resize 等接口用的都是(InputArray..) <code>cv::resize (InputArray src, OutputArray dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR)</code></li>\n</ol>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ol>\n<li><a href=\"https://blog.csdn.net/dcrmg/article/details/52294259\">Opencv Mat 矩阵中 data、size、depth、elemSize、step 等属性的理解</a></li>\n<li><code>flags</code></li>\n<li><code>dims</code> Mat 矩阵的维度，若 Mat 是一个二维矩阵，则 dims&#x3D;2，三维则 dims&#x3D;3</li>\n<li><code>rows</code> Mat 矩阵的行数。</li>\n<li><code>cols</code> Mat 矩阵的列数。</li>\n<li><code>data</code> uchar 类型的指针，指向 Mat 数据矩阵的首地址。</li>\n<li><code>size</code> 首先 size 是一个结构体，定义了 Mat 矩阵内数据的分布形式，数值上有关系式：image.size().width&#x3D;&#x3D;image.cols; image.size().height&#x3D;&#x3D;image.rows</li>\n<li><code>step</code> 可以理解为 Mat 矩阵中每一行的“步长”，以字节为基本单位，每一行中所有元素的字节总量，是累计了一行中所有元素、所有通道、所有通道的 elemSize1 之后的值；</li>\n<li><code>channels()</code>：Mat 矩阵元素拥有的通道数。例如常见的 RGB 彩色图像，channels&#x3D;&#x3D;3；而灰度图像只有一个灰度分量信息 channels&#x3D;&#x3D;1。</li>\n<li><code>type()</code> Mat 矩阵的类型</li>\n<li><code>depth()</code> 用来度量每一个像素中每一个通道的精度，但它本身与图像的通道数无关！depth 数值越大，精度越高。Opencv 中，Mat.depth()得到的是一个 0~6 的数字，分别代表不同的位数，对应关系如下：enum{CV_8U&#x3D;0,CV_8S&#x3D;1,CV_16U&#x3D;2,CV_16S&#x3D;3,CV_32S&#x3D;4,CV_32F&#x3D;5,CV_64F&#x3D;6}</li>\n<li><code>elemSize()</code> elem 是 element(元素)的缩写，表示矩阵中每一个元素的数据大小，如果 Mat 中的数据类型是 CV_8UC1，那么 elemSize&#x3D;&#x3D;1；如果是 CV_8UC3 或 CV_8SC3，那么 elemSize&#x3D;&#x3D;3；如果是 CV_16UC3 或者 CV_16SC3，那么 elemSize&#x3D;&#x3D;6；即 elemSize 是以 8 位（一个字节）为一个单位，乘以通道数和 8 位的整数倍；</li>\n<li><code>total()</code>: the total number of array elements. <code>mat data size: total() * elemSize()</code></li>\n<li><code>isContinuous()</code>数据是否连续</li>\n</ol>\n<h2 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a>functions</h2><h3 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h3><ol>\n<li>Mat array &#x3D; (Mat_<double>(3, 3) &lt;&lt; 0, -1, 5, -1, 5, -1, 0, -1, 0);</li>\n</ol>\n<h3 id=\"imread\"><a href=\"#imread\" class=\"headerlink\" title=\"imread\"></a>imread</h3><ol>\n<li><code>Mat cv::imread(const String &amp;filename, int flags = IMREAD_COLOR);</code></li>\n<li><a href=\"https://fossies.org/dox/opencv-4.6.0/group__imgcodecs__flags.html#ga61d9b0126a3e57d9277ac48327799c80\">flags list</a></li>\n<li>IMREAD_COLOR(value is 1): If set, always convert image to the 3 channel BGR color image.</li>\n<li>IMREAD_GRAYSCALE(vaule is 0): If set, always convert image to the single channel grayscale image (codec internal conversion).</li>\n</ol>\n<h3 id=\"imwrite\"><a href=\"#imwrite\" class=\"headerlink\" title=\"imwrite\"></a>imwrite</h3><ol>\n<li><code>bool cv::imwrite (const String&amp; filename, InputArray img, const std::vector&lt;int&gt; &amp; params = std::vector&lt;int&gt;())</code></li>\n<li><code>params</code> Format-specific parameters encoded as pairs (paramId_1, paramValue_1, paramId_2, paramValue_2, … .) see <a href=\"https://fossies.org/dox/opencv-4.6.0/group__imgcodecs__flags.html#ga292d81be8d76901bff7988d18d2b42ac\">cv::ImwriteFlags</a></li>\n</ol>\n<h3 id=\"resize\"><a href=\"#resize\" class=\"headerlink\" title=\"resize\"></a>resize</h3><ol>\n<li>不支持 nv12 resize <a href=\"https://github.com/lemenkov/libyuv\">libyuv</a>来做 yuv resize</li>\n</ol>\n<h3 id=\"crop\"><a href=\"#crop\" class=\"headerlink\" title=\"crop\"></a>crop</h3><ol>\n<li>使用 cv::Rect (x, y, w, h)</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">cv::Rect <span class=\"title\">crop_region</span><span class=\"params\">(<span class=\"number\">250</span>, <span class=\"number\">10</span>,<span class=\"number\">400</span>, <span class=\"number\">400</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> mat2=<span class=\"built_in\">mat1</span>(crop_region);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://github.com/lemenkov/libyuv/blob/6900494d90ae095d44405cd4cc3f346971fa69c9/include/libyuv/convert.h#L900\">libyuv crop</a></li>\n</ol>\n<h3 id=\"cvtColor\"><a href=\"#cvtColor\" class=\"headerlink\" title=\"cvtColor\"></a>cvtColor</h3><ol>\n<li><a href=\"https://docs.opencv.org/4.6.0/d8/d01/group__imgproc__color__conversions.html\">列表</a></li>\n<li><code>cv::cvtColor(src, dst, cv::COLOR_YUV2BGR_YVYU)</code></li>\n<li><code>cv::cvtColor(src, dst, cv::COLOR_BGR2GRAY)</code></li>\n<li><code>cv::cvtColor(src, dst, cv::COLOR_GRAY2BGR)</code></li>\n<li><code>cv::cvtColor(origin_image, image_rgb, cv::COLOR_YUV2RGB_NV12);</code></li>\n<li>不支持 yuv 转 rbg, 可以参考<a href=\"https://github.com/mhomola/AutonomousFlight/blob/422de6ccbbd3ec290a16c8d919fd23d4503ad62f/CV_scripts/opencv-4.x/modules/gapi/test/streaming/gapi_streaming_tests.cpp#L208-L208\">代码</a></li>\n</ol>\n<h3 id=\"permute-transpose-通道转换\"><a href=\"#permute-transpose-通道转换\" class=\"headerlink\" title=\"permute &#x2F; transpose 通道转换\"></a>permute &#x2F; transpose 通道转换</h3><ol>\n<li><a href=\"https://docs.opencv.org/4.x/d2/de8/group__core__array.html#gab1b1274b4a563be34cdfa55b8919a4ec\">transposeND</a>： Transpose for n-dimensional matrices.</li>\n</ol>\n<h3 id=\"cv-FileStorage-序列化与反序列化\"><a href=\"#cv-FileStorage-序列化与反序列化\" class=\"headerlink\" title=\"cv::FileStorage 序列化与反序列化\"></a>cv::FileStorage 序列化与反序列化</h3><ol>\n<li><code>cv2.FileStorage(&quot;output.yml&quot;, cv2.FILE_STORAGE_WRITE).write(&quot;mat&quot;, mat)</code></li>\n<li>test</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">cv::FileStorage <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;test.yml&quot;</span>, cv::FileStorage::READ)</span></span>;</span><br><span class=\"line\">cv::Mat left_image, right_image;</span><br><span class=\"line\"><span class=\"type\">int</span> out_hei, out_wid;</span><br><span class=\"line\">cv::Mat Q;</span><br><span class=\"line\"><span class=\"type\">float</span> phi, hc, traj_center, traj_wid, traj_near, traj_far;</span><br><span class=\"line\"><span class=\"type\">bool</span> affine;</span><br><span class=\"line\"></span><br><span class=\"line\">file[<span class=\"string\">&quot;left_image&quot;</span>] &gt;&gt; left_image;</span><br><span class=\"line\">file[<span class=\"string\">&quot;right_image&quot;</span>] &gt;&gt; right_image;</span><br><span class=\"line\">out_hei = (<span class=\"type\">int</span>)file[<span class=\"string\">&quot;out_hei&quot;</span>];</span><br><span class=\"line\">out_wid = (<span class=\"type\">int</span>)file[<span class=\"string\">&quot;out_wid&quot;</span>];</span><br><span class=\"line\">file[<span class=\"string\">&quot;Q&quot;</span>] &gt;&gt; Q;</span><br><span class=\"line\">phi = (<span class=\"type\">float</span>)file[<span class=\"string\">&quot;phi&quot;</span>];</span><br><span class=\"line\">hc = (<span class=\"type\">float</span>)file[<span class=\"string\">&quot;hc&quot;</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> int_affine = (<span class=\"type\">int</span>)file[<span class=\"string\">&quot;affine&quot;</span>];</span><br><span class=\"line\">affine = int_affine == <span class=\"number\">0</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://blog.51cto.com/SpaceVision/5071910\">Mat 常见属性</a></li>\n</ol>\n"},{"title":"OpenXLA","url":"/2023/03/13/OpenXLA/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/openxla/xla\">openxla&#x2F;xla</a></li>\n<li><a href=\"https://www.tensorflow.org/xla?hl=zh-cn\">tensorflow&#x2F;xla</a></li>\n<li><a href=\"https://openxla.github.io/iree/#support-matrix\">iree</a></li>\n<li><a href=\"https://www.sohu.com/a/653633664_129720\">简介</a></li>\n<li><a href=\"https://www.sohu.com/a/578161914_612370\">机器学习访存密集计算编译优化框架 AStitch，大幅提升任务执行效率</a></li>\n<li><a href=\"https://tvm.hyper.ai/docs/tutorial/intro/\">TVM 中文网站</a></li>\n</ol>\n"},{"title":"Pandoc","url":"/2022/09/27/Pandoc/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>Pandoc is a Haskell library for converting from one markup format to another, and a command-line tool that uses this library.</li>\n<li><a href=\"https://github.com/jgm/pandoc\">pandoc</a> (The universal markup converter 可以转换各种标记语言)</li>\n</ol>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"headerlink\" title=\"usage\"></a>usage</h2><ol>\n<li><a href=\"https://pandoc.org/demos.html\">demos</a></li>\n<li><a href=\"https://pandoc.org/try/\">online 转换</a></li>\n<li>markdown to pdf <code>pandoc MANUAL.md --pdf-engine=xelatex -o example13.pdf</code></li>\n</ol>\n"},{"title":"plugins","url":"/2021/09/13/Plugin-System/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li>emacs man dlopen有参考例子</li>\n<li>用作插件：插件技术最大特点是更新插件无需编译主程序，设计良好的系统可以做到在线升级，只更新插件（补丁）</li>\n<li>使用dlopen时链接发生在runtime, 不需要知道函数声明， 而-l链接发生在compile期，需要知道函数声明</li>\n<li>libc.so.6 GNU标准c库，含有getchar,system等函数</li>\n</ol>\n<h2 id=\"VVAS-and-DeepStream\"><a href=\"#VVAS-and-DeepStream\" class=\"headerlink\" title=\"VVAS and DeepStream\"></a>VVAS and DeepStream</h2><ol>\n<li>use gstreamer</li>\n</ol>\n<h2 id=\"VART-and-TensorRT\"><a href=\"#VART-and-TensorRT\" class=\"headerlink\" title=\"VART and TensorRT\"></a>VART and TensorRT</h2><ol>\n<li>use dlopen</li>\n</ol>\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li><a href=\"https://github.com/rhcad/x3py/wiki\">x3</a></li>\n</ol>\n<h2 id=\"famous-projects\"><a href=\"#famous-projects\" class=\"headerlink\" title=\"famous projects\"></a>famous projects</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/blob/eb8442dba3c9e85ffb77e0d870d2e29adcb0a4aa/plugin/common/cudaDriverWrapper.cpp#L28\">TensorRT</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/96493ef750a69c5ab71a1744b282c0c6770df234/tensorflow/core/platform/default/load_library.cc#L27\">Tensorflow</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/blob/f23f21dafebae49c9670e2e695344edd01867b0c/torch/csrc/deploy/loader.cpp#L373\">pytorch</a></li>\n<li><a href=\"https://github.com/torvalds/linux/blob/master/tools/lib/traceevent/event-plugin.c#L461\">linux</a></li>\n<li><a href=\"https://github.com/FFmpeg/FFmpeg/blob/989febfbd0c986e9e3e0f269a6b22778bf79147b/libavcodec/omx.c#L115\">FFmpeg</a></li>\n<li><a href=\"https://github.com/opencv/opencv/blob/c3ac834526c66840835737f03ed1b4d8f711534e/modules/core/src/gl_core_3_1.cpp#L62\">opencv</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://hackaday.com/2018/07/12/its-all-in-the-libs-building-a-plugin-system-using-dynamic-loading/\">BUILDING A PLUGIN SYSTEM USING DYNAMIC LOADING</a></li>\n<li>TensorRT <a href=\"https://github.com/NVIDIA/TensorRT/blob/eb8442dba3c9e85ffb77e0d870d2e29adcb0a4aa/samples/common/common.h#L930\">link1</a> <a href=\"https://github.com/NVIDIA/TensorRT/blob/eb8442dba3c9e85ffb77e0d870d2e29adcb0a4aa/samples/trtexec/trtexec.cpp#L145\">trtexec</a></li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"Programming-Paradigm","url":"/2021/08/22/Programming-Paradigm/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ol>\n<li>编程范式的实际含义：限制和规范程序员的能力。</li>\n<li>每个编程范式的目的都是设置限制，这些编程范式主要告诉我们不能做什么，而不是可以做什么。</li>\n<li>语法，features和范式的关系？语言的语义和句法决定了语言的features? features决定了语言的编程范式？</li>\n<li>限制：<ul>\n<li>结构化编程：对程序控制权的直接转移进行了限制和规范， 限制goto语句， 因为if, while等包装了goto</li>\n<li>面向对象编程：对程序控制权的间接访问进行了限制和规范， 限制函数指针, 因为多态包装了函数指针。</li>\n<li>函数式编程：对程序中的赋值进行了限制和规范， 限制赋值语句，因为包装了变量</li>\n</ul>\n</li>\n<li><code>关系： 多态是跨越架构边界的手段，函数式编程时我们规范和限制数据存放位置和访问权限的手段，结构化编程则是个模块的算法实现基础。这和软件架构的三大关注重点不谋而合：功能性，组件独立性，数据管理</code></li>\n<li>多态归根结底不过就是函数指针的一种应用。</li>\n</ol>\n<h2 id=\"Procedural-Structured-programming-面向过程-结构化编程\"><a href=\"#Procedural-Structured-programming-面向过程-结构化编程\" class=\"headerlink\" title=\"Procedural&#x2F;Structured programming 面向过程&#x2F;结构化编程\"></a>Procedural&#x2F;Structured programming 面向过程&#x2F;结构化编程</h2><ol>\n<li>结构化程序设计方法SP(Structured Programming)的着眼点是“面向过程”。　　</li>\n<li>它采用子程序、块结构、for循环以及while循环等结构，来取代传统的 goto。goto语句的某些用法会导致某个模块无法被递归拆分成更小的，可证明的单元，会导致无法采用分解法来将大型问题进一步拆分成更小的，可证明的部分。</li>\n<li>可以用<code>顺序结构</code>，<code>分支结构</code>和<code>循环结构</code>这三种结构构造出任何程序。</li>\n<li>科学和数学： 数学是要将可证明的结论证明，科学则是要将可证明的结论证伪。科学理论和定律特点：它们可以被证伪，但没有办法证明。</li>\n<li>软件开发像是一门科学研究学科：可通过无法证伪来证明软件的正确性。测试的作用。</li>\n<li>结构化编程最有价值的地方在于它赋予我们创造可证伪程序单元的能力。</li>\n<li>无论在哪一个层面上，从最小的函数到最大的组件，软件开发过程都和科学研究非常类似，他们都是由证伪驱动的。软件架构师选哟定义可以方便地进行证伪的模块,组件以及服务。</li>\n<li></li>\n</ol>\n<h2 id=\"Object-Oriented-Programming-面向对象编程\"><a href=\"#Object-Oriented-Programming-面向对象编程\" class=\"headerlink\" title=\"Object Oriented Programming 面向对象编程\"></a>Object Oriented Programming 面向对象编程</h2><p>1.面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力，这种能力让软件架构师可以构建出某种插件式架构，让高层策略性组件与底层是线性组件相分离，底层组件可以编译成插件，实现独立于高层组件的开发和部署。<br>2.<code>依赖反转</code>： 通过接口，多态来使<code>源代码上的依赖关系方向</code>与<code>控制流方向</code>相反。 中间加了接口，只有被控制端的源代码依赖关系方向反转。 面向接口编程就是利用了依赖反转来使得模块分离。<br>3.依赖反转可用来打破组件间循环依赖。</p>\n<h2 id=\"Functional-Programming-函数式编程\"><a href=\"#Functional-Programming-函数式编程\" class=\"headerlink\" title=\"Functional Programming 函数式编程\"></a>Functional Programming 函数式编程</h2><ol>\n<li>最大特点是不可变性——某个符号所对应的值永远不变，从理论上讲，函数式编程语言应该是没有赋值语句的。</li>\n<li>如果由足够大的存储量和处理能力，应用程序就可以用完全不可变的，纯函数式的方式来编程。</li>\n<li>一个架构设计良好的应用程序应该将状态可修改的部分和不需要修改的部分隔离成单独的组件，然后用合适的机制来保护可变量。可变状态组件的逻辑越少越好。</li>\n<li>好处：<ul>\n<li>没有可变状态，函数就是引用透明(referential transparency)的和没有有副作用(no side effect)</li>\n<li>可以解决并发竞争，死锁等问题</li>\n<li>代码容易进行推理，不容易出错。</li>\n<li>由于函数式语言是面向数学的抽象，更接近人的语言，而不是机器语言，代码会比较简洁，也更容被理解。</li>\n</ul>\n</li>\n<li>面向数学的抽象，将计算描述为一种表达式求值，一句话，函数式程序就是一个表达式。</li>\n<li>函数式编程中的函数不是指计算机中的函数，而是指数学中的函数，即自变量的映射。也就是说一个函数的值仅仅取决于函数参数的值。</li>\n<li>函数式编程语言中的变量不是命令式编程语言中的变量（存储状态的单元），而是代数中的变量，即一个值的名称。变量的值是不可变的。命令式编程中的”x &#x3D; x + 1”（赋值运算），拿给程序员看说是对的，拿给数学家看，却被认为这个等式为假。</li>\n</ol>\n<h2 id=\"Imperative-programming-指令式编程\"><a href=\"#Imperative-programming-指令式编程\" class=\"headerlink\" title=\"Imperative programming 指令式编程\"></a>Imperative programming 指令式编程</h2><ol>\n<li>面向计算机硬件的抽象<ul>\n<li>变量： 存储单元</li>\n<li>赋值语句： 获取，存储指令</li>\n<li>表达式： 内存引用和算数运算</li>\n<li>控制语句： 跳转指令</li>\n</ul>\n</li>\n<li>冯诺依曼机的指令序列。</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li>&lt;&lt;架构整洁之道&gt;&gt;</li>\n</ol>\n","categories":["Program","PLT"],"tags":["Paradigm"]},{"title":"Pybind11","url":"/2021/03/15/Pybind11/","content":"<h2 id=\"Pybind11\"><a href=\"#Pybind11\" class=\"headerlink\" title=\"Pybind11\"></a>Pybind11</h2><ol>\n<li>python 与 C&#x2F;C++相互调用</li>\n<li>轻量级，只含有头文件</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://github.com/pybind/pybind11\">github</a><ul>\n<li>包含测试程序</li>\n</ul>\n</li>\n<li><a href=\"https://pybind11.readthedocs.io/en/stable/\">doc</a></li>\n<li><a href=\"https://github.com/pybind/cmake_example\">cmake example</a></li>\n<li><a href=\"https://github.com/pybind/python_example\">Setuptools example</a></li>\n<li><a href=\"https://pybind11.readthedocs.io/en/latest/\">tutorial</a></li>\n<li><a href=\"https://blog.csdn.net/fitzzhang/article/details/78988682\">python 调用 C++之 pybind11 入门</a></li>\n</ol>\n","categories":["Program","Python"],"tags":["Python"]},{"title":"Programming experience","url":"/2021/10/03/Programming-experience/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li>gpt 作为老师</li>\n<li>如果一个问题能轻易用 chatgpt 回答的，那不是学习重点</li>\n<li>chatgpt 将提升人类全体的水平, 最差也是 chatgpt 水平，chatgpt 是 baseline</li>\n<li>思路 first</li>\n<li><code>Think twice, code once</code></li>\n<li>开发方式： windows wsl + docker</li>\n<li>可以通过 discord 宣传和需求建议</li>\n<li><a href=\"https://www.bestpractices.dev/en/projects\">OpenSSF Best Practices</a> <a href=\"https://github.com/doctest/doctest\">doctest</a></li>\n</ol>\n<h2 id=\"工程组织\"><a href=\"#工程组织\" class=\"headerlink\" title=\"工程组织\"></a>工程组织</h2><ol>\n<li>两种方式, 主要区别是 include 和 test 是不是和模块 src 在一个文件夹<ul>\n<li>一起：<a href=\"https://github.com/opencv/opencv\">参考 opencv</a></li>\n<li>分离：<a href=\"https://github.com/grpc/grpc\">参考 grpc</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Software-Development-Modules\"><a href=\"#Software-Development-Modules\" class=\"headerlink\" title=\"Software Development Modules\"></a>Software Development Modules</h2><ol>\n<li>基础功能<ul>\n<li>日志系统和调试系统</li>\n<li>错误处理</li>\n<li><a href=\"https://cs.lmu.edu/~ray/notes/unittesting/\">测试</a>：单元测试,集成测试,smoke test 系统测试，性能测试，回归测试，压力测试。通过无法证伪来证明正确性。</li>\n<li>samples&#x2F;demo</li>\n<li>docs and docs tests</li>\n<li>changelog or release note <a href=\"https://docs.nvidia.com/deeplearning/tensorrt/release-notes/index.html\">tensorrt release notes</a> Ensure you are familiar with the NVIDIA TensorRT Release Notes for the latest new features and known issues.</li>\n</ul>\n</li>\n<li>重构<ul>\n<li>架构</li>\n<li>易读</li>\n<li>代码风格</li>\n</ul>\n</li>\n<li>性能<ul>\n<li>profiling</li>\n<li>benchmarks</li>\n<li>加速</li>\n</ul>\n</li>\n<li>支撑<ul>\n<li>版本控制</li>\n<li>CI&#x2F;CD</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><ol>\n<li>最重要的是重构的<code>节奏感</code>，小的步子可以更快的前进，请保持代码永远处于可工作状态。（chunye 就是这样)</li>\n<li>重构前现有<code>测试</code></li>\n<li>小步修改</li>\n<li>每次修改后就运行测试</li>\n<li>每次重构就提交代码，push 前把修改合并成更有意义的提交</li>\n<li>永远将函数的返回值命名为”result”</li>\n<li>尽量<code>移除局部变量</code>，使用小函数替代（临时变量会带来麻烦）</li>\n<li>重构的关键在于运用大量微小且保持软件行为的步骤，一步步达成大规模修改。重构过程中几乎<code>可以随时停下来，不影响软件功能</code>。</li>\n<li>区分<code>重构</code>和<code>性能优化</code>；重构是为了让代码更容易理解，更容易改变。程序可能更快，也可能更慢。在性能优化是，只关心让程序运行的更快，代码可能更难理解和维护。</li>\n<li>两顶帽子：<code>添加新功能</code>和<code>重构</code>。添加新功能时<code>不应该修改既有代码，只管添加新功能</code>，重构时<code>不能添加新功能，只管调整代码结构</code></li>\n<li>重构的主要功能：<ul>\n<li><code>改进软件设计</code></li>\n<li><code>使软件更容易理解</code></li>\n<li><code>帮助找到bug</code></li>\n<li><code>提高编程速度</code></li>\n</ul>\n</li>\n<li>重构的<code>唯一目的就是让我们开发更快，用更少的工作量创造更大的价值</code>。</li>\n<li>代码所有权边界：接口的使用者（用户）与声明者（作者）彼此独立，声明者无权修改使用者的代码。添加新接口，旧的接口标记为不推荐使用(deprecated)。接口会变得复杂。</li>\n<li>重构和性能：有性能测试工具，发现最耗时代码进行优化</li>\n</ol>\n<h2 id=\"code-of-conduct\"><a href=\"#code-of-conduct\" class=\"headerlink\" title=\"code of conduct\"></a>code of conduct</h2><ol>\n<li><a href=\"https://llvm.org/docs/CodeOfConduct.html\">llvm code of conduct</a></li>\n</ol>\n<h2 id=\"Principles-of-Software-Engineering\"><a href=\"#Principles-of-Software-Engineering\" class=\"headerlink\" title=\"Principles of Software Engineering\"></a>Principles of Software Engineering</h2><ol>\n<li>迭代和重构。</li>\n<li>自动化</li>\n<li>可重复</li>\n<li>学习性测试：使用第三方代码，第一步不要在生产代码中实验新东西，而是单独编写测试来浏览和理解第三方代码。区分学习和整合。</li>\n<li>小步快跑，节奏</li>\n<li>KISS (Keep It Simple Stupid)</li>\n<li>DRY (Don’t Repeat Yourself) (generic programing, 提出重复代码公用….)</li>\n<li><code>层次</code>(抽象接口组成):写代码思路不应该是树状，而应该是有层次的，抽象出来层次，屏蔽细节，只依赖上个层次，不关注更低级别的层次, 每一层都相当于一种语言，解决一类问题，这样的系统更健壮。见<a href=\"https://www.youtube.com/watch?v=YCR03O5EUdI&list=PLkEwH_Z2WOlppy8oUfrGwFVlOuKyo3RO_&index=5\">sicp</a></li>\n<li>抽象,控制复杂度， 黑盒抽象</li>\n<li><code>边界，隔离</code></li>\n<li>具体规则：<ul>\n<li><code>命名规则</code>：类名是名词，方法名是动词。</li>\n<li><code>函数规则</code>：尽可能短小，只做一件事，每个函数一个抽象层次，名字不怕长，尽量少参数，无 side effect.</li>\n<li><code>类规则</code>：短小，单一权责，高内聚(方法和变量互相依赖）</li>\n<li><code>系统设计规则</code>： 多写测试，不可重复，表达力(好名字，好结构…), 尽可能少的类和函数(和前三条冲突，优先级最低）</li>\n</ul>\n</li>\n<li>一键： 单个命令构建系统，单个命令运行所有测试</li>\n<li>出错仔细看 log，调试步步为营</li>\n<li>多看文档</li>\n<li>记录工作日志</li>\n<li>区分对内和对外，区别对待</li>\n<li>不要重复造轮子</li>\n<li>YAGNI (You Aren’t Gonna Need It) <a href=\"https://medium.com/swlh/6-principles-of-software-engineering-that-every-developer-should-know-7868f362b633\">link</a></li>\n<li>高内聚，低耦合</li>\n<li>正交</li>\n<li>分离<code>控制和逻辑</code>。<code>控制</code>：与业务逻辑无关的代码或系统的控制，如：多线程，异步，部署等，<code>逻辑</code>：业务逻辑，即解决用户问题的逻辑。</li>\n<li>权衡</li>\n<li>实用易用</li>\n<li>SOLID 原则<ul>\n<li><code>单一职责原则 SRP</code> 一个类只做一件事</li>\n<li><code>开闭原则 OCP</code> 软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的</li>\n<li><code>里氏替换原则 LSP</code> 子类应该可以完全替代父类，也就是说在使用继承时，只扩展新功能，不要破坏父类原有的功能。</li>\n<li><code>接口隔离原则 ISP</code> 客户端不应该依赖它不需要的接口。如果一个接口在实现时，部分方法由于冗余被客户端空实现，则应该将该接口拆分，让实现类只依赖自己需要的接口。</li>\n<li><code>依赖倒置原则 DIP</code> 细节应该依赖与抽象，抽象不应该依赖于细节。把抽象层放在程序设计的高层，并保持稳定，程序的细节变化由低层的实现层来完成。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Theories-of-Programming-Languages\"><a href=\"#Theories-of-Programming-Languages\" class=\"headerlink\" title=\"Theories of Programming Languages\"></a>Theories of Programming Languages</h2><ol>\n<li>SICP</li>\n<li><a href=\"https://people.cs.uchicago.edu/~blume/classes/aut2008/proglang/text/offline.pdf\">book</a></li>\n<li><a href=\"https://www.jb51.net/books/163654.html\">程序设计语言原理</a> <a href=\"http://www.sci.brooklyn.cuny.edu/~chuang/books/sebesta.pdf\">英文版本</a></li>\n<li>通用的编程语言模型: 基本元素(过程和数据)，组合的方法(函数，结构体，类)，抽象的方法</li>\n</ol>\n<h2 id=\"The-Study-of-Programming-Languages\"><a href=\"#The-Study-of-Programming-Languages\" class=\"headerlink\" title=\"The Study of Programming Languages\"></a><a href=\"https://cs.lmu.edu/~ray/notes/plstudy/\">The Study of Programming Languages</a></h2><h2 id=\"Programming-paradigm\"><a href=\"#Programming-paradigm\" class=\"headerlink\" title=\"Programming paradigm\"></a><a href=\"https://en.wikipedia.org/wiki/Comparison_of_programming_languages\">Programming paradigm</a></h2><ol>\n<li><a href=\"https://www.info.ucl.ac.be/~pvr/paradigms.html\">Functional Programming</a></li>\n<li>Object Oriented Programming</li>\n<li>Imperative programming</li>\n<li>Procedural programming</li>\n<li>Generic</li>\n<li>Reflective</li>\n<li>Event-drive</li>\n<li><a href=\"https://www.info.ucl.ac.be/~pvr/VanRoyChapter.pdf\">paper Programming Paradigms for Dummies</a></li>\n</ol>\n<h2 id=\"Programming-Language-Concepts\"><a href=\"#Programming-Language-Concepts\" class=\"headerlink\" title=\"Programming Language Concepts\"></a><a href=\"https://cs.lmu.edu/~ray/notes/plconcepts/\">Programming Language Concepts</a></h2><ol>\n<li>Structure (Syntax 句法)</li>\n<li>Meaning (Semantics 语义)</li>\n<li>Names, Binding, and Scope (Declarations)</li>\n<li>Evaluation (Expressions)</li>\n<li>Execution (Control Flow)</li>\n<li>Types</li>\n<li>Functional Abstraction (Subroutines and Coroutines)</li>\n<li>Data Abstraction (Objects and Modules)</li>\n<li>Concurrency</li>\n<li>Metaprogramming</li>\n<li><a href=\"https://cs.lmu.edu/~ray/classes/pl/\">link</a></li>\n</ol>\n<h2 id=\"Language-Features-王垠-如何掌握所有的程序语言\"><a href=\"#Language-Features-王垠-如何掌握所有的程序语言\" class=\"headerlink\" title=\"Language Features 王垠 如何掌握所有的程序语言\"></a>Language Features <a href=\"http://www.yinwang.org/blog-cn/2017/07/06/master-pl\">王垠 如何掌握所有的程序语言</a></h2><ol>\n<li>编程语言取舍：<a href=\"https://rustmagazine.github.io/rust_magazine_2021/chapter_4/rust-to-system-essence-lang.html\">link</a><ul>\n<li><code>性能</code>：编译或解释语言，并发</li>\n<li><code>安全</code>： 内存安全(GC 或 RAII,所有权), 并发安全,类型安全</li>\n<li><code>表达力</code>：泛型，宏</li>\n</ul>\n</li>\n<li>Compiled language or Interpreted language</li>\n<li>Purely functional, Side effect</li>\n<li>Statically typed or Dynamically typed</li>\n<li>Statement and Expression</li>\n<li>Type inference</li>\n<li>pattern matching</li>\n<li>Lazy</li>\n<li>RAII or GC (Performance)</li>\n<li>Safety(memory-safety and thread-safety)</li>\n<li>Abstraction Level</li>\n<li>Zero-cost Abstraction</li>\n<li>Multi-paradigm</li>\n<li>Packages Management</li>\n<li>Concurrency Mechanisms</li>\n</ol>\n<h2 id=\"Rust-例子\"><a href=\"#Rust-例子\" class=\"headerlink\" title=\"Rust 例子\"></a>Rust 例子</h2><p><img src=\"https://static001.infoq.cn/resource/image/2d/91/2d36b45f6905a13a310e6447778ca391.jpg\" alt=\"概念层次图\"></p>\n<h2 id=\"思维模式\"><a href=\"#思维模式\" class=\"headerlink\" title=\"思维模式\"></a>思维模式</h2><ol>\n<li>官方资料 first</li>\n<li><code>3W</code>: what, why, how <a href=\"https://www.dds-foundation.org/what-is-dds-3/#\">dds introduction about</a><ul>\n<li>查看各种技术先看 about</li>\n</ul>\n</li>\n<li><code>5W2H</code>: 原因（为什么 Why）、对象（是什么 What）、地点（在哪里 Where）、时间（什么时候 When）、人员（是谁 Who）、方法（怎么做 How）、程度（How much）</li>\n<li><code>可重复</code>和<code>自动化</code>是非常重要的思维工作方式。版本管理 git, Jenkins, docker, CI, Rust Cargo.lock 文件, emacs tmux 插件, 软件一条命令安装(自动化，可重复), 代码风格 fmt 是自动化也是风格可重复，work log(可重复）。</li>\n<li><code>effect</code>和<code>side effect副作用</code>。<code>纯函数</code>的行为只依赖它的接口。非纯函数副作用：引起环境，上下文的改变。<a href=\"https://wangji.pro/%E6%9C%89%E5%85%B3%E6%B3%9B%E5%87%BD%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86-effect-%E5%92%8C-side-effect/\">side effect</a> 指的是那些任何主动或被动地对“非当前局部环境变量”的访问的操作。注意，“非当前局部环境变量”不仅仅包括访问全局变量和静态变量。这个操作可能非常广泛，甚至不局限于变量，还包括访问外部 IO，执行某些特殊指令，以非正常返回的方式引起的主动或被动出栈（比如异常）等行为。</li>\n<li>多用纯函数，非纯函数会增加系统状态，使系统复杂化，容易出问题。组合爆炸</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/monad.html\">monad</a></li>\n</ol>\n<h2 id=\"Programming-experience\"><a href=\"#Programming-experience\" class=\"headerlink\" title=\"Programming experience\"></a>Programming experience</h2><ol>\n<li><p>一个函数不要超过 50 行，车企验证</p>\n</li>\n<li><p>多看 FAQ, 例如 tensorrt FAQ</p>\n</li>\n<li><p>软件架构多关注接口，接口决定了系统运行方式，项目讲解多关注接口; 用到的架构能够手写</p>\n</li>\n<li><p>关注问题的本质，剥离出不重要的东西，多关注核心。比如学 cutlass，关注 cute，分层结构，什么测试代码，无关紧要的东西就不要关注了</p>\n</li>\n<li><p>计算机科学里面，万变不离其宗，最核心的只有：<code>算法、数据结构、体系结构</code> <a href=\"https://www.zhihu.com/question/52965880/answer/133178593\">link</a></p>\n</li>\n<li><p>多关注<code>硬件架构、操作系统原理、编译原理、分布式系统</code> 别搞花里胡哨的东西</p>\n</li>\n<li><p>可以看一下 repo 发版历史，了解一下过程, 着重看 readme</p>\n</li>\n<li><p>了解一个软件永远是从 API 开始</p>\n</li>\n<li><p>使用 copilot</p>\n</li>\n<li><p>让 gpt 看文章，学工具， 看使用说明</p>\n<ul>\n<li>总结</li>\n<li>提问</li>\n</ul>\n</li>\n<li><p>让 gpt 解释图片， 如英伟达不同 sm 对比图</p>\n</li>\n<li><p>多看 arxiv 和 google scolar 论文；</p>\n<ul>\n<li>新事情多看综述</li>\n</ul>\n</li>\n<li><p>将自己记录输入到 gpt 中，看看自己理解对不对</p>\n</li>\n<li><p>(very good)<code>梳理</code>： 输入关键理解，让 gpt 帮助梳理, 写 blog 很有用</p>\n</li>\n<li><p>python 多看 help</p>\n</li>\n<li><p>开发机先看性能</p>\n<ul>\n<li>cpu 个数与频率 <code>cat /cpu/info</code></li>\n<li>内存 <code>free -h</code></li>\n<li>gpu 个数、显存、频率 <code>nvidia-smi</code> <code>nvidia-smi -q</code> <code>jtop</code></li>\n<li>硬盘信息 <code>df -h</code></li>\n</ul>\n</li>\n<li><p>找一台强力的服务器进行开发，加快迭代速度; 本地适合记录和测试简单代码，不适合开发</p>\n</li>\n<li><p>第一性原理：从头开始</p>\n</li>\n<li><p>多问自己问题</p>\n</li>\n<li><p>给自己信念</p>\n</li>\n<li><p>找一个好老师： 李沐， 李宏毅, youtube 查找(观看量)</p>\n</li>\n<li><p>what how why</p>\n<ul>\n<li>what 知道有什么名字， 入门，了解</li>\n<li>how 如何使用技术， 工程师</li>\n<li>why 为什么， 学生，研究员</li>\n</ul>\n</li>\n<li><p>几种学习新东西效果，依次增大</p>\n<ul>\n<li>看文章</li>\n<li>听</li>\n<li>视频</li>\n<li>视频+动手</li>\n<li>给自己讲</li>\n<li>给他人讲</li>\n</ul>\n</li>\n<li><p>注意力是有价值的，容易受到干扰, 注意力集中到有价值的事情上,</p>\n</li>\n<li><p>要有自己观点和依据，不管对错</p>\n</li>\n<li><p>c++中接口类可以以 I(interface 开头)，例如 tensorrt 的接口类，这种命名方式帮助开发者清晰地区分接口和实现，以及其他非接口类型的类。</p>\n</li>\n<li><p>项目进度管理很重要，计划制定相当于思路，无思路特别乱</p>\n</li>\n<li><p>排期也相当于思路, 做事要排期，职业规划也需要排期, 思路清晰事半功倍</p>\n</li>\n<li><p>无思路不写代码，思路不明确就开始写是自欺欺人，如刷题的思路</p>\n</li>\n<li><p><code>接口</code>注释相当于 leetcode 刷题时的<code>思路</code>，.cpp 相当于思路的具体实现。具体实现根本记不得，但接口或思路看一下就知道功能或实现方法</p>\n</li>\n<li><p>接口多用结构体，灵活性更好</p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/linuxAndMcu/p/11280748.html\">命名法：驼峰、下划线、匈牙利</a></p>\n</li>\n<li><p><code>sample + 注释</code> 学习方法</p>\n</li>\n<li><p>学习语法的时候，写一些 sample code 并注释上关键点，积累起来。 类似 cppreference</p>\n</li>\n<li><p>多看 man</p>\n</li>\n<li><p>知识点要对应例子，如 sandbox 举例</p>\n</li>\n<li><p>写脚本时要先屏蔽外界变量，将外界变量转化为内部变量。</p>\n</li>\n<li><p>区分好静态概念和动态概念：如 graph 是静态概念，runner 是动态概念， 静态是一种表示(程序)， 动态是一种运行(进程)，有 map 机制，将静态映射到动态(调度)</p>\n</li>\n<li><p>代码分为静态代码和动态代码，静态是写死的，动态是根据配置自动生成的</p>\n</li>\n<li><p>标准化然后自动化</p>\n</li>\n<li><p>简化程序， 去除杂项。用 sandbox</p>\n</li>\n<li><p><code>版本控制， 无情的测试，完全自动化</code></p>\n</li>\n<li><p><code>抽象</code>和<code>分治</code>是降低程序复杂度的两种方法</p>\n</li>\n<li><p>了解开源库结构先看<a href=\"https://fossies.org/dox/all.html\">fossies doxygen lists</a></p>\n</li>\n<li><p>新功能用 sourcegraph 探索大家都怎么使用的， 如探索 mermaid 使用</p>\n</li>\n<li><p>mermaid readme 中画 uml 图和流程图, 可以作为写代码的 roadmap, 用 Snipaste 贴到空白地方写代码</p>\n</li>\n<li><p>注意 debug log</p>\n<ul>\n<li>cmake: <code>-DCMAKE_VERBOSE_MAKEFILE=ON</code></li>\n<li>opencv:<code>OPENCV_LOG_LEVEL=DEBUG</code></li>\n</ul>\n</li>\n<li><p><code>have fun</code> neofetch and tty pts send</p>\n</li>\n<li><p><code>能够轻易得到答案的简单问题不要问出口</code>，那并不会显得你很好学，反而会显得你无知又懒惰。</p>\n</li>\n<li><p><code>Think twice, code once</code>. Don’t start “doing something” before you fully understand the problem and have acquired sufficient background knowledge</p>\n</li>\n<li><p>文档写好可以出书</p>\n</li>\n<li><p>讲解要有画面感</p>\n</li>\n<li><p><code>doxygen 文档</code> 为每个库生成 doxygen 文档，远程统一拉取配置， 生成文档发送到 mirros 上推送到 mirrors 上面。大家都可以访问， 作为 user guide。Jenkins 自动完成</p>\n</li>\n<li><p><code>Roadmap</code>: 路线图很关键， 例如<a href=\"https://github.com/stemmlerjs/software-design-and-architecture-roadmap\">software-design-and-architecture-roadmap</a></p>\n</li>\n<li><p>glog 只运行一次的 log 可以用 INFO</p>\n</li>\n<li><p><code>开发环境和测试环境分离</code>： 开发环境公用，每个场景有自己测试环境， 不用来回切换测试环境, 测试环境用 Jenkins 来搭建。</p>\n</li>\n<li><p><code>梳理好流程</code>：(效果拔群：6yolox + deepsort + 2lanes workflow 一天搞定)</p>\n<ul>\n<li>数据通路图</li>\n<li>数据结构 + 函数</li>\n<li>待做的事</li>\n</ul>\n</li>\n<li><p>弄清需求，画图，然后再开始做, 迭代。</p>\n</li>\n<li><p>重复的事情尽量用 ci 搞定。ci 流程熟练。</p>\n</li>\n<li><p>编译不要漏过<code>warning</code></p>\n</li>\n<li><p><strong>加速编译</strong>： <code>configure the project and generate a native build system</code>后直接执行<code>make -C $BUILD_DIR -j4</code> or <code>cmake --build $&#123;BUILD_DIR&#125;</code>，不用每次都重新构建编译系统</p>\n</li>\n<li><p>任务分解：先搭框架，慢慢填充，上节奏。</p>\n</li>\n<li><p>搭个框架，编译通过： 类接口 + 测试程序 &#x3D;&gt; 一步步调试(构造， 输入，输出)</p>\n</li>\n<li><p>专注：</p>\n<ul>\n<li>高亮</li>\n<li>折叠</li>\n<li>narrow</li>\n<li>beacon</li>\n<li>fullscreen</li>\n<li>统一界面</li>\n</ul>\n</li>\n<li><p>可重复, 自动化： 保留自己的操作历史</p>\n<ul>\n<li>.zsh_history</li>\n<li>z.lua</li>\n<li>docker_file</li>\n<li>work_log</li>\n<li>snippets</li>\n<li>blog</li>\n<li>bug 跟踪历史</li>\n<li>org mode</li>\n</ul>\n</li>\n<li><p>多使用 emacs c++ man 功能。可以作为增强版 snippets</p>\n</li>\n<li><p>markdown 折叠很有用： worklog, blog</p>\n</li>\n<li><p>高亮相当于荧光笔，关注关键点</p>\n</li>\n<li><p>问清楚事情的来龙去脉，不要埋头苦干。</p>\n</li>\n<li><p>记录调试状态，步骤。不用重复跟别人解释，也好回忆内容。</p>\n</li>\n<li><p>html 文档比 pdf 好用</p>\n</li>\n<li><p>release 给别人时加一下 <a href=\"https://keepachangelog.com/zh-CN/1.0.0/\">changlog</a> 或 release note</p>\n</li>\n<li><p>看见好的地方就吸收</p>\n</li>\n<li><p>从开发者的角度开发功能，从使用者的角度来使用。开发功能要配套 test， test 越简单越好。</p>\n</li>\n<li><p>不要陷入细节，从高层次来看问题</p>\n</li>\n<li><p>开发方式：作为用户，先写测试程序架子，抽象出用到的接口。然后作为开发者实现接口， 用户和开发者要。</p>\n</li>\n<li><p><code>[自顶向下和自底向上结合](https://www.jianshu.com/p/608ac1e6d05d)</code></p>\n<ul>\n<li>自顶向下: 先搭框架，抽象出各个层次，再往里填。</li>\n<li>自底向上: 先完成基本功能，再搭框架。</li>\n</ul>\n</li>\n<li><p><code>抽象层次</code>很重要，</p>\n</li>\n<li><p><code>sandbox</code> 快速验证，非常有用</p>\n</li>\n<li><p>热爱编程，从中找到乐趣，代码写的简洁优雅, 易用。</p>\n</li>\n<li><p>统一：</p>\n<ul>\n<li>emacs 和命令行统一操作</li>\n<li>emacs 统一编辑等功能</li>\n<li>format all 统一格式化</li>\n<li>docker 统一开发环境</li>\n<li>tmux 统一 terminal</li>\n<li>Nvidia Unified Memory</li>\n<li>opencv 统一接口</li>\n</ul>\n</li>\n<li><p>参考常用库接口,如 opencv, 使用 doxygen 生成 UML, yaml(gtest)</p>\n</li>\n<li><p>解决编程痛点：</p>\n<ul>\n<li>不同版本 clang-format 不一样</li>\n<li>命令行 error warning 高亮</li>\n<li>mount uid 与主机一致</li>\n<li>新板子分配用户，uid 一致</li>\n</ul>\n</li>\n<li><p>多使用 profilling(chrono)测试性能(看哪种写法性能更好)</p>\n</li>\n<li><p>讲故事编程, 串起来</p>\n</li>\n<li><p><code>通用</code>: 写的代码尽量通用，尽量少的特例，少 if。linus.</p>\n</li>\n<li><p><code>迭代</code>： 先想怎么写就怎么写，可能非常丑陋，然后再打磨代码。是一个迭代过程，不是一蹴而就,例如：rust xmodel product 模块，刚开始特别烂，不断迭代，抽象了接口，使用了 trait object, 工厂模式，模板，前后提交了几十个 commit。</p>\n</li>\n<li><p><code>讲故事</code>：大师级程序员把系统当作故事来讲，而不是当作程序来写。学会讲故事会提升编程能力和应表达能力。</p>\n</li>\n<li><p>编程艺术：编程的目的是搭建系统，系统是由语言来描述的，函数是语言的动词，类是名词。编程的艺术其实也是语言的艺术，合理的使用动词，名词。</p>\n</li>\n<li><p><code>语言feature</code>: 编程语言有一堆 feature，每种语言在其中选择权衡，理解了各种 feature，也就学会了各种语言，各 feature 之间的关系，互斥，相交。<a href=\"https://wiki.haskell.org/Functional_programming\">haskell feature</a> <a href=\"http://learnyouahaskell.com/chapters\">haskell book</a></p>\n</li>\n<li><p>函数式编程没有变量也没有 side effect。隔离了可变性，变量或者默认状态默认就是不可变的。避免了死锁，状态冲突等众多麻烦。</p>\n</li>\n<li><p>函数式编程，命令式编程，面向对象编程区别</p>\n</li>\n<li><p>以前的面向对象系统和如今的分布式系统。</p>\n</li>\n<li><p>表达式 expression 和语句 statement 区别，表达式有返回值。</p>\n</li>\n<li><p><code>测试</code>分为<code>单元测试，集成测试和文档测试</code>。单元测试独立地验证库的不同部分，也能够测试私有函数实现细节。集成测试则检查多个部分是否能结合起来正确地工作，并像其他外部代码那样测试库的公有 API。</p>\n</li>\n<li><p>最重要的是<code>官方资源</code>，看英文原文，如 rust 官网教程，c++ cppcon 会议。</p>\n</li>\n<li><p>找<code>最专业</code>的，从原理上学习。如 rust 设计者讲 rust，git 原理。</p>\n</li>\n<li><p>找<code>创始人相关</code>视频学习，如 Bjarne Stroustrup c++视频，Linus Torvalds git 原理。Richard Stallman emacs.</p>\n</li>\n<li><p><code>先见识，再模仿，后摸索</code>。<code>Good artist copy, great artist steal</code> 学习新语言，可以先看看视频教程，再自己摸索。</p>\n</li>\n<li><p><code>将知识点放入体系</code>中，不能孤立的学习。比如学习 C++知识时要有<code>big picture</code>，要把编译器，操作系统考虑进去，这样才能理解深刻，不要陷入细节中无法自拔。</p>\n</li>\n<li><p>搭建自己<code>编程体系，哲学</code>。写代码是<code>实践</code>，用来验证体系的好坏。重点应该关注体系哲学而不是具体的代码。</p>\n</li>\n<li><p><code>将知识点带入现实，自己融入进去</code>。便于理解和讲解。比如，想象自己是操作系统，管理一堆资源，向应用提供服务，交互过程。</p>\n</li>\n<li><p>如何看待编程？<code>编程是一个建造世界的过程(会涉及不同层级的抽象)</code>，建造完成后的世界就相当于程序，完成了编程的目标。建造流程为生产对象，组织对象，对象行为约定。（对应设计模式里的创建型模式，结构型模式，行为型模式），设计模式就相当与搭建过程中用到的各种套路，是一种设计思路。参考《我的世界》游戏。</p>\n</li>\n<li><p><code>区分抽象层次</code>很重要，有助于理解系统的横向(同层次）纵向（上下层）关系。理解编写代码要从最高层次（顶层设计）入手，一层一层的往里剥，越往里越细节（the onion principle）。</p>\n</li>\n<li><p>有<code>目标</code>或者<code>带着问题</code>看文档或代码。</p>\n</li>\n<li><p>无论是整体还是模块，都要先弄清楚模块<code>目的</code>，再学习<code>基本概念</code>, 然后学习<code>框架和设计模式</code>，最后再学习具体代码。</p>\n</li>\n<li><p>看文档或代码的时候<code>抓关键点记笔记</code>，有利于<code>专注</code>，记录的时候会强化，加深理解，也有利于<code>新思路涌现</code>。可以记录到<code>blog</code>或者<code>git</code>上。如有需要进行<code>可视化</code></p>\n</li>\n<li><p>看文档代码先问<code>why</code>。要从模块<code>存在的目的？解决了什么问题？特点特性？优缺点？适用范围？概念？架构？设计思路？具体实现方式？</code>等方面考虑问题。</p>\n</li>\n<li><p>概念刚开始可能很难理解，可以从<code>具体实例</code>来理解，<code>多动手</code>，写一遍理解深刻很多。</p>\n</li>\n<li><p>找到<code>语言优势</code>，重点关注。C++的优势在于<code>性能</code>，死磕性能。</p>\n</li>\n<li><p>学习<code>建模</code>，对系统建模。</p>\n</li>\n<li><p>读代码时要先理解总体设计架构，设计思路，再具体到细节，架构理解了代码就不是问题。</p>\n</li>\n<li><p>多学点架构，设计方法，少学点语法。</p>\n</li>\n<li><p>最终目标创造而不是复制。</p>\n</li>\n<li><p>架构是撑起项目的基础，理解架构了就能看清楚系统轮廓。架构就相当于系统的草图，有了草图才能起高楼。</p>\n</li>\n<li><p>注意软件架构和设计模式的区别。</p>\n</li>\n<li><p><code>设计</code>是解决问题的方案，不是一种算法。</p>\n</li>\n<li><p>分主题分模块学习语言，分拆效率高，更容易 focus，不能一股脑的啥都往脑子里塞。</p>\n</li>\n<li><p>学习新知识时<code>先明确概念</code>，如 cy 学习 git，明确 git 的原理，四个 object；学习 cmake 时明确 component 和 target；学习 gstreamer 明确 component,pad 等，给别人讲解是也是从基本概念、基本组成讲起。</p>\n</li>\n<li><p>文档越详细越好，肯定会忘</p>\n</li>\n<li><p>读代码的时候可以记录自己的理解，可加深印象。用 git 仓库保存起来。</p>\n</li>\n<li><p>github 排名，github trending</p>\n</li>\n<li><p>查看开发者的 github 找资料</p>\n</li>\n<li><p>先<code>模仿</code>github 开源代码。youtube 视频教程。</p>\n</li>\n<li><p>随时写一些简单的例子验证想法。很重要。</p>\n</li>\n<li><p>Github awesome 系列，awesome emacs, shell，rust</p>\n</li>\n<li><p>emacs org 管理项目，todo，日志</p>\n</li>\n<li><p>遇见问题记得看 github issues</p>\n</li>\n<li><p>设计的思路，设计原则，理解之后对使用帮助很大(例如： emacs, git)</p>\n</li>\n<li><p>编译时出错<code>仔细看错误</code>信息</p>\n</li>\n<li><p>调试时要一小步一小步的调，步步为营</p>\n</li>\n<li><p><code>乐于学习新东西</code>，学习 emacs 之后才知道 vim 该怎么用，学习 Rust 之后才知道语言一些基本特性，更好的理解 C++</p>\n</li>\n<li><p><code>重头文件(接口)，轻源文件</code>。看一个新库时例如 xir, vart，先看接口（接口注释很重要），知道接口功能就行，不需要明白具体实现。通过接口明白整个库的结构。</p>\n</li>\n<li><p><code>突出重点</code>:读音加重，停顿。看 C++代码要具备忽略次要信息的能力，看重点的信息要用不同的眼光，例如函数名，函数功能重点看和理解，具体实现可以先不用管</p>\n</li>\n<li><p>程序有 Debug 和 Release 模式，Release 开优化，编译慢，运行快</p>\n</li>\n<li><p>程序有编译期和运行期。</p>\n</li>\n<li><p>程序包含功能和性能，注重分析程序的性能，比如帧率，时间</p>\n</li>\n<li><p>流程: 开发(开发新库），测试(jenkins)，发布(上 github)，运营(gihub issues)</p>\n</li>\n<li><p>重设计，轻实现</p>\n</li>\n<li><p>按部就班，不能急于求成</p>\n</li>\n<li><p>知乎话题：rust, emacs</p>\n</li>\n<li><p>学习编程语言要关注几点：起因，解决什么问题，设计哲学，特性 <a href=\"https://www.infoq.cn/article/Uugi_eIJusEka1aSPmQM\">参考文章</a></p>\n</li>\n<li><p>大项目中，模块之间要检查<code>输入输出</code>是否正确，不用在乎模块里内部实现</p>\n</li>\n<li><p>日志写在实现的外面，可以从使用者的角度检查输出，日志写在里面，可以从实现者的角度检查问题。倾向写在实现外面，先定位哪个模块出问题了，再深入到模块内部，看看为什么出问题。</p>\n</li>\n<li><p>一个函数完成一个小功能，方便理解定位问题</p>\n</li>\n<li><p>main.rs 函数中处理程序运行，lib.rs 中处理任务逻辑</p>\n</li>\n<li><p>操作符重载打印结构体很方便</p>\n</li>\n<li><p>API 文档目的是让他人理解如何使用库，而不是让他人明白库如何实现的。</p>\n</li>\n<li><p>创建一个有用的公有 API 结构更像是一门艺术而非科学，你可以反复检视他们来找出最适合用户的 API</p>\n</li>\n<li><p>留意 FAQ</p>\n</li>\n<li><p>函数(一层抽象)，类，泛型都是为了重复代码。</p>\n</li>\n<li><p>写代码时明确（输入，输出，算法）（开，关，做）（构造，析构，虚函数)</p>\n</li>\n<li><p>RFC 流程。</p>\n</li>\n<li><p>C++ API -&gt; C API 可能拆分， C API -&gt; Rust API 可能合并</p>\n</li>\n<li><p>区分公开与非公开部分。</p>\n</li>\n<li><p>学习语言，应该了解编译器，编译器是整个编程中重要一环。</p>\n</li>\n<li><p>使用 cppinsights 从编译器的角度看程序。有助于对语法的了解。</p>\n</li>\n<li><p>区分计算密集和 I&#x2F;O 密集，计算密集多线程，I&#x2F;O 密集异步？</p>\n</li>\n</ol>\n<h2 id=\"Productivity-陈天-link-知乎生产力工具\"><a href=\"#Productivity-陈天-link-知乎生产力工具\" class=\"headerlink\" title=\"Productivity 陈天 link 知乎生产力工具\"></a>Productivity <a href=\"https://zhuanlan.zhihu.com/p/19968368\">陈天</a> <a href=\"https://zhuanlan.zhihu.com/p/366187306\">link</a> <a href=\"https://www.zhihu.com/topic/19772918/hot\">知乎生产力工具</a></h2><ol>\n<li>snipaste</li>\n<li>画中画</li>\n<li>光标样式设置大一号, 个性化 -&gt; 主题 -&gt; 鼠标光标</li>\n<li>统一开发环境 docker</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack\">sourcegraph 插件</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitzip-for-github/ffabmkklhbepgcgfonabamgnfafbdlkn\">gitzip 插件</a></li>\n<li>chrome 快捷搜索设置，github g <a href=\"https://github.com/search?q=%25s\">https://github.com/search?q=%s</a>; translate t <a href=\"https://translate.google.cn/?source=osdd&who=test&sl=en&tl=zh-CN&text=%25s&op=translate\">https://translate.google.cn/?source=osdd&amp;who=test&amp;sl=en&amp;tl=zh-CN&amp;text=%s&amp;op=translate</a>;</li>\n<li>多看高手 screencast <a href=\"https://www.youtube.com/results?search_query=emacs+screencast&sp=CAM%253D\">sample</a></li>\n<li>好电脑，大屏幕</li>\n<li>自动化，重构</li>\n<li>snippet</li>\n<li>统一编辑器，emacs</li>\n<li>工程加 make 命令： make init，make build，make run，make create-pr <a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&mid=2649828020&idx=1&sn=59668db47a49e023735152e51b450b88&chksm=8704a8a8b07321be4bb8f540909f2a0b1be4c3a250c71d04e115f78ab19dc804310b55170ed4&scene=21#wechat_redirect\">link</a></li>\n<li>sandbox 或模拟器</li>\n<li>搭建 ftp 服务器，使用<code>put</code>上传，<code>get</code>下载，<code>gls</code>查看列表。多个服务器之间共享传递文件，windows 上浏览器也可访问。见 Bash-usage.md</li>\n<li>用好 tmux, fd, rg, zh, fzf</li>\n<li>使用格式化工具刷代码，不要手动刷</li>\n<li>开始时多使用 cheatsheet</li>\n<li>常用命令 alias</li>\n<li>保持工作空间整洁，经常清理，立即删除无用文件</li>\n<li>git 管理代码，配置，日志</li>\n<li>多用 google，少用百度</li>\n<li>使用好日志系统</li>\n<li>学会 bg, jobs, fg, C-z, &amp;来切换前后台运行。注意：多个 jobs -l 时需要 fg %n 才能切换到前台, kill -9 <tab> fzf to kill ps</li>\n</ol>\n<h2 id=\"Keyboard-usage\"><a href=\"#Keyboard-usage\" class=\"headerlink\" title=\"Keyboard usage\"></a>Keyboard usage</h2><ol>\n<li>EMACS alt, shift 一只手同时按，另一只手按%,&gt;</li>\n<li>sharpkeys 修改键位</li>\n<li>emac 快捷键设置技巧<ul>\n<li>右手 leader key,左手按键</li>\n<li>常用命令才设置，不常用直接输命令</li>\n<li>快捷键有意义</li>\n<li>尽量简单简洁</li>\n<li>尽量少用左手小拇指，多用命令</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"编程名言-link\"><a href=\"#编程名言-link\" class=\"headerlink\" title=\"编程名言 link\"></a>编程名言 <a href=\"https://www.jianshu.com/p/234452c2d88d\">link</a></h2><ol>\n<li>在物理学中，第一性原理(或起源)，或称从头算，指从基本的物理学定律出发，不外加假设与经验拟合的推导与计算。例如利用薛定谔方程在一些近似方法下解电子结构，但不从实验数据得到拟合参数的从头计算法。</li>\n<li>LLVM 之父 Chris Lattner：<code>这正是我们从第一性原理出发开展工作的原因。你必须从头完成所有的工作，如果做得对，就不应跳过任何重要的步骤</code> <a href=\"https://mp.weixin.qq.com/s?__biz=MzU5ODY2MTk3Nw==&mid=2247492618&idx=1&sn=a20f4828b9ab3e3cee3fedfd906e0eb2&chksm=fe426a3cc935e32a8312ce9efbb4f2640787508d3e811579bbffe918685cdb07a8bd8e3ffc4b&scene=132&exptype=timeline_recommend_article_extendread_samebiz#wechat_redirect\">link</a></li>\n<li><code>Any problem in computer science can be solved by another layer of indirection</code> 计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决;例如虚拟地址</li>\n<li><code>Think twice, code once</code></li>\n<li><code>Hackers write better code when it&#39;s for their own satisfaction instead of for pay.</code></li>\n<li>控制复杂性是计算机编程的本质。—— Brian Kernighan</li>\n<li>Any fool can write code that a computer can understand. Good programmers write code that humans can understand. –Martin Fowler<br>任何一个傻瓜都会写能够让机器理解的代码，只有好的程序员才能写出人类可以理解的代码。——Martin Fowler</li>\n<li>“The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.” – Tom Cargill<br>“最开始的 90%的代码使用了程序员 90%的时间，剩下的 10%的代码也需要 90%的开发时间”——Tom Cargill（这不就是中国谚语——“行百步半九十”）</li>\n<li>过早的优化是万恶之源。Premature optimization is the root of all evil! - Donald Knuth</li>\n<li>作为一个程序员，郁闷的事情是，面对一个代码块，却不敢去修改。更糟糕的是，这个代码块还是自己写的。—— Peyton Jones</li>\n<li>用几个小时来制定计划，可以节省几周的编程时间。—— 匿名</li>\n<li>当你试图解决一个你不理解的问题时，复杂化就产成了。——Andy Boothe</li>\n<li>靠代码行数来衡量开发进度，就像是凭重量来衡量飞机制造的进度。——比尔·盖茨</li>\n<li><code>Talk is cheap. Show me the code.</code></li>\n</ol>\n<h2 id=\"have-fun\"><a href=\"#have-fun\" class=\"headerlink\" title=\"have fun\"></a>have fun</h2><ol>\n<li><code>/etc/profile</code> 添加 ssh 自启动</li>\n<li><a href=\"https://github.com/dominikwilkowski/cfonts\">cfonts</a> 可作为 ssh 登录输出，区别不同机器<ul>\n<li><code>npm i cfonts -g</code></li>\n<li><code>cfonts &quot;heimdallr&quot; --gradient red,blue</code></li>\n<li><code>cfonts &quot;heimdallr&quot; --gradient red,blue -f shade</code></li>\n<li><code>cfonts &quot;heimdallr&quot; --gradient &quot;#e60012&quot;,blue &gt; heimdallr.txt</code>or <code>script -q -c &quot;cfonts &quot;heimdallr&quot; --gradient red,blue&quot; heimdallr.txt &gt; /dev/null</code> 将彩色输出保存到到文件中</li>\n<li>cat file on board</li>\n</ul>\n</li>\n<li><code>neofetch</code> ssh 登录显示 no bug car<ul>\n<li><a href=\"https://github.com/dylanaraps/neofetch\">link</a></li>\n<li><code>neofetch --ascii /home/nvidia/phigent_color.txt</code></li>\n</ul>\n</li>\n<li>ASCII art: 抠图 -&gt; ASCII 转换 -&gt; 颜色(logtool)</li>\n<li><code>linuxlogo</code> 命令行显示 linux logo</li>\n<li>w, who 查看登录的用户; 向登录用户发消息 <code>echo jia &gt; /dev/pts/20 </code> <code>for i in $(who | awk &#39;&#123;print $2&#125;&#39;); do echo &quot;$&#123;i&#125;&quot; &gt; /dev/$&#123;i&#125;; done</code><br><code>port=0; echo -e &quot;From xiyang: hi 你好 xx\\c&quot; &gt; /dev/pts/$&#123;port&#125; ; for i in $(seq 1 100); do echo -e &quot;.\\c&quot; &gt; /dev/pts/$&#123;port&#125;; sleep 1; done</code></li>\n<li><code>cmatrix</code> <a href=\"https://www.tecmint.com/20-funny-commands-of-linux-or-linux-is-fun-in-terminal/\">link</a></li>\n<li><a href=\"https://opensource.com/article/21/11/fun-linux-commands\">figlet and lolcat</a> <code>figlet centos.com | lolcat</code> <code>cat no_bug_car.txt | lolcat</code></li>\n<li><a href=\"https://www.asciiart.eu/vehicles/cars\">ascii car</a> 需要删除空行，更好看</li>\n<li><a href=\"https://manytools.org/hacker-tools/convert-images-to-ascii-art/\">在线 image to ASCII art</a></li>\n<li><a href=\"http://patorjk.com/software/taag/#p=testall&c=c%2B%2B&f=3D%20Diagonal&t=PhiGent%20Heimdallr\">在线 string to ASCII art</a> Larry 3D</li>\n<li>no_bug_car.txt 在 <code>source/images/software-diagram/</code>目录下</li>\n<li><a href=\"https://scratch.mit.edu/\">scratch language for children</a></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://github.com/dwmkerr/hacker-laws\">Hacker laws</a></li>\n<li><a href=\"https://www.zhihu.com/people/tchen/columns\">陈天</a></li>\n</ol>\n","categories":["Summary"],"tags":["Program"]},{"title":"QEMU","url":"/2023/09/20/QEMU/","content":"<h2 id=\"arm-simulation\"><a href=\"#arm-simulation\" class=\"headerlink\" title=\"arm simulation\"></a>arm simulation</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install qemu-system-aarch64</span><br><span class=\"line\">sudo apt install qemu qemu-system qemu-kvm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## download image</span></span><br><span class=\"line\"><span class=\"comment\">## https://cloud-images.ubuntu.com/releases/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"arm-qnx\"><a href=\"#arm-qnx\" class=\"headerlink\" title=\"arm qnx\"></a>arm qnx</h2><h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://blog.csdn.net/FontThrone/article/details/104157859\">QEMU 入门指南</a></li>\n<li><a href=\"https://www.qemu.org/docs/master/\">docs</a></li>\n</ol>\n"},{"title":"QNX","url":"/2024/10/15/QNX/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>QNX Software Development Platform (SDP) 需要购买, 包含<ul>\n<li>QNX OS</li>\n<li>QNX Tool Suite</li>\n<li>QNX Software Center</li>\n</ul>\n</li>\n<li><a href=\"https://blackberry.qnx.com/en/products/foundation-software/qnx-software-development-platform\">SDP link</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=qnx.qnx-vscode\">VSCode 插件</a></li>\n<li>QNX Neutrino 是操作系统</li>\n<li>QNX 适合需要高度可靠性和安全性的应用，FreeRTOS 适合需要轻量级和可移植性的应用，VxWorks 适合需要高度可靠性和实时性能的应用，而 RTLinux 适合需要利用 Linux 的功能和资源的应用。</li>\n<li>首先，宝马在进行基于 Linux 的自动辅助项目时，由于 Linux 作为一个宏内核的操作系统，需要对内核进行裁剪以满足功能安全要求。然而，无论他们怎么裁剪，都无法彻底清除干净，最终导致系统崩溃。</li>\n<li>汽车电子架构已从硬件驱动发展到软件定义。 从数字驾驶舱到高级驾驶辅助系统 (ADAS)，再到自动驾驶控制器等，现都在系统级芯片 (SoC)上运行，它们通常还需要虚拟化，以管理多个操作系统和混合关键性。</li>\n<li>在座舱领域，我们注意到，传统的芯片供应商已逐渐被高通取代。在国内，黑莓 QNX 占据了 99.9%的基础软件份额，其中 80%以上的项目选择高通作为首选芯片供应商。座舱领域有一个有趣的组合——QQA，即 Qualcomm、QNX 和 Android。</li>\n</ol>\n"},{"title":"Quantization","url":"/2023/06/12/Quantization/","content":"<h2 id=\"量化（定浮点转换）\"><a href=\"#量化（定浮点转换）\" class=\"headerlink\" title=\"量化（定浮点转换）\"></a>量化（定浮点转换）</h2><ol>\n<li>If you are using reduced precision, run the network in FP32. If it produces the correct result, it is possible that lower precision has an insufficient dynamic range for the network.<ul>\n<li>如果您使用降低的精度，请以 FP32 运行网络。如果它产生正确的结果，则较低的精度可能导致网络的动态范围不足。</li>\n</ul>\n</li>\n<li>也有人称量化为<code>定点化</code>，但是严格来讲所表示的范围是缩小的。定点化特指 scale 为 2 的幂次的线性量化，是一种更加实用的量化方法。</li>\n<li>由于线性量化引入的额外量化&#x2F;反量化计算都是标准的向量操作，也可以使用 SIMD 进行加速，带来的额外计算耗时不大。</li>\n<li><a href=\"https://cms.tinyml.org/wp-content/uploads/industry-news/tinyML_Talks-_Marios_Fournarakis_210929.pdf\">A Practical Guide to Neural Network Quantization</a></li>\n<li>量化的是输入和算子的参数</li>\n<li><a href=\"https://blog.csdn.net/niaolianjiulin/article/details/82764511\">https://blog.csdn.net/niaolianjiulin/article/details/82764511</a></li>\n<li>NVIDIA’s Turing architecture introduced INT4 precision</li>\n<li>不是所有的 nvidia gpu 都支持 4bit 量化， Turing 架构之前的 Pascal、Volta 等架构就不提供对 4-bit 定点数的硬件加速支持。</li>\n<li>是的,绝大多数 Nvidia GPU 都原生支持 8-bit 整数(INT8)定点数运算。</li>\n<li>如果处理器不支持 4bit 量化； 那么 4bit 量化只能减少内存使用</li>\n<li>模型量化还有一个潜在的好处是降低运行时内存占用，这个特性无论是在移动端还是云端都是具有现实意义的。<ul>\n<li>降低内存占用与内存读写</li>\n</ul>\n</li>\n<li>运行时内存：参数 weight 只占很少一部分， 大部分内存占用来自激活值 activation。如何才能用量化降低内存占用，只有一个方式: 将尽可能多的 layer 的激活值都进行量化 。</li>\n<li>注意 weight, activation 和 op 之间的关系，如果 weight 和 activation 都是 fp32, 需要使用 fp32 op 实现版本，如果都是 int8, 需要使用 int8 op 实现版本。</li>\n<li>为什么权重不能是 pre-tensor 呢？这个对精度的影响太大了，所以一般不用。那输入就可以 pre-tensor？当然可以，也经过测试了，对精度的影响不是很大，完全可以用。</li>\n<li>这就是 pre-channel 或者详细点就是 per-output-channel 也就是卷积输出通道</li>\n<li>Explicit vs Implicit Quantization<ul>\n<li>显示量化：能控制在何处进行量化，例如：pytorch_quantization</li>\n<li>隐私量化：不能控制, 例如：python onnx 转 trt</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/648877516\">tensorrt 官方 int8 量化方法汇总</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"PTQ\"><a href=\"#PTQ\" class=\"headerlink\" title=\"PTQ\"></a>PTQ</h3><ol>\n<li>qat vs ptq<br><img src=\"https://i.ibb.co/XJnYcYY/i-Rl-Ilz-S8-XJ.png\" alt=\"qat vs ptq\"></li>\n<li>交叉熵或者 percentile 的方式进行校准</li>\n</ol>\n<h3 id=\"QAT\"><a href=\"#QAT\" class=\"headerlink\" title=\"QAT\"></a><a href=\"https://oldpan.me/archives/quantize-in-action-tensorrt-8\">QAT</a></h3><ol>\n<li>量化后，通常需要调整神经网络(NN)中的参数。这可以通过 retraining 模型来执行，该过程称为量化感知训练（QAT）</li>\n<li>QAT 中需要 QDQ 算子，QuantizeLiner 和 DequantizeLiner</li>\n<li>QAT 量化中最重要的就是 fake 量化算子，fake 算子负责将输入该算子的参数和输入先量化后反量化，然后记录这个 scale，FQ(fake-quan)算子会将 FP32 精度的输入和权重转化为 INT8 再转回 FP32，记住转换过程中的尺度信息。这些 fake-quan 算子在 ONNX 中可以表示为 QDQ 算子</li>\n</ol>\n<h2 id=\"LLM\"><a href=\"#LLM\" class=\"headerlink\" title=\"LLM\"></a>LLM</h2><ol>\n<li>可量化的参数包括: 权重和激活值（Weight and Activation），对于矩阵乘法 Y &#x3D; WX，W 为权重，X 就是激活值（输入）。</li>\n</ol>\n<h2 id=\"papers\"><a href=\"#papers\" class=\"headerlink\" title=\"papers\"></a>papers</h2><h3 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h3><ol>\n<li><a href=\"https://arxiv.org/abs/2308.07633\">A Survey on Model Compression for Large Language Models</a></li>\n</ol>\n<h3 id=\"SmoothQuant\"><a href=\"#SmoothQuant\" class=\"headerlink\" title=\"SmoothQuant\"></a><a href=\"https://arxiv.org/abs/2211.10438\">SmoothQuant</a></h3><ol>\n<li>SmoothQuant 观察到不同的 token 在它们的通道上展示出类似的变化，引入了逐通道缩放变换，有效地平滑了幅度，使得模型更易于量化。</li>\n<li>INT8 SmoothQuant (W8A8)</li>\n<li>量化模式:Given a matrix (2D tensor) of shape M x N (M rows and N columns) where M is the number of tokens and N is the number of channels. TensorRT-LLM has the three following modes to quantize and dequantize the elements of the tensor:<ul>\n<li>Per-tensor: It uses a single scaling factor for all the elements,</li>\n<li>Per-token: It uses a different scaling factor for each token. There are M scaling factors in that case, 激活和权重都可以</li>\n<li>Per-channel: It uses a different scaling factor for each channel. There are N scaling factors in that case， 激活和权重都可以</li>\n</ul>\n</li>\n<li>可以分别进行 per-tensor, per-token, per-channel 量化</li>\n</ol>\n<h3 id=\"GPTQ\"><a href=\"#GPTQ\" class=\"headerlink\" title=\"GPTQ\"></a><a href=\"https://arxiv.org/abs/2210.17323\">GPTQ</a></h3><ol>\n<li>W4A16</li>\n</ol>\n<h3 id=\"AWQ-激活感知权重量化\"><a href=\"#AWQ-激活感知权重量化\" class=\"headerlink\" title=\"AWQ 激活感知权重量化\"></a><a href=\"https://arxiv.org/abs/2306.00978\">AWQ</a> 激活感知权重量化</h3><ol>\n<li>weight int4; Weight-Only 只量化权重, 激活不量化</li>\n<li>The INT4 and INT8 Weight-Only techniques consist in quantizing the weights of a model and dequantizing those weights on-the-fly in linear layers (Matmuls). The activations are encoded using floating-point values (FP16 or BF16). To use INT4&#x2F;INT8 Weight-Only methods, the user must determine the scaling factors to use to quantize and dequantize the weights of the model.</li>\n<li>W4A16</li>\n<li>权重并不是同等重要的，通过保留 1%的显著权重可以大大减少量化误差。</li>\n<li>per-channel(针对 activation) 对权重做量化，权重矩阵的列, 每个 d 一个 scale,如果 tensor 中有几列为 fp16, 其他列为 int8，那么对硬件不友好。</li>\n<li>per-channel 在对权重量化前先求出权重 channel 对应的激活 channel 的平均值， 对权重做量化前，每个 channel 先乘以对应的平均值</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.cnblogs.com/LXP-Never/p/16822727.html\">Pytorch 模型量化</a></li>\n</ol>\n","tags":["AI","Quantization"]},{"title":"RISC-V","url":"/2023/05/10/RISC-V/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/riscv\">riscv</a></li>\n<li><a href=\"https://www.pingwest.com/a/244625\">「硅仙人」吉姆 · 凯勒：我在特斯拉是最闲的员工，却要在英特尔管一万人</a></li>\n<li><a href=\"https://36kr.com/p/2109040627812483\">不可一世的 Arm，要遭遇 20 年来的最大危机</a><ul>\n<li>吉姆·凯勒在离开英特尔不久之后，于 2021 年加入了一家加拿大 AI 芯片初创公司 Tenstorrent。随后，该公司就宣布将基于 RISC-V 开发自研架构，以此为基础开发高性能 AI 芯片，预计可用于各种应用，包括同时需要 AI 和 HPC 能力的下一代超级计算机。吉姆·凯勒曾经任职于英特尔、DEC、AMD、博通、苹果、特斯拉等公司，担任工程副总裁或首席架构师等工作。过去几十年，他是一手打造苹果 A 系列芯片的设计师，也是帮助 AMD 翻身的「Zen 之父」，还是特斯拉自动驾驶芯片的缔造者。此外，他还是 x86-64 指令集的作者之一。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Python-grammar","url":"/2020/11/16/Python-grammar/","content":"<h2 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h2><ol>\n<li>官方版本的解释器:Cpython 这个解释器是用 C 语言开发的，所以叫 CPython。</li>\n<li><a href=\"https://devguide.python.org/#other-interpreter-implementations\">其他解释器</a></li>\n<li>CPython 解释器由一个<code>编译器</code>和一个<code>虚拟机</code>构成，编译器负责将源代码转换成字节码文件，而虚拟机负责执行字节码。所以，解释型语言其实也有编译过程，只不过这个编译过程并不是直接生成目标代码，而是中间代码（字节码），然后再通过虚拟机来逐行解释执行字节码</li>\n<li>python 解释器的编译器会将.py 源文件编译（解释）成字节码生成 PyCodeObject 字节码对象存放在内存中。python 解释器的虚拟机将执行内存中的字节码对象转化为机器语言，虚拟机与操作系统交互，使机器语言在机器硬件上运行。运行结束后 python 解释器则将 PyCodeObject 写回到 pyc 文件中。当 python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。</li>\n<li>pyc 文件其实是 PyCodeObject 的一种持久化保存方式。pyc 文件，文件中包含 python 的 magic number（来说明编译时使用的 python 版本号）、源文件的 mtime（使 pyc 和 py 文件保持同步）、编译出的 code 对象</li>\n<li>字节码是一种中间代码，类似于汇编语言，它可以被解释器直接执行，也可以被保存到.pyc 文件中以提高下次执行的速度。</li>\n<li><a href=\"https://www.imahui.com/network/6026.html\">解释器基本构成</a></li>\n</ol>\n<h2 id=\"加速\"><a href=\"#加速\" class=\"headerlink\" title=\"加速\"></a>加速</h2><ol>\n<li>sample 见 python_sandbox 中的 optimization</li>\n<li>numba jit 加速(不能使用复杂数据结构)</li>\n<li>triton 加速</li>\n<li>torch compile 加速</li>\n<li>cuda 加速</li>\n<li>数据结构改变，优化访存</li>\n</ol>\n<h2 id=\"vscode-test\"><a href=\"#vscode-test\" class=\"headerlink\" title=\"vscode test\"></a>vscode test</h2><ol>\n<li><a href=\"https://code.visualstudio.com/docs/python/testing\">link</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://docs.python.org/3/tutorial/\">python tutorial</a></li>\n</ol>\n<h2 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h2><ol>\n<li><a href=\"https://www.cnblogs.com/gcgc/p/16529975.html\">Cython</a><ul>\n<li>编译成 c，再编译成 so，strip 后再使用</li>\n</ul>\n</li>\n<li><a href=\"https://www.toolfk.com/tools/online-python-confuse.html\">在线混淆</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/54296517\">代码加密</a></li>\n</ol>\n<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><code>pass</code> 语句用于指示一个空的代码块。它不执行任何操作，只是作为占位符使用，用于保持语法完整性。通常在语法上需要语句或代码块的地方，但是逻辑上不需要执行任何操作时，可以使用 pass 语句。</li>\n<li>CPython 的 Frame Evaluation API（框架评估 API）是一个高级特性，允许开发者定制 Python 解释器执行代码的方式。这个 API 提供了一种方法，能够在 Python 解释器运行时动态插入和替换代码执行的框架，从而可以进行代码插桩、动态优化或其他高级操作。</li>\n<li>print</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> torch.allclose(triton_output, torch_output, atol=<span class=\"number\">0.125</span>, rtol=<span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;✅ Triton and Torch match&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;❌ Triton and Torch differ&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>pip show numpy</code>查看 numpy 信息, 包括安装路径</li>\n<li><code>python -v</code> import module 时可以查看 module path</li>\n<li><code>print(os.environ)</code> vs code debug console 打印环境变量<ul>\n<li><code>print(os.environ[&#39;HOME&#39;])</code></li>\n</ul>\n</li>\n<li><a href=\"https://www.learnpython.org/en/Partial_functions\">Partial_functions</a> 给函数加指定参数<ul>\n<li>偏函数允许将具有 x 个参数的函数导出为具有较少参数和为更有限的函数设置的固定值的函数。</li>\n</ul>\n</li>\n<li><a href=\"https://sikasjc.github.io/2018/10/12/star/\">Python 中的星号，*<em>和</em>运算符</a><ul>\n<li>数学运算符： <code>*</code>用于乘法， <code>**</code> 用于乘方</li>\n<li>函数参数：<ul>\n<li>*args 可以表示任意多个参数，它本质是一个 tuple。</li>\n<li>**kwargs 是关键字参数，它本质上是一个 dict。</li>\n</ul>\n</li>\n<li>解包参数列表: 在 Python 中，调用函数时，利用*语句可以将参数列表解包</li>\n<li>序列解包</li>\n<li>Keyword-Only Arguments</li>\n</ul>\n</li>\n<li><code>id(a)</code> a 对象的地址, 用于分析对象内存<ul>\n<li>Return the identity of an object.This is guaranteed to be unique among simultaneously existing objects. (CPython uses the object’s memory address.)</li>\n</ul>\n</li>\n<li>计时</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">start_time = time.perf_counter()</span><br><span class=\"line\">your_function()</span><br><span class=\"line\">end_time = time.perf_counter()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在 Python 中,可以使用三个双引号(“””)或三个单引号(‘’’)来进行段落注释。</li>\n<li><code>#!/usr/bin/env python3</code> 指定执行器</li>\n<li>python repl 里运行 py 文件</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span>(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.py&quot;</span>).read()) <span class=\"comment\"># python3</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span>(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;filename.py&quot;</span>).read()) <span class=\"comment\"># python2</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>print(cls.__class__.__name__)</code>打印 cls 实例类的名字</li>\n<li>print 到文件</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;output.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello, world!&#x27;</span>, file=file)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>help(torch.ones)</code> 显示函数 help</li>\n<li><code>print(dir(list))</code> python 的 dir()函数可以用来获取对象的属性和方法。</li>\n<li><code>unset all_proxy</code> 不能使用代理，可能出现 install 错误 <a href=\"https://blog.csdn.net/whatday/article/details/109287343\">link</a></li>\n<li><a href=\"https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa\">install python from deadsnakes</a></li>\n<li><a href=\"https://github.com/deadsnakes/docs/blob/main/Building-Deadsnakes-Packages-from-Git.rst\">build python from source</a> 编译之后需要前一级目录 <code>sudo dpkg -i *.deb</code></li>\n<li><code>pip freeze | grep torch</code>: 查看库版本</li>\n<li><code>python3 -c &quot;import torch; print(torch.__version__)&quot;</code></li>\n<li><code>python3 -c &quot;import tensorrt_llm; print(tensorrt_llm.__version__)&quot;</code></li>\n<li><code>print(&quot;Numpy version:&quot;, numpy.__version__)</code></li>\n<li><a href=\"https://elpy.readthedocs.io/en/latest/ide.html#other-useful-snippets\">useful-snippets</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/2391275\">值语义与引用语义</a><ul>\n<li>不可变变量的值一旦创建，就不能被修改。如果你尝试修改一个不可变对象的值，Python 将会创建一个新的对象。Python 中的不可变对象包括整数（int）、浮点数（float）、字符串（str）、元组（tuple）等。</li>\n<li>可变变量的值可以在原地修改，而不会创建一个新的对象。Python 中的可变对象包括列表（list）、字典（dict）、集合（set）等。</li>\n</ul>\n</li>\n<li><code>import copy; x = copy.deepcopy(y)</code></li>\n<li>print(“x: “, x, type(x), x.shape) <a href=\"https://blog.csdn.net/sinat_28576553/article/details/81154912\">link</a></li>\n<li>“%s&#x2F;Kernels” % self.exe_path 的作用是将 self.exe_path 中的值插入到字符串中 %s 的位置。这种格式化方法被称作“旧式字符串格式化”（old-style string formatting）。</li>\n<li>现代代码中更倾向于使用 str.format() 方法或者 f-string（在 Python 3.6 及以后的版本中）。例如，使用 str.format()，上述代码可以写作 “{}&#x2F;Kernels”.format(self.exe_path)；使用 f-string，可以写作 f”{self.exe_path}&#x2F;Kernels”。</li>\n<li>print(‘{:.2f} ms’.format(xxx))</li>\n<li>print(f’{xxx:.2f} ms’)</li>\n<li>pytorch tensor to binary file: <code>tensor.cpu().numpy().astype(np.float32).tofile(&quot;test.bin&quot;)</code>; c++ read binary file</li>\n<li>print(‘type : {}’.format(type(xxx)))</li>\n<li>print(‘size : {}’.format(len(xxx)))</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">static std::vector&lt;<span class=\"built_in\">float</span>&gt; read<span class=\"constructor\">_from_bin_file(<span class=\"params\">std</span>::<span class=\"params\">string</span> <span class=\"params\">file</span>)</span> &#123;</span><br><span class=\"line\">  auto result_size = std::filesystem::file<span class=\"constructor\">_size(<span class=\"params\">file</span>)</span>;</span><br><span class=\"line\">  std::vector&lt;<span class=\"built_in\">float</span>&gt; result(result_size<span class=\"operator\"> / </span><span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"constructor\">CHECK(<span class=\"params\">std</span>::<span class=\"params\">ifstream</span>(<span class=\"params\">file</span>)</span>.read((<span class=\"built_in\">char</span>*)&amp;result<span class=\"literal\">[<span class=\"number\">0</span>]</span>, result_size).good<span class=\"literal\">()</span>)</span><br><span class=\"line\">      &lt;&lt; <span class=\"string\">&quot;failed to read baseline from &quot;</span> &lt;&lt; file;</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">void mywritefile(T* src, <span class=\"built_in\">int</span> size1, std::<span class=\"built_in\">string</span> filename) &#123;</span><br><span class=\"line\">  ofstream Tout;</span><br><span class=\"line\">  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Tout</span>.</span></span><span class=\"keyword\">open</span>(filename, ios_base::out <span class=\"pattern-match\">| ios<span class=\"constructor\">_base</span>::binary);</span></span><br><span class=\"line\"><span class=\"pattern-match\">  <span class=\"keyword\">if</span> (!<span class=\"constructor\">Tout</span>) &#123;</span></span><br><span class=\"line\"><span class=\"pattern-match\">    cout &lt;&lt; &quot;<span class=\"constructor\">Can</span>&#x27;t <span class=\"keyword\">open</span> the file! &quot; &lt;&lt; filename &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\"><span class=\"pattern-match\">    return;</span></span><br><span class=\"line\"><span class=\"pattern-match\">  &#125;</span></span><br><span class=\"line\"><span class=\"pattern-match\">  <span class=\"constructor\">Tout</span>.write((<span class=\"built_in\">char</span><span class=\"operator\">*</span>)src, size1 <span class=\"operator\">*</span> sizeof(<span class=\"constructor\">T</span>));</span></span><br><span class=\"line\"><span class=\"pattern-match\">  <span class=\"operator\">/</span><span class=\"operator\">/</span> <span class=\"constructor\">CHECK(<span class=\"params\">std</span>::<span class=\"params\">ofstream</span>(<span class=\"params\">filename</span>)</span>.write((<span class=\"built_in\">char</span><span class=\"operator\">*</span>)data.data, size).good()) &lt;&lt;</span></span><br><span class=\"line\"><span class=\"pattern-match\">&#125;</span></span><br><span class=\"line\"><span class=\"pattern-match\"></span></span><br><span class=\"line\"><span class=\"pattern-match\">template void mywritefile(int8<span class=\"constructor\">_t</span><span class=\"operator\">*</span> src, <span class=\"built_in\">int</span> size1, std::<span class=\"built_in\">string</span> filename);</span></span><br><span class=\"line\"><span class=\"pattern-match\"></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多线程问题\"><a href=\"#多线程问题\" class=\"headerlink\" title=\"多线程问题\"></a>多线程问题</h2><ol>\n<li>GIL(Global Interpreter Lock) 全局解释器锁</li>\n<li>GIL 限制了 Python 解释器同一时间只能执行一个线程的代码，因此在 CPU 密集型的任务中，多线程程序并不一定比单线程程序更快。</li>\n</ol>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a><a href=\"https://wiki.python.org/moin/Generators\">Generators</a></h2><ol>\n<li>生成器（Generator），是计算机科学中特殊的子程序。实际上，所有生成器都是迭代器。生成器非常类似于返回数组的函数，都是具有参数、可被调用、产生一系列的值。但是生成器不是构造出数组包含所有的值并一次性返回，而是每次产生一个值，因此生成器看起来像函数，但行为像迭代器。</li>\n<li>Generator 可以减少内存使用，用到了再产生</li>\n<li><code>print(list(model.parameters())[0])</code> 打印 generators 第一个元素， model.parameters()是一个 generator</li>\n<li><code>print([x for x in model.parameters()])</code></li>\n<li>关键字 yiled 来创建 generator</li>\n</ol>\n<h2 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h2><ol>\n<li><a href=\"https://www.runoob.com/python/python-func-sorted.html\">sorted</a><ul>\n<li>sorted_data &#x3D; sorted(data, reverse&#x3D;True) 降序</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><ol>\n<li><strong>init</strong> 方法是一个特殊的方法（称为构造器），当创建类的新实例时，它会自动被调用。它用于初始化类的属性或其他必要的启动过程。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, param1, param2</span>):</span><br><span class=\"line\">        self.attribute1 = param1</span><br><span class=\"line\">        self.attribute2 = param2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><ol>\n<li>在 Python 中，可以使用类方法来创建实例。这种方式通常称为“工厂方法”，它允许你以不同的方式创建类的实例。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, param1, param2</span>):</span><br><span class=\"line\">        self.attribute1 = param1</span><br><span class=\"line\">        self.attribute2 = param2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">from_string</span>(<span class=\"params\">cls, string</span>):</span><br><span class=\"line\">        param1, param2 = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, string.split(<span class=\"string\">&#x27;-&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(param1, param2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 __init__</span></span><br><span class=\"line\">instance1 = MyClass(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用类方法</span></span><br><span class=\"line\">instance2 = MyClass.from_string(<span class=\"string\">&quot;10-20&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static-方法\"><a href=\"#static-方法\" class=\"headerlink\" title=\"static 方法\"></a>static 方法</h3><ol>\n<li>可以定义一个静态方法或一个独立的函数来处理复杂的初始化，并返回类的实例。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, param1, param2</span>):</span><br><span class=\"line\">        self.attribute1 = param1</span><br><span class=\"line\">        self.attribute2 = param2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">from_list</span>(<span class=\"params\">param_list</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyClass(*param_list) <span class=\"comment\"># 在Python中，调用函数时，利用*语句可以将参数列表解包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_instance</span>(<span class=\"params\">param1, param2</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 可以在这里执行更复杂的初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> MyClass(param1, param2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用静态方法</span></span><br><span class=\"line\">instance1 = MyClass.from_list([<span class=\"number\">10</span>, <span class=\"number\">20</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用独立的函数</span></span><br><span class=\"line\">instance2 = create_instance(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Decorator-装饰器\"><a href=\"#Decorator-装饰器\" class=\"headerlink\" title=\"Decorator 装饰器\"></a>Decorator 装饰器</h2><ol>\n<li>在 Python 中，函数名上方的 @ 符号表示装饰器（Decorator）。装饰器是 Python 的一个高级特性，用于在不修改原函数代码的情况下增强或改变函数的功能。</li>\n<li>装饰器<code>本质上是一个函数，它接受一个函数作为参数，并返回一个新的函数。</code>使用 @ 符号 followed by the decorator name 就可以将装饰器应用于一个函数。例如：在这个例子中，say_hello 函数被 my_decorator 装饰器装饰。当你调用 say_hello 时，实际上是在调用 my_decorator 返回的 wrapper 函数。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_decorator</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Something is happening before the function is called.&quot;</span>)</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Something is happening after the function is called.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@my_decorator</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">say_hello()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>装饰器的作用<ul>\n<li>日志记录：自动记录函数的调用细节。</li>\n<li>性能测试：检测函数运行时间。</li>\n<li>权限校验：在函数执行前进行权限检查。</li>\n<li>缓存：存储函数的返回结果，以便后续调用时快速返回。</li>\n<li>类型检查：检查函数的输入输出类型。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"setuptools\"><a href=\"#setuptools\" class=\"headerlink\" title=\"setuptools\"></a><a href=\"https://github.com/pypa/setuptools\">setuptools</a></h2><ol>\n<li>建议新项目避免 setup.py 配置</li>\n<li>In addition to specifying a build system, you also will need to add some package information such as metadata, contents, dependencies, etc. This can be done in the same <code>pyproject.toml</code> file, or in a separated one: <code>setup.cfg</code> or <code>setup.py</code>.</li>\n<li><code>setup.py</code> pip install .&#x2F;example 时执行 setup.py 来编译</li>\n<li><code>python setup.py build --debug</code></li>\n<li><code>python setup.py install --debug</code></li>\n</ol>\n<h2 id=\"wheel-python-包\"><a href=\"#wheel-python-包\" class=\"headerlink\" title=\"wheel python 包\"></a>wheel python 包</h2><ol>\n<li><code>pip wheel .</code> 生成 python 包</li>\n<li><code>pip install *.whl</code></li>\n</ol>\n<h2 id=\"argparse\"><a href=\"#argparse\" class=\"headerlink\" title=\"argparse\"></a><a href=\"https://docs.python.org/3/library/argparse.html\">argparse</a></h2><ol>\n<li>参数传递</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser = argparse.ArgumentParser(description=<span class=\"string\">&#x27;Process some integers.&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;integers&#x27;</span>, metavar=<span class=\"string\">&#x27;N&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, nargs=<span class=\"string\">&#x27;+&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;an integer for the accumulator&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--sum&#x27;</span>, dest=<span class=\"string\">&#x27;accumulate&#x27;</span>, action=<span class=\"string\">&#x27;store_const&#x27;</span>,</span><br><span class=\"line\">                    const=<span class=\"built_in\">sum</span>, default=<span class=\"built_in\">max</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;sum the integers (default: find the max)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">args = parser.parse_args()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(args.accumulate(args.integers))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"data-structure\"><a href=\"#data-structure\" class=\"headerlink\" title=\"data structure\"></a><a href=\"https://docs.python.org/3/tutorial/datastructures.html\">data structure</a></h2><ol>\n<li>Python 为我们提供了三种常用数据结构，列表(Lists),字典（Dictionary）,元组（Tuple）</li>\n<li><a href=\"https://blog.csdn.net/weixin_53453184/article/details/137224600\">与 c++数据结构做对比</a></li>\n</ol>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><ol>\n<li>类似 c++ vector</li>\n<li>list[-1] 最后一个元素，负号表示倒着索引</li>\n<li>squares[-3:] slice: 创建新的索引，包含最后三个 value</li>\n<li>slice 是浅拷贝</li>\n<li>list1 + list2 表示 concat</li>\n<li>letters[2:5] &#x3D; [‘C’, ‘D’, ‘E’] 批量赋值</li>\n<li>letters[2:5] &#x3D; [] remove 第 3 个到第 5 个元素</li>\n</ol>\n<h3 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a><a href=\"https://www.w3schools.com/python/python_dictionaries.asp\">dict</a></h3><ol>\n<li><code>thisdict = dict(name = &quot;John&quot;, age = 36, country = &quot;Norway&quot;)</code> dict constructor</li>\n<li><code>thisdict = &#123;&quot;brand&quot;: &quot;Ford&quot;, &quot;model&quot;: &quot;Mustang&quot;,&quot;year&quot;: 1964&#125;</code></li>\n<li><a href=\"https://stackoverflow.com/questions/34305003/difference-between-dictionary-and-ordereddict\">Difference between dictionary and OrderedDict</a></li>\n<li>dict –&gt; c++ unordered_map</li>\n<li>OrderedDict –&gt; c++ map ?</li>\n<li>SortedDict –&gt; c++ map</li>\n<li>这就是有序和排序的区别。 OrderedDict 根据插入顺序维护顺序，而 SortedDict 将根据键的排序顺序维护顺序</li>\n<li><a href=\"https://github.com/grantjenks/python-sortedcontainers\">sortedcontainers</a><ul>\n<li>需要安装</li>\n</ul>\n</li>\n<li><code>del dict[&quot;Key&quot;]</code>删除</li>\n</ol>\n<h4 id=\"dict-merge\"><a href=\"#dict-merge\" class=\"headerlink\" title=\"dict merge\"></a><a href=\"https://www.runoob.com/python3/python-merging-two-dictionaries.html\">dict merge</a></h4><ol>\n<li><code>dict2.update(dict1)</code></li>\n</ol>\n<h4 id=\"dict-values\"><a href=\"#dict-values\" class=\"headerlink\" title=\"dict_values\"></a><a href=\"https://www.programiz.com/python-programming/methods/dictionary/values\">dict_values</a></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">marks = &#123;<span class=\"string\">&#x27;Physics&#x27;</span>:<span class=\"number\">67</span>, <span class=\"string\">&#x27;Maths&#x27;</span>:<span class=\"number\">87</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(marks.values())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Output: dict_values([67, 87])</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dict-keys\"><a href=\"#dict-keys\" class=\"headerlink\" title=\"dict_keys\"></a><a href=\"https://www.programiz.com/python-programming/methods/dictionary/keys\">dict_keys</a></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">numbers = &#123;<span class=\"number\">1</span>: <span class=\"string\">&#x27;one&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"number\">3</span>: <span class=\"string\">&#x27;three&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(numbers.keys())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Output: dict_keys([1, 2, 3])</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h3><ol>\n<li>c++ tuple</li>\n</ol>\n<h2 id=\"Comprehension\"><a href=\"#Comprehension\" class=\"headerlink\" title=\"Comprehension\"></a>Comprehension</h2><ol>\n<li>Python 列表推导(List Comprehension)是 Python 中一个非常有用且常被使用的语法结构。它可以用简洁的语法代替循环语句,从一个可迭代对象中创建一个新的列表。</li>\n<li><code>[ expr for val in collection [if condition] ]</code></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单推导</span></span><br><span class=\"line\">nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">squares = [x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums] <span class=\"comment\"># [1, 4, 9, 16]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带判断条件</span></span><br><span class=\"line\">even_squares = [x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>] <span class=\"comment\"># [4, 16]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典推导</span></span><br><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict_2 = &#123;k:v**<span class=\"number\">2</span> <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> dict_1.items()&#125; <span class=\"comment\"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m venv myenv</span><br><span class=\"line\">source myenv/<span class=\"built_in\">bin</span>/activate</span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出表格\"><a href=\"#输出表格\" class=\"headerlink\" title=\"输出表格\"></a>输出表格</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> prettytable <span class=\"keyword\">import</span> PrettyTable</span><br><span class=\"line\"></span><br><span class=\"line\">table = PrettyTable([<span class=\"string\">&#x27;Name&#x27;</span>, <span class=\"string\">&#x27;Age&#x27;</span>, <span class=\"string\">&#x27;Gender&#x27;</span>])</span><br><span class=\"line\">table.add_row([<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;Male&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(table)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h2><ol>\n<li>vscode debug</li>\n<li>vscode 无法跳转可能是 interpreter 问题</li>\n<li><code>python -i test.py</code> 执行之后会停下来，可以查看变量</li>\n<li><code>python -m pdb test.py</code></li>\n<li><code>import pdb; pdb.set_trace()</code></li>\n<li><code>python -m trace --trackcalls pyscript.py</code></li>\n<li><code>python -m trace --trace pyscript.py</code></li>\n</ol>\n<h3 id=\"Debug-方法\"><a href=\"#Debug-方法\" class=\"headerlink\" title=\"Debug 方法\"></a><a href=\"https://blog.csdn.net/qq_38542085/article/details/78562458\">Debug 方法</a></h3><ol>\n<li>elpy-pdb-debug-buffer</li>\n<li>logging</li>\n<li>pdb</li>\n<li>print</li>\n</ol>\n<h2 id=\"profiling\"><a href=\"#profiling\" class=\"headerlink\" title=\"profiling\"></a>profiling</h2><ol>\n<li><a href=\"https://github.com/gaogaotiantian/viztracer\">viztracer</a><ul>\n<li>可用来看调用栈</li>\n<li>适合看整体，可以看火焰图及 timeline</li>\n<li>vscode 插件：找到 result.json， 右键最后</li>\n</ul>\n<ol>\n<li><a href=\"https://docs.nvidia.com/nsight-systems/UserGuide/index.html#python-profiling\">nsight system python-profiling</a></li>\n</ol>\n</li>\n<li><a href=\"https://docs.python.org/3/library/timeit.html\">timeit</a></li>\n<li><a href=\"https://www.cnblogs.com/wang_yb/p/18106433\">Python 装饰器实战：打造高效性能计时工具</a></li>\n<li><a href=\"https://github.com/plasma-umass/scalene\">scalene</a><ul>\n<li>适合找具体每一行耗时及系统瓶颈</li>\n<li>a high-performance, high-precision CPU, GPU, and memory profiler for Python with AI-powered optimization proposals</li>\n<li>pip install scalene</li>\n<li>scalene –outfile result.html –html</li>\n<li>PROFILING&#x3D;y scalene –outfile result5.html –html –reduced-profile –no-browser</li>\n<li>配合 cprofile 看</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/joerick/pyinstrument\">pyinstrument</a><ul>\n<li>pyinstrument -r html -o profile.html test.py</li>\n<li>html 右上角可以切换具体耗时及百分比</li>\n</ul>\n</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24495603\">cprofile</a></li>\n<li><a href=\"https://github.com/baverman/flameprof\">flameprof</a><ul>\n<li>可以将 cprofile 结果画出火焰图</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nvdv/vprof\">vprof</a></li>\n<li><a href=\"https://github.com/pyutils/line_profiler\">line_profiler</a></li>\n<li><a href=\"https://docs.python.org/3/library/tracemalloc.html\">tracemalloc</a></li>\n<li><a href=\"https://github.com/pympler/pympler\">pympler&#x2F;pympler</a></li>\n<li><a href=\"https://github.com/bloomberg/memray\">memray</a></li>\n<li><a href=\"https://github.com/pythonprofilers/memory_profiler/tree/master\">memory_profiler</a><br><code>gprof2dot -f pstats mkm_run.prof | dot -Tpng -o mkm_run.png</code></li>\n<li>profile 库</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>():</span><br><span class=\"line\">    fps = profile.fps()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        xxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\">        logging.info(<span class=\"string\">&#x27;fps:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(fps.compute()))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"package-management\"><a href=\"#package-management\" class=\"headerlink\" title=\"package management\"></a>package management</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/582651418\">基于 pyproject.toml 的包管理</a></li>\n<li><a href=\"https://github.com/python-poetry/poetry\">poetry</a></li>\n<li><a href=\"https://github.com/prefix-dev/pixi\">pixi</a></li>\n</ol>\n<h2 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h2><ol>\n<li>这里是一个使用<code>if __name__ == &#39;__main__&#39;</code>的 Python 示例:</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模块1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bar</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;bar&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    foo()</span><br><span class=\"line\">    bar()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模块2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> module1</span><br><span class=\"line\"></span><br><span class=\"line\">module1.foo() <span class=\"comment\"># 调用foo函数</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>当作为脚本直接运行 module1 时,<code>__name__</code>等于<code>&#39;__main__&#39;</code>,if 语句块会被执行,打印 foo 和 bar。而当 module1 被导入时,<code>__name__</code>会设置成模块名,if 语句块不会执行。这种方式非常常用,它允许同一个模块既可以被导入调用,也可以直接作为脚本运行,实现代码的重用。<code>if __name__ ==&#39;__main__&#39;</code> 是 Python 程序常见的惯用法,用于模块的导入和直接运行的区分。</li>\n</ol>\n<h2 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a><a href=\"https://zhuanlan.zhihu.com/p/360306588\">Logging</a></h2><ol>\n<li>format 配置: &#96;’[%(asctime)s]</li>\n</ol>\n"},{"title":"ROS2","url":"/2022/09/06/ROS2/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li><a href=\"https://fishros.com/d2lros2foxy/#/chapt3/3.1ROS2%E8%8A%82%E7%82%B9%E4%BB%8B%E7%BB%8D\">ROS2 节点介绍</a></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://www.3cst.cn/Information/info/1uwAF7ySxL8111ea8d6300163e0473d8\">ROS1 与 ROS2、AUTOSAR 与 ROS2 区别</a></li>\n</ol>\n"},{"title":"Redis","url":"/2021/01/11/Redis/","content":"<h2 id=\"锁设计原则\"><a href=\"#锁设计原则\" class=\"headerlink\" title=\"锁设计原则\"></a>锁设计原则</h2><ol>\n<li>所有操作都可分为增删改查，改可用删除和增加来实现，但改更快并且具有原子性。</li>\n<li>只有获得锁才能对锁进行删和改。</li>\n<li>注意区分又状态和无状态。凡是涉及到有状态的API(lock, unlock)要特别小心。要与无状态API(圆的面积)模块区分开。</li>\n<li>系统状态尽可能的少，太多状态容易出问题。</li>\n</ol>\n<h2 id=\"基于Redis的分布式锁\"><a href=\"#基于Redis的分布式锁\" class=\"headerlink\" title=\"基于Redis的分布式锁\"></a>基于Redis的分布式锁</h2><ol>\n<li>Redis Lua脚本具有原子性</li>\n</ol>\n<h3 id=\"实现思想：\"><a href=\"#实现思想：\" class=\"headerlink\" title=\"实现思想：\"></a>实现思想：</h3><ol>\n<li>获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。</li>\n<li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li>\n<li>释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。</li>\n</ol>\n<h3 id=\"超时后又多个程序获得锁解决方法\"><a href=\"#超时后又多个程序获得锁解决方法\" class=\"headerlink\" title=\"超时后又多个程序获得锁解决方法\"></a>超时后又多个程序获得锁解决方法</h3><ol>\n<li>将过期时间设置足够长，确保代码逻辑在锁释放之前能够执行完成</li>\n<li><code>为获取锁的线程增加守护线程，为将要过期但未释放的锁增加有效时间</code></li>\n</ol>\n<h3 id=\"使用守护线程特点\"><a href=\"#使用守护线程特点\" class=\"headerlink\" title=\"使用守护线程特点\"></a><a href=\"https://segmentfault.com/a/1190000022935064\">使用守护线程特点</a></h3><ol>\n<li><code>一定要用SET key value NX PX milliseconds 命令</code>:如果不用，先设置了值，再设置过期时间，这个不是原子性操作，有可能在设置过期时间之前宕机，会造成死锁(key永久存在)</li>\n<li><code>value要具有唯一性</code>:这个是为了在解锁的时候，需要验证value是和加锁的一致才删除key。这是避免了一种情况：假设A获取了锁，过期时间30s，此时35s之后，锁已经自动释放了，A去释放锁，但是此时可能B获取了锁。A客户端就不能删除B的锁了。</li>\n</ol>\n<h2 id=\"Redis-server\"><a href=\"#Redis-server\" class=\"headerlink\" title=\"Redis server\"></a>Redis server</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/redis/redis.git</span><br><span class=\"line\">cd redis &amp;&amp; make</span><br><span class=\"line\">cd src</span><br><span class=\"line\">./redis-server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-client\"><a href=\"#Redis-client\" class=\"headerlink\" title=\"Redis client\"></a>Redis client</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./redis-cli</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># cmd</span></span></span><br><span class=\"line\">set foo bar</span><br><span class=\"line\">get foo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># change dump.rdb path</span></span></span><br><span class=\"line\">config set dir /home/xxx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">save data to dump.rdb</span></span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hiredis-just-a-C-client-not-include-server\"><a href=\"#hiredis-just-a-C-client-not-include-server\" class=\"headerlink\" title=\"hiredis (just a C client; not include server)\"></a>hiredis (just a C client; not include server)</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/redis/hiredis.git</span><br><span class=\"line\">cd hiredis</span><br><span class=\"line\">mkdir build; cd build; cmake ..; make;</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">./hiredis-test</span><br><span class=\"line\"></span><br><span class=\"line\">## NOTE: sample are easier than hiredis-test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://bbs.huaweicloud.com/blogs/209955\">redis lock华为漫画</a></li>\n<li><a href=\"https://bbs.huaweicloud.com/blogs/209954\">Zookeeper 华为漫画</a></li>\n<li><a href=\"https://blog.csdn.net/xlgen157387/article/details/79036337\">redis实现分布式锁</a></li>\n<li><a href=\"https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/\">小米解决方案</a></li>\n<li><a href=\"https://juejin.cn/post/6844903830442737671\">redis分布式锁</a></li>\n<li><a href=\"https://github.com/yuhanfang/redislock\">redislock C++ sample</a></li>\n<li><a href=\"https://redis.io/commands/set\">Redis set command(note: NX)</a></li>\n<li><a href=\"https://github.com/redisson/redisson\">Redisson</a></li>\n</ol>\n","categories":["Program","Database"],"tags":["Redis","Database"]},{"title":"Reverse-Engineering","url":"/2023/09/13/Reverse-Engineering/","content":"<h2 id=\"radare2\"><a href=\"#radare2\" class=\"headerlink\" title=\"radare2\"></a><a href=\"https://github.com/radareorg/radare2\">radare2</a></h2><ol>\n<li>install</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pip install -U r2env</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/radareorg/</span>radare2</span><br><span class=\"line\">radare2<span class=\"regexp\">/sys/i</span>nstall.sh</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><table> show help</li>\n</ol>\n<h3 id=\"usage\"><a href=\"#usage\" class=\"headerlink\" title=\"usage\"></a>usage</h3><ol>\n<li><code>r2 ./test</code></li>\n<li><code>r2 -A ./test</code> analyse or <code>r2 ./test; aaa</code></li>\n<li><code>ia</code> show all info</li>\n<li><code>il</code> libraries</li>\n<li><code>is</code> show symbols</li>\n<li><code>iS</code> show sections</li>\n<li><code>iX</code> show used files</li>\n<li><code>ic</code> show classes</li>\n<li><code>iE | grep FUNC</code> show output functions</li>\n</ol>\n<h2 id=\"ida\"><a href=\"#ida\" class=\"headerlink\" title=\"ida\"></a><a href=\"https://hex-rays.com/ida-pro/\">ida</a></h2><ol>\n<li><a href=\"https://www.52pojie.cn/forum.php?mod=forumdisplay&fid=4&filter=typeid&typeid=123\">反编译工具集合</a></li>\n<li><a href=\"https://github.com/Coldwave96/WebSecurity/blob/master/IDA%20Pro%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%89%88%EF%BC%89.pdf\">IDA Pro 权威指南（第二版）.pdf</a></li>\n<li><code>Tab</code> jump to pseudocode</li>\n<li><code>Esc</code> jump to previous position</li>\n<li><code>Space</code> text view and graph view 切换</li>\n<li><code>C-Enter</code> jump to next position</li>\n<li><code>C-l</code> jump by name + <code>C-F</code> filter</li>\n<li><code>C-p</code> jump to function</li>\n<li><code>C-s</code> jump to segment</li>\n<li><code>M-t</code> +<code>C-t</code> find</li>\n<li><code>text view</code> and <code>graph view</code></li>\n<li>窗口拖出来后，可以点击窗口灰色线条来 reattach, If you click on the small gray bar just below the titlebar, you can drag it back to the main window.</li>\n<li><code>view -&gt; open subviews</code>看各种窗口</li>\n<li><code>view -&gt; toolbars -&gt; debug</code> 显示 debug 按钮</li>\n<li>分割窗口，diassembly 和 pseudocode， 右键 synchronize with；可以高亮同步代码</li>\n<li>新窗口会在鼠标停留的窗口打开</li>\n</ol>\n<h3 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h3><ol>\n<li>可以用 gdbserver 调试</li>\n<li>可以实时看内存, bss, data, text</li>\n<li>下方有<code>gdb</code>命令窗口， 可以<code>exit</code>来结束远程 gdbserver</li>\n<li><code>debugger -&gt; detach from process</code></li>\n<li><code>debugger -&gt; debugger windows</code> 可以打开 stack trace(call stack), Locals 等调试窗口</li>\n<li><code>debugger -&gt; using source level debugging</code> 才可以在反编译的文件加断点</li>\n</ol>\n<h3 id=\"修改二进制\"><a href=\"#修改二进制\" class=\"headerlink\" title=\"修改二进制\"></a>修改二进制</h3><ol>\n<li><code>Edit -&gt; Pach program -&gt; change byte/assemble</code> 修改二进制</li>\n<li><code>Edit -&gt; Pach program -&gt; Apply patches to input file</code> 报错修改</li>\n<li><code>File -&gt; Produce file -&gt; Create DIF file</code> 可以列出被修改的字节</li>\n<li><a href=\"https://wandbox.org/\">Compiler on line wandbox</a> 可对比结果</li>\n<li><a href=\"https://aarmconverter.com/\">汇编指令和二进制互转</a></li>\n<li><a href=\"https://disasm.czbix.com/\">汇编指令和二进制互转 1</a></li>\n</ol>\n<h3 id=\"修改-PC-值\"><a href=\"#修改-PC-值\" class=\"headerlink\" title=\"修改 PC 值\"></a>修改 PC 值</h3><ol>\n<li>能临时跳到不同分支执行</li>\n</ol>\n<h4 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/patch-program.html\">gdb</a></h4><ol>\n<li><code>b *main+12</code>函数偏移来打断点</li>\n<li><code>disassemble</code> 显示汇编</li>\n<li><code>p $pc</code>显示 PC 值</li>\n<li><code>set var $pc=0x11111</code>设置 PC 值</li>\n</ol>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a><a href=\"https://github.com/onethawt/idaplugins-list\">plugins</a></h3><ol>\n<li><a href=\"https://github.com/0xgalz/Virtuailor\">Virtuailor</a> Virtuailor is an IDAPython tool that reconstructs vtables for C++ code written for intel architecture, both 32bit and 64bit code and AArch64 (New!).</li>\n<li><a href=\"https://github.com/gaasedelen/lighthouse\">lighthouse</a></li>\n</ol>\n<h2 id=\"ghidra\"><a href=\"#ghidra\" class=\"headerlink\" title=\"ghidra\"></a><a href=\"https://github.com/NationalSecurityAgency/ghidra\">ghidra</a></h2><ol>\n<li><a href=\"https://www.secrss.com/articles/8829\">使用说明</a></li>\n<li>需要先安装 jdk, 使用 cmd 打开， powershell 不行</li>\n<li>开始界面有 debugger</li>\n</ol>\n<h2 id=\"binary-ninja\"><a href=\"#binary-ninja\" class=\"headerlink\" title=\"binary.ninja\"></a><a href=\"https://binary.ninja/\">binary.ninja</a></h2><ol>\n<li><a href=\"https://down.52pojie.cn/Tools/Disassemblers/\">破解</a><ul>\n<li>需要替换安装路径下的动态库</li>\n<li>还不支持 debugger</li>\n</ul>\n</li>\n<li>可以远程调试</li>\n<li>可以从不同 level 查看各个 section 内容</li>\n<li>查看各种 level 代码</li>\n<li>窗口划分，可同时显示不同级别代码</li>\n<li>图形化做的不错</li>\n</ol>\n<h2 id=\"cutter\"><a href=\"#cutter\" class=\"headerlink\" title=\"cutter\"></a><a href=\"https://github.com/rizinorg/cutter\">cutter</a></h2><ol>\n<li><a href=\"https://cutter.re/\">官网</a></li>\n</ol>\n<h2 id=\"x64dbg\"><a href=\"#x64dbg\" class=\"headerlink\" title=\"x64dbg\"></a>x64dbg</h2><ol>\n<li>只试用 windows</li>\n</ol>\n<h2 id=\"cheat-engine\"><a href=\"#cheat-engine\" class=\"headerlink\" title=\"cheat-engine\"></a><a href=\"https://github.com/cheat-engine/cheat-engine\">cheat-engine</a></h2><h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>关键在读懂汇编</li>\n<li><a href=\"https://www.52pojie.cn/forum.php?mod=forumdisplay&fid=4&filter=typeid&typeid=123\">反编译工具集合</a></li>\n<li><a href=\"https://down.52pojie.cn/Tools/Disassemblers/\">合集 2</a></li>\n<li>反编译器： 从二进制到代码</li>\n</ol>\n"},{"title":"Rust start","url":"/2020/07/09/Rust-start/","content":"<p><img src=\"https://www.rust-lang.org/static/images/ferris.gif\" alt=\"Ferris\"></p>\n<h2 id=\"Install-on-linux\"><a href=\"#Install-on-linux\" class=\"headerlink\" title=\"Install on linux\"></a>Install on linux</h2><ol>\n<li><code>curl https://sh.rustup.rs -sSf | sh</code></li>\n<li><a href=\"https://doc.rust-lang.org/book/ch01-01-installation.html\">Install step</a></li>\n</ol>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><ol>\n<li><a href=\"http://wcy123.github.io/2020-04-05-setup-rust-IDE-for-emacs.html\">wcy’s config</a></li>\n</ol>\n<h2 id=\"Local-doc\"><a href=\"#Local-doc\" class=\"headerlink\" title=\"Local doc\"></a>Local doc</h2><ol>\n<li><code>rustup doc</code></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://www.rust-lang.org/\">Officail website</a></li>\n<li><a href=\"https://www.rust-lang.org/learn\">Official resource</a></li>\n<li><a href=\"https://github.com/rust-unofficial/awesome-rust#readme\">Awesome Rust</a></li>\n<li><a href=\"https://github.com/ctjhoa/rust-learning\">Rust learning</a></li>\n<li><a href=\"https://users.rust-lang.org/\">Forum</a></li>\n<li><a href=\"https://crates.io/\">Packages</a></li>\n<li><a href=\"https://doc.rust-lang.org/std/index.html\">STD library</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/\">Rust book</a></li>\n<li><a href=\"http://120.78.128.153/rustbook/\">Rust book Chinese</a></li>\n<li><a href=\"https://doc.rust-lang.org/cargo/\">Cargo book</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/rust-by-example/\">Rust examples</a></li>\n<li><a href=\"https://play.rust-lang.org/\">Rust online programming</a></li>\n<li><a href=\"https://rustacean.net/\">Ferris pictures</a></li>\n<li><a href=\"https://github.com/mohanson/gameboy\">Rust gameboy</a></li>\n<li><a href=\"https://www.zhihu.com/topic/19674381/intro\">Rust zhihu</a></li>\n<li><a href=\"https://www.infoq.cn/article/Uugi_eIJusEka1aSPmQM\">Rust 张汉东</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&mid=2247597850&idx=1&sn=679ccdcaf76e8b6ab97ca42687769da1\">未来的人工智能语言，是 Rust 还是 Mojo ？</a></li>\n</ol>\n<h2 id=\"repos\"><a href=\"#repos\" class=\"headerlink\" title=\"repos\"></a>repos</h2><ol>\n<li><a href=\"https://github.com/emilk/egui\">egui</a></li>\n<li><a href=\"https://github.com/rerun-io/rerun\">rerun</a></li>\n</ol>\n","categories":["Program","Rust"],"tags":["Rust"]},{"title":"SOA","url":"/2022/09/07/SOA/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li><p>SOA 是一种架构风格</p>\n</li>\n<li><p>实际上 SOA 只是一种架构设计模式，而 SOAP、REST、RPC 就是为了实践这种设计模式而设计的数据通讯方式，其中 SOAP 通俗理解就是服务间通过 http+xml 的形式完成数据交换，REST 就是 http+json 的形式，RPC 是基于 socket 的形式。CXF 框架就是典型的 SOAP&#x2F;REST 框架，Dubbo 就是典型的 RPC 框架，而 SpringCloud 就是遵守 REST 规范的微服务生态系统。<br>1 .后来又有了微服务的概念，个人理解微服务和 SOA 就是孪生子。如今生产实践中提到的微服务，在 SOA 的基础上更进一层，引入了很多新的东西如服务治理、链路跟踪、配置管理等等可以帮助企业构建高可用高并发高性能的系统的组件。</p>\n</li>\n<li><p>为什么服务总是和以太网，DDS 或 SOME&#x2F;IP 绑定的呢？CAN 网络上是否可以实现完整的 SOA 架构？</p>\n<ul>\n<li>首先，以 SOME&#x2F;IP 举例，因为 SOME&#x2F;IP 的完整名称其实能回答上面的大多数问题，SOME&#x2F;IP &#x3D; Scalable service-Oriented Middleware over IP。即“运行于 IP 之上的可伸缩的面向服务的中间件”。可见，并不是 SOA 必须和 SOME&#x2F;IP 绑定，而是 SOME&#x2F;IP 天生就是为了 SOA 架构而生。</li>\n<li>SOME&#x2F;IP 的精华在于“Middleware 中间件”，这是一种独立的系统软件或服务程序，分布式应用软件可借助 Middleware 在不同的技术之间共享资源。分布式应用软件，在这里指的就是“服务”；不同的技术之间，在这里指的就是不同的平台或操作系统，比如 Linux 系统或 AUTOSAR OS OSEK 等。</li>\n<li>Scalable Middleware，顾名思义，则是“可伸缩中间件”，指的是该中间件能够适配于不同的平台及操作系统，其支撑的平台可大可小。</li>\n<li>简单来说，SOA 是软件架构的一种设计理念；SOME&#x2F;IP 是一种将软件接口进行打包的打包方式，是一种中间件。而汽车行业通常所指的”以太网”是泛化之后的概念，涵盖了基于以太网技术所实现的各种相关技术手段，包括 TCP&#x2F;IP 协议、DoIP 协议、SOME&#x2F;IP 协议等。当然若通过其他非以太网的通信方式来实现 SOA 也是可行的，但通常大家不那么用。比如基于 CAN 总线的架构，由于其基础的架构和通信协议栈里不存在 Middleware 中间层的概念，所以要实现 SOA 的代价是非常巨大的。</li>\n</ul>\n</li>\n<li><p>以服务导向的软件系统构架（SOA）将成为主流，以 SOA&#x2F;SOME-IP 为脉络支撑起汽车以服务为出发点和差异化竞争的整车 E&#x2F;E 架构。</p>\n</li>\n<li><p><code>SOA</code>（Service-Oriented Architecture，面向服务的架构）</p>\n</li>\n<li><p>SOA 的软件架构<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/dgmES0HFW0utCXbf5mDOFepsQSA2wVFPBqzgGf38bkxsJOlMEkjvHG3H5ibs5ZW9Mw968jLxgOOpVk8iaKNRdABg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"SOA的软件架构\"></p>\n</li>\n<li><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/dgmES0HFW0utCXbf5mDOFepsQSA2wVFPBqzgGf38bkxsJOlMEkjvHG3H5ibs5ZW9Mw968jLxgOOpVk8iaKNRdABg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"SOA汽车分层模型\"></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000040618603\">SOA 所解决的核心问题</a></p>\n<ul>\n<li>系统集成：站在系统的角度，解决企业系统间的通信问 题，把原先散乱、无规划的系统间的网状结构，梳理成规整、可治理的系统间星形结构，这一步往往需要引入 一些产品，比如 ESB、以及技术规范、服务管理规范；这一步解决的核心问题是【有序】</li>\n<li>系统的服务化：站在功能的角度，把业务逻辑抽象成可复用、可组装的服务，通过服务的编排实现业务的快速再生。目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用；这一步解决的核心问题是【复用】</li>\n<li>业务的服务化：站在企业的角度，把企业职能抽象成可复用、可组装的服务；把原先职能化的企业架构转变为服务化的企业架构，进一步提升企业的对外服务能力；前面两步都是从技术层面来解决系统调用、系统功能复用的问题。第三步，则是以业务驱动把一个 业务单元封装成一项服务。这一步解决的核心问题是 【高效】</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://www.kdocs.cn/l/sbWWKnW352t2\">车载 SOA 软件架构技术规范 1.0</a></li>\n<li><a href=\"https://www.3cst.cn/Information/info/RHcujT3VVDQD11ea8d6300163e0473d8\">“域”测未来 “域”见 SOA</a></li>\n<li><a href=\"https://bbs.huaweicloud.com/blogs/315752\">什么是 SOA？什么是微服务？SOA 和微服务有什么区别？</a></li>\n<li><a href=\"https://www.sohu.com/a/523519503_560178\">面向 SOA 服务的智能汽车高性能计算平台布局与测试方案</a></li>\n<li><a href=\"https://www.3cst.cn/Information/info/ALwsiHASP99L11ea8d6300163e0473d8\">SOA 中的软件架构设计及软硬件解耦方法论</a></li>\n<li><a href=\"https://www.jianshu.com/p/48839b7d0050\">MVC、 RPC、SOA 和 微服务架构异同</a></li>\n</ol>\n"},{"title":"SPIR-V","url":"/2023/10/16/SPIR-V/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.khronos.org/spir/\">spir</a></li>\n</ol>\n","categories":["AI","IR"],"tags":["AI","IR","Compiler"]},{"title":"Shell Script","url":"/2020/11/28/Shell-script/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>判断 linux 命令是否存在</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">BUILD_SYSTEM=Ninja</span><br><span class=\"line\"><span class=\"keyword\">if</span> ! [ -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v ninja)</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    BUILD_SYSTEM=<span class=\"string\">&#x27;Unix Makefiles&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! <span class=\"built_in\">command</span> -v &lt;the_command&gt; &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;the_command&gt; could not be found&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>分支，循环、 case， 函数、正则表达式</li>\n<li>shell 风格指南 <a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/\">link</a></li>\n<li>seq 产生顺序数 for i in <code>seq 1 10</code>;do echo jia; sleep 1; done</li>\n<li>cat</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span>  &gt;&gt; a.txt &lt;&lt;<span class=\"string\">EOF        追加</span></span><br><span class=\"line\"><span class=\"string\">    hello,world</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span>  &gt; a.txt &lt;&lt;<span class=\"string\">EOF      覆盖</span></span><br><span class=\"line\"><span class=\"string\">    hello,world</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>set -xe 显示运行的每一条命令，出错退出。 -x 显示 -e 退出</li>\n<li>echo -e “jiaxiyang\\c” 脚本输出不换行</li>\n<li>16 进制转化为 10 进制 num&#x3D;”ABCD1234” &amp;&amp; echo $((16#${num}))</li>\n<li>产生随机数 cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;uuid</li>\n<li>获取本机 IP 地址： ifconfig | grep “inet addr:” | awk ‘{ print $2 }’| sed ‘s&#x2F;addr:&#x2F;&#x2F;g’</li>\n<li>awk 按列过滤参数 ls -l test.sh | awk ‘{ print $5 }’ 输出：454</li>\n<li>shell 小程序<a href=\"https://www.jb51.net/article/54488.htm\">link</a></li>\n<li>shell 得到文件信息 <code>ll /var/log/messages | cut -d &quot; &quot; -f 5</code></li>\n<li>shell 不用输入密码登录 expect <a href=\"http://www.cnblogs.com/lixigang/articles/4849527.html\">link</a> set timeout 3 ; spawn ssh <a href=\"mailto:&#x6a;&#x69;&#x61;&#120;&#105;&#x79;&#x61;&#110;&#103;&#x40;&#x31;&#x30;&#46;&#x31;&#48;&#x2e;&#48;&#x2e;&#x31;&#55;\">&#x6a;&#x69;&#x61;&#120;&#105;&#x79;&#x61;&#110;&#103;&#x40;&#x31;&#x30;&#46;&#x31;&#48;&#x2e;&#48;&#x2e;&#x31;&#55;</a>; expect “*password:”; send “jiaxiyang\\r”;interact</li>\n<li>读文件内容，记录到变量中 var&#x3D;$(cat name.txt)</li>\n<li>计时 start&#x3D;$(date+%s) &amp;&amp; sleep 2 &amp;&amp; end&#x3D;$(date+%s)&amp;&amp; echo $(($end - $start)) <a href=\"http://blog.csdn.net/gengshenghong/article/details/7583580\">link</a></li>\n<li>sleep: sleep 1 睡眠 1 秒 sleep 1s 睡眠 1 秒 sleep 1m 睡眠 1 分 sleep 1h 睡眠 1 小时</li>\n<li>[ -f test ] &amp;&amp; rm test 如果存在 test 文件 删除 test ，逻辑运算代替 if<br>对于包含至少一个其他函数的足够长的脚本，需要称为  main  的函数。main “$@”</li>\n<li>比较二进制文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">process</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    file=<span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;file  : <span class=\"subst\">$(realpath $&#123;file&#125;)</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;date  : <span class=\"subst\">$(date -r $&#123;file&#125;)</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;length: <span class=\"subst\">$(wc -c $&#123;file&#125; | awk &#x27;&#123;print $1&#125;&#x27;)</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;md5sum: <span class=\"subst\">$(md5sum $(realpath $&#123;file&#125;)</span> | awk &#x27;&#123;print <span class=\"variable\">$1</span>&#125;&#x27;)&quot;</span></span><br><span class=\"line\">    xxd -l 96 <span class=\"variable\">$&#123;file&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;date now: <span class=\"subst\">$(date)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$@</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    process <span class=\"variable\">$var</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>function(in .bashrc)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">loop</span></span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">sleep</span> 1; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>copy link libs</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">libs</span></span>() &#123;</span><br><span class=\"line\">    OUTPUT_DIR=$(<span class=\"built_in\">date</span> -u +<span class=\"string\">&quot;%Y-%m-%d-%H:%M:%S&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/bin <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/lib</span><br><span class=\"line\">    BINS=<span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">cp</span> <span class=\"variable\">$&#123;BINS&#125;</span> <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/bin/</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"subst\">$(ldd $&#123;BINS&#125; | grep <span class=\"string\">&quot;=&gt; /&quot;</span> | awk &#x27;&#123;print $3&#125;&#x27; | xargs -I &#x27;&#123;&#125;&#x27; cp -v &#x27;&#123;&#125;&#x27; $&#123;OUTPUT_DIR&#125;/lib)</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>创建固定个数 panel，每个 panel 执行不同命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">PANEL_NUM=6</span><br><span class=\"line\"><span class=\"keyword\">while</span> [ $(tmux list-panes | <span class=\"built_in\">wc</span> -l) -lt <span class=\"variable\">$&#123;PANEL_NUM&#125;</span> ]; <span class=\"keyword\">do</span></span><br><span class=\"line\">\ttmux split-window \\; <span class=\"comment\">#select-pane -L</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># even-horizontal even-vertical main-horizontal main-vertical tiled</span></span><br><span class=\"line\"><span class=\"comment\"># tmux select-layout even-horizontal</span></span><br><span class=\"line\">tmux select-layout tiled</span><br><span class=\"line\"></span><br><span class=\"line\">CURRENT_PANEL=$(tmux display -pt <span class=\"string\">&quot;<span class=\"variable\">$&#123;TMUX_PANE:?&#125;</span>&quot;</span> <span class=\"string\">&#x27;#&#123;pane_index&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(<span class=\"built_in\">seq</span> 1 <span class=\"variable\">$&#123;PANEL_NUM&#125;</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;i&#125;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;i&#125;</span> -ne <span class=\"variable\">$&#123;CURRENT_PANEL&#125;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\ttmux send-keys -t .<span class=\"variable\">$&#123;i&#125;</span> <span class=\"string\">&quot;echo <span class=\"variable\">$&#123;i&#125;</span>; ls -al&quot;</span> c-m</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>删除和添加版权信息</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## remove license</span></span><br><span class=\"line\"><span class=\"comment\"># for i in $(/usr/bin/fdfind -e h -e cpp -e hpp -e cc); do</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(find . -regex <span class=\"string\">&#x27;.*\\.\\(cpp\\|cc\\|cxx\\|hpp\\|h\\)&#x27;</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">\tline=$(<span class=\"built_in\">cat</span> <span class=\"variable\">$i</span> | grep -n <span class=\"string\">&quot;#i[fn]\\|#pragma&quot;</span> | awk -F <span class=\"string\">&#x27;:&#x27;</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span> | awk <span class=\"string\">&#x27;NR==1&#x27;</span>)</span><br><span class=\"line\">\tline=$((<span class=\"variable\">$&#123;line&#125;</span> - <span class=\"number\">1</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((<span class=\"variable\">$&#123;line&#125;</span> &gt; <span class=\"number\">0</span>)); <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tsed -i <span class=\"string\">&quot;1, <span class=\"variable\">$&#123;line&#125;</span>d&quot;</span> <span class=\"variable\">$i</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## add license</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;pgcopyright.txt &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">/**</span></span><br><span class=\"line\"><span class=\"string\"> * @copyright PhiGent.ai @ 2022</span></span><br><span class=\"line\"><span class=\"string\"> */</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(find . -regex <span class=\"string\">&#x27;.*\\.\\(cpp\\|cc\\|cxx\\|hpp\\|h\\)&#x27;</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">cat</span> pgcopyright.txt <span class=\"variable\">$i</span> &gt;<span class=\"variable\">$i</span>.new &amp;&amp; <span class=\"built_in\">mv</span> <span class=\"variable\">$i</span>.new <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> pgcopyright.txt</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>push to jfrog</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">JFROG_USER=xiyang.jia</span><br><span class=\"line\">JFROG_PASSWD=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">push_to_jfrog</span></span>() &#123;</span><br><span class=\"line\">        FILE=<span class=\"variable\">$1</span></span><br><span class=\"line\">        JFROG_PATH=http://artifacts.phigent.io/artifactory/<span class=\"variable\">$2</span></span><br><span class=\"line\">        MD5=$(<span class=\"built_in\">md5sum</span> <span class=\"variable\">$FILE</span> | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\">        curl -u<span class=\"string\">&quot;<span class=\"variable\">$&#123;JFROG_USER&#125;</span>:<span class=\"variable\">$&#123;JFROG_PASSWD&#125;</span>&quot;</span> -T <span class=\"variable\">$FILE</span> -H <span class=\"string\">&quot;X-Checksum-MD5:<span class=\"variable\">$&#123;MD5&#125;</span>&quot;</span> -L <span class=\"string\">&quot;<span class=\"variable\">$&#123;JFROG_PATH&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">push_dir_to_jfrog</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> $(find <span class=\"variable\">$1</span> -<span class=\"built_in\">type</span> f); <span class=\"keyword\">do</span></span><br><span class=\"line\">                push_to_jfrog <span class=\"variable\">$&#123;file&#125;</span> <span class=\"variable\">$2</span>/<span class=\"variable\">$&#123;file&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$1</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        push_dir_to_jfrog <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        push_to_jfrog <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n","categories":["Program","Shell"],"tags":["Shell"]},{"title":"TVM","url":"/2023/02/17/TVM/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><p>Apache TVM 是一个用于 CPU、GPU 和机器学习加速器的开源机器学习编译器框架，旨在让机器学习工程师能够在任何硬件后端上高效地优化和运行计算。</p>\n</li>\n<li><p>可以搜索优化模型，提供了 runtime</p>\n</li>\n<li><p>模型相当于语言， TVM 相当于编译器，将模型编译到各种硬件上</p>\n</li>\n<li><p>TVM: Tensor Virtual Machine</p>\n</li>\n<li><p>利用 TVM，机器学习算法可以被自动编译成可供下层硬件执行的机器语言，从而可以利用多种类型的算力。</p>\n</li>\n<li><p>我们希望创建一个简洁的抽象统一解决这些问题，希望用一个干净、统一的管理平台把所有的系统和硬件都清晰地抽象出来，以便能够部署模型，并最大限度地利用好目标硬件。</p>\n</li>\n<li><p>他们致力于打造一个可扩展、开放、中立的端到端栈，用于深度学习模型的<code>优化和部署</code>，目标是减少企业为特定硬件开发和深度学习软件部署所花费的成本和时间。</p>\n</li>\n<li><p>按照官方的定义，TVM 是一套完整的 stack，包括神经网络图优化（比如 op fusion）和单个 operation 优化等部分。我习惯于将图优化的部分归类做 Relay 项目，而仅仅把单个 operation 优化看做 TVM，因此文章之后提到的 TVM 基本是指单个算子优化这部分。</p>\n</li>\n<li><p>做自动代码优化的优秀项目除了 AutoTVM，还有 Halide(<a href=\"https://halide-lang.org/papers/autoscheduler2019.html)%EF%BC%8C%E4%B8%AA%E4%BA%BA%E8%AE%A4%E4%B8%BA%E7%9B%AE%E5%89%8DHalide%E5%81%9A%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E4%BC%98%E5%8C%96%E5%81%9A%E7%9A%84%E6%9B%B4%E5%A5%BD%E3%80%82TVM%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF%E5%8F%82%E8%80%83%E8%87%AAHalide%EF%BC%8C\">https://halide-lang.org/papers/autoscheduler2019.html)，个人认为目前Halide做代码自动优化做的更好。TVM的基本思路参考自Halide，</a></p>\n</li>\n<li><p>TVM 中的调优是指，在给定 target 上优化模型，使其运行得更快。与训练或微调不同，它不会影响模型的准确性，而只会影响 runtime 性能。作为调优过程的一部分，TVM <code>实现并运行许多不同算子的变体，以查看哪个性能最佳</code>。这些运行的结果存储在调优记录文件（tune 命令的最终输出）中。</p>\n</li>\n<li><p>使用 auto-tuning 模块 AutoTVM 或 AutoScheduler 搜索最佳 schedule</p>\n<ul>\n<li>scheduler 调度器， schedule 具体调度方式</li>\n</ul>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/88188955\">初识 TVM</a></p>\n</li>\n</ol>\n<h2 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h2><ol>\n<li><a href=\"https://tvm.hyper.ai/docs/install/docker/\">docker</a></li>\n<li>使用自己 docker</li>\n<li><a href=\"https://hub.docker.com/layers/wadewuu/tvm-test/v2/images/sha256-58a2d0f3f9aefbf1c8d681a32f72ee3ffd2b05971461973ee632f03eaa1fd529?context=explore\">wadewuu&#x2F;tvm-test&#x2F;v2</a></li>\n<li>要先现在源码，编译出 docker，再编译 tvm</li>\n<li>替换源</li>\n<li>build 时 llvm 打开</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN sed -i s@<span class=\"regexp\">/archive.ubuntu.com/</span>@<span class=\"regexp\">/mirrors.tuna.tsinghua.edu.cn/</span>@g <span class=\"regexp\">/etc/</span>apt/sources.list</span><br><span class=\"line\">RUN apt-get clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><ol>\n<li><code>python3 -m tvm.driver.tvmc --help</code></li>\n<li><code>alias tvmc=&#39;python3 -m tvm.driver.tvmc&#39;</code></li>\n</ol>\n<h2 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a><a href=\"https://tvm.hyper.ai/docs/tutorial/compile/\">sample</a></h2><ol>\n<li><code>wget https://github.com/onnx/models/raw/b9a54e89508f101a1611cd64f4ef56b9cb62c7cf/vision/classification/resnet/model/resnet50-v2-7.onnx</code></li>\n<li><a href=\"https://discuss.tvm.apache.org/t/error-when-trying-to-tune-the-resnet-model/13431\">Error when trying to tune the ResNet Model</a> model input should frozen</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/50529704\">手把手带你遨游 TVM</a></li>\n<li><a href=\"https://tvm.apache.org/#about\">TVM</a></li>\n<li><a href=\"https://tvm.hyper.ai/docs/tutorial/intro/\">TVM 中文网站</a></li>\n<li><a href=\"https://tvm.hyper.ai/docs/tutorial/compile/\">sample</a></li>\n<li><a href=\"https://tvm.hyper.ai/docs/how_to/deploy/vitis_ai\">Vitis AI 集成</a></li>\n<li><a href=\"https://software-dl.ti.com/codegen/docs/tvm/tvm_tidl_users_guide/index.html\">TI TVM</a></li>\n<li><a href=\"https://www.zhihu.com/question/401766029/answer/2733700454\">机器学习编译器的前世今生</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU5ODY2MTk3Nw==&mid=2247487015&idx=1&sn=04282e2d15eca05eb56062062b46e781&chksm=fe418011c9360907048966af43299fa55b570c9d634c4bcdb3702c6e4d8101a72ef07d5ec77f&scene=21#wechat_redirect\">TVM：成为深度学习领域的“Linux”</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU5ODY2MTk3Nw==&mid=2247492618&idx=1&sn=a20f4828b9ab3e3cee3fedfd906e0eb2&chksm=fe426a3cc935e32a8312ce9efbb4f2640787508d3e811579bbffe918685cdb07a8bd8e3ffc4b&scene=132&exptype=timeline_recommend_article_extendread_samebiz#wechat_redirect\">LLVM 之父 Chris Lattner：我的 AI 基础设施软件构建理念</a></li>\n</ol>\n"},{"title":"Software design","url":"/2020/08/03/Software-design/","content":"<h2 id=\"roadmap\"><a href=\"#roadmap\" class=\"headerlink\" title=\"roadmap\"></a><a href=\"https://github.com/stemmlerjs/software-design-and-architecture-roadmap\">roadmap</a></h2><ol>\n<li><p><a href=\"https://github.com/ByteByteGoHq/system-design-101\">system-design-101</a></p>\n</li>\n<li><p><a href=\"https://github.com/practical-tutorials/project-based-learning#cc\">project-based-learning like build-your-own-x</a></p>\n</li>\n<li><p><a href=\"https://github.com/kamranahmedse/developer-roadmap\">developer-roadmap</a></p>\n</li>\n<li><p><a href=\"https://github.com/codecrafters-io/build-your-own-x\">build-your-own-x</a> 实现 os, git, c++编译器等 sample</p>\n</li>\n<li><p><a href=\"https://github.com/donnemartin/system-design-primer\">system-design-primer(200K star)</a></p>\n</li>\n<li><p><a href=\"https://github.com/DovAmir/awesome-design-patterns\">awesome-design-patterns</a></p>\n<span id=\"more\"></span>\n</li>\n<li><p>Summary<br><img src=\"https://user-images.githubusercontent.com/6892666/65833569-bb34fc00-e29f-11e9-8516-79cbd9f8f07b.png\" alt=\"Summary\"></p>\n</li>\n<li><p><a href=\"https://github.com/webpro/programming-principles\">programming-principles</a></p>\n</li>\n<li><p>Map<br><img src=\"https://user-images.githubusercontent.com/6892666/65896069-834eb700-e37a-11e9-95be-7ae2300d5d50.png\" alt=\"map\"></p>\n</li>\n<li><p><a href=\"https://github.com/joelparkerhenderson/architecture-decision-record\">分析模板</a></p>\n</li>\n<li><p><a href=\"https://github.com/search?q=software+architecture\">github</a></p>\n</li>\n<li><p><a href=\"https://github.com/justinamiller/SoftwareArchitect\">SoftwareArchitect</a><br><img src=\"https://github.com/justinamiller/SoftwareArchitect/raw/master/src/archRoadmap.jpg\" alt=\"roadmap2\"></p>\n</li>\n</ol>\n<h2 id=\"good-design\"><a href=\"#good-design\" class=\"headerlink\" title=\"good design\"></a>good design</h2><ol>\n<li><code>高内聚，低耦合</code></li>\n<li>(代理模式？) opencv 接口使用代理类 <em>InputArray，This is the proxy class for passing read-only input arrays into OpenCV functions. _InputArray is a class that can be constructed from Mat, Mat</em><T>, Matx&lt;T, m, n&gt;, std::vector<T>, std::vector&lt;std::vector<T> &gt;, std::vector<Mat>, std::vector&lt;Mat_<T> &gt;, UMat, std::vector<UMat> or double. It can also be constructed from a matrix expression.<br><a href=\"https://docs.opencv.org/4.6.0/d4/d32/classcv_1_1__InputArray.html\">link</a></li>\n</ol>\n<h2 id=\"架构风格、架构模式、设计模式-link\"><a href=\"#架构风格、架构模式、设计模式-link\" class=\"headerlink\" title=\"架构风格、架构模式、设计模式 link\"></a>架构风格、架构模式、设计模式 <a href=\"https://cloud.tencent.com/developer/article/1627409\">link</a></h2><ol>\n<li>架构风格是在最高抽象层次上的应用程序设计；</li>\n<li>架构模式是实现架构风格的一种方式；</li>\n<li>设计模式是解决局部问题的一种方法。</li>\n<li><a href=\"https://www.cnblogs.com/IcanFixIt/p/7518146.html\">10 种常见的软件架构风格？</a></li>\n</ol>\n<h2 id=\"Architecture-Style\"><a href=\"#Architecture-Style\" class=\"headerlink\" title=\"Architecture Style\"></a>Architecture Style</h2><h3 id=\"分层-Layered-Architecture\"><a href=\"#分层-Layered-Architecture\" class=\"headerlink\" title=\"分层 Layered Architecture\"></a>分层 Layered Architecture</h3><h3 id=\"管道和过滤器\"><a href=\"#管道和过滤器\" class=\"headerlink\" title=\"管道和过滤器\"></a>管道和过滤器</h3><h3 id=\"Client-Server\"><a href=\"#Client-Server\" class=\"headerlink\" title=\"Client&#x2F;Server\"></a>Client&#x2F;Server</h3><h3 id=\"事件驱动-Message-Bus\"><a href=\"#事件驱动-Message-Bus\" class=\"headerlink\" title=\"事件驱动 Message Bus\"></a>事件驱动 Message Bus</h3><ol>\n<li><img src=\"https://marvel-b1-cdn.bc0a.com/f00000000264121/www.rti.com/hs-fs/hubfs/Assets%202017/communicationsevolution.jpg?width=720&height=405&name=communicationsevolution.jpg\" alt=\"Architectural diagrams for the various IoT protocols.\"></li>\n</ol>\n<h3 id=\"发布订阅风格\"><a href=\"#发布订阅风格\" class=\"headerlink\" title=\"发布订阅风格\"></a>发布订阅风格</h3><ul>\n<li>事件总线是对发布-订阅模式的一种实现。 <a href=\"https://juejin.cn/post/6949929918138417165\">事件总线（发布订阅模式）</a></li>\n</ul>\n<h3 id=\"p2p\"><a href=\"#p2p\" class=\"headerlink\" title=\"p2p\"></a>p2p</h3><ol>\n<li>RPC? 为了允许不同的客户端均能访问服务器，许多标准化的 RPC 系统应运而生了。其中大部分采用接口描述语言（Interface Description Language，IDL），方便跨平台的远程过程调用。</li>\n</ol>\n<h3 id=\"Service-Oriented-Architecture-SOA\"><a href=\"#Service-Oriented-Architecture-SOA\" class=\"headerlink\" title=\"Service-Oriented Architecture (SOA)\"></a>Service-Oriented Architecture (SOA)</h3><h2 id=\"Architecture-Pattern\"><a href=\"#Architecture-Pattern\" class=\"headerlink\" title=\"Architecture Pattern\"></a>Architecture Pattern</h2><h2 id=\"programming-principles\"><a href=\"#programming-principles\" class=\"headerlink\" title=\"programming-principles\"></a><a href=\"https://github.com/webpro/programming-principles\">programming-principles</a></h2><ol>\n<li><p><code>Don&#39;t Make Me Think</code></p>\n</li>\n<li><p><code>开闭原则</code> 软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的</p>\n</li>\n<li><p><code>单一职责原则</code> 一个类只做一件事</p>\n</li>\n<li><p><code>里氏替换原则</code> 子类应该可以完全替代父类，也就是说在使用继承时，只扩展新功能，不要破坏父类原有的功能。</p>\n</li>\n<li><p><code>依赖倒置原则</code> 细节应该依赖与抽象，抽象不应该依赖于细节。把抽象层放在程序设计的高层，并保持稳定，程序的细节变化由低层的实现层来完成。</p>\n</li>\n<li><p><code>迪米特法则/最少知道原则</code> 一个类不应该知道自己操作类的细节，换言之，只和朋友谈话，不和朋友的朋友谈话。</p>\n</li>\n<li><p><code>接口隔离原则</code> 客户端不应该依赖它不需要的接口。如果一个接口在实现时，部分方法由于冗余被客户端空实现，则应该将该接口拆分，让实现类只依赖自己需要的接口。</p>\n</li>\n<li><p>稳定抽象原则</p>\n</li>\n<li><p><a href=\"https://excalidraw.com/#json=5093806722514944,Fbhi7FIo_fywgxy1glxm3w\">vitis ai library 为例</a></p>\n</li>\n<li><p><code>控制翻转</code></p>\n</li>\n<li><p><code>依赖注入</code></p>\n</li>\n</ol>\n<h2 id=\"Design-Pattern\"><a href=\"#Design-Pattern\" class=\"headerlink\" title=\"Design Pattern\"></a>Design Pattern</h2><h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a><a href=\"https://blog.csdn.net/qq_52670477/article/details/126629335\">工厂模式</a></h3><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/268462046\">C++ 基于模板的自动注册工厂模式</a></li>\n<li><a href=\"https://excalidraw.com/#json=XTOYCW9APeNtW9s_GEcAP,fKiAKGMSFLUlct6H4HAQ6Q\">示意图</a></li>\n<li>简单工厂模式： 不符合开闭原则</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n<li>从代码的实现复杂度来看，简单工厂模式最简单，工厂方法模式次之，抽象工厂模式最复杂。如果将简单工厂模式的代码修改得符合“开闭原则”，就变成了工厂方法模式；如果修改工厂方法模式的代码，使得一个工厂支持多个产品的生产，那就成了抽象工厂模式。</li>\n<li>原来由用户直接对对象进行管理，变成由工厂(ioc 容器)对对象进行管理，然后注入到应用程序中。实现了应用和用户与对象具体实现的松耦合。</li>\n<li><a href=\"https://excalidraw.com/#json=5093806722514944,Fbhi7FIo_fywgxy1glxm3w\">稳定抽象原则</a>: 依赖关系指向更稳定的方向，工厂接口比较稳定，应用和对象具体实现都依赖工厂接口。</li>\n<li>目的：将对象的创建与对象的使用解耦。</li>\n<li><code>简单工厂函数</code> 将对象的创建放入到统一工厂函数中，根据类型判断具体创建哪一种类型对象。相当于将耦合问题从使用中转移到工厂函数。扩展性差，每增加一个产品就要修改工厂函数。</li>\n<li><code>工厂方法模式</code> 每个产品都有一个工厂函数，相当于将耦合从总的工厂函数中转移到各个产品的工厂函数中，问题：使用时需要包含各个工厂头文件。</li>\n<li><code>抽象工厂模式</code> 同工厂方法模式，只不过每一个具体工厂可以可以调不同接口（不是同一个接口传参数）创建不同的产品。</li>\n<li><code>反射，依赖注入</code> 由类名来创建对象。相当于工厂方法模式+单例模式。全局有一个总的工厂，工厂里有保存产品类型及其工厂函数的 map 表(使用到函数指针)，每个产品都要有一个工厂，并且需要注册（依赖注入）到总的工厂 map 表中。解决了工厂方法模式中使用问题。map 可以使用全局变量，注册函数写成类的静态函数，就不需要专门设计一个总的工厂类。总工厂生产的产品不由总工厂控制，而是交给子工厂控制，这叫<code>控制反转</code>，将子工厂通过注册接口传入到总工厂中，这叫<code>依赖注入</code></li>\n<li><code>模板工厂模式</code></li>\n</ol>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><ol>\n<li><a href=\"https://www.cnblogs.com/xiaolincoding/p/11524401.html\">factory method</a></li>\n<li><a href=\"https://blog.csdn.net/K346K346/article/details/51698184\">reflection</a></li>\n</ol>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><ol>\n<li>注意单例模式静态链接问题，如果链接两次，可能会有两个单例，有多份静态程序。如注册机制未加 PRIVATE 限制，导致静态库被链接两次， 可以用 gdb 调试，注册函数加断点, 看看调用堆栈。</li>\n<li>类比： 政府是单例模式的一个很好的示例。 一个国家只有一个官方政府。 不管组成政府的每个人的身份是什么， ​ “某政府” 这一称谓总是鉴别那些掌权者的全局访问节点。</li>\n<li>目的： 保证一个类只有一个实例，并且提供一个访问它的全局访问点，该实例被所有程序模块共享</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/37469260\">reference</a></li>\n<li>code</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Singleton</span>() &#123; &#125;;  <span class=\"comment\">// 私有构造函数，拷贝构造函数和赋值函数，防止创建对象。</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Singleton</span>() &#123; &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">Singleton</span>(<span class=\"type\">const</span> Singleton&amp;);</span><br><span class=\"line\">\tSingleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Singleton&amp;);</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> Singleton&amp; <span class=\"title\">get_instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> Singleton instance;  <span class=\"comment\">// 使用local static对象，只在第一次访问get_instance才创建</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a><a href=\"https://refactoring.guru/design-patterns/decorator\">装饰器</a></h3><ol>\n<li><a href=\"https://stackoverflow.com/questions/30679445/python-like-c-decorators\">Python-like C++ decorators</a></li>\n<li>其别名也可以称为包装器(Wrapper)</li>\n<li>俄罗斯套娃</li>\n<li><a href=\"https://www.cnblogs.com/wang_yb/p/18106433\">Python 装饰器实战：打造高效性能计时工具</a></li>\n<li><a href=\"https://developer.aliyun.com/article/1354526\">例子</a><ul>\n<li>注意红烧肉可以换成其他菜品</li>\n</ul>\n</li>\n<li>性能问题：增加了函数调用，icache 和 data cache</li>\n</ol>\n<h3 id=\"消费者模式\"><a href=\"#消费者模式\" class=\"headerlink\" title=\"消费者模式\"></a>消费者模式</h3><ol>\n<li>类比： 如果你订阅了一份杂志或报纸， 那就不需要再去报摊查询新出版的刊物了。 出版社 （即应用中的 “发布者”） 会在刊物出版后 （甚至提前） 直接将最新一期寄送至你的邮箱中。出版社负责维护订阅者列表， 了解订阅者对哪些刊物感兴趣。 当订阅者希望出版社停止寄送新一期的杂志时， 他们可随时从该列表中退出。</li>\n</ol>\n<h3 id=\"订阅发布模式\"><a href=\"#订阅发布模式\" class=\"headerlink\" title=\"订阅发布模式\"></a>订阅发布模式</h3><ol>\n<li>消息中间件经常使用， 例如 ZeroMQ(libzmq)</li>\n<li>MQ(message queue)</li>\n</ol>\n<h3 id=\"订阅发布模式和观察者模式\"><a href=\"#订阅发布模式和观察者模式\" class=\"headerlink\" title=\"订阅发布模式和观察者模式\"></a>订阅发布模式和观察者模式</h3><ol>\n<li><a href=\"https://segmentfault.com/a/1190000020169229\">link1</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/51357583\">观察者模式 vs 发布订阅模式</a></li>\n<li><a href=\"https://blog.csdn.net/briblue/article/details/124081170\">fastdds</a></li>\n</ol>\n<h3 id=\"生产者消费者模式\"><a href=\"#生产者消费者模式\" class=\"headerlink\" title=\"生产者消费者模式\"></a>生产者消费者模式</h3><h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><ol>\n<li>现实类比： 信用卡代理现金</li>\n<li>opencv</li>\n<li>消息中间件</li>\n<li><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20211025-proxy.svg\" alt=\"接口图\"></li>\n</ol>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a><a href=\"https://refactoringguru.cn/design-patterns/composite\">组合模式</a></h3><ol>\n<li>画图，可以有 subgraph</li>\n<li>tree 也是一种组合？</li>\n<li>组合模式是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。</li>\n<li>类成员变量中有该类数组</li>\n</ol>\n<h2 id=\"Software-Design\"><a href=\"#Software-Design\" class=\"headerlink\" title=\"Software Design\"></a>Software Design</h2><ol>\n<li><img src=\"/images/software-diagram/architechture.png\" alt=\"MVC、RPC、SOA和微服务架构区别\"></li>\n</ol>\n<h2 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection\"></a>Reflection</h2><ol>\n<li>反射字面意思：由类型名映射到类型对象？</li>\n<li>反射技术以其明确分离描述系统自身结构、行为的信息与系统所处理的信息，建立可动态操纵的因果关联以动态调整系统行为的良好特征，已经从理论和技术研究走向实用化，使得动态获取和调整系统行为具备了坚实的基础。当需要编写扩展性较强的代码、处理在程序设计时并不确定的对象时，反射机制会展示其威力，反射技术以其明确分离描述系统自身结构、行为的信息与系统所处理的信息，建立可动态操纵的因果关联以动态调整系统行为的良好特征，已经从理论和技术研究走向实用化，使得动态获取和调整系统行为具备了坚实的基础。当需要编写扩展性较强的代码、处理在程序设计时并不确定的对象时，反射机制会展示其威力，这样的场合主要有：<ul>\n<li>序列化（Serialization）和数据绑定（Data Binding）</li>\n<li>远程方法调用（Remote Method Invocation RMI）</li>\n<li>对象&#x2F;关系数据映射（O&#x2F;R Mapping）。</li>\n</ul>\n</li>\n<li>由于 c++中的类结构可读性差，难以调试，协议升级困难等缺点，导致 xml 与 json 等自注释文本协议普及。但<code>文本协议</code>（文件里方便阅读理解）与<code>内存模型</code>（内存上）存在差异，需要有序列化与反序列化对象的操作。序列化：将类对象转化为文本，反序列化：将文本转化为类对象。开发者需要写大量重复代码去进行序列化与反序列化操作。Java 为解决这个问题添加了反射机制:将类型信息编译到 class 文件中，并利用这些信息提供统一的序列化与反序列化功能。</li>\n<li>反射基本功能之一：如何通过类的名称来生成新的对象？例：<code>ClassXX object = new &quot;ClassXX&quot;</code>, C++使用：<code>ClassXX object = new ClassXX(x)</code> 工厂函数是通过在工厂函数里指定 tpye 来生成，不是通过类名。<code>ClassXX object = ClassXX::create(x)</code></li>\n<li>实现方法：<ul>\n<li>每一个类都创建一个产生对象的函数</li>\n<li>设计一个总的工厂类，类中使用 map 保存(类名，函数)。通过共产类创建对象。因为全局只需要一个工厂类的对象，因此使用单例模式设计工厂类。</li>\n</ul>\n</li>\n<li>编程语言的反射机制所能实现的功能还有通过类名称字符串获取类中属性和方法，修改属性和方法的<code>访问权限</code>等，系统运行起来之后可修改类属性方法权限，厉害。</li>\n</ol>\n<h3 id=\"Reference-1\"><a href=\"#Reference-1\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/70044481\">concept</a></li>\n<li><a href=\"https://blog.csdn.net/K346K346/article/details/51698184\">sample</a></li>\n</ol>\n<h2 id=\"Dependency-Injection-DI-依赖注入-Inversion-of-Contol-IOC-控制反转\"><a href=\"#Dependency-Injection-DI-依赖注入-Inversion-of-Contol-IOC-控制反转\" class=\"headerlink\" title=\"Dependency Injection (DI)依赖注入 Inversion of Contol (IOC)控制反转\"></a><a href=\"https://blog.csdn.net/weixin_43862847/article/details/122341510\">Dependency Injection (DI)依赖注入 Inversion of Contol (IOC)控制反转</a></h2><ol>\n<li><a href=\"https://github.com/google/fruit\">fruit DI 框架</a></li>\n<li><a href=\"https://github.com/boost-ext/di\">boost di</a></li>\n<li><a href=\"https://stackoverflow.com/q/56091707\">c++相关依赖注入框架</a></li>\n<li>解决依赖类之间的紧耦合问题，假设 a 依赖 b（b 的实例可能是 a 的成员变量），实现了 b 类实例的创建与 a 无关。</li>\n<li>通常由调用者创建被调用者的实例（调用者依赖被调用者，调用者会在自己函数体内创建被调用者），当创建被调用者不再由调用者来完成，而是通过容器来创建被调用者实例，然后注入调用者。因此被成为依赖注入。</li>\n<li>a 依赖 b，但 a 不控制 b 的创建和销毁，仅使用 b，那么 b 的控制权交给 a 之外处理，这叫<code>控制反转</code>，而 a 要依赖 b，必然要使用 b 的 instance，那么通过 a 的接口把 b 传入，或通过 a 的构造把 b 传入，或通过设置 a 的属性把 b 传入，这个过程叫做<code>依赖注入</code>。</li>\n<li>随着 DI 的频繁使用，要实现 IOC(相当于工厂模式中总的工厂)，会有很多重复代码，有人将实现 IOC 的代码打包成组件或框架，来避免人么重复造轮子。所以实现 IOC 组件或框架，我们可以叫它<code>IOC Container</code>。</li>\n<li>DI 是 IOC 实现方法之一。</li>\n<li>构造方法注入： a 构造函数中将 b 作为参数传递。</li>\n<li>工厂模式注入： 将 b 的工厂传递给 a。</li>\n<li><code>类型擦除</code>指将原有类型消除或者隐藏，因为很多时候我们并不关心具体类型是什么，我们只需要去使用就可以了，提高提高代码的简洁性。是不是很耳熟，对，抽象继承的多态其实就是比较传统、常见及简单的类型擦除。我们使用的只是抽象接口，而不关心具体实现类的类型。类型擦除常用做法是<code>多态、模板、通用类型（C++17 std::any|std::variant）、闭包</code></li>\n<li><a href=\"https://blog.csdn.net/fuzhongmin05/article/details/55802816\">对 IOC 和 DI 的通俗理解</a> good</li>\n<li>传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://refactoring.guru/design-patterns/\">design-patterns</a></li>\n<li><a href=\"https://refactoring.guru/\">Refactoring Guru</a></li>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/index.html\">Picture of Design Patterns</a></li>\n<li><a href=\"https://github.com/DovAmir/awesome-design-patterns\">Awesome Design Patterns</a></li>\n<li><a href=\"https://item.jd.com/12595796.html\">微服务架构设计模式</a> <a href=\"https://blog.csdn.net/flyzer0/article/details/108574150\">book pdf</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff650706(v=pandp.10)\">Microsoft Application Architecture Guide, 2nd Edition</a></li>\n<li><a href=\"https://www.cnblogs.com/shoshana-kong/p/14943755.html\">系统架构——MVC、RPC、SOA 和微服务架构</a></li>\n<li><a href=\"https://www.jianshu.com/p/48839b7d0050\">MVC、 RPC、SOA 和 微服务架构异同</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Template:%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80\">程序设计语言分类</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Template:%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6\">计算机科学</a></li>\n<li><a href=\"https://www.cnblogs.com/IcanFixIt/p/7518146.html\">10 architectures</a></li>\n<li><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md\">CS-Notes</a></li>\n<li><a href=\"http://ruanyifeng.com/blog/2016/09/software-architecture.html\">Ruanyifeng</a></li>\n<li><a href=\"https://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf\">Software architecture patterns</a></li>\n<li><a href=\"https://github.com/qiangmzsx/Software-Engineering-at-Google\">Software-Engineering-at-Google 中文版本</a></li>\n<li><a href=\"https://github.com/iluwatar/java-design-patterns\">java-design-patterns stars hight</a></li>\n</ol>\n","categories":["Program","Design"],"tags":["Design"]},{"title":"Rust grammar","url":"/2021/07/11/Rust-grammar/","content":"<h2 id=\"顶层概念\"><a href=\"#顶层概念\" class=\"headerlink\" title=\"顶层概念\"></a><a href=\"https://www.infoq.cn/article/Uugi_eIJusEka1aSPmQM\">顶层概念</a></h2><p><img src=\"https://static001.infoq.cn/resource/image/2d/91/2d36b45f6905a13a310e6447778ca391.jpg\" alt=\"概念层次图\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Grammar\"><a href=\"#Grammar\" class=\"headerlink\" title=\"Grammar\"></a>Grammar</h2><ol>\n<li>unimplemented! and todo!来表明函数未实现，先跳过</li>\n<li>indent with four spaces, not a tab</li>\n<li>Most lines of Rust code end with a semicolon(;)</li>\n<li><code>println!()</code> ! means call macro, not a function</li>\n<li>Cargo is Rust’s build system and package manager.</li>\n<li>Cargo expects your source files to live inside the src directory. The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code.</li>\n<li><code>cargo run</code> Compile the code and then run the resulting executable all in one command.</li>\n<li><code>cargo check</code> is much faster than <code>cargo build</code></li>\n<li><code>cargo build --release</code> compile the project with optimizations. Run faster but compile slower.</li>\n<li>The <code>main</code> function is the entry point into the program.</li>\n<li>The <code>fn</code> syntax declares a new function, the parentheses, <code>()</code>, indicate there are no parameters, and the curly bracket, <code>&#123;</code>, starts the body of the function.</li>\n<li><code>let</code> is used to create a variable. In Rust, variables are immutable by default.</li>\n<li><code>String::new()</code> An associated function is implemented on a type, in this case String, rather than on a particular instance of a String. Some languages call this a static method. This new function creates a new, empty string. You’ll find a new function on many types, because it’s a common name for a function that makes a new value of some kind.</li>\n<li><code>&#123;&#125;</code> is a place holder when using <code>println!</code></li>\n<li>Crate is a coleection of Rust source code files.</li>\n<li>Cargo.toml dependencies rand &#x3D; “0.5.5”; In this case, we’ll specify the rand crate with the semantic version specifier 0.5.5. Cargo understands Semantic Versioning (sometimes called SemVer), which is a standard for writing version numbers. The number 0.5.5 is actually shorthand for ^0.5.5, which means “any version that has a public API compatible with version 0.5.5.”</li>\n<li><code>cargo doc --open</code> It will build documentation provided by all of your dependencies locally and open it in your browser.</li>\n<li><code>match</code> is like <code>switch</code> in C++</li>\n<li>shallow copy, deep copy(clone), move(let s2 &#x3D; s1; &#x2F;&#x2F; s1 is invailid)</li>\n<li>Differences Between Immutable Variables and Constants:<ul>\n<li>You declare constants using the const keyword instead of the let keyword, and the type of the value must be annotated.</li>\n<li>Constants can be declared in any scope, including the global scope</li>\n<li>Constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime.</li>\n</ul>\n</li>\n<li>trait can add some useful functions for user’s own struct.</li>\n<li>trait 可以与泛型结合来将泛型限制为拥有特定行为的类型，而不是任意类型。</li>\n<li>Rust 编译时会将泛型代码单态化(monomorphization)来保证效率，单态化是指编译时用具体类型来填充泛型。</li>\n<li>用户会将重复代码泛化（抽象），编译器会将泛化代码具体化。</li>\n<li>trait 类似其他语言中接口(interfaces)功能，虽然有些不同。</li>\n<li>只有当 trait 或者要实现 trait 的类型位于 crate 的本地作用域时，才能为该类型实现 trait。</li>\n<li>在 release 构建中，Rust 不检测溢出，相反会进行一种被称为二进制补码包装（two’s complement wrapping）的操作。当在 debug 模式编译时，Rust 检查这类问题并使程序 panic</li>\n<li>Rust 的浮点数默认类型是 f64。数字类型默认是 i32。</li>\n<li>Rust 的 char 类型的大小为四个字节(four bytes)，并代表了一个 Unicode 标量值（Unicode Scalar Value），这意味着它可以比 ASCII 表示更多内容。在 Rust 中，拼音字母（Accented letters），中文、日文、韩文等字符，emoji（绘文字）以及零长度的空白字符都是有效的 char 值。</li>\n<li>Rust 有两个原生的复合类型：元组（tuple）和数组（array）。</li>\n<li><code>tuple:</code> <code>let tup: (i32, f64, u8) = (500, 6.4, 1); let (x, y, z) = tup; //结构 let five_hundred = tup.0;</code></li>\n<li><code>struct:</code></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    username: <span class=\"type\">String</span>,</span><br><span class=\"line\">    email: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">user1</span> = User &#123;</span><br><span class=\"line\">    email: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;someone@example.com&quot;</span>), <span class=\"comment\">//实例中字段的顺序不需要和它们在结构体中声明的顺序一致</span></span><br><span class=\"line\">    username: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;someusername123&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">user1.email = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;anotheremail@example.com&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>我们也可以定义一个没有任何字段的结构体！它们被称为 类单元结构体（unit-like structs）因为它们类似于 ()，即 unit 类型。类单元结构体常常在你想要在某个类型上实现 trait 但不需要在类型中存储数据的时候发挥作用。</li>\n<li>方法与函数类似：它们使用 fn 关键字和名称声明，可以拥有参数和返回值，同时包含在某处调用该方法时会执行的代码。不过方法与函数是不同的，因为它们在结构体的上下文中被定义</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">    width: <span class=\"type\">u32</span>,</span><br><span class=\"line\">    height: <span class=\"type\">u32</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">area</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">u32</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.width * <span class=\"keyword\">self</span>.height</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>impl 块的另一个有用的功能是：允许在 impl 块中定义 不 以 <code>self</code> 作为参数的函数。这被称为 <code>关联函数（associated functions）</code>，因为它们与结构体相关联。它们仍是函数而不是方法，因为它们并不作用于一个结构体的实例。你已经使用过 String::from 关联函数了。使用结构体名和 <code>::</code> 语法来调用关联函数。</li>\n</ol>\n<h2 id=\"Project-Manage\"><a href=\"#Project-Manage\" class=\"headerlink\" title=\"Project Manage\"></a>Project Manage</h2><ol>\n<li>包<code>packages</code>: Cargo 的一个功能，允许你构建、测试和分享 crate</li>\n<li><code>crates</code>: 一个模块的<code>树形</code>结构，它形成了库或二进制项目。</li>\n<li>模块<code>modules and use</code>: 允许你控制作用域和路径的私有性。</li>\n<li>路径<code>path</code>: 一个命名机结构体、函数或模块等项的方式。</li>\n<li>在 Rust 中，代码包也被称为 crates</li>\n<li>一个包中可以包含多个二进制 crate 和一个可选的 crate 库。</li>\n<li>包中至少包含一个 crate，无论是库还是二进制，至多包含一个库 crate</li>\n<li><code>cargo new</code>会创建一个包。</li>\n<li>Cargo 准守一个约定： <code>src/main.rs</code>就是一个与包同名的二进制 crate 的 crate 根。同理，<code>src/lib.rs</code>是库 crate 的 crate 根。如果同时包含，则它有两个 crate。</li>\n<li>通过将文件放在<code>src/bin</code>目录下，一个包可以拥有多个二进制 crate：每个<code>src/bin</code>下的文件都会被编译成一个独立的二进制 crate。</li>\n<li>模块让我们可以将一个 crate 中的代码进行分组，以提高重用性。</li>\n<li><code>模块的定义</code>是以<code>mod</code>(module)关键字为起始，然后指定模块的名字，并且用或花括号包围模块的主题。</li>\n<li><code>模块的声明</code>是以<code>mod</code>为起始，指定模块名字，以<code>;</code>结尾，不带有花括号。在与模块名同名的.rs 文件中定义该模块。</li>\n<li>模块一般是在上一级文件声明，不是在本文件中声明，如可以在 lib.rs 中声明模块，然后在相应.rs 文件中定义该模块。</li>\n<li>crate 的组织结构类似于文件系统的目录，被称为模块树(module tree)。</li>\n<li>Rust 通过路径来查找一个项的位置。</li>\n<li><code>绝对路径(absolute path)</code> 从 crate 根开始，以 crate 名或者字面值<code>crate</code>开头。</li>\n<li><code>相对路径(relative path)</code> 从当前模块开始，以<code>self</code>、<code>super</code>或当前模块的表示符开头。</li>\n<li>只有在同一 crate 中才能使用<code>crate::</code>关键字为起始的绝对路径。</li>\n<li>模块不仅对你组织代码很有用。它们还定义了 Rust 的私有性边界：这条界限不允许外部代码了解、调用和依赖被封装的实现细节。</li>\n<li>Rust 中默认所有项(函数、方法、结构体、枚举、模块、和常量）都是私有的。</li>\n<li>项是指：函数、方法、结构体、枚举、模块和常量。</li>\n<li>父模块中的项不能使用子模块中的私有项，但是子模块可以使用它们父模块中的项。</li>\n<li>Rust 通过这种方式来实现模块系统功能，因此隐藏内部实现细节，这样你就知道可以更改内部代码的哪部分而不会破坏外部代码。</li>\n<li>可以使用<code>super</code>开头来构建父模块开始的相对路径。类似于文件系统的<code>..</code>语法。</li>\n<li>如果请偶们将枚举设置为公有，则它的所有成员都将变为共有。</li>\n<li>在作用域中增加<code>use</code>类似于在文件系统中创建软连接。</li>\n<li>使用<code>use</code>引入结构体、枚举和其他项时，习惯是指定它们的完整路径。</li>\n<li>使用<code>use</code>将两个同名类型引入同意作用域的一个解决办法：在类型后面使用<code>as</code>指定一个新的本地名称或者别名。</li>\n<li><code>use std::&#123;cmp::Ordering, io&#125;;</code>使用嵌套路径减少 use 的使用。</li>\n<li><code>use std::io:*</code> 将<code>std::io</code>中定义的所有公有项引入当前作用域。使用时要多加小心，常用于测试模块<code>tests</code>中。</li>\n<li>Rust 将 package 分成多个 crate，将 crate 分成模块，通过绝对或相对路径从一个模块引用另一个模块。</li>\n<li>Cargo 提供了叫工作空间<code>workspaces</code>的功能，它可以帮助我们管理多个相关的协同开发的包。</li>\n<li>工作空间是一系列共享同样的 cargo.lock 和输出目录的包。</li>\n<li>工作空间顶级目录中的 Cargo.toml 中不包含<code>[package]</code>等信息，相反，它以<code>[workspace]</code>部分作为开始。</li>\n<li>工作空间在顶级目录有一个<code>target</code>目录，<code>member</code>并没有自己的 target 目录。通过共享的 target 目录，工作空间可以避免其他 crate 多余的重复构建。</li>\n<li>cargo 不假定工作空间中的 crates 包会相互依赖，所以需要明确表明工作空间中 crate 包的依赖关系。一个包用到了其他包，需要在该包的 Cargo.toml 文件<code>[dependencies]</code>域中加入依赖</li>\n<li>工作空间只在根目录有一个 Cargo.lock，而不是在每一个 crate（就当是 packge)目录都有 Cargo.lock。这确保了所有的 crate 都使用完全相同版本的依赖。也节省了空间，避免多个拷贝。</li>\n<li>Cargo 有一个机制来确保任何人在任何时候重新构建代码，都会产生相同的结果：Cargo 只会使用你指定的依赖版本，除非你又手动指定了别的。</li>\n</ol>\n<h2 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21820917\">类型大小</a></li>\n<li>Rust 中有一个重要的 trait Sized，可以用于区分一个类型是不是 DST。所有的 DST 类型都不满足 Sized 约束。我们可以在泛型约束中使用 Sized、!Sized、?Sized 三种写法。</li>\n<li>Rust 还支持 0 大小类型（Zero Sized Type）。 () 类型和空结构体类型，都是 0 大小类型。</li>\n</ol>\n<h2 id=\"Ownership-所有权\"><a href=\"#Ownership-所有权\" class=\"headerlink\" title=\"Ownership 所有权\"></a>Ownership 所有权</h2><ol>\n<li>区分值(内存)和变量。</li>\n<li>所有权是指： 每一个值都只有一个所有者（变量）, 当变量离开作用于时，值被丢弃。</li>\n<li>当变量离开作用域，Rust 为我们调用一个特殊的函数 drop。在 C++ 中，这种 item 在生命周期结束时释放资源的模式有时被称作 资源获取即初始化（Resource Acquisition Is Initialization (RAII)）。</li>\n<li><code>move:</code> <code>let s1 = String::from(&quot;hello&quot;); let s2 = s1;</code> 这个操作被称为移动（move），而不是浅拷贝。Rust 则认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。</li>\n<li>Rust 永远也不会自动创建数据的 “深拷贝”。因此，任何 自动 的复制可以被认为对运行时性能影响较小。</li>\n<li><code>clone:</code> 当出现 clone 调用时，你知道一些特定的代码被执行而且这些代码可能相当消耗资源</li>\n<li><code>copy:</code> <code>let x = 5; let y = x;</code> x 在栈上，copy 操作。Rust 有一个叫做 Copy trait 的特殊注解，可以用在类似整型这样的存储在栈上的类型上。</li>\n<li>如果一个类型拥有 Copy trait，一个旧的变量在将其赋值给其他变量后仍然可用。如 String 没有实现 Copy trait, i32 实现了。</li>\n<li>Copy and Clone: Copy 是隐性调用，Clone 显性。 Copies happen implicitly, for example as part of an assignment y &#x3D; x. The behavior of Copy is not overloadable; it is always a simple bit-wise copy. Cloning is an explicit action, x.clone()</li>\n<li><a href=\"https://doc.rust-lang.org/beta/std/marker/trait.Copy.html\">link</a> Clone is a supertrait of Copy, so everything which is Copy must also implement Clone. If a type is Copy then its Clone implementation only needs to return *self</li>\n<li>Rust 不允许自身或其任何部分实现了 Drop trait 的类型使用 Copy trait。</li>\n<li>任何简单标量值的组合可以是 Copy 的，不需要分配内存或某种形式资源的类型是 Copy 的。</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);  <span class=\"comment\">// s 进入作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">takes_ownership</span>(s);             <span class=\"comment\">// s 的值移动到函数里 ...</span></span><br><span class=\"line\">                                    <span class=\"comment\">// ... 所以到这里不再有效</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;                      <span class=\"comment\">// x 进入作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">makes_copy</span>(x);                  <span class=\"comment\">// x 应该移动函数里，</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 但 i32 是 Copy 的，所以在后面可继续使用 x</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以不会有特殊操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">takes_ownership</span>(some_string: <span class=\"type\">String</span>) &#123; <span class=\"comment\">// some_string 进入作用域</span></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">makes_copy</span>(some_integer: <span class=\"type\">i32</span>) &#123; <span class=\"comment\">// some_integer 进入作用域</span></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, some_integer);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 这里，some_integer 移出作用域。不会有特殊操作</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它。当持有堆中数据值的变量离开作用域时，其值将通过 drop 被清理掉，除非数据被移动为另一个变量所有。</li>\n<li>将获取引用作为函数参数称为 借用（borrowing）。</li>\n<li>可变引用有一个很大的限制：在特定作用域中的特定数据只能有一个可变引用。</li>\n<li>也不能在拥有不可变引用的同时拥有可变引用。</li>\n<li>Rust 中编译器确保引用永远也不会变成悬垂状态：当你拥有一些数据的引用，编译器确保数据不会在其引用之前离开作用域。</li>\n<li>在任意给定时间，要么 只能有一个可变引用，要么 只能有多个不可变引用。</li>\n<li><code>另一个没有所有权的数据类型是 slice(部分引用 &amp;[T])。slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合</code>。</li>\n<li>“字符串 slice” 的类型声明写作 &amp;str, 字符串字面值就是 slice</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/76945648\">胖指针</a></li>\n</ol>\n<h2 id=\"Enums-枚举-and-模式匹配\"><a href=\"#Enums-枚举-and-模式匹配\" class=\"headerlink\" title=\"Enums 枚举 and 模式匹配\"></a>Enums 枚举 and 模式匹配</h2><ol>\n<li>枚举允许你通过列举可能的 成员（variants） 来定义一个类型</li>\n<li>用枚举替代结构体还有另一个优势：每个成员可以处理不同类型和数量的数据。</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">IpAddr</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">V4</span>(<span class=\"type\">u8</span>, <span class=\"type\">u8</span>, <span class=\"type\">u8</span>, <span class=\"type\">u8</span>),</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">V6</span>(<span class=\"type\">String</span>),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">home</span> = IpAddr::<span class=\"title function_ invoke__\">V4</span>(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">loopback</span> = IpAddr::<span class=\"title function_ invoke__\">V6</span>(<span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;::1&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>结构体和枚举还有另一个相似点：就像可以使用 impl 来为结构体定义方法那样，也可以在枚举上定义方法</li>\n<li><code>Option</code> 类型应用广泛因为它编码了一个非常普遍的场景，即一个值要么有值要么没值。</li>\n<li>Rust 并没有空值，不过它确实拥有一个可以编码存在或不存在概念的枚举。这个枚举是 Option<T>，而且它定义于标准库中，如下:</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Option</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(T),</span><br><span class=\"line\">    <span class=\"literal\">None</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Option<T> 枚举是如此有用以至于它甚至被包含在了 prelude 之中，你不需要将其显式引入作用域。另外，它的成员也是如此，可以不需要 Option:: 前缀来直接使用 Some 和 None。即便如此 Option<T> 也仍是常规的枚举，Some(T) 和 None 仍是 Option<T> 的成员。</li>\n<li>只要一个值不是 Option<T> 类型，你就可以安全的认定它的值不为空。</li>\n<li>Rust 有一个叫做 match 的极为强大的控制流运算符，它允许我们将一个值与一系列的模式相比较，并根据相匹配的模式执行相应代码。模式可由字面值、变量、通配符和许多其他内容构成</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Coin</span> &#123;</span><br><span class=\"line\">    Penny,</span><br><span class=\"line\">    Nickel,</span><br><span class=\"line\">    Dime,</span><br><span class=\"line\">    Quarter,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">value_in_cents</span>(coin: Coin) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">u8</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">match</span> coin &#123;</span><br><span class=\"line\">        Coin::Penny =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        Coin::Nickel =&gt; <span class=\"number\">5</span>,</span><br><span class=\"line\">        Coin::Dime =&gt; <span class=\"number\">10</span>,</span><br><span class=\"line\">        Coin::Quarter =&gt; <span class=\"number\">25</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>对于 if, 表达式必须返回一个布尔值，而 match 可以是任何类型的。</li>\n<li>一个分支有两个部分：一个模式和一些代码。第一个分支的模式是值 Coin::Penny 而之后的 &#x3D;&gt; 运算符将模式和将要运行的代码分开。这里的代码就仅仅是值 1。每一个分支之间使用逗号<code>,</code>分隔。</li>\n<li>如果想要在分支中运行多行代码，可以使用大括号<code>&#123;&#125;</code>。</li>\n<li>匹配 Option<T>:</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">plus_one</span>(x: <span class=\"type\">Option</span>&lt;<span class=\"type\">i32</span>&gt;) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;<span class=\"type\">i32</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">match</span> x &#123;</span><br><span class=\"line\">        <span class=\"literal\">None</span> =&gt; <span class=\"literal\">None</span>,</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Some</span>(i) =&gt; <span class=\"title function_ invoke__\">Some</span>(i + <span class=\"number\">1</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">five</span> = <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">six</span> = <span class=\"title function_ invoke__\">plus_one</span>(five);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">none</span> = <span class=\"title function_ invoke__\">plus_one</span>(<span class=\"literal\">None</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Rust 中的匹配是 穷尽的（exhaustive）：必须穷举到最后的可能性来使代码有效。</li>\n<li><code>_</code>通配符：</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">some_u8_value</span> = <span class=\"number\">0u8</span>;</span><br><span class=\"line\"><span class=\"keyword\">match</span> some_u8_value &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;one&quot;</span>),</span><br><span class=\"line\">    <span class=\"number\">3</span> =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;three&quot;</span>),</span><br><span class=\"line\">    <span class=\"number\">5</span> =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;five&quot;</span>),</span><br><span class=\"line\">    <span class=\"number\">7</span> =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;seven&quot;</span>),</span><br><span class=\"line\">    _ =&gt; (),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>if let 语法让我们以一种不那么冗长的方式结合 if 和 let，来处理只匹配一个模式的值而忽略其他模式的情况。</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">some_u8_value</span> = <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">0u8</span>);</span><br><span class=\"line\"><span class=\"keyword\">match</span> some_u8_value &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">3</span>) =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;three&quot;</span>),</span><br><span class=\"line\">    _ =&gt; (),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(<span class=\"number\">3</span>) = some_u8_value &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;three&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用 if let 意味着编写更少代码，更少的缩进和更少的样板代码。然而，这样会失去 match 强制要求的穷尽性检查。match 和 if let 之间的选择依赖特定的环境以及增加简洁度和失去穷尽性检查的权衡取舍。</li>\n<li>可以在 if let 中包含一个 else。else 块中的代码与 match 表达式中的 _ 分支块中的代码相同</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">count</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Coin</span>::<span class=\"title function_ invoke__\">Quarter</span>(state) = coin &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;State quarter from &#123;:?&#125;!&quot;</span>, state);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    count += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>如果你的程序遇到一个使用 match 表达起来过于啰嗦的逻辑，记住 if let 也在你的 Rust 工具箱中。</li>\n</ol>\n<h2 id=\"常见集合-collections\"><a href=\"#常见集合-collections\" class=\"headerlink\" title=\"常见集合 collections\"></a>常见集合 collections</h2><ol>\n<li>不同于内建的数组和元组类型，这些集合指向的数据是储存在堆上的，这意味着数据的数量不必在编译时就已知，并且还可以随着程序的运行增长或缩小。</li>\n<li>vector 允许我们在一个单独的数据结构中储存多于一个的值，它在内存中彼此相邻地排列所有的值。vector 只能储存相同类型的值。</li>\n<li><code>let v: Vec&lt;i32&gt; = Vec::new();</code> 创建空的 vector</li>\n<li>为了方便 Rust 提供了 vec! 宏。这个宏会根据我们提供的值来创建一个新的 Vec。<code>let v = vec![1, 2, 3];</code></li>\n<li>对于新建一个 vector 并向其增加元素，可以使用 push 方法</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">v</span> = <span class=\"type\">Vec</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">v.<span class=\"title function_ invoke__\">push</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">v.<span class=\"title function_ invoke__\">push</span>(<span class=\"number\">6</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>访问 vector 中一个值的两种方式，索引语法或者 get 方法：</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">v</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">third</span>: &amp;<span class=\"type\">i32</span> = &amp;v[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The third element is &#123;&#125;&quot;</span>, third);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">match</span> v.<span class=\"title function_ invoke__\">get</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(third) =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The third element is &#123;&#125;&quot;</span>, third),</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;There is no third element.&quot;</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用 &amp; 和 [] 返回一个引用；或者使用 get 方法以索引作为参数来返回一个 Option&lt;&amp;T&gt;。</li>\n</ol>\n<h2 id=\"Error-Handling-错误处理\"><a href=\"#Error-Handling-错误处理\" class=\"headerlink\" title=\"Error Handling 错误处理\"></a>Error Handling 错误处理</h2><ol>\n<li>当函数返回为 Result 时: <code>?</code>运算符放在 Result 之后的含义：如果 Result 的值是 Ok，这个表达式将会返回 Ok 中的值而程序继续执行，如果是 Err，Err 中的值将作为整个函数的返回值，就好像使用了 return 关键字一样，这样错误值就被传递给调用者。</li>\n<li><code>cargo clippy</code> 报更多的错误</li>\n<li>Rust 将错误组合成两个主要类别，可恢复错误和不可恢复错误。</li>\n<li>可恢复错误通常代表向用户报告错误和重试操作是合理的情况，比如未找到文件。</li>\n<li>不可恢复错误通常是 Bug 的同义词，比如访问超过数组结尾的位置。</li>\n<li>大部分语言并不区分这两类错误，并采用类似异常这样方式统一处理他们。</li>\n<li>Rust 没有异常，但是有可恢复错误<code>Result&lt;T, E&gt;</code>和不可恢复错误<code>panic!</code></li>\n<li>执行 Rust 的<code>panic!</code>宏时，程序会打印出一个错误信息，展开并清理栈数据，然后接着退出。</li>\n<li>出现 panic 时，程序默认是<code>展开(unwinding)</code>，这意味着 Rust 会回溯栈并清理它遇到的每一个函数的数据。另一种选择是<code>终止(abort)</code>，这回不清理数据就退出程序。可以在 Cargo.toml 的[profile]部分增加<code>panic = &#39;abort&#39;</code>，可以由展开切换为终止。</li>\n<li>使用<code>RUST_BACKTRACE</code>环境变量运行程序会得到一个 backtrace，backtrace 是一个执行到目前位置所有被调用的函数的列表。</li>\n<li>Rust 的 backtrace 跟其他语言一样：阅读 backtrace 的<code>关键</code>是<code>从头开始读直到发现你自己编写的代码</code>，这就是问题的根源。<code>这一行往上是你的代码所调用的代码，往下则是调用你的代码的代码(栈)</code></li>\n<li>为了获取带有详细信息的 backtrace，<code>必须是debug模式</code></li>\n<li>Result 枚举的定义。<code>enum Result&lt;T, E&gt; &#123; Ok(T), Err(E), &#125;</code>，其中<code>T</code>代表返回的<code>Ok</code>成员中的<code>数据类型</code>，而<code>E</code>代表失败是返回<code>Err</code>成员中的错误的类型。</li>\n<li>Result 常与 match 进行联合使用</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::fs::File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">f</span> = File::<span class=\"title function_ invoke__\">open</span>(<span class=\"string\">&quot;hello.txt&quot;</span>); <span class=\"comment\">// f值是Ok(file)或者是Err(error)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">f</span> = <span class=\"keyword\">match</span> f &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Ok</span>(file) =&gt; file,</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(error) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic!</span>(<span class=\"string\">&quot;Problem opening the file: &#123;:?&#125;&quot;</span>, error)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>unwrap</code>函数作用于 Result，如果 Result 的值是成员 OK，unwrap 会返回 Ok 中的值，如果是成员 Err，unwrap 会为我们调用<code>panic!</code></li>\n<li><code>expect</code>与<code>unwrap</code>使用方式一样，<code>expect</code>用来调用<code>panic!</code>的错误信息将会作为参数传递给<code>expect</code>，而不像<code>unwrap</code>那样使用默认的<code>panic!</code>信息。<code>expect</code>更容易查找错误信息位置。</li>\n<li>每一个 Result 都需要被处理，否则会出现警告。</li>\n</ol>\n<h2 id=\"Lifetimes-生命周期\"><a href=\"#Lifetimes-生命周期\" class=\"headerlink\" title=\"Lifetimes 生命周期\"></a>Lifetimes 生命周期</h2><ol>\n<li><a href=\"https://skyline75489.github.io/post/2017-7-27_rust_mm.html\">link</a> rust 生命周期包含变量和引用，C++ RAII 主要是变量的生命周期管理，引用除了 smart pointer C++不负责检查引用的对象是否存在</li>\n<li>生命周期的目的是<strong>避免悬垂指针</strong>. 生命周期帮助编译器执行一个简单的规则：引用不应该活得比所指对象长(no reference should outlive its referent)。</li>\n<li>生命周期之所以如此令人困惑，其部分原因在于 Rust 的很多写作中，生命周期这个词被宽泛地用来指代三种不同的东西——<code>变量真实的生命周期、生命周期约束和生命周期标注</code>。 <a href=\"https://juejin.cn/post/6862976475860041741\">link</a></li>\n<li>只是用来检查生命周期关系，不影响生命周期</li>\n<li>Lifetime annotations don’t change how long any of the references live. Lifetime annotations describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes.</li>\n<li>One lifetime annotation by itself doesn’t have much meaning,</li>\n<li><code>longest&lt;&#39;a&gt;(x: &amp;&#39;a str, y: &amp;&#39;a str) -&gt;&amp;&#39;a str</code> 它的实际含义是 longest 函数保证返回的引用的生命周期与传入该函数的引用的生命周期的较小者一致（x 作用域和 y 作用域重叠的那一部分）。并没有改变传入值或返回值的生命周期，而是指出任何不满足这个约束条件的值都将被借用检查器拒绝。</li>\n<li><code>struct Test&lt;&#39;a&gt; &#123; part: &amp;&#39;a str, &#125;</code> Test 的实例不能比 part 字段中的引用存在的更久，Test 实例应先离开作用域。（后定义的存在的应更短）</li>\n<li>每一个<code>引用</code>都有一个生命周期，我们需要为那些使用了引用的函数或者结构体指定生命周期。</li>\n<li>只有引用才需要指定生命周期。</li>\n<li>函数或方法的参数的生命周期被称为输入生命周期，二返回的生命周期被成为输出生命周期。</li>\n<li>函数或方法生命周期省略规则，需满足下面三条且无冲突</li>\n</ol>\n<ul>\n<li>每一个输入参数都有自己的生命周期参数</li>\n<li>如果只有一个输入周期，那么它将被赋予所有的输出生命周期参数</li>\n<li>如果有多个输入生命周期且其中一个是<code>&amp;self</code>或者<code>&amp;mut self</code>(说明是个对象的方法）；那么所有的输出生命周期参数将被赋予<code>self</code>的生命周期。</li>\n</ul>\n<ol start=\"12\">\n<li>生命周期省略简记：</li>\n</ol>\n<ul>\n<li>只有一个输入参数</li>\n<li>有多个输入且其中一个是<code>&amp;self</code></li>\n</ul>\n<ol start=\"13\">\n<li>Rust 中 struct 和其方法未封装到一起，C++相当于将 struct 和方法封装到类中。C 也有 struct 和函数，但不具有 trait 或接口功能。</li>\n<li>方法签名中，<code>&amp;self</code> 来替代 <code>rectangle: &amp;Rectangle</code>，因为该方法位于<code>impl Rectangle</code>上下文中，所以 Rust 知道<code>self</code>类型是<code>Rectangle</code></li>\n<li><code>impl</code>不以<code>self</code>作为参数的函数，被称为关联函数。是函数不是方法。(类似 C++的静态函数）)</li>\n<li><code>self</code>是 keyword. 方法中如果想改名字，可以这样传参<code>self1: &amp;Rectangle</code></li>\n<li>方法定义中的生命周期注解应用于关联函数，方法（含有<code>&amp;self</code>)可省略。</li>\n<li>静态生命周期： <code>&#39;static</code>，其生命周期能够存活于整个程序期间。所有的字符串字面值都拥有<code>&#39;static</code>生命周期。</li>\n<li>生命周期也是泛型<code>test&lt;&#39;a, T&gt;(x: &amp;&#39;a str, y: &amp;&#39;a str, ann: T) -&gt; &amp;&#39;a str where T: Display</code> 因为生命周期也是泛型，所以<code>&#39;a</code>和泛型参数<code>T</code>都位于函数名后的同一尖括号列表中。</li>\n<li>PhantomData Zero-sized type used to mark things that “act like” they own a T. 用在 ffi 封装指针上。</li>\n<li><code>fn longest&lt;&#39;a&gt;(x: &amp;&#39;a str, y: &amp;&#39;a str) -&gt; &amp;&#39;a str </code> 当具体的引用被传递给 longest 时，被 ‘a 所替代的具体生命周期是 x 的作用域与 y 的作用域相重叠的那一部分。</li>\n</ol>\n<h2 id=\"Traits\"><a href=\"#Traits\" class=\"headerlink\" title=\"Traits\"></a>Traits</h2><ol>\n<li>trait object 用来实现泛型函数里动他分发</li>\n<li>Trait Object，表现为 &amp;dyn Trait (无所有权） 或者 Box<dyn Trait>（有所有权）。</li>\n<li>在 Rust 里，类型的行为是通过 Trait 来赋予的，几乎所有的数据结构都实现了一个到多个 Trait。泛型编程时只有指定 trait bound(限制)才能使用接口。</li>\n<li>Rust 可以同时支持“静态分派(static dispatch)”和“动态分派(dynamic dispatch)”</li>\n<li>利用泛型：编译器会根据实际调用参数的类型不同，直接生成不同的函数版本，类似 C++ 的 template 一样。通过泛型函数实现的“多态”，是在编译阶段就已经确定好了调用哪个版本的函数，因此被称为“静态分派”。</li>\n<li>Rust 中的“动态分派”靠 Trait Object 来完成。</li>\n<li>指向 trait 的指针就是 Trait Object。如 Box<dyn Bird>.</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/23791817\">Object Safe</a>: 以下条件下 Trait Object 是无法构造出来：<ul>\n<li>当 trait 有 Self:Sized 约束时</li>\n<li>当函数中有 Self 类型作为参数或者返回类型时</li>\n<li>当函数第一个参数不是 self 时</li>\n<li>当函数有泛型参数时</li>\n</ul>\n</li>\n<li>使用工厂模式时， 如果 trait 返回 Self，例如：fn get(&amp;self) -&gt; Self; <code>fn get(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn InfoManager&gt;; </code> <a href=\"https://users.rust-lang.org/t/boxed-self-in-a-trait-method/1742/2\">link</a></li>\n<li>Rust 的动态分派，和 C++的动态分派，内存布局有所不同。在 C++里，如果一个类型里面有虚函数，那么每一个这种类型的变量，内部都包含一个指向虚函数表的地址。而在 Rust 里面，对象本身不包含指向虚函数表的指针，这个指针是存在于 trait object 指针里面。<code>如果一个类型实现了多个 trait，那么不同的 trait object 指向的虚函数表也不一样</code>。</li>\n<li>You can implement traits for types you didn’t define, whereas interfaces can only be implemented for your own classes.</li>\n<li><code>孤儿规则</code>(orphan rule)，简称 OR：”当你为某类型实现某 trait 的时候，必须要求类型或者 trait 至少有一个是在当前 crate 中定义的。 你不能为第三方的类型实现第三方的 trait 。</li>\n<li>Trait Object 的底层逻辑不过就是胖指针（fat pointer） —— 一个包含两个指针的数据结构。其中，一个指针指向数据本身，另一个则指向虚函数表（vtable）。在这张表里，包含具体类型的一些信息，如 size，aligment 以及一系列函数指针：<a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&mid=2649829038&idx=1&sn=b9459537ff93d2aee56b822d09d6a80a&chksm=8704acb2b07325a4a9c46f0bbac3df2db2fadeb2b7928e3949072f01df0d975eaecb36a6e8dd&scene=178&cur_album_id=1701598373151047686#rd\">link</a></li>\n</ol>\n<h2 id=\"Generic-Types-泛型\"><a href=\"#Generic-Types-泛型\" class=\"headerlink\" title=\"Generic Types 泛型\"></a>Generic Types 泛型</h2><ol start=\"3\">\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&mid=2649829038&idx=1&sn=b9459537ff93d2aee56b822d09d6a80a&chksm=8704acb2b07325a4a9c46f0bbac3df2db2fadeb2b7928e3949072f01df0d975eaecb36a6e8dd&scene=178&cur_album_id=1701598373151047686#rd\">透过 Rust 探索系统的本原：泛型</a></li>\n<li>泛型编程，与其说是一种技术，不如说是一种思想。它不仅仅是类型参数化，函数泛型化那么简单，背后体现的是程序员的抽象思维能力。抽象思维的能力，和语言无关，和工具无关，它是一种在实践中不断探索，不断学习，不断历练得出的能力。支持泛型的语言并不能帮助你更好地做泛型编程，就好比给我一台斯坦威钢琴，并不意味着我就具备了演奏李斯特《钟》的能力。</li>\n<li>定义数据结构时： 参数化类型（Parameterized Type）</li>\n<li>定义函数时： 泛型函数（Generic Function）</li>\n<li>泛型函数: 静态分派（static dispatch 泛型为具体类型 T）和动态分派（dynamic dispatching 泛型为 trait object）</li>\n<li>编译器在编译时就能捕获到使用的类型，从而进行对应的处理，这被称之为静态分派（static dispatch）。</li>\n<li><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SER9L29WQ0icrEMnzjvMNTzSZbaPboUnMUFBia3wHebkuX9e6Ah70g3CKC9v8bVicGeGJEq0Dd38AnesVU5ffXmdg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"静态分派和动态分派\"></li>\n</ol>\n<h2 id=\"Iterators-and-Closures-迭代器与闭包\"><a href=\"#Iterators-and-Closures-迭代器与闭包\" class=\"headerlink\" title=\"Iterators and Closures 迭代器与闭包\"></a>Iterators and Closures 迭代器与闭包</h2><ol>\n<li>函数式编程：包含将函数作为参数值或其他函数的返回值，将函数赋值给变量以供之后执行等等。</li>\n<li>闭包：一个可以储存在变量里的类似函数的结构</li>\n<li>迭代器：一种处理元素序列的方式。</li>\n<li>Rust 的闭包是可以保存进变量或作为参数传递给其他函数的匿名函数（可以捕获环境的匿名函数）。可以在一个地方创建闭包，然后在不同的上下文中执行闭包运算。</li>\n<li>不同于函数，闭包允许捕获调用者作用域的值。</li>\n<li>在程序的一个位置指定某些代码，并只在程序的某处实际需要结果的时候执行这些代码。这正式闭包的用武之地。</li>\n<li>闭包通常很短，并只关联于小范围的上下文而非任意情境。在有限的上下文中，编译器能可靠的推断参数和返回值的类型。</li>\n<li>闭包语法：<code>let test = |num1, num2| &#123; println(&quot;num1: &#123;&#125;&quot;,num1); num2 + 1 &#125;;</code> <code>|num1, num2|</code>是参数，<code>num2+1</code>是返回值。<code>let</code>表明<code>tet</code>是一个匿名函数的定义。不是调用匿名函数的返回值。<code>test</code>存储的是代码。</li>\n<li>带类型注解的闭包 <code>let test = |num1: u32, num2: u32| -&gt; u32 &#123; println(&quot;num1: &#123;&#125;&quot;,num1); num2 + 1 &#125;;</code></li>\n<li>如果闭包体只有一行则大括号可以省略。例如： <code>let add_one = |x| x+1;</code></li>\n<li>如果调用多次闭包，编译器会根据第一次使用时的参数类型，如果对同一闭包使用不同类型会得到类型错误。</li>\n<li>…</li>\n<li></li>\n<li></li>\n<li>迭代器负责遍历序列中的灭一项和决定序列何时结束的逻辑。</li>\n<li>迭代器是惰性的，在调用方法使用之前它都不会有效果。</li>\n<li>迭代器的实现方式提供了对多种不同的序列使用相同逻辑的灵活性，减少了重复代码并消除了潜在的混乱。</li>\n<li>迭代器都实现了定义于标准库的 trait <code>Iterator</code>。包含<code>next</code>方法。</li>\n<li>迭代器的<code>sum</code>方法返回迭代的次数，会消费适配器。迭代器调用<code>sum</code>方法后不再允许使用迭代器，因为<code>sum</code>会获取迭代器所有权。</li>\n<li>迭代器的方法：<code>迭代器适配器(iterator adaptors)</code> 允许将迭代器变为不同类型的迭代器。</li>\n<li><code>v1.iter().map(|x| x+1);</code>迭代器适配器方法<code>map</code>使用闭包来调用每个元素以生成新的迭代器。这里的闭包创建了一个新的迭代器，对其中 vector 中的每个元素都被加 1。因为迭代器适配器是惰性的，这里需要消费迭代器。</li>\n<li><code>collect</code>方法会消费迭代器并将结果收集到一个数据结构中。</li>\n<li>下面例子会调用<code>map</code>方法创建一个新的迭代器，接着调用<code>collect</code>方法消费新迭代器并创建一个 vector。</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">v1</span>: <span class=\"type\">Vec</span>&lt;<span class=\"type\">i32</span>&gt; = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">v2</span>: <span class=\"type\">Vec</span>&lt;_&gt; = v1.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|x| x + <span class=\"number\">1</span>).<span class=\"title function_ invoke__\">collect</span>();</span><br><span class=\"line\"><span class=\"built_in\">assert_eq!</span>(v2, <span class=\"built_in\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Smart-Pointers-智能指针\"><a href=\"#Smart-Pointers-智能指针\" class=\"headerlink\" title=\"Smart Pointers 智能指针\"></a>Smart Pointers 智能指针</h2><ol>\n<li>指针是一个包含内存地址的变量的通用概念，这个地址指向一些其他数据。</li>\n<li>Rust 最常见的指针是引用，他们没有任何额外的开销，所以应用的最多。</li>\n<li><code>智能指针(smart pointers)</code>是一类数据结构，它们的表现类似指针，但是也拥有额外的元数据和功能。</li>\n<li><code>引用计数(reference counting)</code> 是智能指针类型，其允许数据有多个所有者。引用计数智能指针记录总共有多少个所有者，并当没有任何所有者时负责清理数据。</li>\n<li>在 Rust 中，普通引用和智能指针的一个额外的区别是引用是一类只借用数据的指针；相反，在大部分情况下，智能指针拥有他们指向的数据。</li>\n<li>智能指针通常使用结构体实现。</li>\n<li>智能指针区别于常规结构体的显著特性在于其实现了<code>Deref</code>和<code>Drop</code>trait。</li>\n<li><code>Deref</code> trait 允许智能指针结构体实例表现的像引用一样，这样就可以编写既用于引用，又用于智能指针的代码。</li>\n<li><code>Drop</code> trait 允许我们自定义当智能指针离开作用域时运行的代码。</li>\n<li>很多库都拥有自己的智能指针而你也可以编写属于你的智能指针。</li>\n<li><code>Box&lt;T&gt;</code>用于在堆上分配值。</li>\n<li><code>Rc&lt;T&gt;</code>一个引用计数类型，其数据可以有多个所有者。</li>\n<li><code>Ref&lt;T&gt;</code>和<code>RefMut&lt;T&gt;</code>通过<code>RefCell&lt;T&gt;</code>访问。</li>\n<li>最简单直接的智能指针是<code>box</code>，其类型是<code>Box&lt;T&gt;</code>，box 允许你将一个值放在堆上而不是栈上，留在栈上的则是指向堆数据的指针。</li>\n<li>除了数据被存储在堆上而不是栈上之外，box 没有性能损失，不过也没有很多额外的功能。多用于<ul>\n<li>当有一个在编译时未知大小的类型，而又想要在需要确切大小的上下文中使用这个类型值的时候。（box 作为链表的指针实现链表）</li>\n<li>当有大量数据并希望在确保数据不被拷贝的情况下转移所有权的时候。</li>\n<li>当希望拥有一个值并只关心它的类型是否实现了特定 trait 而不是具体类型的时候</li>\n</ul>\n</li>\n<li><code>Box&lt;T&gt;</code>类型是一个只能智能指针，因为它实现了<code>Deref</code>trait，它允许<code>Box&lt;T&gt;</code>的值被当做引用对待。</li>\n<li>变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它。当持有堆中数据值的变量离开作用域时，其值将通过 drop 被清理掉，除非数据被移动为另一个变量所有。</li>\n<li>&amp; 符号就是 引用，允许你使用值但不获取其所有权。</li>\n<li>我们将获取引用作为函数参数称为 借用（borrowing）。</li>\n</ol>\n<h2 id=\"AsRef-and-Deref\"><a href=\"#AsRef-and-Deref\" class=\"headerlink\" title=\"AsRef and Deref\"></a>AsRef and Deref</h2><ol>\n<li>Deref is different from the other two: one type can only be derefed to one target type, and *d always has the same type.</li>\n<li>Borrow and AsRef both give a reference to the underlying data, but Borrow requires that the original type and the borrowed type have the same behavior, while AsRef does not have the same requirement.</li>\n<li>当我们在示例中输入 _y 时，Rust 事实上在底层运行了如下代码：<code>_(y.deref()) </code> Rust 将 * 运算符替换为先调用 deref 方法再进行普通解引用的操作，如此我们便不用担心是否还需手动调用 deref 方法了。Rust 的这个特性可以让我们写出行为一致的代码，无论是面对的是常规引用还是实现了 Deref 的类型。</li>\n<li>解引用强制多态（deref coercions）是 Rust 在函数或方法传参上的一种便利。其将实现了 Deref 的类型的引用转换为原始类型通过 Deref 所能够转换的类型的引用。当这种特定类型的引用作为实参传递给和形参类型不同的函数或方法时，解引用强制多态将自动发生。这时会有一系列的 deref 方法被调用，把我们提供的类型转换成了参数所需的类型。</li>\n<li>解引用强制多态的加入使得 Rust 程序员编写<code>函数和方法</code>调用时无需增加过多显式使用 &amp; 和 * 的引用和解引用。这个功能也使得我们可以编写更多同时作用于引用或智能指针的代码。</li>\n<li><a href=\"https://wiki.jikexueyuan.com/project/rust-primer/intoborrow/deref.html\">deref</a></li>\n</ol>\n<h2 id=\"Concurrency-并发\"><a href=\"#Concurrency-并发\" class=\"headerlink\" title=\"Concurrency 并发\"></a>Concurrency 并发</h2><h2 id=\"Asynchronous-Programming\"><a href=\"#Asynchronous-Programming\" class=\"headerlink\" title=\"Asynchronous Programming\"></a>Asynchronous Programming</h2><ol>\n<li>async function 是一种 promise(sender). promise 调用 await 时，执行并返回 future(reciever).</li>\n</ol>\n<h2 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h2><ol>\n<li>主要作用： makes it possible for a thread to continue doing useful work while it waits for the value to become available. 例如：IO DMA</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/107820568\">深入浅出 Tokio</a></li>\n<li><a href=\"https://www.cnblogs.com/mhq-martin/p/9035640.html\">同步异步，阻塞非阻塞区别</a></li>\n<li>同步异步区别是在调用一个功能时，没得到<code>结果</code>之前，是否继续后续操作</li>\n<li>阻塞非阻塞区别是<code>线程/程序</code>在等待调用结果时，是否一直等待（挂起当前线程）</li>\n<li>阻塞和非阻塞关注的是程序在<code>等待调用结果</code>（消息，返回值）时的<code>状态</code>.</li>\n<li>进程线程锁是用来同步的，lock()函数是阻塞式，不拿到锁不返回，线程被阻塞。try_lock()是非阻塞式的，如果拿不到锁也返回。</li>\n<li>异步是目的，而多线程是实现这个目的的方法</li>\n<li>Async&#x2F;Await is a paradigm that is orthogonal to threading, which means that it has the potential to run tasks on a single thread OR on multiple threads depending on the executor that is used.</li>\n<li>async&#x2F;await 与多线程 <a href=\"https://qvault.io/rust/concurrency-in-rust-can-it-stack-up-against-gos-goroutines/\">link</a></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> async_std::task;</span><br><span class=\"line\"><span class=\"keyword\">use</span> futures::executor::block_on;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::time::Duration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">future</span> = <span class=\"title function_ invoke__\">async_main</span>();</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">block_on</span>(future); <span class=\"comment\">// 执行器单线程执行，总共需要15秒，多线程可能就快很多</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">async_main</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">print_for_five</span>(<span class=\"string\">&quot;await&quot;</span>).<span class=\"keyword\">await</span>; <span class=\"comment\">// await: function 阻塞</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">async_one</span> = <span class=\"title function_ invoke__\">print_for_five</span>(<span class=\"string\">&quot;async 1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">async_two</span> = <span class=\"title function_ invoke__\">print_for_five</span>(<span class=\"string\">&quot;async 2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    futures::join!(async_one, async_two);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">print_for_five</span>(msg: &amp;<span class=\"type\">str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// task::sleep(Duration::from_secs(1)).await; //async 1, 2 循环执行，task await会异步阻塞</span></span><br><span class=\"line\">        std::thread::<span class=\"title function_ invoke__\">sleep</span>(std::time::Duration::<span class=\"title function_ invoke__\">from_secs</span>(<span class=\"number\">1</span>)); <span class=\"comment\">//执行器单线程时顺序执行，因为不会阻塞</span></span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;one second has passed: &#123;&#125;&quot;</span>, msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-Oriented-面向对象\"><a href=\"#Object-Oriented-面向对象\" class=\"headerlink\" title=\"Object Oriented 面向对象\"></a>Object Oriented 面向对象</h2><h2 id=\"Macros-宏\"><a href=\"#Macros-宏\" class=\"headerlink\" title=\"Macros 宏\"></a>Macros 宏</h2><ol>\n<li>从根本上来说，宏是一种为写其他代码而写代码的方式，即所谓的 元编程（metaprogramming）</li>\n<li>元编程对于减少大量编写和维护的代码是非常有用的，它也扮演了函数扮演的角色。但宏有一些函数所没有的附加能力。</li>\n<li>derive 属性，其生成各种 trait 的实现</li>\n<li>一个函数标签必须声明函数参数个数和类型。相比之下，宏能够接受不同数量的参数：用一个参数调用 println!(“hello”) 或用两个参数调用 println!(“hello {}”, name) 。</li>\n<li>宏可以在编译器翻译代码前展开，例如，宏可以在一个给定类型上实现 trait 。而函数则不行，因为函数是在运行时被调用，同时 trait 需要在编译时实现。</li>\n<li>实现一个宏而不是函数的消极面是宏定义要比函数定义更复杂，因为你正在编写生成 Rust 代码的 Rust 代码。由于这样的间接性，宏定义通常要比函数定义更难阅读、理解以及维护。</li>\n<li>hello_macro(不是宏) 中定义的 trait(可包含多个接口）， hello_macro_derive 中实现的过程式宏。在一个类型上指定 #[derive(HelloMacro)] 时，hello_macro_derive 函数将会被调用。</li>\n</ol>\n<h2 id=\"Program-with-C-C\"><a href=\"#Program-with-C-C\" class=\"headerlink\" title=\"Program with C&#x2F;C++\"></a>Program with C&#x2F;C++</h2><ol>\n<li><a href=\"https://doc.rust-lang.org/nomicon/index.html\">Rustonomicon</a></li>\n<li><a href=\"https://github.com/rust-lang/rust-bindgen\">rust bindgen</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/embedded-book/interoperability/index.html\">rust with C</a></li>\n</ol>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><ol>\n<li><a href=\"https://docs.rs/env_logger/0.8.3/env_logger/\">env_logger</a></li>\n<li>actix_web 使用了 env_logger <a href=\"https://github.com/actix/actix-web/blob/master/src/middleware/logger.rs#L51\">actix_web::middleware::Logger</a></li>\n</ol>\n<h2 id=\"packages\"><a href=\"#packages\" class=\"headerlink\" title=\"packages\"></a>packages</h2><ol>\n<li><a href=\"https://github.com/phsym/prettytable-rs\">prettytable-rs</a></li>\n</ol>\n","categories":["Program","Rust"],"tags":["Rust"]},{"title":"Tmux config","url":"/2020/12/07/Tmux/","content":"<h2 id=\"tmux-plugin\"><a href=\"#tmux-plugin\" class=\"headerlink\" title=\"tmux plugin\"></a>tmux plugin</h2><ol>\n<li><a href=\"https://github.com/tmux-plugins/tpm\">tpm</a></li>\n<li><a href=\"https://github.com/orgs/tmux-plugins/repositories?q=&type=all&language=&sort=stargazers\">tmux-plgins</a></li>\n<li><a href=\"https://github.com/tmux-plugins/tmux-resurrect\">tmux-resurrect</a></li>\n<li>prefix + I install</li>\n</ol>\n<h2 id=\"clear-history\"><a href=\"#clear-history\" class=\"headerlink\" title=\"clear-history\"></a>clear-history</h2><ol>\n<li>Just type<code>&lt;prefix&gt; + :</code>in the relevant pane and then type <code>clear-history</code> and press enter.</li>\n</ol>\n<h2 id=\"windows-layerout\"><a href=\"#windows-layerout\" class=\"headerlink\" title=\"windows layerout\"></a>windows layerout</h2><ol>\n<li><code>&lt;prefix&gt; + M-1</code> 垂直对齐</li>\n<li><code>&lt;prefix&gt; + M-2</code> 水平对齐</li>\n<li><code>&lt;prefix&gt; + M-3</code></li>\n<li><code>&lt;prefix&gt; + M-4</code></li>\n<li><code>&lt;prefix&gt; + M-5</code></li>\n</ol>\n<h2 id=\"resize-window\"><a href=\"#resize-window\" class=\"headerlink\" title=\"resize window\"></a>resize window</h2><ol>\n<li>:resize-window -A</li>\n</ol>\n<h2 id=\"Tmux-config\"><a href=\"#Tmux-config\" class=\"headerlink\" title=\"Tmux config\"></a>Tmux config</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># use mouse to scroll history</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g mouse on        <span class=\"comment\">#For tmux version 2.1 and up</span></span><br><span class=\"line\"><span class=\"comment\"># set -g mode-mouse on   #For tmux versions &lt; 2.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set history lenth</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g history-limit 15000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g default-terminal <span class=\"string\">&quot;xterm&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change prefix key</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g prefix C-t</span><br><span class=\"line\">unbind C-b</span><br><span class=\"line\"><span class=\"built_in\">bind</span> C-t send-prefix</span><br><span class=\"line\"><span class=\"built_in\">set</span> -g prefix2 C-j</span><br><span class=\"line\"><span class=\"built_in\">bind</span> C-j send-prefix -2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># more intuitive keybindings for splitting and create window</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> \\\\ split-window -h -c <span class=\"string\">&quot;#&#123;pane_current_path&#125;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> - split-window -v -c <span class=\"string\">&quot;#&#123;pane_current_path&#125;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> c new-window -c <span class=\"string\">&quot;#&#123;pane_current_path&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># swap window bind</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> M-l swap-window -t + \\; next-window</span><br><span class=\"line\"><span class=\"built_in\">bind</span> M-h swap-window -t - \\; previous-window</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># display</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g base-index 1</span><br><span class=\"line\">set-window-option -g pane-base-index 1</span><br><span class=\"line\"><span class=\"built_in\">set</span> -g renumber-windows on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set terminal title</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g set-titles on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redraw status line every 10 seconds</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g status-interval 10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># right status: tmux show-options -g | grep status-right</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g status-right <span class=\"string\">&quot;#&#123;=21:host_short&#125; &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Remove delay when sending commands</span></span><br><span class=\"line\"><span class=\"comment\"># (default is 500 milliseconds)</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -sg escape-time 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># reference C-t ?</span></span><br><span class=\"line\">bind-key -T prefix a select-window -t :=1</span><br><span class=\"line\">bind-key -T prefix s select-window -t :=2</span><br><span class=\"line\">bind-key -T prefix d select-window -t :=3</span><br><span class=\"line\">bind-key -T prefix f select-window -t :=4</span><br><span class=\"line\">bind-key -T prefix g select-window -t :=5</span><br><span class=\"line\">bind-key -T prefix h select-window -t :=6</span><br><span class=\"line\">bind-key -T prefix j select-window -t :=7</span><br><span class=\"line\">bind-key -T prefix k select-window -t :=8</span><br><span class=\"line\">bind-key -T prefix \\; select-window -t :=1 \\; select-window -t -1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reload-config\"><a href=\"#Reload-config\" class=\"headerlink\" title=\"Reload config\"></a>Reload config</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tmux-Zsh-CheatSheet\"><a href=\"#Tmux-Zsh-CheatSheet\" class=\"headerlink\" title=\"Tmux Zsh CheatSheet\"></a>Tmux Zsh CheatSheet</h2><p><a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet\">https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ta    : tmux attach -t</span><br><span class=\"line\">tad   : tmux attach -d -t</span><br><span class=\"line\">ts    : tmux new-session -s</span><br><span class=\"line\">tl    : tmux list-sessions</span><br><span class=\"line\">tksv  : tmux kill-server</span><br><span class=\"line\">tkss  : tmux kill-session -t</span><br></pre></td></tr></table></figure>\n","categories":["Tools","Tmux"],"tags":["Tmux"]},{"title":"UML","url":"/2022/03/03/UML/","content":"<h2 id=\"UML-介绍\"><a href=\"#UML-介绍\" class=\"headerlink\" title=\"UML 介绍\"></a>UML 介绍</h2><ol>\n<li><a href=\"https://www.visual-paradigm.com/cn/guide/uml-unified-modeling-language/what-is-uml/\">历史</a></li>\n<li>图表可大致分为结构性图表和行为性图表两种。结构性图表显示了系统在不同抽象层次和实现层次上的静态结构以及它们之间的相互关系。结构性图表中的元素表示系统中具意义的概念，可能包括抽象的、现实的和實作的概念。</li>\n<li>结构性图表有七种类型：<ul>\n<li>类图 (Class Diagram)</li>\n<li>组件图 (Component Diagram)</li>\n<li>部署图 (Deployment Diagram)</li>\n<li>对象图 (Object Diagram)-</li>\n<li>包图 (Package Diagram)</li>\n<li>复合结构图 (Composite Structure Diagram)</li>\n<li>轮廓图 (Profile Diagram)</li>\n</ul>\n</li>\n<li>行为性图表显示了系统中对象的动态行为 ，可用以表达系统随时间的变化。行为性图表有七种类型：<ul>\n<li>用例图 (Use Case Diagram)</li>\n<li>活动图 (Activity Diagram)</li>\n<li>状态机图 (State Machine Diagram)</li>\n<li>序列图 (Sequence Diagram)</li>\n<li>通訊圖 (Communication Diagram)</li>\n<li>交互概述图 (Interaction Overview Diagram)</li>\n<li>时间图 (Timing Diagram)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"图种类\"><a href=\"#图种类\" class=\"headerlink\" title=\"图种类\"></a>图种类</h2><ol>\n<li>class diagram 类图</li>\n<li>sequence diagram 时序图</li>\n<li>flow chart 流程图</li>\n</ol>\n<h3 id=\"class-diagram\"><a href=\"#class-diagram\" class=\"headerlink\" title=\"class diagram\"></a>class diagram</h3><h3 id=\"sequence-diagram\"><a href=\"#sequence-diagram\" class=\"headerlink\" title=\"sequence diagram\"></a><a href=\"https://www.woshipm.com/ucd/607593.html\">sequence diagram</a></h3><h4 id=\"关系\"><a href=\"#关系\" class=\"headerlink\" title=\"关系\"></a>关系</h4><p><img src=\"https://pica.zhimg.com/v2-941a070601f399d992125ef31261637e_1440w.jpg?source=172ae18b\" alt=\"关系\"></p>\n<!-- prettier-ignore -->\n<table>\n<thead>\n<tr>\n<th align=\"left\">名字</th>\n<th align=\"left\">图形</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">其他</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">实现关系</td>\n<td align=\"left\">空心三角和虚线组成的箭头</td>\n<td align=\"left\">实现类指向接口</td>\n<td align=\"left\">类似 rust trait</td>\n</tr>\n<tr>\n<td align=\"left\">泛化关系</td>\n<td align=\"left\">空心三角和实线组成的箭头</td>\n<td align=\"left\">从子类指向父类</td>\n<td align=\"left\">“is a”</td>\n</tr>\n<tr>\n<td align=\"left\">关联关系</td>\n<td align=\"left\">带箭头的实线</td>\n<td align=\"left\">指向被关联的对象</td>\n<td align=\"left\">一个对象含有另一个对象的引用</td>\n</tr>\n<tr>\n<td align=\"left\">依赖关系</td>\n<td align=\"left\">带虚线的箭头</td>\n<td align=\"left\">使用方指向被使用方</td>\n<td align=\"left\">“use a”, 弱关联关系,<br>构造器或方法中的局部变量、方法或构造器的参数、方法的返回值</td>\n</tr>\n<tr>\n<td align=\"left\">聚合关系</td>\n<td align=\"left\">空心菱形加实线箭头</td>\n<td align=\"left\">空心菱形在整体一方，箭头指向部分一方</td>\n<td align=\"left\">“has a”, 具有各自的生命周期</td>\n</tr>\n<tr>\n<td align=\"left\">组合关系</td>\n<td align=\"left\">实心菱形加实线箭头</td>\n<td align=\"left\">实心菱形在整体一方，箭头指向部分一方</td>\n<td align=\"left\">“contains a” 强聚合, 作为整体的对象负责部分的对象的生命周期</td>\n</tr>\n</tbody></table>\n<!-- prettier-ignore -->\n<h2 id=\"mermaid\"><a href=\"#mermaid\" class=\"headerlink\" title=\"mermaid\"></a>mermaid</h2><h2 id=\"mermaid-1\"><a href=\"#mermaid-1\" class=\"headerlink\" title=\"mermaid\"></a><a href=\"https://github.com/mermaid-js/mermaid\">mermaid</a></h2><ol>\n<li><a href=\"https://mermaid.live/\">在线 server</a></li>\n<li><a href=\"https://jojozhuang.github.io/tutorial/mermaid-cheat-sheet/\">cheat sheet</a></li>\n<li>markdown 支持</li>\n<li>theme <code>%%&#123;init: &#123;&#39;theme&#39;: &#39;base&#39;, &#39;themeVariables&#39;: &#123; &#39;primaryColor&#39;: &#39;#ffcccc&#39;, &#39;edgeLabelBackground&#39;:&#39;#ffffee&#39;, &#39;tertiaryColor&#39;: &#39;#fff0f0&#39;, &#39;fontFamily&#39;: &#39;verdana&#39;&#125;&#125;&#125;%%</code></li>\n<li><a href=\"https://mermaid-js.github.io/mermaid/#/theming\">theming</a></li>\n<li>可以用 graph 画关系图<a href=\"https://github.com/bitcoin/bitcoin/blob/master/doc/design/libraries.md#L36\">bitcoin sample</a></li>\n<li>gatte 图也好用</li>\n<li>github 用 chrome 插件<a href=\"https://chrome.google.com/webstore/detail/markdown-diagrams/pmoglnmodacnbbofbgcagndelmgaclel\">markdown-diagrams</a>可以生成图片, 密集图片截屏效果不好</li>\n<li><code>%%&#123;init: &#123;&#39;securityLevel&#39;: &#39;loose&#39;, &#39;theme&#39;:&#39;base&#39;&#125;&#125;%%</code> 设置主题</li>\n<li><code>%%&#123;init:&#123;&quot;themeVariables&quot;: &#123; &quot;fontSize&quot;: &quot;30px&quot; &#125;&#125;&#125;%%</code> 设置字体大小</li>\n<li><code>%%&#123;init:&#123;&#39;theme&#39;:&#39;neutral&#39;, &quot;themeVariables&quot;: &#123; &quot;fontSize&quot;: &quot;20px&quot; &#125;&#125;&#125;%%</code></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/issues/3033\">字体设置只支持几种图，其他不支持</a></li>\n<li>sequence</li>\n</ol>\n<pre><code class=\"highlight mermaid\">&#123;% mermaid sequenceDiagram %&#125;\nAlice-&gt;&gt;John: Hello John, how are you?\nloop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn--&gt;&gt;Alice: Great!\nJohn-&gt;&gt;Bob: How about you?\nBob--&gt;&gt;John: Jolly good!\n&#123;% endmermaid %&#125;</code></pre>\n\n<ol>\n<li>flow chart 支持 <a href=\"https://fontawesome.com/icons\">fontawesome</a></li>\n</ol>\n<pre><code class=\"highlight mermaid\">classDiagram\n    user ..&gt; image\n    image ..&gt; MediaProc\n    MediaProc &lt;|-- ImgProcImpl\n    ImgProcImpl ..&gt; ImageFrame : 代理\n    ImageFrame &lt;|-- ImageFrameImpl\n    ImageFrameImpl &lt;|-- BpuImageFrame\n\n    class MediaProc&#123;\n      &lt;&lt;interface&gt;&gt;\n      +Crop()\n      +Resize()\n      +CvtColor()\n      +Decode()\n      +Encode()\n    &#125;\n\n    class ImgProcImpl&#123;\n      +Crop()\n      +Resize()\n      +CvtColor()\n      +Decode()\n      +Encode()\n    &#125;\n\n    class ImageFrame&#123;\n      &lt;&lt;interface&gt;&gt;\n      +Crop()\n      +Resize()\n      +CvtColor()\n    &#125;\n\n    class ImageFrameImpl&#123;\n      +Crop()\n      +Resize()\n      +CvtColor()\n    &#125;\n\n    class BpuImageFrame&#123;\n      +Crop()\n      +Resize()\n      +CvtColor()\n    &#125;\n</code></pre>\n\n<ol>\n<li>samples<ul>\n<li><a href=\"https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#dependencies-with-yield-and-httpexception\">fastapi</a></li>\n<li><a href=\"https://mermaid.live/edit#pako:eNqdVFFr01AU_iuX-6QYW9vabuvDQLoNYVKGKYIaH26Tk-ZCkhtvbqe1FMQndZsOhogwNycMBWHTFwU39M_YrG_-BW9605rNZk7zkNDvnPud85379XSxySzAVRzC3Tb4JsxR0uLEM3wkn4BwQU0aEF-gmkvBF3_iOvBl4ArnYArEW81zxXJZQ8VScfg6r4J1JgBx2nIEYnZCV0X9w4f9dyuoUVtC0fOd6MmKSlbhi7Ozir6q36yrADEFXSaSKd2PSpLZCavMvnCltnjiRLpTCyYSnSw7Jknlp2nAt04ql6Jj9X_TLQUrvUcHG9Hr7Z-Hq_311ejlZzWP_sHXow8rjWv64PtW9Gx3cnMJgK6C67J_mE4CqHMaqoG8TJua8piWhBahM3_fdIjfGkPD5DnmQwbn_8AZlzBx0hnij3VaG35rNHCA6wGYGlqgPg0dsDI4ToUzrvxsIz5eOEPoZPck_5tyOe0fF-yhfUYtSmsg5Q1lldg_Q-dELz5Ga3s_Dt8Mvm1kyJur6yja3h3svx3sf4k-PTpF18Ta0eZa_-lO_9V7RZLL5TKG8LtQbPKtzbMNY1iTxQZVYW1Ut7-3Gj1eT7EavjoxerCGPeAeoZZcaN04ZmDhgAcGlpeKbcYhFAbWUpEbhFPSdCGMU7qKLs70xQLxqNuJ4dujKgZuUA9CVId76DrziJ9wqZjO2twceoXaaIkzA6vYHS1Nq9MHSTuFQiBUTs_we7J30hZM7_gmrgreBg23A0sOKVnIuGoTNxyj8xYVjI9BlxEL5M8uFp0gXuctGgpJaTLfpq0Yb3NXwo4QQVjN5-NwrkWF027mTOblQ2o5cqc7yzOVfKVYmSbFElSmSqRcKllmszAzbRcvF2xr6lKhSHCvp2G5-m8xNuqq9ws-JjhZ\">三次握手 config 中有中文支持</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"plantuml\"><a href=\"#plantuml\" class=\"headerlink\" title=\"plantuml\"></a><a href=\"https://github.com/plantuml/plantuml\">plantuml</a></h2><ol>\n<li><p><a href=\"http://www.plantuml.com/plantuml/uml/\">在线 server</a></p>\n</li>\n<li><p><a href=\"https://github.com/plantuml/plantuml-server\">本地 plantuml-server</a></p>\n<ul>\n<li><code>docker run -d -p 10093:8080 plantuml/plantuml-server:jetty</code></li>\n<li><code>docker run -d -p 10093:8080 -e THE_ENV_VARIABLE=THE_ENV_VALUE plantuml/plantuml-server:jetty</code></li>\n</ul>\n</li>\n<li><p><a href=\"https://plantuml.com/zh/guide\">pdf guide</a></p>\n</li>\n<li><p><a href=\"https://plantuml.com/zh/class-diagram\">class</a></p>\n</li>\n<li><p><a href=\"https://plantuml.com/zh/sequence-diagram\">时序图</a></p>\n</li>\n<li><p><a href=\"https://github.com/iluwatar/java-design-patterns\">java-design-patterns</a></p>\n</li>\n<li><p><a href=\"https://github.com/iluwatar/java-design-patterns/blob/master/factory-method/etc/factory-method.urm.puml\">puml config file demo</a></p>\n</li>\n<li><p>markdown gitlab github 不支持， 用<a href=\"https://chrome.google.com/webstore/detail/markdown-diagrams/pmoglnmodacnbbofbgcagndelmgaclel\">markdown-diagrams</a>来支持浏览器显示</p>\n</li>\n<li><p>test plantuml</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">object Object01</span><br><span class=\"line\">object Object02</span><br><span class=\"line\">object Object03</span><br><span class=\"line\">object Object04</span><br><span class=\"line\">object Object05</span><br><span class=\"line\">object Object06</span><br><span class=\"line\">object Object07</span><br><span class=\"line\">object Object08</span><br><span class=\"line\"></span><br><span class=\"line\">Object01 &lt;|-- Object02</span><br><span class=\"line\">Object03 *-- Object04</span><br><span class=\"line\">Object05 o-- &quot;4&quot; Object06</span><br><span class=\"line\">Object07 .. Object08 : some labels</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dot-language\"><a href=\"#dot-language\" class=\"headerlink\" title=\"dot language\"></a><a href=\"https://graphviz.org/doc/info/lang.html\">dot language</a></h2><ol>\n<li><a href=\"https://gitlab.com/graphviz/graphviz/-/tree/main/cmd/dot\">dot 命令源码</a></li>\n<li><code>sudo apt-get install graphviz</code></li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/DOT%E8%AF%AD%E8%A8%80\">维基介绍</a></li>\n<li><a href=\"https://itopic.org/graphviz.html\">属性</a></li>\n<li><a href=\"http://www.graphviz.org/gallery/\">samples</a></li>\n<li><a href=\"https://www.zywvvd.com/notes/tools/graphviz/graphviz/\">Graphviz 使用教程</a></li>\n<li>流程图条件分支连接线不居中的原因是 portpos 不对齐</li>\n<li>sample</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">digraph test123 &#123;</span><br><span class=\"line\">        pack=8</span><br><span class=\"line\">        subgraph cluster0 &#123;</span><br><span class=\"line\">          packmode=array</span><br><span class=\"line\">          x y x0 y0 x1</span><br><span class=\"line\">          subgraph cluster1 &#123;</span><br><span class=\"line\">            m n</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b [shape=box];</span><br><span class=\"line\">        c [label=&quot;helloenworld&quot;,color=blue,fontsize=24,</span><br><span class=\"line\">             fontname=&quot;Palatino-Italic&quot;,fontcolor=red,style=filled];</span><br><span class=\"line\">        a -&gt; z</span><br><span class=\"line\">        x -&gt; z</span><br><span class=\"line\">        a -&gt; b -&gt; c;</span><br><span class=\"line\">        a -&gt; &#123;x y&#125;;</span><br><span class=\"line\">        edge [style=dashed,color=red];</span><br><span class=\"line\">        b -&gt; x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>颜色, 给 node 加上属性</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">digraph G &#123;</span><br><span class=\"line\">  node [style=filled, color=&quot;#999999&quot;, fillcolor=&quot;#eeeeee&quot;]; edge [color=&quot;#666666&quot;];</span><br><span class=\"line\">  node [</span><br><span class=\"line\">    style=&quot;filled&quot;</span><br><span class=\"line\">    color=&quot;#9370db&quot;</span><br><span class=\"line\">    fillcolor=&quot;#ececff&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  start -&gt; a0;</span><br><span class=\"line\">  start -&gt; b0;</span><br><span class=\"line\">  a1 -&gt; b3;</span><br><span class=\"line\">  b2 -&gt; a3;</span><br><span class=\"line\">  a3 -&gt; a0;</span><br><span class=\"line\">  a3 -&gt; end;</span><br><span class=\"line\">  b3 -&gt; end;</span><br><span class=\"line\"></span><br><span class=\"line\">  start [shape=Mdiamond];</span><br><span class=\"line\">  end [shape=Msquare];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"doxygen-生成-UML\"><a href=\"#doxygen-生成-UML\" class=\"headerlink\" title=\"doxygen 生成 UML\"></a>doxygen 生成 UML</h2><h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.cnblogs.com/shindo/p/5579191.html\">关系</a></li>\n<li><a href=\"https://www.51fusa.com/client/information/informationdetail/id/1561.html\">基于 SOME&#x2F;IP 的 AP AUTOSAR 实战</a></li>\n<li><a href=\"https://juejin.cn/post/6844904039902085134\">适合程序员的 UML 绘图工具</a></li>\n</ol>\n","categories":["Program"],"tags":["UML"]},{"title":"VPN","url":"/2023/06/25/VPN/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li><code>export all_proxy=&quot;socks5://$&#123;IP&#125;:7890&quot;</code> linux 服务器可以设置 all_proxy 来翻墙， clash 鼠标悬浮 <code>Allow Lan</code> 可以看到对应 IP</li>\n<li><code>export http_proxy=&quot;http://10.31.2.35:7890&quot; &amp;&amp; export https_proxy=&quot;https://10.31.2.35:7890&quot;</code> socks5 不起作用时</li>\n<li>Proxies 选择 Rule，可以同时连接公司内网和外网，不要选 Global，不能连接内网</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://agentneo.tech/\">agentneo</a> 使用 clash 客户端</li>\n<li><a href=\"https://solidspoon.xyz/2021/02/17/%E9%85%8D%E7%BD%AEWSL2%E4%BD%BF%E7%94%A8Windows%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/\">WSL 2 配置代理 clash</a> 配置 WSL2 使用 Windows 代理上网 有用</li>\n<li><a href=\"http://www.debugself.com/2018/01/17/docker_network/\">docker build 以及 docker run 时使用 host 网络的方法</a></li>\n<li><a href=\"https://device.harmonyos.com/cn/docs/documentation/guide/vscode_proxy-0000001074231144\">vscode proxy setting</a><ul>\n<li>注意本地 proxy 和远程 proxy 都要设置对</li>\n</ul>\n</li>\n</ol>\n"},{"title":"TensorRT","url":"/2021/04/13/TensorRT/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li>多看开发文档 <a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#work-with-loops\">developer guide</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#data-layout\">data layout</a><ul>\n<li>While optimizing the network, TensorRT performs transformations internally (including to HWC, but also more complex formats) to use the fastest possible CUDA kernels. In general, formats are chosen to optimize performance, and applications have no control over the choices. However, the underlying data formats are exposed at I&#x2F;O boundaries (network input and output, and passing data to and from plugins) to allow applications to minimize unnecessary format transformations.</li>\n<li>模型内部只支持 hwc layout（cuda kernel 效率更高), 如果输入是 chw, tensort 会内部做转换成 hwc</li>\n<li>输入输出都是 hwc，会更高效一些</li>\n</ul>\n</li>\n<li>tensorrt log 设置，打印出 warning 和 error: <a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#build-phase-c\">link</a>, trt 内部代码会使用 ILogger 的 log 函数，内部有各种级别的 log</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Logger</span> : <span class=\"keyword\">public</span> ILogger</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">log</span><span class=\"params\">(Severity severity, <span class=\"type\">const</span> <span class=\"type\">char</span>* msg)</span> <span class=\"keyword\">noexcept</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// suppress info-level messages</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (severity &lt;= Severity::kWARNING)</span><br><span class=\"line\">            std::cout &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; logger;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转-trt-engine-方法\"><a href=\"#转-trt-engine-方法\" class=\"headerlink\" title=\"转 trt engine 方法\"></a>转 trt engine 方法</h2><ol>\n<li><a href=\"https://github.com/NVIDIA-AI-IOT/torch2trt\">torch2trt</a></li>\n<li>TensorRT creates an optimized engine for each profile, choosing CUDA kernels that work for all shapes within the [minimum, maximum] range and are fastest for the optimization point - typically different kernels for each profile. You can then select among profiles at runtime.<ul>\n<li>为了优化 dynamic shape 需要提高最大最小 shape</li>\n</ul>\n</li>\n<li>python 用 trt 部署验证模型更有效率</li>\n<li>pytorch2.0 之后有了原生的 IR, 可以修改和运行 IR, 也可以直接支持转换成 trt 模型，简化了 torch -&gt; onnx model -&gt; trt engine -&gt; load to torch 的流程</li>\n<li><a href=\"https://pytorch.org/TensorRT/\">Torch-TensorRT</a> <a href=\"https://github.com/pytorch/TensorRT\">github</a></li>\n<li><a href=\"https://github.com/onnx/onnx-tensorrt?tab=readme-ov-file#executable-usage\">官方两种转 trt 工具</a><ul>\n<li>trtexec <code>trtexec --onnx=model.onnx</code></li>\n<li>polygraph <code>polygraphy run model.onnx --trt</code></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/onnx/onnx-tensorrt?tab=readme-ov-file#executable-usage\">onnx-tensorrt</a> python 接口，直接导出 trt</li>\n<li>onnx 转 trt 两种方式：<ul>\n<li>onnx –&gt; engine –&gt; c++ inference</li>\n<li>onnx –&gt; c++ convert and inference</li>\n</ul>\n</li>\n<li>使用 trtexec 先将 ONNX 转换成 engine<ul>\n<li>优点：<ul>\n<li>简单性：trtexec 是一个命令行工具，可以很容易地用于转换模型，并且不需要编写任何额外的代码。</li>\n<li>灵活性：trtexec 提供了许多命令行选项，用于优化和调试转换过程。</li>\n<li>性能测试：您可以使用 trtexec 来测试模型的性能，这在评估优化策略时很有用。</li>\n<li>重用：一旦创建了 engine 文件，您可以在不同的应用程序或设备上多次重用它，而不必再次进行优化。</li>\n</ul>\n</li>\n<li>缺点： -两步流程：首先需要使用 trtexec 创建 engine，然后在 C++程序中加载它。这使得整体流程分为两个步骤，可能不如单步流程简洁。</li>\n</ul>\n</li>\n<li>直接使用 C++ 接口转换 ONNX 然后进行推理<ul>\n<li>优点：<ul>\n<li>集成：整个流程，从加载 ONNX 模型到执行推理，都在一个 C++程序中完成。这对于集成到大型系统或自动化流程中很有用。</li>\n<li>动态性：可以根据需要进行动态优化或调整，例如基于不同的输入尺寸或条件。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>复杂性：与使用命令行工具相比，需要编写和维护更多的代码。</li>\n<li>优化时间：每次运行程序时，如果不保存和重用 engine，都可能需要重新进行模型的优化步骤。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>使用 cuda graph 加速 trt 模型 trtexec –useCudaGraph</li>\n<li>onnx 转 trt 时假如输入部分和输出部分有些不好支持，可以提到模型外面去做</li>\n<li>模型转换后输出 tensor 顺序和 onnx 顺序不一定对应 <a href=\"https://forums.developer.nvidia.com/t/onnx-model-and-tensorrt-engine-gives-different-output/193061\">onnx-model-and-tensorrt-engine-gives-different-output</a></li>\n<li>推理是使用训练好的模型进行预测的过程，而部署是将这个模型集成到最终应用环境的过程。</li>\n<li><a href=\"https://microsoft.github.io/AI-System/SystemforAI-8-Inference.pdf\">推理系统优化目标</a><ul>\n<li>延迟(Latency): 满足服务等级协议的延迟</li>\n<li>吞吐量(Throughputs): 暴增负载的吞吐量需求</li>\n<li>效率(Efficiency): 高效率，低功耗使用 GPU，CPU</li>\n<li>灵活性(Flexibility): 支持多种框架，提供构建不同应用的灵活</li>\n<li>扩展性(Scalability): 扩展支持不断增长的用户或设备</li>\n</ul>\n</li>\n<li>推理考虑延迟、吞吐量和效率，部署考虑灵活性和可扩展性</li>\n<li>提高 batch size 用于提高吞吐</li>\n<li>等待浪费 GPU, 造成低效率</li>\n<li><code>PyTorch-Quantization</code> is a toolkit for training and evaluating PyTorch models with simulated quantization. Quantization can be added to the model automatically, or manually, allowing the model to be tuned for accuracy and performance. The quantized model can be exported to ONNX and imported to an upcoming version of TensorRT. PyTorch-Quantization 是一个用于通过模拟量化来训练和评估 PyTorch 模型的工具包。量化可以自动或手动添加到模型中，从而可以调整模型的准确性和性能。量化模型可以导出到 ONNX 并导入到即将推出的 TensorRT 版本。</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#work-with-loops\">work with loop</a></li>\n<li>rnn 在 9.0 被移除，使用 loop op 替代</li>\n<li>NVIDIA TensorRT is an SDK for optimizing trained deep learning models to enable high-performance inference. TensorRT contains <code>a deep learning inference optimizer for trained deep learning models</code>, and <code>a runtime for execution</code>.</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-861/quick-start-guide/index.html#ecosystem\">转换模型步骤</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-861/quick-start-guide/index.html#conv-deploy-opt\">多种转换和部署方式</a></li>\n<li>all operations in your model must be supported by TensorRT (or you must provide custom plug-ins for unsupported operations)</li>\n<li>at inference, we pick a small batch size when we want to prioritize latency and a larger batch size when we want to prioritize throughput.</li>\n<li>TensorRT supports TF32, FP32, FP16, and INT8 precisions.</li>\n<li>One of the most performant and customizable options for <code>both model conversion and deployment</code> are to use the TensorRT API, which has both C++ and Python bindings.</li>\n<li>TensorRT C++ API 中的接口类以前缀 I(interface 的意思) 开头，例如 ILogger 、 IBuilder 等。</li>\n<li>同步推理: <code>executeV2</code>方法; 异步推理: <code>enqueueV2</code></li>\n<li><code>enqueue</code>异步接口没有很快返回的原因：<ul>\n<li>有插件会强制 stream 同步？</li>\n<li>nsight system 上看 tensorrt node 调用， 对应 cuda api 里有 cudaStreamSync()函数， 会阻塞 cpu 导致 enqueue 不返回</li>\n<li>有多个 stream sync, 每个 stream sync 执行之后之前通过 cuda api 调用的 kernel 都已执行完</li>\n<li>为什么要多个 stream？node 不相关可以并行加速, 可以看到 kernel 执行时间有并行， 为什么要 sync? 后面的节点需要前面的节点都执行完，有关联</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/issues/2828#issuecomment-1488371967\">控制单模型 stream 个数 –maxAuxStreams</a> Set maximum number of auxiliary(辅助) streams per inference stream.</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#within-inference-multi-streaming\">within-inference-multi-streaming</a><ul>\n<li>In the context of TensorRT and inference, each layer of the optimized final network will require work on the GPU. However, not all layers will be able to fully use the computation capabilities of the hardware. Scheduling requests in separate streams allows work to be scheduled immediately as the hardware becomes available without unnecessary synchronization. Even if only some layers can be overlapped, overall performance will improve.</li>\n<li>如果放在单独流中调度，不能充分利用硬件调度能力，将 request 放在多个流调度时，硬件准备好就能使用，不用额外的 sync, 即使只有少数的 layer 并行，总体结果也会提高</li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#trtexec-flags\">trtexec-flags 搜–maxAuxStreams</a></li>\n<li>enqueue 可能不是真异步，内部有同步</li>\n<li>想并行运行多个模型需要使用多线程，net1.enqueueV2(stream1); net2.enqueueV2(stream2);</li>\n</ul>\n</li>\n<li>注意 event sync 和 stream sync 的区别; event sync 在 enqueue 之后执行，enqueue 执行时可能会多次调用 stream sync</li>\n<li><img src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2023/01/nvidia-inference-stack.png\" alt=\"NVIDIA 推理堆栈\"></li>\n<li>在 TensorRT 8.5 及更高版本中， cuDNN 和 cuBLAS 内核是可选的添加，以减少 TensorRT 库的部署大小。</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/performance/dl-performance-convolutional/index.html#tensor-layout\">Tensor Layouts In Memory: NCHW vs NHWC</a></li>\n<li>因为为 Tensor Core 实现的卷积需要 NHWC 布局，并且当输入张量以 NHWC 布局时速度最快</li>\n<li>NHWC 格式的输入非常适合 NVIDIA 上的 Tensor Core GPU 。由于 ONNX 仅支持 NCHW 格式(?)，因此必须使用技巧启用 NHWC 作为输入张量。将输入维度设置为 NHWC ，并在 CUDA 或 TensorRT EP 删除的输入之后插入 Transpose 操作</li>\n<li>tensor core 用 Implicit GEMM 实现的卷积不用生成中间的矩阵，直接原位计算， 不需要 im2col <a href=\"https://docs.nvidia.com/deeplearning/performance/dl-performance-convolutional/index.html#tc-usage\">link</a></li>\n<li>The process of identifying the sequences of operations that can be fused is called <code>pattern-matching</code>. TensorRT has a powerful pattern-matching algorithm that can identify a lot of possible fusions.</li>\n<li>可以使用 python API 来调用转换后的 engine 来和 torch 结果作比较</li>\n<li>workspace<ul>\n<li>在 TensorRT 中，工作空间（Workspace）是用于存储临时数据（如中间层输出、优化过程中的临时数据）的内存区域。它主要在模型优化和执行过程中被使用。</li>\n<li>较大的工作空间可以允许 TensorRT 执行更复杂的优化，可能带来更高的运行效率。然而，过大的工作空间可能导致内存资源的浪费或者在内存受限的设备上无法运行。</li>\n<li>在使用 TensorRT API 时，可以通过编程方式配置工作空间的大小。这通常在<code>构建优化引擎（Optimization Engine）时设置</code></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-722/developer-guide/index.html#troubleshooting\">Q: How do I choose the optimal workspace size?</a>。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Using-the-TensorRT-Runtime-API\"><a href=\"#Using-the-TensorRT-Runtime-API\" class=\"headerlink\" title=\"Using the TensorRT Runtime API\"></a><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/quick-start-guide/index.html#runtime\">Using the TensorRT Runtime API</a></h2><h3 id=\"runtime\"><a href=\"#runtime\" class=\"headerlink\" title=\"runtime\"></a>runtime</h3><ol>\n<li><code>std::unique_ptr&lt;nvinfer1::IRuntime&gt; runtime&#123;nvinfer1::createInferRuntime(sample::gLogger.getTRTLogger())&#125;;</code></li>\n</ol>\n<h3 id=\"engine\"><a href=\"#engine\" class=\"headerlink\" title=\"engine\"></a>engine</h3><ol>\n<li><code>std::unique_ptr&lt;nvinfer1::ICudaEngine&gt; mEngine(runtime-&gt;deserializeCudaEngine(engineData.data(), fsize, nullptr));</code> runtime deserialize 到 engine</li>\n<li><code>auto input_idx = mEngine-&gt;getBindingIndex(&quot;input&quot;);</code> 得到 input idx</li>\n<li><code>assert(mEngine-&gt;getBindingDataType(input_idx) == nvinfer1::DataType::kFLOAT);</code> 判断输入类型</li>\n<li>通过 engine 拿到输入输出信息，申请 host 和 device 内存，host 上处理完输入之后，copy to device， 执行模型，将结果从 device cp to host</li>\n</ol>\n<h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h3><ol>\n<li><code>IExecutionContext *context = engine-&gt;createExecutionContext();</code></li>\n<li>you can have multiple contexts associated with a single engine, and run them in parallel. 多个 context 可以与一个 engine 结合，并行的运行<ul>\n<li>A current exception to this is when using dynamic shapes, when each optimization profile can only have one execution context, unless the preview feature, kPROFILE_SHARING_0806, is specified. 动态 shape engine 只能有一个 context</li>\n</ul>\n</li>\n<li>A TensorRT execution context encapsulates execution state such as persistent device memory for holding intermediate activation tensors during inferenc</li>\n<li>Inference execution is kicked off using the context’s executeV2 or enqueueV2 methods. After the execution is complete, we copy the results back to a host buffer and release all device memory allocations<ul>\n<li>executeV3</li>\n<li>enqueueV3 <code>bool status = context-&gt;enqueueV3(bindings, stream, nullptr);</code></li>\n</ul>\n</li>\n<li><code>void* bindings[] = &#123;input_mem, output_mem&#125;;</code> input_mem and output_mem 在 gpu device 上</li>\n<li><code>auto output_buffer = std::unique_ptr&lt;int&gt;&#123;new int[output_size]&#125;;</code> on cpu</li>\n<li><code>cudaMemcpyAsync(output_buffer.get(), output_mem, output_size, cudaMemcpyDeviceToHost, stream);</code> device to host</li>\n<li><code>cudaStreamSynchronize(stream);</code></li>\n</ol>\n<h2 id=\"NVIDIA-Multi-Instance-GPU-User-Guide\"><a href=\"#NVIDIA-Multi-Instance-GPU-User-Guide\" class=\"headerlink\" title=\"NVIDIA Multi-Instance GPU User Guide\"></a><a href=\"https://docs.nvidia.com/datacenter/tesla/mig-user-guide/index.html\">NVIDIA Multi-Instance GPU User Guide</a></h2><ol>\n<li>多实例 GPU (MIG) 是采用 NVIDIA Ampere 架构或更高版本架构的 NVIDIA GPU 的一项功能，可实现用户控制的将单个 GPU 划分为多个较小的 GPU。物理分区提供专用计算和内存切片，具有 QoS 以及在部分 GPU 上独立执行并行工作负载。对于 GPU 利用率较低的 TensorRT 应用程序，MIG 可以在对延迟影响很小或没有影响的情况下产生更高的吞吐量。最佳分区方案是特定于应用程序的。</li>\n</ol>\n<h2 id=\"ecosystem\"><a href=\"#ecosystem\" class=\"headerlink\" title=\"ecosystem\"></a><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/quick-start-guide/index.html#ecosystem\">ecosystem</a></h2><ol>\n<li>workflow<ul>\n<li>导出 onnx 模型</li>\n<li>选择 batch size</li>\n<li>选择量化精度</li>\n<li>转换模型</li>\n<li>发布模型</li>\n</ul>\n</li>\n<li>有多种方式可以转换模型</li>\n<li>有多种方式可以部署模型</li>\n</ol>\n<h2 id=\"fusion\"><a href=\"#fusion\" class=\"headerlink\" title=\"fusion\"></a><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#enable-fusion\">fusion</a></h2><h2 id=\"dla\"><a href=\"#dla\" class=\"headerlink\" title=\"dla\"></a><a href=\"https://developer.nvidia.com/deep-learning-accelerator\">dla</a></h2><ol>\n<li>TensorRT allows you to execute part of the network on the DLA and the rest on GPU; engine 可以一部分在 dla 上执行，另外的在 cuda 上</li>\n<li><a href=\"https://github.com/NVIDIA-AI-IOT/jetson_dla_tutorial\">jetson_dla_tutorial</a></li>\n<li>只有 edge 平台才有</li>\n<li>jtop -&gt; ENG 上方显示有几个 dla core</li>\n</ol>\n<h2 id=\"quantization\"><a href=\"#quantization\" class=\"headerlink\" title=\"quantization\"></a>quantization</h2><ol>\n<li>FP32, FP16, BF16: unquantized floating point types</li>\n<li>fp16 不算量化</li>\n<li>low precision quantized types (INT8, FP8, INT4)</li>\n<li>TensorRT supports quantized floating point, where floating-point values are <code>linearly</code> compressed and rounded to low precision quantized types (INT8, FP8, INT4). 线性量化</li>\n<li>TensorRT must know its dynamic range - that is, what range of values is important to represent - values outside this range are clamped when quantizing. 量化时需要知道数据的动态范围，会做截断</li>\n<li>Dynamic range information can be calculated by the builder (this is called calibration) based on representative input data (this is currently supported only for INT8). activation 量化时， 校准时会收集 activation 的动态范围</li>\n<li>TensorRT supports the use of low precision types to represent quantized floating point values. The quantization scheme is symmetric quantization - quantized values are represented in signed INT8, FP8E4M3 (FP8 for short), or signed INT4, and the transformation from quantized to unquantized values is simply a multiplication. In the reverse direction, dequantization uses the reciprocal scale, followed by rounding and clamping.<ul>\n<li>对称量化， 反量化时只是简单相乘，量化时还需要钳位</li>\n</ul>\n</li>\n<li>TensorRT quantizes activations as well as weights to INT8 and FP8. For INT4, weight-only-quantization is supported.<ul>\n<li>int4 只支持 weight 量化, 不支持 activation</li>\n</ul>\n</li>\n<li>对称线性量化： Q &#x3D; F&#x2F;s(需要钳位); s &#x3D; (Fmax - Fmin) &#x2F; (Qmax - Qmin); 反量化：F &#x3D; Q x s<ul>\n<li>s: scale 即最小刻度，Q 表示 F 有多少个最小刻度</li>\n</ul>\n</li>\n<li>scale 是核心，ptq 和 qat 都是为了得到 scale</li>\n<li>Post-training quantization (PTQ) derives scale factors after the network has been trained. TensorRT provides a workflow for PTQ, called calibration, where it measures the <code>distribution of activations</code> within each activation tensor as the network executes on representative input data, and then uses that distribution to estimate scale values for each tensor.</li>\n<li>calibration 只是为了得到 activation 的分布来估计量化时 tensor 的 scale，weight 不需要</li>\n<li>Quantization-aware training (QAT) computes the scale factors during training, using a technique called fake-quantization which simulates the quantization and quantization process. This allows the training process to compensate for the effects of the quantization and dequantization operations.<ul>\n<li>量化感知训练 (QAT) 使用一种称为假量化的技术来模拟量化和量化过程，从而在训练期间计算比例因子。这允许训练过程补偿量化和反量化操作的影响。</li>\n</ul>\n</li>\n<li>Implicit quantization is only supported when quantizing for INT8 只有 int8 支持隐式量化</li>\n</ol>\n<h2 id=\"streaming-weights\"><a href=\"#streaming-weights\" class=\"headerlink\" title=\"streaming weights\"></a><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#streaming-weights\">streaming weights</a></h2><ol>\n<li>TensorRT can be configured to stream the network’s weights from host memory to device memory during network execution instead of placing them in device memory at engine load time. This enables models with weights larger than free GPU memory to run, but potentially with significantly increased latency.<ul>\n<li>需要 host to device, 这使得权重大于可用 GPU 内存的模型可以运行，但延迟可能会显着增加。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"plugins-custom-op\"><a href=\"#plugins-custom-op\" class=\"headerlink\" title=\"plugins(custom op)\"></a>plugins(custom op)</h2><ol>\n<li>注意 shape 区别：固定输出 shape, shape 有输入决定(axie), 动态 shape</li>\n<li>nonzero 才是动态 shape，输出 shape 不能由输入决定, nonzero 可以由 padding 来解决</li>\n<li>构造函数一般设置为三个。<ul>\n<li>第一个用于在 parse 阶段，PluginCreator 用于创建该插件时调用的构造函数，需要传递权重信息以及参数。</li>\n<li>第二个用于在 clone 阶段，复制这个 plugin 时会用到的构造函数。</li>\n<li>第三个用于在 deserialize 阶段，用于将序列化好的权重和参数传入该 plugin 并创建。</li>\n</ul>\n</li>\n<li>TensorRT 在 fp16 运行模式下，运行到不支持 fp16 的插件 op 时，会自动切换到 fp32 模式，等插件 op 运行完再切换回来。</li>\n<li>getWorkspaceSize 这个函数需要返回这个插件 op 需要中间显存变量的实际数据大小(bytesize), 在实际运行的时候就可以直接使用 TensorRT 开辟好的空间而不是自己去申请显存空间。</li>\n<li>serialize 将 plugin 实例序列化到文件（包含参数，属性等信息）（在 plugin 里 TRTBEVPoolV2::serialize）， deserialize 通过文件发序列化到 plugin 实例(构造插件，在 creator 里做 TRTBEVPoolV2Creator::deserializePlugin;)</li>\n<li>createPlugin 用于 build 阶段，生成 plugin 实例(注意不是序列化，序列化是存文件)， deserializePlugin 用于 runtime，用于从 engine 反序列化 plugin 对象</li>\n<li>onnx 转换成 engine 存成文件，需要序列化，加载 engine 需要反序列化</li>\n<li>supportsFormatCombination 用于检测格式和类型是否支持</li>\n<li>tensorrt 支持的 op， 提供的标准 plugins, 自定义的 plugin</li>\n<li>分为 build 期和 runtime 期，两个时期需要插件的功能不一样，build 是构建网络用的，runtime 是运行插件时用的</li>\n<li>IPluginV3OneCore (build 和 runtime 都需要的接口), IPluginV3OneBuild (build 需要的接口), and IPluginV3OneRuntime(runtime 需要的接口)</li>\n<li>core capability 是 build 和 runtime 都需要的接口</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#add_custom_layer\">实现流程</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#register-plugin-create\">注册方法</a><ul>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/blob/9db1508f7479b24857d4fb81e33b6b10cede6bd0/plugin/api/inferPlugin.cpp#L180\">手动 initLibNvInferPlugins</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/blob/9db1508f7479b24857d4fb81e33b6b10cede6bd0/plugin/geluPlugin/geluPlugin.cpp#L43\">自动 REGISTER_TENSORRT_PLUGIN</a> static 变量</li>\n<li>trtexec 通过 dlopen 方式加载注册，python 通过 ctypes.CDLL 方式加载注册，pgpredict 通过 link 方式启动时加载注册</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#using-plugin-library\">using-plugin-library</a> runtime 可以手动加载， 不用 link<ul>\n<li><code>runtime-&gt;getPluginRegistry().loadLibrary(pluginLib.c_str())</code> runtime 加载</li>\n<li><code>builder-&gt;getPluginRegistry().loadLibrary(pluginLibs[i]);</code> build 时加载</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>onnx 和 trt plugin 可以通过属性传递参数，封装自定义算子 symbolic g.op()写入属性，trtplugin 代码可以获取属性</li>\n<li>要在应用程序中使用 TensorRT 官方插件，必须加载 libnvinfer_plugin.so （Windows 上为 nvinfer_plugin.dll ）库，并且必须通过在应用程序中调用 initLibNvInferPlugins 来注册所有插件代码。</li>\n<li>几个概念：<ul>\n<li>plugin: 具体 plugin 实现， 需要继承 IPluginV2DynamicExt</li>\n<li>plugin creator: plugin 对象创建方法，相当于抽象工场函数的具体工厂, 改工厂的实例会被注册到全局工厂(注册表)中，用来创建 creator</li>\n<li>register: 将 plugin creator 工厂函数注册到, tensorrt sample 中注册位置<a href=\"https://github.com/NVIDIA/TensorRT/blob/main/plugin/api/inferPlugin.cpp\">register tensorrt plugin</a>; 单例模式实现<ul>\n<li>需要调用 getPluginRegistry()-&gt;registerCreator(*pluginCreator, libNamespace)来注册</li>\n<li>REGISTER_TENSORRT_PLUGIN 宏也可以来注册：#define REGISTER_TENSORRT_PLUGIN(name) static nvinfer1::PluginRegistrar<name> pluginRegistrar##name {}; getPluginRegistry()-&gt;registerCreator(instance, “”);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计模式插件系统; so 加载时 static 变量初始化注册工厂实例到全局工厂；反射 由字符串来创建对象</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/samples/sampleOnnxMnistCoordConvAC\">官方 sample</a><ul>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/plugin/coordConvACPlugin\">plugin 代码位置</a></li>\n<li>enqueue 在 cu 文件中实现</li>\n<li>自己写的插件可能用不到 workspace, 见上述代码 enqueue 函数</li>\n<li>onnx shape_inference 在模型上显示 shape 信息</li>\n<li>修改模型时要照着 net forward 来改 op input(tensor) output name</li>\n<li>自定义 op 内可变参数作为输入, 不变数值直接写死, y&#x3D;kx + 2; k 是参数，2 是数值, y &#x3D; x + 2</li>\n<li>netron 上不变参数(weights bias div mul 需要的参数)使用 constant tensor 类型，输入是 variable tensor, attributes 是 op <code>初始化</code>用到的数值， 计算不用</li>\n<li>参数传递与转换：在插件中，你需要将原始模型中算子的参数传递到你的插件实现中。这通常涉及到参数的序列化和反序列化。确保所有必要的参数都被正确传递，并且在需要时进行适当的数据类型转换。</li>\n<li>attention 输入为 q k v 输出 q 维度类似的结果; 参数可能为各种 shape 信息 地址 head num, scale, mask 等。如果是 paged attention 需要处理 q k v 地址不连续的情况, <a href=\"https://zhuanlan.zhihu.com/p/638468472\">link</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/master/plugin\">官方 plugin</a></li>\n<li>ONNX 解析器会自动尝试将无法识别的节点作为插件导入。如果在插件注册表中找到与该节点具有相同 op_type 的插件</li>\n<li>python 自定义 op 用了多种内置 op 实现，在图上表现为多个内置 op，需要把 onnx 模型内置 op 转换为自定义 op 再转换模型</li>\n<li>适用场景<ul>\n<li>python 中算子 trt 不支持可以用 plugin 方式实现</li>\n<li>trt 算子性能有问题</li>\n<li>手动算子融合(将融合算子的所有输入作为融合算子的输入， 输出同理)</li>\n</ul>\n</li>\n<li>合并之后的 中间 op 的参数也不用管，因为算子等价，中间参数无用</li>\n<li>op 没有权重，只是计算方法，处理输入得到输出，不用关心权重问题, 权重在输入接口,<ul>\n<li>attention 插件会在接口中传递输入输出地址，kvcache 地址， 长度等信息，插件负责计算</li>\n<li>load 模型时权重会从模型 load 到 op，作为参数传递给 op；序列化与反序列化</li>\n</ul>\n</li>\n<li>onnx 模型添加了 plugin 之后 neoton 可能显示不出 shape 信息，原因是 plugin 的存在，妨碍了自动推断;<ul>\n<li>如果 plugin 不改变 shape，直接删除掉之后，在图上就能看到 shape 信息</li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#extending\">Extending TensorRT with Custom Layers</a></li>\n<li>即使 TensorRT 拥有强大的模式匹配算法并支持许多可能的融合，但始终存在无法识别不常见和&#x2F;或非常高级模式的风险。为了克服这一不可避免的限制，TensorRT 提供了一种称为插件的强大机制。</li>\n<li>The plugins are nodes inserted in the network graph definition that map to user-defined GPU kernels.</li>\n</ol>\n<h3 id=\"python-plugin\"><a href=\"#python-plugin\" class=\"headerlink\" title=\"python plugin\"></a>python plugin</h3><ol>\n<li>python load plugin.so <a href=\"https://forums.developer.nvidia.com/t/loading-of-tensorrt-custom-plugin-shared-library/237504/6\">links</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/blob/ba696521eed5d8b49a3c6f21ef243ca4b3474d64/samples/python/onnx_custom_plugin/test_custom_hardmax_plugin.py#L40\">tensorrt python 使用 trt 内部结构示例</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/blob/ba696521eed5d8b49a3c6f21ef243ca4b3474d64/python/src/infer/pyPlugin.cpp#L2612\">python plugin 相关 bindings</a></li>\n<li>ctypes.CDLL 是 Python ctypes 库中的一个函数，用于加载动态链接库（.so 文件，DLL 文件等）。它允许你在 Python 中调用这些库中定义的函数和使用其中的资源。</li>\n</ol>\n<h2 id=\"修改模型\"><a href=\"#修改模型\" class=\"headerlink\" title=\"修改模型\"></a>修改模型</h2><h3 id=\"拆分\"><a href=\"#拆分\" class=\"headerlink\" title=\"拆分\"></a>拆分</h3><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/master/tools/onnx-graphsurgeon\">TensorRT&#x2F;tools&#x2F;onnx-graphsurgeon</a></li>\n<li><code>polygraph surgeon extract</code>也可以提取子图</li>\n<li>一个一个算子累加形成 grpah 可以找出出现问题的 op; 加入 polygrpah 不能用，trtexec 能用；所有 graph 设置同一个输入，和 onnx 比输出</li>\n<li><a href=\"https://github.com/leimao/TensorRT-Custom-Plugin-Example/blob/main/scripts/create_identity_neural_network.py\">sample</a></li>\n</ol>\n<h3 id=\"op-替换\"><a href=\"#op-替换\" class=\"headerlink\" title=\"op 替换\"></a>op 替换</h3><h2 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main?tab=readme-ov-file#optional---if-not-using-tensorrt-container-specify-the-tensorrt-ga-release-build-path\">源码编译</a><ul>\n<li><code>export TRT_LIBPATH=</code>pwd<code>/TensorRT-8.6.1.6/lib</code>必须设置</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h2><ol>\n<li>jtop -&gt; INFO</li>\n<li>jetson_release</li>\n<li>nvidia-smi</li>\n<li><code>dpkg-query -W tensorrt</code> tensorrt 版本</li>\n<li><code>cat /proc/driver/nvidia/gpus/0000\\:02\\:00.0/information</code> 查看硬件型号</li>\n</ol>\n<h2 id=\"查看模型信息-对数\"><a href=\"#查看模型信息-对数\" class=\"headerlink\" title=\"查看模型信息, 对数\"></a>查看模型信息, 对数</h2><ol>\n<li>参考 python_sandbox&#x2F;model_convert<ul>\n<li>get_onnx_detail_info.py 能够获取算子 doc_string, 可以看堆栈，找到算子所在位置</li>\n</ul>\n</li>\n<li>余弦相似度来衡量两个 tensor 是否对齐</li>\n<li>pytorch 模型，onnx 模型，trt 模型都要一致<ul>\n<li>pytorch 和 onnxruntime 先对数，然后 onnxruntime 和 trt 对数</li>\n<li>有 plugin 时可以直接对 trt 和 pytorch 结果, pytorch 添加 hook 导出所有 tensor 输出，onnx 对应 pytorch 输出，onnx 切分子图，分别转成 tensorrt 模型，每一个都有输入输出，根据 onnx 模型找 pytorch 输出，看哪个算子对不上<ul>\n<li>pytorch 模型 dump 数据时需要处理 sequential 和 submodule 问题，重复 layer 使用问题，onnx 模型导出时需要处理将中间层输出，名字要和 pytorch 导出的名字对上; 如果是直接 pytorch 和 trt 对数，不用对 onnx 中间结果</li>\n<li>pytorch 中间结果和 trt 中间结果做对比时， 注意 onnx 和 trt 算子可能融合，需要比较 pytorch 前后一些算子</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_intermediate_outputs_pytorch</span>(<span class=\"params\">model, input_tensor</span>):</span><br><span class=\"line\">     intermediate_outputs = &#123;&#125;</span><br><span class=\"line\">     hooks = []</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"># 处理重复使用情况</span></span><br><span class=\"line\">     <span class=\"keyword\">def</span> <span class=\"title function_\">hook_fn</span>(<span class=\"params\">module, <span class=\"built_in\">input</span>, output, name</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> intermediate_outputs:</span><br><span class=\"line\">            count = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> name + <span class=\"string\">&quot;_&quot;</span> + conut.to_str() <span class=\"keyword\">in</span> intermediate_outputs：</span><br><span class=\"line\">                count = count + <span class=\"number\">1</span></span><br><span class=\"line\">            intermediate_outputs[name + <span class=\"string\">&quot;_&quot;</span> + conut.to_str()] = [output]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            intermediate_outputs[name] = [output]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 递归注册钩子</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">register_hooks</span>(<span class=\"params\">module, prefix=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name, submodule <span class=\"keyword\">in</span> module.named_children():</span><br><span class=\"line\">            submodule_name = prefix + (<span class=\"string\">&#x27;.&#x27;</span> <span class=\"keyword\">if</span> prefix <span class=\"keyword\">else</span> <span class=\"string\">&#x27;&#x27;</span>) + name</span><br><span class=\"line\">            hook_handle = submodule.register_forward_hook(<span class=\"keyword\">lambda</span> m, i, o, name=submodule_name: hook_fn(m, i, o, name))</span><br><span class=\"line\">            hooks.append(hook_handle)</span><br><span class=\"line\">            register_hooks(submodule, submodule_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    register_hooks(model)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        model(input_tensor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 移除钩子</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> hook_handle <span class=\"keyword\">in</span> hooks:</span><br><span class=\"line\">        hook_handle.remove()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> intermediate_outputs</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/polygraphy/tools/\">polygraphy</a><ul>\n<li>Use Polygraphy to dump layer outputs and verify there are no NaNs or Infs. The –validate option can check for NaNs and Infs. Also, we can compare layer outputs with golden values from, for example, ONNX runtime.</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/c5b9de37f7ef9034e2efc621c664145c7c12436e/tools/polygraphy-extension-trtexec\">polygraphy-extension-trtexec</a><ul>\n<li><a href=\"https://www.wheelodex.org/projects/polygraphy-trtexec/\">位置</a></li>\n</ul>\n</li>\n<li><code>--mark all</code> is not a good practice, it will break all layer fusions. <a href=\"https://github.com/NVIDIA/TensorRT/issues/3592#issuecomment-1888624281\">link</a> <a href=\"https://github.com/NVIDIA/TensorRT/issues/3596#issuecomment-1896408532\">link</a><ul>\n<li>I think mark all is becoming increasingly unreliable. A better approach is to manually mark a subset of the intermediate tensors as outputs.</li>\n</ul>\n</li>\n<li><code>polygraphy run   sim_sparsedrive.onnx --fp16   --trt --trt-outputs /deformable_aggregation_output_0   --save-engine test.trt --plugins=/workspace/mmdeploy/mmdeploy/lib/libmmdeploy_tensorrt_ops.so   --save-outputs ./dump.json --save-timing-cache=fp16cache --load-timing-cache=fp16cache</code> 可以 mark 一些 output</li>\n<li><code>polygraphy run  model.onnx --trt  --trt-outputs mark all    --save-outputs ./model3.json</code> 转完跑一遍 trt, mark all；<ul>\n<li><a href=\"https://www.stubbornhuang.com/2432/\"> 转换 onnx 模型出现 requires bool or uint8 I&#x2F;O but node can not be handled by Myelin</a></li>\n</ul>\n</li>\n<li><code>polygraphy run  sparsedrive_fp16_3090.trt --model-type=engine  --plugins=/workspace/mmdeploy/mmdeploy/lib/libmmdeploy_tensorrt_ops.so   --trt-outputs mark all --trt  --save-outputs ./dump.json</code> 运行 trt 模型</li>\n<li><code>polygraphy run model.onnx --trt</code> 转 trt 模型</li>\n<li><code>polygraphy inspect model model.onnx --shape-inference --show layers</code> 查看 onnx 模型信息</li>\n<li><code>polygraphy inspect model op16_iter7_refine_filter_fb.trt --model-type=engine --show layers</code> 查看 trt 模型信息</li>\n<li><code>polygraphy inspect capability model.onnx -v</code> 查看 onnx 是否被 TensorRT 支持<ul>\n<li><code>LD_PRELOAD=/workspace/mmdeploy/mmdeploy/lib/libmmdeploy_tensorrt_ops.so polygraphy inspect  capability sparsedrive_lantu_op13_fd.onnx -v</code> 有插件用 LD_PRELOAD； 还可以看用了什么插件</li>\n</ul>\n</li>\n<li><code>polygraphy run dynamic_identity.onnx --trt --onnxrt --save-engine test.trt</code> Comparing TensorRT And ONNX-Runtime Outputs</li>\n<li><code>polygraphy run your.onnx --trt --onnxrt --onnx-outputs mark all --trt-outputs mark all</code> To mark all nodes in onnx as output and compare between onnxruntime and trt<ul>\n<li>只有 onnx 才能 run</li>\n</ul>\n</li>\n<li><code> --trt --trt</code> trt 结果与 trt 结果比较, 跑两次比较，查看输出是否异常</li>\n<li><code>polygraphy run dynamic_identity.onnx --trt --fp16 --onnxrt --input-shapes X:[1,2,4,4]</code> Comparing TensorRT Precisions</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/examples/cli/run/05_comparing_with_custom_input_data\">(good) run&#x2F;05_comparing_with_custom_input_data</a></li>\n<li><code>polygraphy surgeon sanitize model.onnx --fold-constants -o folded.onnx</code> 可以 fold constant, 作为 op 参数, 不用作为 input<ul>\n<li>可以看出来有多少个 node</li>\n</ul>\n</li>\n<li><code>polygraphy debug precision net_bs8.onnx --fp16 --tactic-sources cublas --check polygraphy run polygraphy_debug.engine --trt --load-outputs onnx_res.json --abs 1e-1</code></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/examples/api/00_inference_with_tensorrt\">polygraphy python 接口</a><ul>\n<li>比 tensorrt python 接口好用</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/experimental/trt-engine-explorer\">trt-engine-explorer</a></li>\n</ol>\n<h2 id=\"op-支持\"><a href=\"#op-支持\" class=\"headerlink\" title=\"op 支持\"></a>op 支持</h2><ol>\n<li><a href=\"https://github.com/onnx/onnx-tensorrt/blob/main/docs/operators.md\">onnx operators.md</a></li>\n<li>tensorrt 支持 rnn, lstm, gru;可能算子内部循环，外部还是 dag</li>\n</ol>\n<h2 id=\"TensorRT-CUDA-cuDNN\"><a href=\"#TensorRT-CUDA-cuDNN\" class=\"headerlink\" title=\"TensorRT, CUDA, cuDNN\"></a>TensorRT, CUDA, cuDNN</h2><ol>\n<li>CUDA 是<code>并行计算框架</code>，提供 API，可以运行在 Nvdia GPU 上</li>\n<li>cuDNN 是深度神经网络加速库，cuDNN 可大幅优化标准例程（例如用于前向传播和反向传播的卷积层、池化层、归一化层和激活层）的实施。世界各地的深度学习研究人员和框架开发者都依赖 cuDNN 实现高性能 GPU 加速。借助 cuDNN，研究人员和开发者可以<code>专注于训练神经网络及开发软件应用</code>，而不必花时间进行低层级的 GPU 性能调整。cuDNN 可加速广泛应用的深度学习框架，包括 Caffe2、Chainer、Keras、MATLAB、MxNet、PyTorch 和 TensorFlow。</li>\n<li>TensorRT 是用于高性能深度学习<code>推理</code>的 SDK。此 SDK 包含深度学习推理优化器和<code>运行时环境</code>，可为深度学习推理应用提供低延迟和高吞吐量。借助 TensorRT，开发者可专注于创建新颖的 AI 支持应用，无需费力调节性能来部署推理工作。</li>\n</ol>\n<h2 id=\"trt-engine-explorer\"><a href=\"#trt-engine-explorer\" class=\"headerlink\" title=\"trt-engine-explorer\"></a><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/experimental/trt-engine-explorer\">trt-engine-explorer</a></h2><h2 id=\"trtexec\"><a href=\"#trtexec\" class=\"headerlink\" title=\"trtexec\"></a>trtexec</h2><h3 id=\"转模型\"><a href=\"#转模型\" class=\"headerlink\" title=\"转模型\"></a>转模型</h3><ol>\n<li>NOTE: <code>--noTF32 Disable tf32 precision (default is to enable tf32, in addition to fp32)</code>转出的模型默认是 tf32<ul>\n<li>A100、H100 tf32 算力比 fp32 算力高 8 倍左右</li>\n<li>3090 上 tf32 算力跟 fp32 算力相同</li>\n</ul>\n</li>\n<li><code>trtexec --onnx=model.onnx --saveEngine=model.trt</code></li>\n<li><code>trtexec --onnx=model.onnx --saveEngine=model_fp16.trt --fp16</code></li>\n<li><code>trtexec --onnx=model.onnx --saveEngine=model_int8.trt --int8</code></li>\n<li>trtexec –onnx&#x3D;.&#x2F;bisenetv2_310102_1280x1920.onnx –shapes&#x3D;input:1x3x540x960 –saveEngine&#x3D;bisenetv2-xavier-fp16-540x960.engine –allowGPUFallback –fp16 –workspace&#x3D;16024</li>\n<li>onnx 模型转化为 engine or trt 后运行</li>\n<li>trtexec 在转换模型时做了一些优化，以提高模型的推理性能。这些优化包括：<ul>\n<li><code>算子融合：</code>trtexec 会尝试将多个算子融合为一个算子，以减少推理过程中的开销。</li>\n<li><code>内存优化：</code>trtexec 会尝试将模型的权重和激活值存储在更高效的内存中，以提高推理速度。</li>\n<li><code>模型裁剪：</code>trtexec 会尝试将模型的参数量减少，以减少推理过程中的计算量。</li>\n<li><code>图优化?</code> <a href=\"https://microsoft.github.io/AI-System/SystemforAI-9-Compilation%20and%20Optimization.pdf\">link</a><ul>\n<li>等价变化简化图计算; 算术表达式等价替换：a*0 -&gt; 0; 公共子表达式消除, 常量折叠</li>\n<li>子图替换，如 flash attention</li>\n<li>包括算子融合</li>\n<li>剪枝</li>\n<li>调度优化，异步， 可以并行的并行做</li>\n<li>内存优化</li>\n<li>混合精度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>trtexec 执行步骤：<ul>\n<li>trtexec 会将模型转换为 TensorRT 的内部表示。</li>\n<li>trtexec 会对模型进行分析，以确定可以进行优化的算子。</li>\n<li>trtexec 会对模型进行优化，以提高推理性能。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"性能参数\"><a href=\"#性能参数\" class=\"headerlink\" title=\"性能参数\"></a>性能参数</h4><pre><code>- `--best               Enable all precisions to achieve the best performance (default = disabled)`\n- `--useCudaGraph       Use CUDA graph to capture engine execution and then launch inference (default = disabled).`\n- `--useDLACore=N       Select DLA core N for layers that support DLA (default = none)`\n- `--useManagedMemory   Use managed memory instead of separate host and device allocations (default = disabled).`\n</code></pre>\n<h3 id=\"推理\"><a href=\"#推理\" class=\"headerlink\" title=\"推理\"></a>推理</h3><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/examples/cli/run/01_comparing_frameworks#comparing-tensorrt-and-onnx-runtime-outputs\">Comparing TensorRT And ONNX-Runtime Outputs</a></li>\n<li>推理时可以看各种信息：<ul>\n<li>Build Options：<ul>\n<li>输入输出 name</li>\n<li>input output 格式(fp32, fp16…)</li>\n<li>batch</li>\n<li>layout(chw or hwc)</li>\n</ul>\n</li>\n<li>Inference Options<ul>\n<li>推理次数</li>\n</ul>\n</li>\n<li>Device Information</li>\n<li>Performance summary</li>\n</ul>\n</li>\n<li><code>trtexec --loadEngine=test.trt</code></li>\n<li><code>trtexec --loadEngine=model.trt --exportOutput=output.txt</code> dump model output</li>\n<li><code>trtexec --loadEngine=model.trt --exportLayerInfo=LayerInfo.txt</code> dump layer info； 如果出现<code>ForeignNode[onnx::MatMul_311</code>表示不支持; 使用<a href=\"https://github.com/daquexian/onnx-simplifier\">onnx-simplifier</a>试试</li>\n<li><code>trtexec --loadEngine=test.trt --plugins=lib/libtrtplugins.so --duration=10</code> 带 plugin</li>\n<li><code>trtexec --loadEngine=test.trt --plugins=lib/libtrtplugins.so --iterations=N --verbose=1</code></li>\n<li>动态输入 <code>trtexec --onnx=fcn-resnet101.onnx --fp16 --workspace=64 --minShapes=input:1x3x256x256 --optShapes=input:1x3x1026x1282 --maxShapes=input:1x3x1440x2560 --buildOnly --saveEngine=fcn-resnet101.engine &amp;&amp; trtexec --shapes=input:1x3x1026x1282 --loadEngine=fcn-resnet101.engine</code> Where –shapes sets the input sizes for the dynamic shaped inputs to be used for inference.</li>\n<li>(good) <code>trtexec --loadEngine=my_model.trt --dumpProfile=1</code>推理时显示每层耗时</li>\n<li>(good) <code>trtexec --loadEngine=my_model.trt --dumpProfile=1 --exportProfile=profile.json</code>推理时显示每层耗时</li>\n<li>对 profile.json 进行排序</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取 JSON 文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;profile.json&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    data = json.load(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查文件结构</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(data))  <span class=\"comment\"># 确保数据是一个列表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data[<span class=\"number\">0</span>])     <span class=\"comment\"># 查看第一个元素的结构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据 &#x27;percentage&#x27; 字段进行排序</span></span><br><span class=\"line\">sorted_data = <span class=\"built_in\">sorted</span>(data, key=<span class=\"keyword\">lambda</span> x: x.get(<span class=\"string\">&#x27;percentage&#x27;</span>, <span class=\"number\">0</span>), reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印排序后的数据</span></span><br><span class=\"line\"><span class=\"comment\"># for entry in sorted_data:</span></span><br><span class=\"line\">    <span class=\"comment\"># print(f&quot;Name: &#123;entry.get(&#x27;name&#x27;)&#125;, Percentage: &#123;entry.get(&#x27;percentage&#x27;)&#125;&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可选：将排序后的数据写入新的 JSON 文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;sorted_profile.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    json.dump(sorted_data, file, indent=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"python-推理\"><a href=\"#python-推理\" class=\"headerlink\" title=\"python 推理\"></a>python 推理</h4><ol>\n<li><a href=\"https://github.com/onnx/onnx-tensorrt?tab=readme-ov-file#executable-usage\">onnx-tensorrt 来推理 onnx 模型</a><ul>\n<li>需要本地先 build 再 install</li>\n<li>onnx-tensorrt 与 polygraphy python 接口类似，不需要使用管理显存，但 onnx-tensorrt 需要依赖 pycuda</li>\n</ul>\n</li>\n<li>需要 pycuda</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH=$&#123;LD_LIBRARY_PATH&#125;:/usr/local/cuda/lib64</span><br><span class=\"line\">export CPATH=$CPATH:/usr/local/cuda/include/</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:/usr/local/cuda/bin</span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pycuda</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/container-release-notes/index.html#pullcontainer\">官方 docker</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#troubleshooting\">troubleshooting</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/index.html\">tensorrt docs</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/archives/index.html\">各种版本 doc</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/release-notes/index.html\">release notes</a> Ensure you are familiar with the NVIDIA TensorRT Release Notes for the latest new features and known issues.</li>\n<li><a href=\"https://developer.nvidia.com/zh-cn/blog/tensorrt-c-interface-cn/\">官方 c++ sample 讲解</a></li>\n<li><a href=\"https://developer.nvidia.com/zh-cn/blog/search-posts/?q=tensorrt\">官方博客</a></li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html#c_topics\">c++ api</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/samples\">官方 sample</a></li>\n<li><a href=\"https://github.com/wang-xinyu/tensorrtx\">samples</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/release/7.1/samples/opensource/trtexec\">trtexec</a></li>\n<li><a href=\"http://www.hpc.iitkgp.ac.in/pdfs/Nvidia-2.pdf\">nvidia tensorrt pdf</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/plugin\">plugins</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/blob/main/quickstart/IntroNotebooks/5.%20Understanding%20TensorRT%20Runtimes.ipynb\">Understanding TensorRT Runtimes</a></li>\n<li><a href=\"https://github.com/cyrusbehr/tensorrt-cpp-api\">c++ api 教程</a></li>\n<li><a href=\"https://developer.nvidia.com/zh-cn/blog/end-to-end-ai-for-nvidia-based-pcs-cuda-and-tensorrt-execution-providers-in-onnx-runtime/\">基于 NVIDIA 的 PC 的端到端 AI ： ONNX Runtime 中的 CUDA 和 TensorRT 执行提供程序</a></li>\n</ol>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><ol>\n<li><a href=\"https://docs.nvidia.com/deeplearning/tensorrt/container-release-notes/index.html#pullcontainer\">官方 docker</a><ul>\n<li>docker 里有 tensorrt sample</li>\n<li><code>docker pull nvcr.io/nvidia/tensorrt:24.02-py3</code></li>\n<li><code>docker run -itd -v /home/xiyang.jia:/home/xiyang.jia -p 10086:22 --user root --gpus all --name=xiyang_cuda --shm-size 2g --cap-add=SYS_ADMIN nvcr.io/nvidia/tensorrt:22.07-py3</code> 注意加–cap-add&#x3D;SYS_ADMIN，ncu 收集 gpu metrics</li>\n<li><code>docker exec -it xiyang_cuda  bash</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><ol>\n<li><p>bevfusion 遇见的问题</p>\n</li>\n<li><p>onnx 转换使用心得</p>\n</li>\n</ol>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><ol>\n<li>转换出现类型问题，可能需要对模型进行常量折叠 <code>polygraphy surgeon sanitize model.onnx --fold-constants -o folded.onnx</code></li>\n<li>出现 trt fuse 问题先找到 python 代码，调试一下; 更改逻辑，去除 fuse 问题</li>\n<li>nvrtc_compile.cpp:940: CHECK(false) failed. NVRTC Compilation failure [09&#x2F;07&#x2F;2024-16:07:22] [E] Error[10]: Could not find any implementation for node {ForeignNode[onnx::Where_4341…&#x2F;Div_8]}. Timing Runner: {ForeignNode[onnx::Where_3922…&#x2F;Transpose_9 + &#x2F;Reshape_49]} (Myelin[0x80000023])<ul>\n<li>解决方法： 把 where 去掉</li>\n<li><a href=\"https://forums.developer.nvidia.com/t/conversion-pytorch-to-tensorrt-fails-when-using-fp16-works-with-fp32-and-int8/285141\">conversion-pytorch-to-tensorrt-fails-when-using-fp16-works-with-fp32-and-int8</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/issues/3154\">Could not find any implementation for node Error while converting the instructor-large model from ONNX to TensorRT engine</a></li>\n<li>并通过增加工作空间大小来解决 <a href=\"https://github.com/onnx/onnx-tensorrt/issues/758#issuecomment-1095330781\">link</a></li>\n<li>更换 opset 版本</li>\n<li>更换 trt 版本</li>\n</ul>\n</li>\n<li><code>--workspace flag has been deprecated by --memPoolSize flag.</code></li>\n<li>fp32 无问题，fp16 输出出现 inf; fp16 范围：±65504，判断 fp32 模型的中间结果是否会溢出<ul>\n<li>可能是 inverse_sigmoid 问题， <code>1.0 / 1.0014e-05 = 99860.19572598363</code>越界</li>\n<li>解决办法，pytorch 用 fp16 finetune 一下，pytorch 会处理？</li>\n<li>为了避免 FP16 模型出现溢出问题，可以使用 PyTorch 的 AMP（自动混合精度）工具包，它能够自动选择 FP32 和 FP16 混合精度运算，减少数值溢出风险。</li>\n<li>查找问题，pytorch 中 model.half()还需处理输入</li>\n<li>使用 torch.cuda.amp.autocast 来进行 fp16 推理，vscode debug 来查找第一次出现 inf 时的地方</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># 使用 autocast 进行 FP16 推理</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> torch.cuda.amp.autocast():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():  <span class=\"comment\"># 禁用梯度计算</span></span><br><span class=\"line\">        output = model(input_data)</span><br></pre></td></tr></table></figure>\n","categories":["Program","AI"],"tags":["TensorRT"]},{"title":"Vim","url":"/2022/08/13/Vim/","content":"<h2 id=\"keybind-link\"><a href=\"#keybind-link\" class=\"headerlink\" title=\"keybind link\"></a>keybind <a href=\"https://blog.csdn.net/RunBoying/article/details/7695164\">link</a></h2><ol>\n<li>[] 调上一个 func</li>\n<li><code>:e filename</code> 打开 file</li>\n<li><code>za</code> fold and unfold</li>\n<li><code>zM</code> fold all</li>\n<li><code>zO</code> unfold all</li>\n<li><code>C-^</code> 切换 buffer</li>\n<li><code>c-d</code> 向下滚屏, 左手单手操作</li>\n<li><code>c-u</code> 向上滚屏</li>\n<li><code>ZZ</code>: 普通模式下保存并退出</li>\n<li><code>:e!</code> 可以不保存文件并重新载入这个文件</li>\n<li><code>*</code> 把当前的字段作为查找内容，找下一处。可以配合 <code>n</code> or <code>N</code>使用</li>\n<li><code>%</code> 跳转到相配对的括号</li>\n<li><code>v %</code> 选中括号里内容</li>\n<li><code>^</code> 跳转至行第一个非空字符</li>\n<li><code>:set hlsearch</code> 可以将查找的内容设置成高亮。<code>:set nohlsearc</code> 取消高亮或 <code>/xxxx</code></li>\n<li><code>mm</code> and `m : mark and jump back</li>\n<li><code>C-o</code> 命令则跳到一个 “较老” 的地方 (提示： O 表示 older)。<code>C-i</code> 则跳到一个 “较新” 的地方.</li>\n<li><code>f</code> 向后搜索, <code>F</code> 向前搜索, <code>;</code> next</li>\n<li>H:将光标移动到当前可见页面的顶部（High）</li>\n<li>M:将光标移到当前可见页面的中间（Middle）</li>\n<li>L:将光标移动到当前可见页面的底部（Low）</li>\n<li><code>:buffers</code> or <code>:ls</code> 列出可用的缓冲区</li>\n<li><code>:bn</code> 下一个缓冲区。类似地，我们可以通过键入 b 数字或名称（在上面的第一列）或名称来切换到缓冲区。</li>\n<li><code>:bd</code> 删除当前 buffer</li>\n<li><code>p and S-p</code> 当前字符前后复制</li>\n<li><code>I</code> go to start line and insert</li>\n<li><code>A</code> go to end line and insert</li>\n</ol>\n<h2 id=\"easymotion\"><a href=\"#easymotion\" class=\"headerlink\" title=\"easymotion\"></a><a href=\"https://github.com/easymotion/vim-easymotion\">easymotion</a></h2><ol>\n<li><p>Set a custom color for the easymotion search n-character (default <leader><leader>&#x2F;).</p>\n</li>\n<li><p><code>&lt;leader&gt;&lt;leader&gt;f</code> char</p>\n</li>\n<li><p>like emacs avy-jump</p>\n</li>\n</ol>\n<h2 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h2><ol>\n<li><a href=\"https://shapeshed.com/vim-packages/\">native package</a></li>\n</ol>\n<h3 id=\"vim-slime\"><a href=\"#vim-slime\" class=\"headerlink\" title=\"vim-slime\"></a><a href=\"https://github.com/jpalardy/vim-slime\">vim-slime</a></h3><ol>\n<li>install</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.vim/pack/plugins/start</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.vim/pack/plugins/start</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/jpalardy/vim-slime.git</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>vimrc config</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> g:slime_target = <span class=\"string\">&quot;tmux&quot;</span></span><br><span class=\"line\">nmap &lt;c-c&gt;&lt;c-l&gt; &lt;Plug&gt;SlimeLineSend</span><br><span class=\"line\">nmap &lt;c-a&gt; &lt;Plug&gt;SlimeLineSend</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://blog.jpalardy.com/posts/trying-vim-slime-in-docker/\">try in docker</a></li>\n</ol>\n"},{"title":"VSCode","url":"/2022/09/05/VSCode/","content":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Bito.Bito\">Bito</a></li>\n<li><a href=\"https://codegpt.co/\">codegpt.co</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Blackboxapp.blackbox\">ai 助手</a></li>\n<li>(good)<a href=\"https://ash12rai-weblearning.medium.com/visual-studio-code-vs-code-inlay-hints-32fee837e80\">inlay-hints</a><ul>\n<li>font 从 windows 下查找</li>\n<li>font: Lucida Calligraphy, Lucida Bright</li>\n<li>toggle: <code>alt+&#39;</code></li>\n</ul>\n</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/96041706\">从 VSCode 看大型 IDE 技术架构 j</a></li>\n<li><a href=\"https://device.harmonyos.com/cn/docs/documentation/guide/vscode_proxy-0000001074231144\">vscode proxy setting</a></li>\n<li><a href=\"https://devblogs.microsoft.com/cppblog/c-extension-in-vs-code-1-16-release-call-hierarchy-more/\">c++ Call Hierarchy</a></li>\n</ol>\n<h2 id=\"sync-config\"><a href=\"#sync-config\" class=\"headerlink\" title=\"sync config\"></a><a href=\"https://code.visualstudio.com/docs/editor/settings-sync\">sync config</a></h2><ol>\n<li>不好用</li>\n</ol>\n<h2 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h2><ol>\n<li><code>Task: configure task</code> 设置 task 选择 other task</li>\n<li><code>Task: run task</code></li>\n</ol>\n<h2 id=\"cmake\"><a href=\"#cmake\" class=\"headerlink\" title=\"cmake\"></a>cmake</h2><ol>\n<li><code>M-x C/C++ Edit configurations(JSON)</code> 打开工程配置 c_cpp_properties.json</li>\n<li><a href=\"https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference\">c_cpp_properties.json reference</a></li>\n<li>“compileCommands”: “&#x2F;path&#x2F;to&#x2F;compile_commands.json”, 设置 compile_commands.json， 方便代码补全</li>\n<li>关闭 cmake tools 自动 build 功能</li>\n</ol>\n<h2 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h2><ol>\n<li><code>format toggle</code></li>\n<li><code>M-S-f</code></li>\n<li>自动 format <code>C-,</code> 打开设置，搜索 format, 选中 format on save</li>\n<li><code>File: Save withourt Formatting</code> 命令</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>(good)<code>fold all</code> and <code>unfold all</code></li>\n<li><code>Open Log File</code> 可以看各种 log, window 可以看经常断开原因</li>\n<li><code>Terminal: Select All</code>复制到文件，保存 log</li>\n<li><code>watch</code>可能引起 debug 崩溃 <a href=\"https://www.cnblogs.com/Baiyug/p/16243436.html\">link</a></li>\n<li><code>ps uxa | grep .vscode-server | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9</code> kill vscode server</li>\n<li>debug console 中可以输入命令：<code>-exec info registers</code></li>\n<li>鼠标左键是 expand select</li>\n<li><code>ctrl+g</code>多用</li>\n<li><code>dev contatiner show all logs</code></li>\n<li><code>output</code>窗口可以选择看各种 log</li>\n<li><code>&quot;stopAtEntry&quot;: false</code> c++ 调试默认会有个断点，但不会开启（launch.json)</li>\n<li><code>Debug Visualizer</code>可以可视化常用数据结构，便于调试</li>\n<li>debug 可以使用 <code>Hex Editor</code> 查看内存, 点击</li>\n<li><code>remote-containers.openDevContainerFile</code> 打开配置设置 <code>&quot;remoteUser&quot;: &quot;xiyang&quot;</code> docker 可以使用 xiyang 用户登录, 每个 container 有一个配置</li>\n<li>dev-container 可以访问远程机器上的 docker，不用开端口</li>\n<li>windows 配置路径在当前用户.vscode 下面 例如:C:\\Users\\86158.vscode (extensions) 注意和 C:\\Users\\86158\\AppData\\Roaming\\Code\\User(settings) 数据做区分</li>\n<li><code>toggleDevTools</code> 用来调试插件</li>\n<li>注意配置文件区分:<ul>\n<li>host: <code>keybindings.json settings.json</code></li>\n<li>target: <code>.vscode-server/data/User/extensions.json</code></li>\n<li>target project: <code>launch.json settings.json task.json c_cpp_properties.json</code></li>\n</ul>\n</li>\n<li>右侧放 baseline， 代码导航下面</li>\n<li><code>alt</code>有时候会误触，按 esc 或 alt</li>\n<li>使用 vim 插件，使用 vim 快捷键 如： <code>*</code> 把当前的字段作为查找内容，找下一处。可以配合 <code>n</code> or <code>N</code>使用</li>\n<li>zen mode 模式下一遍写代码， 一边画图， <code>M-l or M-h</code>切换</li>\n<li><a href=\"https://stackoverflow.com/a/49196147\">zen mode 显示 tabs</a> 可以设置 zen mode 显示</li>\n</ol>\n<h2 id=\"short-keys\"><a href=\"#short-keys\" class=\"headerlink\" title=\"short keys\"></a><a href=\"https://code.visualstudio.com/docs/getstarted/keybindings\">short keys</a></h2><ol>\n<li><a href=\"https://code.visualstudio.com/docs/editor/codebasics\">basic editing</a></li>\n<li><a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf\">cheetsheat</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name\">open-symbol-by-name</a></li>\n<li><code>Navigate Edits History - Goto Last Edit</code>安装插件， 设置 loop true, <code>move to previous edit</code> -&gt; <code>, g g</code></li>\n<li><code>Terminal: run recent command</code> 执行最近 command 的命令 或者安装插件<code>Rerun last command in termnalxs</code></li>\n<li><code>Terminal: go to recent directory</code> 进入最近使用的文件夹</li>\n<li><code>S-M downarrow</code> vim 模式下对列操作</li>\n<li><code>C-space</code> 补全的时候用, 能显示更多信息，如 c++能显示文件路径, 也可以直接按</li>\n<li><code>Developer: Toggle Screencast Mode</code> 对应 emacs <code>C-h k</code> 显示键对应的命令</li>\n<li>最左侧显示 <code>&quot;workbench.activityBar.visible&quot;: true</code></li>\n<li><code>view: toggle menu bar / status bar / activate bar / breadcrumbs</code></li>\n<li><code>Terminal: focuse find</code> C-f 快捷键删除，想用的时候使用命令</li>\n<li>罗技鼠标 master 可以前进后退</li>\n<li>多用命令</li>\n<li>File &gt; Preferences &gt; Keyboard Shortcuts 查看所有快捷键</li>\n<li>可以点击测试 key 绑定到什么命令上</li>\n<li>可以复制键设置到配置文件，然后修改键绑定</li>\n<li><code>alt</code>给禁止了 设置为 emacs key <a href=\"https://stackoverflow.com/a/65163917\">link</a></li>\n<li><code>C-p ?</code>查看简写帮助 like emacs <code>C-h h</code></li>\n<li><code>C-k z</code> zen mode 非常好用</li>\n<li><code>C-1</code> 聚焦到 editor</li>\n<li><code>C-S o</code> + <code>C n/p</code> goto symbol in editor 可用于跳转函数, 很好用</li>\n<li><code>Ctrl+T</code> goto symbol in workspace</li>\n<li><code>Rename symbol</code></li>\n<li><code>C-,</code> 打开设置</li>\n<li><code>M-x open settings (json)</code> 打开配置文件</li>\n<li><code>C-b</code> toggle left side bar</li>\n<li><code>C-j</code> toggle down side bar</li>\n<li>C-` toggle termianl</li>\n<li>C-S-` new terminal</li>\n<li><code>C-w</code> 关闭 tab</li>\n<li><code>C-+</code> 扩大字体 <code>view room in</code></li>\n<li><code>C--</code> 减小字体 <code>view room out</code></li>\n<li><code>M-x editor font size in</code> 只放大 editor size(emacs buffer)</li>\n<li><code>F12</code> goto-defination 改为 <code>M-.</code></li>\n<li><code>M-leftarrow</code> go-back 改为 <code>M-,</code></li>\n<li>vim <code>C-o and C-i</code> 前后跳转</li>\n<li><code>C-pagedown</code> next tab&#x2F;terminal 改为 <code>M-l</code></li>\n<li><code>C-pageup</code> previous tab&#x2F;terminal 改为 <code>M-h</code></li>\n<li><code>M-1</code> first tab</li>\n<li><code>C-p</code> find file 删除<code>C-e</code></li>\n<li><code>C-S-p</code> 命令搜索</li>\n<li>Esc 取消</li>\n<li>F8 next error</li>\n<li><code>C-S-y</code> debug console window</li>\n<li><code>C-S-u</code> output window</li>\n<li><code>C-S-m</code> problems window</li>\n<li><code>Focus on opened editors</code> 设置到 <code>M-b</code>, 配合<code>C-S-e</code>使用</li>\n<li><code>show all editors by appearance by recent use</code> 设置到 <code>M-b</code>, emacs <code>,bb</code></li>\n<li><code>View: Focus Next Editor Group</code> -&gt; <code>alt+o</code></li>\n<li><code>View: duplicate edior right</code> -&gt; <code>alt-3</code></li>\n<li><code>View: duplicate edior down</code> -&gt; <code>alt-2</code></li>\n<li><code>go to next change</code> git 修改 next</li>\n<li><code>C-S-t</code> reopen closed editor</li>\n<li><code>M-p toggle editor v/h layerout</code> 改变横向纵向分割</li>\n<li><code>reload window</code></li>\n<li><code>设置alt-n导航</code> <a href=\"https://stackoverflow.com/a/58082645\">link</a></li>\n<li><a href=\"https://gist.github.com/cschleiden/4dbc22a5711f069199a0cc730ac42cb5\">emacs 快捷键设置</a></li>\n<li><a href=\"https://stackoverflow.com/a/54403042\">快速切换 window</a></li>\n<li><code>M-S-c</code> copy file path</li>\n<li><code>Alt + Click</code>：添加新的光标, 多行操作</li>\n<li><code>Alt + Shift + Click</code>：多行操作</li>\n<li><code>M-S p</code> project manager: list project to open 配合 <code>C-M q</code> quick swich windwos</li>\n</ol>\n<h2 id=\"免密\"><a href=\"#免密\" class=\"headerlink\" title=\"免密\"></a>免密</h2><ol>\n<li>公钥放到服务器配置文件中</li>\n<li><code>IdentityFile &quot;C:\\Users\\xxx/xxx\\id_rsa&quot;</code> config 配置里添加私钥位置</li>\n<li><code>chmod 400 ~/.ssh/id_rsa</code> Permissions are too open</li>\n<li>wsl 里权限有问题，可以把 id_rsa 拷贝出来，换个指定位置。</li>\n<li>将本地<code>~/.ssh/id_rsa.pub</code>复制到<code>~/.ssh/authorized_keys</code>中</li>\n</ol>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><ol>\n<li><a href=\"https://code.visualstudio.com/docs/editor/debugging\">docs&#x2F;editor&#x2F;debugging</a> 非常好</li>\n<li>conditional breakpoints<ul>\n<li>expression</li>\n<li>hit count</li>\n</ul>\n</li>\n<li>logpoints</li>\n</ol>\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Percy.vscode-pydata-viewer\">vscode-pydata-viewer</a> 查看 pkl, pth 文件</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=LuoZhihao.call-graph\">call-graph</a><ul>\n<li>生成函数调用关系图</li>\n</ul>\n</li>\n<li>(good)<a href=\"https://ash12rai-weblearning.medium.com/visual-studio-code-vs-code-inlay-hints-32fee837e80\">inlay-hints</a><ul>\n<li>需要 install toggle 插件</li>\n</ul>\n</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=vincent-templier.vscode-netron\">vscode-netron</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.intellicode-api-usage-examples\">intellicode-api-usage-examples</a> 帮助文档里有 sample</li>\n<li><a href=\"https://www.cnblogs.com/hwy6/p/15930217.html\">Vscode 离线安装插件的方法</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=AykutSarac.jsoncrack-vscode\">JSON Crack json 可视化</a></li>\n<li>jupyter 不用安装图形界面就能显示<ul>\n<li><a href=\"https://code.visualstudio.com/docs/datascience/jupyter-notebooks\">教程</a></li>\n<li>C-Enter 运行 code</li>\n<li>C-M-S-Enter 进入 cell debug 模式</li>\n</ul>\n</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=rebornix.toggle\">toggle 设置</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=kiwanamie.dabbrev-expand\">dabbrev-expand</a> alt+&#x2F;</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle\">format-toggle</a> status bar 右下角有 status, 可以点击切换状态</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=hoovercj.vscode-settings-cycler\">toogle shortcut settings</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=jfacoustic.line-num-toggle\">line-num-toggle</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=cschlosser.doxdocgen\">doxdocgen</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks\">Bookmarks</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-extension-pack\">python-extension-pack</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance\">vscode-pylance lsp server 好用， 智能助手</a></li>\n<li>vscode 里选 most popular</li>\n<li>Laravel goto view ctrl 点击跳转, 配合 mater3 鼠标后退键，很高效</li>\n<li><a href=\"https://marketplace.visualstudio.com/vscode\">marketplace</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-statusbar-debugger\">StatusBar Debugger</a><ul>\n<li>关闭 floating debug toolbar: setting: debug -&gt; tool bar location -&gt; hiden</li>\n</ul>\n</li>\n<li>magit</li>\n<li>sourcegraph</li>\n<li>shell-format</li>\n<li>Prettier format</li>\n<li>cmake format</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=jasonlhy.hungry-delete\">hungry-delete</a></li>\n<li><a href=\"https://github.com/hediet/vscode-debug-visualizer\">vscode-debug-visualizer</a></li>\n<li>project manager (status bar 有图标， 可用于切换)</li>\n<li>gitlens(不负责提交 commit)<ul>\n<li>关闭自动显示配置</li>\n<li>编辑右上角有 toggle changes&#x2F;blame&#x2F;heatmaps 图标</li>\n<li>设置 git diff tool <a href=\"https://code.visualstudio.com/docs/sourcecontrol/overview#_vs-code-as-git-difftool-and-mergetool\">link</a></li>\n<li><code>C-w</code>关闭 diff</li>\n<li><code>open remote</code> 可以打开远程 commit branch file</li>\n<li>status bar 可以选择 zen or review mode， review mode 能显示多种信息; 可以显示关闭提交历史 <code>&quot;gitlens.mode.active&quot;: &quot;zen&quot;,</code></li>\n<li><code>GitLens:Toggle Zen Mode</code></li>\n</ul>\n</li>\n<li>vscode-icons</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=geeebe.duplicate\">Duplicate selection or line</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate\">duplicate file</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize\">vscode-filesize</a></li>\n<li>wsl</li>\n<li>json</li>\n<li>code runner</li>\n<li>Material Icon Theme</li>\n<li>remote ssh</li>\n<li>C&#x2F;C++ Extension Pack</li>\n<li>Better C++ Syntax</li>\n<li>C&#x2F;C++ Compile Run</li>\n<li>Path Intellisense</li>\n<li>Remote Development</li>\n<li>Rainbow Brackets</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=kamikillerto.vscode-colorize\">colorize</a> 显示值颜色</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=rsbondi.highlight-words\">highlight-words</a></li>\n<li>todo highlight</li>\n<li><a href=\"https://github.com/debugpig/vscode-extension-highlight\">highlight</a> 选择高亮字符, 配合 vim <code>*</code> <code>#</code> 使用</li>\n<li><a href=\"https://github.com/fabiospampinato/vscode-highlight\">vscode-highlight</a> 直接高亮字符</li>\n<li>Svg Preview</li>\n<li>better comment</li>\n<li>next console</li>\n<li>gdb-syntax</li>\n<li>excel view 查看 csv 文件</li>\n<li>doxygen document 生成 doxygen 注释</li>\n<li>Manpages</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=imagio.vscode-dimmer-block\">dimmer</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=nick-rudenko.back-n-forth\">back 图标</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">path-intellisense</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=njzy.stats-bar\">stats-bar: show cpu and mem usage</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils\">vscode-fileutils</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=antfu.browse-lite\">vscode 中打开网页，用于调试 server</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv\">rainbow-csv</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer\">excelviewer</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=phplasma.csv-to-table\">csv-to-table</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete\">path-autocomplete</a></li>\n</ol>\n<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a><a href=\"https://github.com/VSCodeVim/Vim\">vim</a></h2><ol>\n<li><a href=\"https://cnodejs.org/topic/5b9e696037a6965f59051a09\">设置 learder key</a></li>\n<li><code>toggleDevTools</code> 用来调试插件 vim loglevel 设置为 debug</li>\n<li>打开 easymotion</li>\n<li>修复 fold <a href=\"https://stackoverflow.com/a/50892839\">link</a></li>\n<li>可以设置 search color</li>\n</ol>\n<h2 id=\"theme\"><a href=\"#theme\" class=\"headerlink\" title=\"theme\"></a>theme</h2><ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark\">vscode-theme-onedark</a></li>\n<li>pe</li>\n</ol>\n<h2 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h2><ol>\n<li>fold and unfold tab to toggle fold</li>\n<li>show command using key</li>\n<li>对比 emacs 看有哪些好用的功能</li>\n</ol>\n<h2 id=\"issues\"><a href=\"#issues\" class=\"headerlink\" title=\"issues\"></a>issues</h2><ol>\n<li><a href=\"https://codeantenna.com/a/ZOXgWzApJO\">关闭 vscode 烦人的提示框</a></li>\n</ol>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><p>，1. ctrl 显示下划线，单击会跳转</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/singxsy/article/details/123730161\">不跳转问题修复</a></li>\n<li>lsp 使用 pylance</li>\n<li><code>&quot;justMyCode&quot;:False</code></li>\n<li>set python3 path: Python: Select Interpreter</li>\n<li>config: “cwd”: “${fileDirname}”</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// Use IntelliSense to learn about possible attributes.</span></span><br><span class=\"line\">  <span class=\"comment\">// Hover to view descriptions of existing attributes.</span></span><br><span class=\"line\">  <span class=\"comment\">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Python: Current File&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integratedTerminal&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;justMyCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> # 是否跳转到其他库</span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Web","url":"/2021/03/16/Web/","content":"<h2 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h2><ol>\n<li>HTML: Markup Language 构建网页，例如：建筑骨架</li>\n<li>CSS: Styling Language 网页样式: 例如： 建筑外观，墙的颜色</li>\n<li>JavaScript: Programming Language 网页功能 例如：建筑功能，电梯</li>\n<li>常用库： REACT, ANGULAE, VUE</li>\n</ol>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/MVC\">维基百科</a></li>\n<li>MVC 模式在概念上强调 Model, View, Controller 的分离，各个模块也遵循着由 Controller 来处理消息，Model 掌管数据源，View 负责资料显示的职责分离原则，因此在实现上，MVC 模式的 Framework 通常会将 MVC 三个部分分离实现</li>\n<li>View 负责格式化数据并把它们呈现给用户，业务逻辑和表示层分离，同一个 Model 可以被不同的 View 重用，所以大大提高了代码的可重用性。</li>\n</ol>\n<h2 id=\"Controller-Service-and-Repository\"><a href=\"#Controller-Service-and-Repository\" class=\"headerlink\" title=\"Controller, Service, and Repository\"></a>Controller, Service, and Repository</h2><h2 id=\"增删改查（CRUD\"><a href=\"#增删改查（CRUD\" class=\"headerlink\" title=\"增删改查（CRUD)\"></a>增删改查（CRUD)</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A2%9E%E5%88%AA%E6%9F%A5%E6%94%B9\">维基百科</a></li>\n<li>增删查改（英语：CRUD[注 1]），全称增加（Create，意为“创建”）、删除（Delete）、查询（Read，意为“读取”）、改正（Update，意为“更新”），在计算机程序语言中是一连串常见的动作行为，而其行为通常是为了针对某个特定资源所作出的举动（例如：创建资料、读取资料等）。这四个行为最常见的用途是在使用 SQL 数据库与网站的 API 端口口的时候。</li>\n</ol>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><ol>\n<li><a href=\"https://www.jianshu.com/p/80e25cb1d81a\">简介</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\">http methods</a></li>\n</ol>\n<h2 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6\">维基百科</a></li>\n<li>统一资源标识符（英语：Uniform Resource Identifier，缩写：URI）在电脑术语中是一个用于标识某一互联网资源名称的字符串。</li>\n<li>URL 是一种 URI</li>\n<li><code>URI = scheme “://” authority “/” path [ “?” query ][ “#” fragment ]</code></li>\n<li>scheme: 指底层用的协议，如 http、https、ftp<br>host: 服务器的 IP 地址或者域名<br>port: 端口，http 中默认 80, https 中默认 443<br>path: 访问资源的路径，就是咱们各种 web 框架中定义的 route 路由<br>query: 为发送给服务器的参数<br>fragment: 锚点，定位到页面的资源，锚点为资源 id</li>\n<li></li>\n</ol>\n<h2 id=\"CORS-跨域资源共享\"><a href=\"#CORS-跨域资源共享\" class=\"headerlink\" title=\"CORS 跨域资源共享\"></a>CORS 跨域资源共享</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/53996160\">所有人都应该知道的跨域及 CORS</a></li>\n</ol>\n<h2 id=\"CGI-通用网关接口\"><a href=\"#CGI-通用网关接口\" class=\"headerlink\" title=\"CGI 通用网关接口\"></a>CGI 通用网关接口</h2><ol>\n<li>Restful 风格 API 的出现，让 CGI 获得了续命。CGI 解析前端请求，再转发给对应后端；然后从后端取回数据，给前端返回 XML 或 JSON。然后前端 JS 利用 XML&#x2F;JSON 中的数据来进行填充。可以绘制出丰富的界面或用作他用。JS 可以使用 Ajax 技术来向后台 CGI 发起数据请求。Ajax 完成的是不需要刷新整个页面就可以加载后端数据（比如从数据库中取出）。</li>\n<li>请注意区分 Web Server 和后台 Server。</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25013398\">图解</a></li>\n<li><a href=\"https://baike.baidu.com/item/CGI/607810\">百科</a></li>\n</ol>\n<h2 id=\"REST-API\"><a href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"></a>REST API</h2><ol>\n<li><a href=\"https://learning.postman.com/docs/getting-started/installation-and-updates/#installing-postman-on-windows\">postman</a></li>\n<li><a href=\"https://reqbin.com/\">online test</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=7YcW25PHnAA\">youtube samples</a></li>\n<li><a href=\"https://i6448038.github.io/2017/06/28/rest-%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/\">接口规范</a></li>\n<li><a href=\"https://api.github.com/\">github API</a></li>\n<li><a href=\"https://docs.github.com/en/rest\">github REST API</a></li>\n</ol>\n<h2 id=\"OpenAPI\"><a href=\"#OpenAPI\" class=\"headerlink\" title=\"OpenAPI\"></a>OpenAPI</h2><ol>\n<li><a href=\"https://swagger.io/docs/specification/about/\">openapi</a></li>\n</ol>\n"},{"title":"Why Rust","url":"/2020/07/10/Why-Rust/","content":"<h2 id=\"Why-Rust\"><a href=\"#Why-Rust\" class=\"headerlink\" title=\"Why Rust?\"></a>Why Rust?</h2><h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><ol>\n<li>It’s <strong><code>fast</code></strong> and memory efficient: with no runtime or garbage collector.</li>\n<li>It can easily integrate with other languages.</li>\n</ol>\n<h3 id=\"Reliability\"><a href=\"#Reliability\" class=\"headerlink\" title=\"Reliability\"></a>Reliability</h3><ol>\n<li>It’s rich type system and ownership model guarantee <font color='red'><strong>memory-safety</strong></font> and <font color='red'><strong>thread-safety</strong></font>.</li>\n</ol>\n<h3 id=\"Productivity\"><a href=\"#Productivity\" class=\"headerlink\" title=\"Productivity\"></a>Productivity</h3><ol>\n<li>Great documentation</li>\n<li>Friendly compiler, find most errors when compiling</li>\n<li>An integrated package manager</li>\n<li>Doc system: <code>cargo doc --open</code></li>\n</ol>\n<h2 id=\"Rust-features\"><a href=\"#Rust-features\" class=\"headerlink\" title=\"Rust features\"></a>Rust features</h2><ol>\n<li>Zero-cost abstractions</li>\n<li>Modern conveniences</li>\n<li>Type system: Ownership and Borrowing</li>\n<li>Sense of craftsmanship</li>\n</ol>\n<h2 id=\"Why-Name-Rust\"><a href=\"#Why-Name-Rust\" class=\"headerlink\" title=\"Why Name Rust?\"></a>Why Name Rust?</h2><ol>\n<li>It’s a pun on “chrome”. Rust was written by the engineer company Mozilla(firefox). And chrome is a metal.</li>\n</ol>\n<h2 id=\"Rust-目的\"><a href=\"#Rust-目的\" class=\"headerlink\" title=\"Rust 目的\"></a>Rust 目的</h2><ol>\n<li>创建这个新语言的目的是为了解决一个顽疾：软件的演进速度大大低于硬件的演进，软件在语言级别上无法真正利用多核计算带来的性能提升。Rust是针对多核体系提出的语言，并且吸收一些其他动态语言的重要特性，比如不需要管理内存，比如不会出现Null指针等</li>\n</ol>\n<h2 id=\"Why-not-C\"><a href=\"#Why-not-C\" class=\"headerlink\" title=\"Why not C++\"></a>Why not C++</h2><ol>\n<li>当然C++ 也很好，因为它教会了我怎么面向搜索引擎编程。</li>\n</ol>\n<h2 id=\"Rust类型系统借鉴Haskell特性\"><a href=\"#Rust类型系统借鉴Haskell特性\" class=\"headerlink\" title=\"Rust类型系统借鉴Haskell特性\"></a>Rust类型系统借鉴Haskell特性</h2><ol>\n<li>没有空指针</li>\n<li>类型默认不可变</li>\n<li>表达式</li>\n<li>高阶函数</li>\n<li>代数数据类型</li>\n<li>模式匹配</li>\n<li>泛型</li>\n<li>trait和关联类型</li>\n<li>本地类型推导</li>\n</ol>\n<h2 id=\"Rust相比Haskell独有特点\"><a href=\"#Rust相比Haskell独有特点\" class=\"headerlink\" title=\"Rust相比Haskell独有特点\"></a>Rust相比Haskell独有特点</h2><ol>\n<li>仿射变换(Affine Type)</li>\n<li>借用，生命周期</li>\n</ol>\n","categories":["Program","Rust"],"tags":["Rust"]},{"title":"Zsh config","url":"/2020/07/22/Zsh-config/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li>scp not work</li>\n</ol>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"># remember to put this code to .bashrc before <span class=\"built_in\">execute</span> zsh</span><br><span class=\"line\"># If <span class=\"keyword\">not</span>, scp can <span class=\"keyword\">not</span> work.</span><br><span class=\"line\"><span class=\"string\">[[ $- == *i* ]]</span> || <span class=\"keyword\">return</span></span><br><span class=\"line\">zsh</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果你使用的是 zsh，上面的通配符会失效，你可以切换到 bash 执行这些命令，或者使用 setopt no_nomatch 来关闭 zsh 对于通配符的拦截</li>\n</ol>\n<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh my zsh\"></a>oh my zsh</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"microsoft-inshellisense-npm-issue\"><a href=\"#microsoft-inshellisense-npm-issue\" class=\"headerlink\" title=\"microsoft&#x2F;inshellisense npm issue\"></a><a href=\"https://github.com/microsoft/inshellisense\">microsoft&#x2F;inshellisense</a> <a href=\"https://stackoverflow.com/a/61404290\">npm issue</a></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g @microsoft/inshellisense</span><br><span class=\"line\">inshellisense <span class=\"built_in\">bind</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"autosuggestions\"><a href=\"#autosuggestions\" class=\"headerlink\" title=\"autosuggestions\"></a>autosuggestions</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/custom/plugins/zsh-autosuggestions</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s/fg=8/fg=cyan/&quot;</span> .oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class=\"line\">vi ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh 文件，修改 ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=<span class=\"string\">&#x27;fg=blue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># support colors: black, red, green; yellow; blue; magenta; cyan and white;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"zsh-syntax-highlighting\"><a href=\"#zsh-syntax-highlighting\" class=\"headerlink\" title=\"zsh-syntax-highlighting\"></a>zsh-syntax-highlighting</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/jimmijj/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"zshrc-config\"><a href=\"#zshrc-config\" class=\"headerlink\" title=\".zshrc config\"></a>.zshrc config</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PROMPT=<span class=\"string\">&quot;%n@%m:%1~%# &quot;</span></span><br><span class=\"line\">plugins=(rust rustup cargo zsh-autosuggestions zsh-syntax-highlighting colored-man-pages tmux fd)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Othe-config\"><a href=\"#Othe-config\" class=\"headerlink\" title=\"Othe config\"></a>Othe config</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config oh-my-zsh.hide-status 1 --global <span class=\"comment\">#close git status</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Powlevel9k-theme\"><a href=\"#Powlevel9k-theme\" class=\"headerlink\" title=\"Powlevel9k theme\"></a>Powlevel9k theme</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/bhilburn/</span>powerlevel9k.git ~<span class=\"regexp\">/.oh-my-zsh/</span>custom<span class=\"regexp\">/themes/</span>powerlevel9k</span><br><span class=\"line\">.zshrc：</span><br><span class=\"line\">export TERM=<span class=\"string\">&quot;xterm-256color&quot;</span></span><br><span class=\"line\">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user dir)</span><br><span class=\"line\">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(root_indicator background_jobs )</span><br><span class=\"line\">POWERLEVEL9K_MODE=<span class=\"string\">&#x27;awesome-fontconfig&#x27;</span></span><br><span class=\"line\">ZSH_THEME=<span class=\"string\">&quot;powerlevel9k/powerlevel9k&quot;</span></span><br><span class=\"line\">~<span class=\"regexp\">/.oh-my-zsh/</span>custom<span class=\"regexp\">/themes/</span>powerlevel9k/powerlevel9k.zsh-theme          修改  <span class=\"string\">&quot;CONTENT&quot;</span>             <span class=\"string\">&quot;jia@61&quot;</span> <span class=\"comment\">#&quot;$(whoami)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"awesome-terminal-fonts\"><a href=\"#awesome-terminal-fonts\" class=\"headerlink\" title=\"awesome-terminal-fonts\"></a>awesome-terminal-fonts</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/gabrielelana/awesome-terminal-fonts</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -R build/* ~/.fonts/</span><br><span class=\"line\">fc-cache -fv ~/.fonts</span><br><span class=\"line\"><span class=\"built_in\">cp</span> config/10-symbols.conf ~/.config/fontconfig/conf.d</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.fonts/*.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"autojump\"><a href=\"#autojump\" class=\"headerlink\" title=\"autojump\"></a>autojump</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/joelthelion/autojump.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> autojump</span><br><span class=\"line\">./install.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"powerline-非必须）\"><a href=\"#powerline-非必须）\" class=\"headerlink\" title=\"powerline(非必须）\"></a>powerline(非必须）</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-powerline</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class=\"line\"><span class=\"built_in\">cd</span> fonts</span><br><span class=\"line\">./install.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><p>install oh my zsh : sh -c “$(curl -fsSL <a href=\"https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh\">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a>)”<br>zsh autosuggestions <a href=\"https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBa075b0a3e60cbde5f506563c3c14997a/\">https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBa075b0a3e60cbde5f506563c3c14997a/</a><br>sudo apt-get install autojump <a href=\"https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEB1da9f35b71c3815439e1426116e7ecf9/\">https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEB1da9f35b71c3815439e1426116e7ecf9/</a><br>Powlevel9k theme install <a href=\"https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBfd1ecc9886dfcf108ee9bae6b586cab6/\">https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBfd1ecc9886dfcf108ee9bae6b586cab6/</a><br>Powerline <a href=\"https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBac4ed9c8ab78bb09940458cfb9b1a397/\">https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBac4ed9c8ab78bb09940458cfb9b1a397/</a><br>awesome-terminal-fonts <a href=\"http://www.cnblogs.com/weixuqin/p/7029177.html\">http://www.cnblogs.com/weixuqin/p/7029177.html</a><br>zsh-syntax-highlighting <a href=\"https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBef4ca4fdaf7d36950545241429e3daee/\">https://note.youdao.com/web/#/file/WEB35aa360d3643be282ab89890d39646cf/note/WEBef4ca4fdaf7d36950545241429e3daee/</a></p>\n","categories":["Tools","Zsh"],"tags":["Zsh"]},{"title":"agent","url":"/2024/06/27/agent/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>智能体（Agent）是一个能够感知其环境并采取行动以实现某些目标的实体。智能体的基本组件包括：<ul>\n<li>感知：智能体通过传感器获取环境信息。</li>\n<li>决策：智能体基于感知到的信息以及其内部状态做出决策。</li>\n<li>行动：智能体通过执行器与环境互动，以实现特定目标。</li>\n</ul>\n</li>\n<li>智能体可以是非常简单的（例如基于规则的系统）或者非常复杂的（例如自主驾驶汽车）。智能体可以是软件程序，也可以是物理机器人。</li>\n<li>具身智能（Embodied Intelligence）是人工智能（AI）和机器人学中的一个概念，强调智能体（agent）不仅仅通过抽象的计算或逻辑推理展现智能，而是通过与物理环境的互动和感知展现智能。具体来说，具身智能认为身体在智能行为中起着关键作用，智能体必须能够感知其环境、作出反应并采取行动，而不仅仅是处理信息或进行推理。</li>\n<li>具身智能是人工智能的一个发展领域，指一种智能系统或机器能够通过感知和交互与环境进行实时互动的能力。 可以简单理解为各种不同形态的机器人，让它们在真实的物理环境下执行各种各样的任务，来完成人工智能的进化过程。 具身智能机器人是“具身智能”的实体形态，有望成为 AI 的最终载体。</li>\n</ol>\n"},{"title":"ai-papers","url":"/2023/12/18/ai-papers/","content":"<h2 id=\"alexnet\"><a href=\"#alexnet\" class=\"headerlink\" title=\"alexnet\"></a><a href=\"https://papers.nips.cc/paper_files/paper/2012/hash/c399862d3b9d6b76c8436e924a68c45b-Abstract.html\">alexnet</a></h2><ol>\n<li>关键是 end2end, 直接 rgb 到结果，不用做各种专业处理</li>\n<li>CNN 关键是压缩(特征一层一层压缩)</li>\n<li>SGD: 全称为 Stochastic Gradient Descent,即随机梯度下降,是机器学习中常用的优化算法,用于训练各种模型(如神经网络)寻找最优参数</li>\n<li>dropout</li>\n</ol>\n<h2 id=\"resnet\"><a href=\"#resnet\" class=\"headerlink\" title=\"resnet\"></a><a href=\"https://arxiv.org/abs/1512.03385\">resnet</a></h2><ol>\n<li>加残差， 能训练很深，计算量未增加</li>\n</ol>\n<h2 id=\"unet\"><a href=\"#unet\" class=\"headerlink\" title=\"unet\"></a><a href=\"https://arxiv.org/abs/1505.04597\">unet</a></h2><h2 id=\"transformer\"><a href=\"#transformer\" class=\"headerlink\" title=\"transformer\"></a><a href=\"https://arxiv.org/abs/1706.03762\">transformer</a></h2><h2 id=\"ViT-Vision-Transformer\"><a href=\"#ViT-Vision-Transformer\" class=\"headerlink\" title=\"ViT Vision Transformer,\"></a>ViT Vision Transformer,</h2><h2 id=\"flash-attention\"><a href=\"#flash-attention\" class=\"headerlink\" title=\"flash attention\"></a>flash attention</h2><h2 id=\"PagedAttention\"><a href=\"#PagedAttention\" class=\"headerlink\" title=\"PagedAttention\"></a><a href=\"https://arxiv.org/pdf/2309.06180.pdf\">PagedAttention</a></h2><ol>\n<li>分块 KV 缓存通过消除 KV 缓存引起的内存碎片化，增加了潜在的序列并发量，从而增加了系统吞吐量。</li>\n<li>没有减少 KV cache</li>\n<li>类似于现有的框架如 TRT-LLM、TGI 和 vLLM，DeepSpeed-FastGen 的目标是利用连续批处理和非连续 KV 缓存技术，以提升数据中心服务大型语言模型（LLM）的硬件利用率和响应速度。为了实现更高的性能，DeepSpeed-FastGen 提出了 SplitFuse 技术，它利用动态提示和生成分解, 统一来进一步改善连续批处理和系统吞吐量。</li>\n</ol>\n<h2 id=\"diffusion\"><a href=\"#diffusion\" class=\"headerlink\" title=\"diffusion\"></a>diffusion</h2><h2 id=\"stable-diffusion\"><a href=\"#stable-diffusion\" class=\"headerlink\" title=\"stable diffusion\"></a>stable diffusion</h2><h2 id=\"UniAD\"><a href=\"#UniAD\" class=\"headerlink\" title=\"UniAD\"></a><a href=\"https://arxiv.org/abs/2212.10156\">UniAD</a></h2><ol>\n<li><a href=\"https://github.com/OpenDriveLab/UniAD\">github</a></li>\n</ol>\n<h2 id=\"BEVFormer\"><a href=\"#BEVFormer\" class=\"headerlink\" title=\"BEVFormer\"></a><a href=\"https://github.com/fundamentalvision/BEVFormer\">BEVFormer</a></h2><ol>\n<li><a href=\"https://drive.google.com/file/d/1dKnD6gUHhBXZ8gT733cIU_A7dHEEzNTP/view\">中文版</a></li>\n</ol>\n<h2 id=\"如何使用-arxiv\"><a href=\"#如何使用-arxiv\" class=\"headerlink\" title=\"如何使用 arxiv\"></a>如何使用 arxiv</h2><h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1AAIebjNsnJj_uKALHbXNfn3_YsT6sHXtCU0q7OIPuc4/edit#gid=0\">Parameter, Compute and Data Trends in Machine Learning</a> good：包含参数，计算量, 训练数据量，论文引用</li>\n<li><a href=\"https://github.com/labmlai/annotated_deep_learning_paper_implementations\">labml.ai Deep Learning Paper Implementations</a><ul>\n<li>colab 中有测试代码</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/labmlai/annotated_deep_learning_paper_implementations/tree/master?tab=readme-ov-file#highlighted-research-paper-pdfs\">papers 画了重点</a></li>\n<li><a href=\"https://paperswithcode.com/\">paperwithcode</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLFXJ6jwg0qW-7UM8iUTj3qKqdhbQULP5I\">李沐论文精度</a></li>\n<li><a href=\"https://zh.d2l.ai/\">李沐《动手学深度学习》</a></li>\n<li><a href=\"https://zh-v2.d2l.ai/d2l-zh.pdf\">《动手学深度学习》pdf</a></li>\n<li><a href=\"https://github.com/huggingface/pytorch-image-models\">images-models-papaers</a></li>\n</ol>\n"},{"title":"assembly","url":"/2023/09/21/assembly/","content":"<h2 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h2><h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h3><ol>\n<li>code</li>\n</ol>\n<figure class=\"highlight plaintext\"><figcaption><span>test.s</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">.section .data   # 指示汇编器开始一个数据段，通常用于存储变量和常量。</span><br><span class=\"line\">hello_message:   # 定义了一个名为 hello_message 的标签，其内容是 &quot;Hello, World!\\n&quot; 字符串。.asciz 指令告诉汇编器创建一个以零结尾的 ASCII 字符串（即 C 字符串）。</span><br><span class=\"line\">    .asciz &quot;Hello, World!\\n&quot;</span><br><span class=\"line\">.section .text   # 指示汇编器开始一个代码段，通常用于存储程序代码。</span><br><span class=\"line\">.globl _start    # 告诉链接器 _start 标签是一个全局符号，意味着它可以在其他文件中被引用。对于这个程序，_start 是程序的入口点。</span><br><span class=\"line\"></span><br><span class=\"line\">_start:</span><br><span class=\"line\">    # Write hello_message to stdout</span><br><span class=\"line\">    mov x8, #64            // syscall: write</span><br><span class=\"line\">    mov x0, #1             // file descriptor: stdout</span><br><span class=\"line\">    ldr x1, =hello_message // pointer to hello_message</span><br><span class=\"line\">    mov x2, #13            // message length</span><br><span class=\"line\">    svc #0                 // invoke syscall</span><br><span class=\"line\"></span><br><span class=\"line\">    # Exit the program</span><br><span class=\"line\">    mov x8, #93            // syscall: exit</span><br><span class=\"line\">    mov x0, #0             // exit status 0</span><br><span class=\"line\">    svc #0                 // invoke syscall</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>compile command</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">as test.s -o test.o</span><br><span class=\"line\">ld test.o -o <span class=\"built_in\">test</span></span><br><span class=\"line\">./test</span><br><span class=\"line\">objdump -dw <span class=\"built_in\">test</span> <span class=\"comment\">#查看生成的汇编</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vector-sample\"><a href=\"#vector-sample\" class=\"headerlink\" title=\"vector sample\"></a>vector sample</h3><ol>\n<li>code</li>\n</ol>\n<figure class=\"highlight plaintext\"><figcaption><span>test.s</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">.global _start      // 声明全局标签，这是程序的起始点</span><br><span class=\"line\"></span><br><span class=\"line\">.section .data      // 开始数据段，用于定义初始化的变量</span><br><span class=\"line\">.align 3            // 确保32位对齐</span><br><span class=\"line\">a:      .int 1, 2, 3, 4    // 定义整数数组a</span><br><span class=\"line\">b:      .int 5, 6, 7, 8    // 定义整数数组b</span><br><span class=\"line\">result: .int 0, 0, 0, 0    // 定义整数数组result用于存储结果</span><br><span class=\"line\">msg:    .asciz &quot;Result: [%d, %d, %d, %d]\\n&quot;   // 定义用于打印的字符串格式</span><br><span class=\"line\"></span><br><span class=\"line\">.section .text      // 开始文本段，用于定义代码</span><br><span class=\"line\"></span><br><span class=\"line\">vector_add:</span><br><span class=\"line\">    ld1 &#123;v0.4s&#125;, [x0]   // 从x0指向的地址加载向量到v0寄存器</span><br><span class=\"line\">    ld1 &#123;v1.4s&#125;, [x1]   // 从x1指向的地址加载向量到v1寄存器</span><br><span class=\"line\">    add v2.4s, v0.4s, v1.4s  // 将v0和v1的内容相加，结果存放在v2中</span><br><span class=\"line\">    st1 &#123;v2.4s&#125;, [x2]   // 将v2的内容存储到x2指向的地址</span><br><span class=\"line\">    ret                 // 返回到调用此函数的位置</span><br><span class=\"line\"></span><br><span class=\"line\">_start:</span><br><span class=\"line\">    adr x0, a           // 将数组a的地址加载到x0寄存器</span><br><span class=\"line\">    adr x1, b           // 将数组b的地址加载到x1寄存器</span><br><span class=\"line\">    adr x2, result      // 将数组result的地址加载到x2寄存器</span><br><span class=\"line\">    bl vector_add       // 调用vector_add函数</span><br><span class=\"line\"></span><br><span class=\"line\">    adr x0, msg         // 加载字符串格式的地址到x0寄存器</span><br><span class=\"line\">    adr x5, result      // 将数组result的地址加载到x5寄存器</span><br><span class=\"line\">    ldr w1, [x5]        // 加载result数组的第一个元素到x1寄存器</span><br><span class=\"line\">    ldr w2, [x5, #4]    // 加载result数组的第二个元素到x2寄存器</span><br><span class=\"line\">    ldr w3, [x5, #8]    // 加载result数组的第三个元素到x3寄存器</span><br><span class=\"line\">    ldr w4, [x5, #12]   // 加载result数组的第四个元素到x4寄存器</span><br><span class=\"line\">    bl printf           // 调用printf函数打印结果</span><br><span class=\"line\"></span><br><span class=\"line\">    mov x8, #93         // 加载系统调用号到x8寄存器，93是exit的调用号</span><br><span class=\"line\">    mov x0, #0          // 设置退出状态为0</span><br><span class=\"line\">    svc 0               // 进行系统调用</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>compile command</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">as -o test.o test.s</span><br><span class=\"line\">ld -o <span class=\"built_in\">test</span> test.o -lc <span class=\"comment\"># 需要链接C库</span></span><br><span class=\"line\">./test</span><br><span class=\"line\">objdump -dw <span class=\"built_in\">test</span> <span class=\"comment\">#查看生成的汇编</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://arm64.syscall.sh/\">系统调用寄存器配置</a></li>\n</ol>\n<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>ARMv8-A：<ul>\n<li>前 8 个整数参数传递给函数时，使用寄存器 x0 到 x7。如果有更多的整数参数，它们会通过堆栈传递。前 8 个浮点参数使用浮点寄存器 v0 到 v7 传递。整数或指针返回值使用寄存器 x0（和 x1，如果需要返回更大的值，例如 128 位的值）。浮点数或向量返回值通过 v0 和 v1 返回。</li>\n<li>系统调用主要使用 x0 到 x8 这 9 个寄存器，其中 x8 存储系统调用号，x0 到 x7 用于参数传递和返回值。</li>\n</ul>\n</li>\n<li>指令、伪指令、寄存器都可以全部是大写或者小写，GNU 风格是小写。</li>\n</ol>\n<h2 id=\"伪指令\"><a href=\"#伪指令\" class=\"headerlink\" title=\"伪指令\"></a><a href=\"https://zhuanlan.zhihu.com/p/533821145\">伪指令</a></h2><ol>\n<li>伪指令就是对汇编器发出的指令。它在源程序汇编期间由汇编器处理。伪指令是由汇编器预处理的指令。它可以分解为几条指令的集合。</li>\n<li>伪指令可以实现一下功能 - 符号定义 - 数据定义和对齐 - 汇编控制 - 汇编宏 - 段描述</li>\n</ol>\n<h2 id=\"WebAssembly-abbreviated-Wasm\"><a href=\"#WebAssembly-abbreviated-Wasm\" class=\"headerlink\" title=\"WebAssembly (abbreviated Wasm)\"></a><a href=\"https://webassembly.org/\">WebAssembly (abbreviated Wasm)</a></h2><ol>\n<li>WebAssembly 是一种运行在现代网络浏览器中的新型代码，并且提供新的性能特性和效果。它设计的目的不是为了手写代码,而是为诸如 C、C++和 Rust 等低级源语言提供一个高效的编译目标。</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://winddoing.github.io/post/7190.html\">ARMv8-aarch64 寄存器和指令集</a></li>\n<li><a href=\"https://armv8-doc.readthedocs.io/en/latest/02.html\">Armv8&#x2F;armv9 架构入门指南</a></li>\n<li><a href=\"https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md\">Linux System Call Table 多个平台</a></li>\n<li><a href=\"https://syscall.sh/\">不同平台系统调用寄存器配置</a></li>\n</ol>\n"},{"title":"benchmark","url":"/2023/05/10/benchmark/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://browser.geekbench.com/v6/cpu\">geekbench 芯片性能统计</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/uTp9DXsG0pzTbyux1JgHMA\">抛弃 ARM，高通第五代汽车芯片</a></li>\n</ol>\n"},{"title":"bev","url":"/2024/06/12/bev/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>具体到智能驾驶系统，因为感知、预测、决策和规划等模块，都是在 3D 空间内进行的，而摄像头看到的图像信息，只是真实物理世界在透视视图（Perspective View）下的投影，从图像得到的信息，需要经过复杂的后处理才能使用，信息损失也很多。而<code>将视觉信息转换到 BEV 空间，则可以很方便地连接感知与下游的规划控制模块</code>。</li>\n<li>BEV 空间内的感知任务，在精度上也有优势。做 2D 感知时，面对远处的物体，可能几个像素的误差便可能导致几十米的真实误差，而在 BEV 空间内训练模型时，对远处误差的损失（loss）更加明显，所以感知结果也会更准确一些。</li>\n<li>BEV 在线构建的语义地图可以一定程度上代替高精地图的作用，在城市 NOA 中发挥重要作用。</li>\n<li>HDMapNet、BEVSegFormer、BEVerse 等方法，可以基于多摄像头信息，将 BEV 空间内的车道线、路沿、斑马线等静态目标物，在线生成局部语义地图供下游规控任务使用，大大降低了语义地图的构建和维护成本，从而可能会给行业带来地图构建和更新的新范式。</li>\n</ol>\n<h2 id=\"bevdet\"><a href=\"#bevdet\" class=\"headerlink\" title=\"bevdet\"></a>bevdet</h2><h2 id=\"bevformer\"><a href=\"#bevformer\" class=\"headerlink\" title=\"bevformer\"></a>bevformer</h2><h2 id=\"bevfuison\"><a href=\"#bevfuison\" class=\"headerlink\" title=\"bevfuison\"></a>bevfuison</h2><ol>\n<li><a href=\"https://github.com/mit-han-lab/bevfusion/tree/main/mmdet3d/ops/bev_pool/src\">bev_pool code</a></li>\n</ol>\n<h2 id=\"bev-pool\"><a href=\"#bev-pool\" class=\"headerlink\" title=\"bev pool\"></a>bev pool</h2><ol>\n<li>bevfusion 先实现</li>\n<li>Voxel Pooling 用来把多视角的 3D 特征 F3d(视锥特征) 聚合成统一的基于 BEV 的特征 Fbev 。<ul>\n<li>voxel 体素，对应 3d 特征点， pixel 像素，对应 2d 特征点</li>\n</ul>\n</li>\n<li><a href=\"https://arxiv.org/abs/2211.17111\">BEVPoolv2: A Cutting-edge Implementation of BEVDet Toward Deployment</a></li>\n<li><a href=\"https://blog.csdn.net/djfjkj52/article/details/138722692\">BEVDet 的 Voxel pooling 新版本 BEVPoolv2: A Cutting-edge Implementation of BEVDet Toward Deplo</a></li>\n<li>根据 NDHW voxel index(3d 特征点到 bev pillar 映射索引) 和 NDHWC frustum feature（视锥特征) 可以得到 bev feature</li>\n<li>估计深度原理可能是近大远小，同一个物体如果占用了很多像素则说明物体离的近，占用很少像素说明离的远</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/539951496\">一文读懂 BEV 空间内的特征级融合</a><ul>\n<li>前融合：是指把各传感器的数据采集后，经过数据同步后，对这些原始数据进行融合</li>\n<li>中融合：就是先将各个传感器通过神经网络模型提取中间层特征（即有效特征），再对多种传感器的有效主要特征进行融合，从而更有可能得到最佳推理。</li>\n<li>后融合：是指各传感器针对目标物体单独进行深度学习模型推理，从而各自输出带有传感器自身属性的结果，并在决策层进行融合，</li>\n</ul>\n</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/567880155\">一文读懂 BEV 自底向上方法：LSS 和 BEVDepth</a></li>\n<li><a href=\"https://github.com/NVIDIA-AI-IOT/Lidar_AI_Solution/\">NVIDIA-AI-IOT&#x2F;Lidar_AI_Solution&#x2F;</a></li>\n</ol>\n"},{"title":"blas","url":"/2024/01/11/blas/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>先选定 TileC，然后沿着 k 轴移动小块进行累加求和的策略为 sliced-k，它对于 m、n 维度较大的场景（m n 分块所需要的 block 数目足以填充所有的 SM）比较有效。<code>对于k比较大，而m、n比较小的场景，由于m、n较小而我们根据C来划分thread block，这时需要的thread block数目比较小，当这个数目无法填充所有的SM时，则存在很多SM无任务，而有任务的SM需却又需要循环多次的问题</code>，这时候可以考虑将 k 轴拆分成多段，每一段都计算一个 TileC 结果，最后再通过额外的累加过程将多段的结果进行求和，这种模式的任务划分方法成为 split-k 方法。<a href=\"https://zhuanlan.zhihu.com/p/667521327\">link</a></li>\n<li><a href=\"https://arxiv.org/abs/2301.03598\">Stream-K: Work-Centric Parallel Decomposition for Dense Matrix-Matrix Multiplication on the GPU</a><ul>\n<li>矩阵乘分块方法： sliced-k, split-k, stream-k</li>\n</ul>\n</li>\n<li><a href=\"https://blog.csdn.net/u013701860/article/details/128674224\">split-k</a><ul>\n<li>k 维度由多个 thread 计算， 减少单 thread 的延迟， 增加并行性</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/efficient_gemm.md#parallelized-reductions\">efficient_gemm.md parallelized-reductions</a><ul>\n<li>split-k</li>\n</ul>\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3\">各种 blas 实现</a></li>\n<li>BLAS 是 Basic Linear Algebra Subprograms 的缩写,即基本线性代数子程序,它是一系列线性代数运算函数的标准说明和接口规范。通常情况下,BLAS 函数库会为矩阵和向量运算提供高效、经过优化的实现,这些函数被广泛使用于科学计算、机器学习、数据分析等领域需要大量数值计算的场景中。常见的 BLAS 函数标准说明有:<ul>\n<li>BLAS level 1:向量-向量运算</li>\n<li>BLAS level 2:矩阵-向量运算</li>\n<li>BLAS level 3:矩阵-矩阵运算</li>\n</ul>\n</li>\n<li><code>GEMM(General Matrix-Matrix Multiplication)</code> 是通用矩阵乘法,表示 <code>C = αAB + β*C</code>。它计算两个矩阵的乘积,是最常见的数值密集型运算之一。</li>\n<li><code>GEMV(General Matrix-Vector Multiplication)</code>是矩阵向量乘法,表示<code>y = αAx + β*y</code>。它计算矩阵和向量的乘积得到一个向量。 αβ 是标量，A 是矩阵，xy 是向量</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm\">how-to-optimize-gemm</a></li>\n<li><a href=\"https://github.com/NervanaSystems/maxas/wiki/SGEMM\">maxas&#x2F;wiki&#x2F;SGEMM</a></li>\n<li>blas 库命名规则<br><img src=\"https://i.ibb.co/8MWgXfn/atg4bmz-C9l.png\" alt=\"name rule\"></li>\n<li>sgemm: <a href=\"https://mp.weixin.qq.com/s/AukKpQU0XDH1YrDH_U8i1g\">link</a><ul>\n<li>s: single</li>\n<li>ge: general</li>\n<li>mm:matirx matrix matrix product</li>\n</ul>\n</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/350470257\">矩阵乘法的内积与外积</a><ul>\n<li>cuda thread tile 时用了外积，可以缓存 shared memory 到 register</li>\n</ul>\n</li>\n<li><a href=\"https://kl66.top/2019/05/30/%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E7%A7%AF/\">向量和矩阵的各种积</a></li>\n<li><code>lda</code> leading dimension of two-dimensional array used to store matrix A.</li>\n<li><code>batch gemm</code> 拼接，在 thread block tile 时只计算对角线上的数据, 优化技术跟 gemm 一样，就是 thread block tile 方式不同</li>\n</ol>\n<h2 id=\"optimize\"><a href=\"#optimize\" class=\"headerlink\" title=\"optimize\"></a>optimize</h2><ol>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm\">how-to-optimize-gemm</a><ul>\n<li>列优先</li>\n<li>Optimization2: 循环展开</li>\n<li>Optimization_1x4_4: 使用内联</li>\n<li>Optimization_1x4_5: 循环合并</li>\n<li>Optimization_1x4_6: 使用寄存器：register double test;</li>\n<li>Optimization_1x4_7: 减少 for 循环变量访存</li>\n<li>Optimization_4x4_5 MMult_4x4_5.c: 可以显示 block 计算过程, 可以看出分块之后有很多访存可以合并, A 和 B 分别可以减少到 1&#x2F;4</li>\n<li>Optimization_4x4_10: 使用 vector 计算 block</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/tpoisonooo/how-to-optimize-gemm/blob/master/README_ZH_CN.md\">how-to-optimize-gemm C++ 中文版</a></li>\n<li><a href=\"https://github.com/njuhope/cuda_sgemm/tree/master\">cuda_sgemm 旷视</a></li>\n<li>(good)<a href=\"https://zhuanlan.zhihu.com/p/441146275\">CUDA GEMM 理论性能分析与 kernel 优化</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/410278370\">CUDA 矩阵乘法终极优化指南</a><ul>\n<li>如果是 float4(128bit)，一个 warp 访问 16B，32x16B 得分 4 次做，那么会把一个 warp 分成 0-7&#x2F;8-15&#x2F;16-23&#x2F;24-31 这么 4 组，只要组内没有 bank conflict 就行了。</li>\n<li>shared memory: float4 0 和 8 线程确实读的都是 0-3bank，但是 0-7 8-15 是分别的两组，这时候一个 warp 会分成 4 组 4 次读取，在不同组是不会冲突的，只需要组内没有冲突就可以了。我之前说了 shared memory 是 32 bank，每 bank 4B，你要一个 warp 访问 float4，数据量是 32*16B，是 shared memory 一次性能提供的数据量的 4 倍，那么必然要分 4 次获得，然后架构设计就是我说的分组情况。如果你一个线程访问 float2，那么就会是 0-15 16-31 两组</li>\n<li>shared memory 一次不冲突只能读 32x4B， 看一次读取的数据量，多于 32x4B 需要读取多次 n&#x2F;(32x4)，只要在 n&#x2F;(32x4) 次内读完就是最高效的。</li>\n</ul>\n</li>\n<li>使用 float4 类型访存，用向量化的 LDG.128 和 STG.128 指令一次读 4 个元素，以减少指令数</li>\n<li>block tile 时，第一个矩阵在 shared memory 上要按列存储，为了连续存储，好利用 LDG.128 和 STG.128 指令</li>\n</ol>\n<h2 id=\"blas\"><a href=\"#blas\" class=\"headerlink\" title=\"blas\"></a><a href=\"https://www.netlib.org/blas/\">blas</a></h2><ol>\n<li>名词出自 blas 库，例如<ul>\n<li>SGEMM: single matrix matrix multiply;</li>\n<li>DGEMM: double matrix matrix multiply</li>\n<li>SGEMV: single matrix vector multiply</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"NVIDIA-cutlass\"><a href=\"#NVIDIA-cutlass\" class=\"headerlink\" title=\"NVIDIA&#x2F;cutlass\"></a><a href=\"https://github.com/NVIDIA/cutlass\">NVIDIA&#x2F;cutlass</a></h2><h2 id=\"cuBLAS\"><a href=\"#cuBLAS\" class=\"headerlink\" title=\"cuBLAS\"></a><a href=\"https://developer.nvidia.com/cublas\">cuBLAS</a></h2><ol>\n<li>CUDA Basic Linear Algebra Subprograms</li>\n<li>cuBLAS（CUDA Basic Linear Algebra Subprograms）是由 NVIDIA 提供的官方库，它是经典 BLAS（Basic Linear Algebra Subprograms）库的 CUDA 实现。</li>\n<li>列优先</li>\n<li>cublasSgemmBatched 支持 batch 运算</li>\n</ol>\n<h2 id=\"OpenBLAS\"><a href=\"#OpenBLAS\" class=\"headerlink\" title=\"OpenBLAS\"></a><a href=\"https://github.com/OpenMathLib/OpenBLAS\">OpenBLAS</a></h2><ol>\n<li><a href=\"https://www.intel.com/content/www/us/en/docs/onemkl/developer-reference-c/2023-2/cblas-gemm-001.html#GUID-97718E5C-6E0A-44F0-B2B1-A551F0F164B2\">intel cblas interface</a></li>\n<li><a href=\"https://developer.apple.com/documentation/accelerate/1513264-cblas_sgemm?language=objc\">apple 接口文档</a></li>\n<li><code>sudo apt-get install libopenblas-dev</code></li>\n<li><a href=\"https://github.com/OpenMathLib/OpenBLAS?tab=readme-ov-file#usage\">usage</a></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export OPENBLAS_NUM_THREADS=4</span><br><span class=\"line\">export GOTO_NUM_THREADS=4</span><br><span class=\"line\">export OMP_NUM_THREADS=4</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>If you compile this library with USE_OPENMP&#x3D;1, you should set the OMP_NUM_THREADS environment variable; OpenBLAS ignores OPENBLAS_NUM_THREADS and GOTO_NUM_THREADS when compiled with USE_OPENMP&#x3D;1.</li>\n<li>For a general introduction to the BLAS routines, please refer to the extensive documentation of their reference implementation hosted at netlib: <a href=\"https://www.netlib.org/blas\">https://www.netlib.org/blas</a>. On that site you will likewise find documentation for the reference implementation of the higher-level library <code>LAPACK - the Linear Algebra Package</code> that comes included with OpenBLAS</li>\n<li><a href=\"https://github.com/OpenMathLib/OpenBLAS/blob/develop/docs/distributing.md#performance-and-runtime-behavior-related-build-options\">performance-and-runtime-behavior-related-build-options</a></li>\n<li>openblas.pc 中可以看到 <code>USE_OPENMP=0 MAX_THREADS=24</code></li>\n<li><a href=\"https://arxiv.org/pdf/1609.00076.pdf\">论文</a></li>\n</ol>\n<h2 id=\"blis\"><a href=\"#blis\" class=\"headerlink\" title=\"blis\"></a><a href=\"https://github.com/flame/blis\">blis</a></h2><h2 id=\"hipBLAS\"><a href=\"#hipBLAS\" class=\"headerlink\" title=\"hipBLAS\"></a><a href=\"https://github.com/ROCm/hipBLAS\">hipBLAS</a></h2><h2 id=\"Intel-oneMKL\"><a href=\"#Intel-oneMKL\" class=\"headerlink\" title=\"Intel oneMKL\"></a><a href=\"https://github.com/oneapi-src/oneMKL\">Intel oneMKL</a></h2><ol>\n<li>oneAPI Math Kernel Library (oneMKL)</li>\n<li><a href=\"https://github.com/oneapi-src/oneMKL?tab=readme-ov-file#supported-configurations\">统一多种 blas</a></li>\n</ol>\n<h2 id=\"CLBlast\"><a href=\"#CLBlast\" class=\"headerlink\" title=\"CLBlast\"></a><a href=\"https://github.com/CNugteren/CLBlast\">CLBlast</a></h2>"},{"title":"bling","url":"/2022/10/09/bling/","content":"<h2 id=\"zh\"><a href=\"#zh\" class=\"headerlink\" title=\"zh\"></a>zh</h2><ol>\n<li>路径切换<br><img src=\"/images/gif/zh.gif\" alt=\"cpp profiling\"></li>\n</ol>\n<h2 id=\"emacs-and-tmux\"><a href=\"#emacs-and-tmux\" class=\"headerlink\" title=\"emacs and tmux\"></a>emacs and tmux</h2><ol>\n<li><p>git 一键提交<br><img src=\"/images/gif/emacs_magit.gif\" alt=\"emacs magit\"></p>\n</li>\n<li><p>统计 log 中数值均值, 方差……<br><img src=\"/images/gif/mean.gif\" alt=\"emacs statistics\"></p>\n</li>\n<li><p>emacs 中通过 tmux 将命令发送到另外 tmux panel，省去多次复制操作<br><img src=\"/images/gif/emacs_tmux.gif\" alt=\"emacs tmux\"></p>\n</li>\n<li><p>一键启动多进程程序<br><img src=\"/images/gif/tmux.gif\" alt=\"tmux send\"></p>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"profiling\"><a href=\"#profiling\" class=\"headerlink\" title=\"profiling\"></a>profiling</h2><ol>\n<li>c++ profiling 库， 一条语句来进行流程控制，fps 打印，各模块耗时统计表<br><img src=\"/images/gif/profiling.gif\" alt=\"cpp profiling\"></li>\n</ol>\n","categories":["Others"],"tags":["ideas"]},{"title":"chatgpt","url":"/2023/06/01/chatgpt/","content":"<h2 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h2><ol>\n<li>将自己记录输入到 gpt 中，看看自己理解对不对</li>\n<li>(very good)<code>梳理</code>： 输入关键理解，让 gpt 帮助梳理, 写 blog 很有用</li>\n<li>生成文字，可以用作文档、PPT 和简历</li>\n<li>python 转换 c++</li>\n<li>优化 c++函数</li>\n<li>深度学习常见的算子？</li>\n<li>c++测试配合 <a href=\"https://wandbox.org/\">wandbox</a> 在线编译</li>\n<li>python 测试配合 <a href=\"https://colab.research.google.com/\">google colab</a> or <a href=\"https://github.com/codespaces\">codespaces</a></li>\n<li>解释代码</li>\n<li>添加注释</li>\n</ol>\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li>如何成为资深 AI 推理软件工程师</li>\n<li>先创建一个大小为 100 的二进制文件， 读入一个二进制文件，输出各元素，float 类型</li>\n<li>如何使用 openmp 优化 c++?</li>\n<li>如何研究推理优化技术</li>\n<li>cuda 核函数测试程序</li>\n<li>pytorch 基本概念</li>\n<li>pytorch to onnx sample</li>\n<li>量化上述模型</li>\n</ol>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><ol>\n<li>vpn 选美国</li>\n<li>注册邮箱后可能需要清理缓存，或者换个浏览器</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://mp.weixin.qq.com/s/7k5IlgxKMirED653oJfDgg\">tutorial</a></li>\n<li><a href=\"https://bard.google.com/\">google bard</a></li>\n<li><a href=\"https://labs.perplexity.ai/?utm_content=first_codellama&s=u&utm_source=twitter&utm_campaign=labs\">LLaMa</a></li>\n<li><a href=\"https://claude.ai/\">claude</a> 可用于分析 csv 文件, 生成文字，用于汇报</li>\n<li><a href=\"https://github.com/zhayujie/bot-on-anything\">bot-on-anything</a></li>\n</ol>\n"},{"title":"clang-tidy","url":"/2022/04/07/clang-tidy/","content":"<h2 id=\"clang-tidy-AST-静态检查工具\"><a href=\"#clang-tidy-AST-静态检查工具\" class=\"headerlink\" title=\"clang-tidy AST 静态检查工具\"></a><a href=\"https://clang.llvm.org/extra/clang-tidy/\">clang-tidy AST 静态检查工具</a></h2><h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>见 cpp-debug.md lint</li>\n<li>需要 compile_commands.json</li>\n</ol>\n<h2 id=\"C-静态检查工具总结\"><a href=\"#C-静态检查工具总结\" class=\"headerlink\" title=\"C++静态检查工具总结\"></a><a href=\"https://blog.csdn.net/u013377887/article/details/108651945\">C++静态检查工具总结</a></h2>","categories":["Tools","Clang"],"tags":["Tools","Clang Tidy"]},{"title":"colab","url":"/2023/06/08/colab/","content":"<h2 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h2><ol>\n<li><a href=\"https://colab.research.google.com/notebooks/snippets/importing_libraries.ipynb\">importing_libraries</a></li>\n</ol>\n"},{"title":"color","url":"/2022/10/15/color/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><code>GLOG_colorlogtostderr=1 ./test</code> glog 输出彩色</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code#Colors\">ANSI_escape_code</a> 全面；包含各种颜色值</li>\n<li><a href=\"https://misc.flogisoft.com/bash/tip_colors_and_formatting\">tip_colors_and_formatting</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/363287904\">Linux 使用 echo 命令打印输出特定颜色的字符</a><ul>\n<li><code>echo -e &quot;\\033[43;31;5m我是黄底红色的闪烁字符串\\033[0m&quot;</code> 输出字符串的的前部”\\033[43;31m”和后部\\033[0m 是固定用法，被称为<code>ANSI控制码</code></li>\n<li>前部的 43 是背景设置, 31 是字符颜色设置，5 是闪烁</li>\n</ul>\n</li>\n<li><code>dircolors</code> ls 显示颜色 env: <code>LS_COLORS</code> <a href=\"https://zhuanlan.zhihu.com/p/39600129\">在 Linux 命令行中自定义文本颜色</a></li>\n<li><code>#f12</code> 等效 <code>#ff1122</code></li>\n<li>开发板命令显示颜色：<code>alias ll=&quot;ls -al --color=auto&quot; alias ls=&quot;ls --color=auto&quot;</code></li>\n<li><a href=\"https://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/\">PS1 set</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PS1=<span class=\"string\">&quot;\\e[0;31m\\u@\\h:\\W% \\e[m&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PS1=<span class=\"string\">&quot;\\e[0;32m\\u@\\h:\\W% \\e[m&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PS1=<span class=\"string\">&quot;\\e[0;33m\\u@\\h:\\W% \\e[m&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>script -q -c &quot;bat symbol.json&quot; color.log &gt; /dev/null</code> 将彩色输出保存到到文件中 <a href=\"https://stackoverflow.com/a/27399198\">write stdout to file with colors</a></li>\n<li>ninja color output</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span> <span class=\"keyword\">STREQUAL</span> <span class=\"string\">&quot;GNU&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">add_compile_options</span> (-fdiagnostics-color=always)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> (<span class=\"string\">&quot;$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span> <span class=\"keyword\">STREQUAL</span> <span class=\"string\">&quot;Clang&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">add_compile_options</span> (-fcolor-diagnostics)</span><br><span class=\"line\"><span class=\"keyword\">endif</span> ()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Emacs\"><a href=\"#Emacs\" class=\"headerlink\" title=\"Emacs\"></a>Emacs</h2><ol>\n<li><code>list-face-display and list-colors-display</code> 列出颜色</li>\n<li><code>rainbow-mode</code> buffer 里显示颜色</li>\n<li>color-196 大红</li>\n<li><a href=\"https://www.emacswiki.org/emacs/RegularExpression\">emacs 正则</a></li>\n<li>正则需要<code>\\\\</code>来转义</li>\n<li>minor mode: deffac 创建 face, font-lock-add-keywords 和 font-lock-remove-keywords 添加规则, define-minor-mode 添加 minor mode</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">;; log color</span><br><span class=\"line\">(defgroup log-group nil</span><br><span class=\"line\">  &quot;Group for customization&quot;</span><br><span class=\"line\">  :prefix &quot;log-&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">(defface log-highlight-numbers-face</span><br><span class=\"line\">  &#x27;((t :foreground &quot;yellow&quot;))</span><br><span class=\"line\">  &quot;Face for numbers&quot;</span><br><span class=\"line\">  :group &#x27;log-group )</span><br><span class=\"line\"></span><br><span class=\"line\">(defface log-highlight-file-face</span><br><span class=\"line\">  &#x27;((t :foreground &quot;magenta&quot;))</span><br><span class=\"line\">  &quot;Face for file&quot;</span><br><span class=\"line\">  :group &#x27;log-group )</span><br><span class=\"line\"></span><br><span class=\"line\">(defface log-highlight-success-face</span><br><span class=\"line\">  &#x27;((t :foreground &quot;black&quot;</span><br><span class=\"line\">       :background &quot;green&quot;))</span><br><span class=\"line\">  &quot;Face for pass success&quot;</span><br><span class=\"line\">  :group &#x27;log-group )</span><br><span class=\"line\"></span><br><span class=\"line\">(defface log-highlight-warning-face</span><br><span class=\"line\">  &#x27;((t :foreground &quot;black&quot;</span><br><span class=\"line\">       :background &quot;yellow&quot;))</span><br><span class=\"line\">  &quot;Face for warning&quot;</span><br><span class=\"line\">  :group &#x27;log-group )</span><br><span class=\"line\"></span><br><span class=\"line\">(defface log-highlight-fail-face</span><br><span class=\"line\">  &#x27;((t :foreground &quot;black&quot;</span><br><span class=\"line\">       :background &quot;red&quot;))</span><br><span class=\"line\">  ;; :bold t))</span><br><span class=\"line\">  &quot;Face for fail, error&quot;</span><br><span class=\"line\">  :group &#x27;log-group )</span><br><span class=\"line\"></span><br><span class=\"line\">(defface log-highlight-normal-face</span><br><span class=\"line\">  &#x27;((t :foreground &quot;black&quot;</span><br><span class=\"line\">       :background &quot;cyan&quot;))</span><br><span class=\"line\">  ;; :bold t))</span><br><span class=\"line\">  &quot;Face for normol&quot;</span><br><span class=\"line\">  :group &#x27;log-group )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(defvar log-keywords &#x27;(</span><br><span class=\"line\">                       (&quot;[[:space:]]\\\\(\\\\+\\\\|-\\\\)?[0-9]+\\\\(\\\\.[0-9]+\\\\)?[[:space:]]&quot; . &#x27;log-highlight-numbers-face)</span><br><span class=\"line\">                       (&quot;[[:space:]][0-9a-zA-Z\\-\\_\\/]+\\\\.\\\\(jpg\\\\|jpeg\\\\|yuv\\\\|yuyv\\\\|png\\\\|json\\\\|bin\\\\|hbm\\\\|engine\\\\|txt\\\\)&quot; . &#x27;log-highlight-file-face)</span><br><span class=\"line\">                       (&quot;\\\\&lt;\\\\([Ff]ps\\\\|FPS\\\\)&quot; . &#x27;log-highlight-normal-face)</span><br><span class=\"line\">                       (&quot;\\\\&lt;\\\\([Ss]uccess\\\\|SUCCESS\\\\|[Pp]ass\\\\|PASS\\\\)&quot; . &#x27;log-highlight-success-face)</span><br><span class=\"line\">                       (&quot;^E\\\\([0-9]+\\\\)&quot; . &#x27;log-highlight-fail-face)</span><br><span class=\"line\">                       (&quot;\\\\&lt;\\\\([Ff]ail\\\\|FAIL\\\\|[Ee]rror\\\\|ERROR\\\\|[Aa]bort\\\\|ABORT\\\\|[Ff]ault\\\\|FAULT\\\\)&quot; . &#x27;log-highlight-fail-face)</span><br><span class=\"line\">                       (&quot;^W\\\\([0-9]+\\\\)&quot; . &#x27;log-highlight-warning-face)</span><br><span class=\"line\">                       (&quot;\\\\&lt;\\\\([Ww]arning\\\\|WARNING\\\\|[Ww]arn\\\\|WARN\\\\)&quot; . &#x27;log-highlight-warning-face)</span><br><span class=\"line\">                       )</span><br><span class=\"line\">  &quot;Keywords for log-minor-mode highlighting&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">(define-minor-mode log-minor-mode</span><br><span class=\"line\">  &quot;Minor mode for customization&quot;</span><br><span class=\"line\">  :init-value nil</span><br><span class=\"line\">  :lighter &quot; LogMode&quot;</span><br><span class=\"line\">  :group &#x27;log-group</span><br><span class=\"line\">  (when (bound-and-true-p log-minor-mode)</span><br><span class=\"line\">    (font-lock-add-keywords nil log-keywords)</span><br><span class=\"line\">    (font-lock-fontify-buffer))</span><br><span class=\"line\">  (when (not (bound-and-true-p log-minor-mode))</span><br><span class=\"line\">    (font-lock-remove-keywords nil log-keywords)</span><br><span class=\"line\">    (font-lock-fontify-buffer)))</span><br><span class=\"line\">(add-to-list &#x27;auto-mode-alist &#x27;(&quot;\\\\.log\\\\&#x27;&quot; . log-minor-mode))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ol>\n<li>PowerToys: windows color pick: <code>win + shift + c</code></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?hl=zh-CN\">chrome plugin colorzilla</a> 可以用来显示 value</li>\n</ol>\n<h3 id=\"bat\"><a href=\"#bat\" class=\"headerlink\" title=\"bat\"></a>bat</h3><ol>\n<li><a href=\"https://github.com/sharkdp/bat#adding-new-themes\">adding-new-themes</a></li>\n</ol>\n<h3 id=\"colout\"><a href=\"#colout\" class=\"headerlink\" title=\"colout\"></a><a href=\"https://github.com/nojhan/colout\">colout</a></h3><ol>\n<li><code>pip install colout</code> install</li>\n<li><code>cat yolox.log | colout fps white.red</code> colout 当 grep 用</li>\n<li><code>ls -l | colout &quot;.&quot; blue</code><ul>\n<li><a href=\"https://github.com/nojhan/colout/tree/master/colout\">theme</a></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## colout_log.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">theme</span>(<span class=\"params\">context</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context, [</span><br><span class=\"line\">        <span class=\"comment\"># Pass and success</span></span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&quot;([Ff][Pp][Ss]|[Pp][Aa][Ss][Ss])(ing|ING)?|(success|SUCCESS|Success)(ful|FUL)?&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;white.green&quot;</span>, <span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># warning</span></span><br><span class=\"line\">        [<span class=\"string\">&quot;^W[0-9]+\\d&quot;</span>, <span class=\"string\">&quot;white.yellow&quot;</span>, <span class=\"string\">&quot;bold&quot;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&quot;([Ww][Aa][Rr][Nn])(ing|ING)?&quot;</span>, <span class=\"string\">&quot;white.yellow&quot;</span>, <span class=\"string\">&quot;bold&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># error fail</span></span><br><span class=\"line\">        [<span class=\"string\">&quot;^E[0-9]+\\d&quot;</span>, <span class=\"string\">&quot;white.red&quot;</span>, <span class=\"string\">&quot;bold&quot;</span>],</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&quot;([Ee][Rr][Rr][Oo][Rr]|[Ff][Aa][Ii][Ll]|[Aa][Bb][Oo][Rr][Tt])(ing|ING|ure|URE)?&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;white.red&quot;</span>, <span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># file</span></span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&quot;(\\s[0-9a-zA-Z\\/\\_\\-]+.)(jpg|jpeg|yuv|yuyv|png|json|bin|hbm|engine|txt)\\s&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;magenta&quot;</span>, <span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># []</span></span><br><span class=\"line\">        <span class=\"comment\"># [&quot;(\\[[^\\]]+\\])&quot;, &quot;cyan&quot;, &quot;bold&quot;],</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># num</span></span><br><span class=\"line\">        [<span class=\"string\">&quot;\\s\\d+\\s&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;bold&quot;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&quot;\\s\\d+[uUmMnN]?[sS]&quot;</span>, <span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;bold&quot;</span>],</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>.bashrc 添加 function</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">cl</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> -o pipefail</span><br><span class=\"line\">\t<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span> 2&gt;&amp;1 | colout -t <span class=\"built_in\">log</span> -T ~/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">cless</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> -o pipefail</span><br><span class=\"line\">\t<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span> 2&gt;&amp;1 | colout -t <span class=\"built_in\">log</span> -T ~/ | less</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TxtStyle-自定义输出颜色\"><a href=\"#TxtStyle-自定义输出颜色\" class=\"headerlink\" title=\"TxtStyle 自定义输出颜色\"></a><a href=\"https://github.com/armandino/TxtStyle\">TxtStyle</a> 自定义输出颜色</h3><ol>\n<li><a href=\"https://github.com/armandino/TxtStyle/blob/6fd9028587bedd67a99e1bf7e950ede2c8ef35fe/txtstyle/txtsconf.py#L31\">style</a></li>\n<li><a href=\"https://stackoverflow.com/a/62337029\">sample</a></li>\n<li>color log TxtStyle <code>cl test.log | less</code> or <code>ls -al | cl</code> or <code>bat test.log</code></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">cl</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> -o pipefail</span><br><span class=\"line\">\t<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span> 2&gt;&amp;1 | txts -n example --color-always</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .txts.conf</span></span><br><span class=\"line\">[Style=<span class=\"string\">&quot;example&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># Print in red any line containing the word &#x27;error&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># !red: regex(&quot;error&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># !red: regex(&quot;ERROR&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># !red: regex(&quot;Error&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># !yellow bold: regex(&quot;warning&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># !yellow bold: regex(&quot;WARNING&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># !yellow bold: regex(&quot;Warning&quot;)</span></span><br><span class=\"line\">white on-yellow bold: regex(<span class=\"string\">&quot;[Ww][Aa][Rr][Nn](ing|ING)?&quot;</span>)</span><br><span class=\"line\">white on-red bold: regex(<span class=\"string\">&quot;([Ee][Rr][Rr][Oo][Rr]|[Ff][Aa][Ii][Ll](ing|ING|ure|URE)?)&quot;</span>)</span><br><span class=\"line\">white on-green bold: regex(<span class=\"string\">&quot;([Ff][Pp][Ss]|[Pp][Aa][Ss][Ss](ing|ING)?)|(success|SUCCESS|Success)(ful|FUL)?&quot;</span>)</span><br><span class=\"line\">white on-red bold: regex(<span class=\"string\">&quot;^E[0-9]+\\d&quot;</span>)</span><br><span class=\"line\">white on-yellow bold : regex(<span class=\"string\">&quot;^W[0-9]+\\d&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># white on-green bold: regex(&quot;[Ff][Pp][Ss]&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">yellow: regex(<span class=\"string\">&quot;\\s[0-9]+\\s&quot;</span>)</span><br><span class=\"line\">red: regex(<span class=\"string\">&quot;\\s[0-9]+[uUmM][sS]&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># magenta: regex(&quot;\\s[^\\]]+.(jpg|jpeg|yuv|yuyv|png|json|bin|hbm|engine|txt)&quot;)</span></span><br><span class=\"line\">magenta: regex(<span class=\"string\">&quot;\\s[0-9a-zA-Z\\/\\_\\-]+.(jpg|jpeg|yuv|yuyv|png|json|bin|hbm|engine|txt)&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Date</span></span><br><span class=\"line\">green: regex(<span class=\"string\">&quot;\\d&#123;4&#125;-\\d\\d-\\d\\d&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Time</span></span><br><span class=\"line\">green bold: regex(<span class=\"string\">&quot;\\d\\d:\\d\\d:\\d\\d&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># IP address (and port number if present)</span></span><br><span class=\"line\">yellow underline: regex(<span class=\"string\">&quot;\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?&quot;</span>)</span><br><span class=\"line\">magenta: regex(<span class=\"string\">&quot;\\[samplesession\\]&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Catch-all for anything else inside [square brackets]</span></span><br><span class=\"line\">blue: regex(<span class=\"string\">&quot;\\[[^\\]]+\\]&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Catch-all for any remaining standalone numbers</span></span><br><span class=\"line\">cyan bold: regex(<span class=\"string\">&quot;\b\\d+\b&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lolcat\"><a href=\"#lolcat\" class=\"headerlink\" title=\"lolcat\"></a><a href=\"https://github.com/busyloop/lolcat\">lolcat</a></h3><ol>\n<li><code>pip install logcat</code></li>\n<li>彩色输出 <code>lolcat phigent.txt -F 0.02</code></li>\n</ol>\n<h3 id=\"logtool\"><a href=\"#logtool\" class=\"headerlink\" title=\"logtool\"></a><a href=\"http://xjack.org/logtool/\">logtool</a></h3><ol>\n<li><code>sudo apt install logtool</code></li>\n<li><code>cat no_bug_car.txt | logtool &gt; test.txt</code> 输出颜色</li>\n</ol>\n<h2 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h2><ol>\n<li><a href=\"https://www.programmingfonts.org/#ubuntu\">code style 主题：programmingfonts</a></li>\n<li><a href=\"https://coolors.co/palettes/palettes\">color palettes</a></li>\n<li><a href=\"https://regex101.com/\">正则表达测试</a></li>\n<li><a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\">正则表达式解释</a></li>\n</ol>\n"},{"title":"conda","url":"/2023/06/26/conda/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li>注意 conda 源和 pip 源的区别，并不是共用</li>\n<li>gcc 版本有要求</li>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\">清华源切换</a></li>\n<li><code>unset all_proxy</code> 不能使用代理，可能出现 install 错误 <a href=\"https://blog.csdn.net/whatday/article/details/109287343\">link</a></li>\n<li><code>conda config --append channels conda-forge</code></li>\n<li><code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh &amp;&amp; sh Miniconda3-latest-Linux-x86_64.sh</code> install</li>\n</ol>\n<h2 id=\"basic-use\"><a href=\"#basic-use\" class=\"headerlink\" title=\"basic use\"></a>basic use</h2><ol>\n<li><code>~/miniconda3/bin/conda init</code></li>\n<li><code>conda config --set auto_activate_base false</code> 关闭自启动</li>\n<li><code>conda info</code> 查看安装情况</li>\n<li><code>conda env list</code> list env</li>\n<li><code>conda list</code> list package in env</li>\n<li><code>conda create --name ENVNAME</code> create env</li>\n<li><code>conda create --name d2l python=3.9 -y</code></li>\n<li><code>conda activate ENVNAME</code> activate env</li>\n<li><code>conda deactivate</code> deactivate env</li>\n<li><code>conda install PKGNAME=3.1.4</code> install lib</li>\n<li><code>conda uninstall PKGNAME</code> uninstall lib</li>\n<li>导出导入环境</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda list -e &gt; requirements.txt</span><br><span class=\"line\">conda install --<span class=\"built_in\">yes</span> --file requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"condarc\"><a href=\"#condarc\" class=\"headerlink\" title=\"~&#x2F;.condarc\"></a>~&#x2F;.condarc</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">auto_activate_base: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: <span class=\"literal\">true</span></span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class=\"line\">custom_channels:</span><br><span class=\"line\">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html\">user-guide&#x2F;install</a></li>\n<li><a href=\"https://docs.conda.io/en/latest/miniconda.html#linux-installers\">miniconda</a> 选择对应 python 版本, install 时可以选路径</li>\n<li><a href=\"https://docs.conda.io/projects/conda/en/latest/user-guide/configuration/index.html#\">user-guide&#x2F;configuration</a></li>\n<li><a href=\"https://github.com/conda/conda/blob/main/docs/source/user-guide/cheatsheets/conda-4.14.pdf\">cheatsheets&#x2F;conda-4.14.pdf</a></li>\n<li><a href=\"https://github.com/deadsnakes/docs/blob/main/Building-Deadsnakes-Packages-from-Git.rst\">build python from source</a> 编译之后需要前一级目录 <code>sudo dpkg -i *.deb</code></li>\n</ol>\n"},{"title":"cross-compile","url":"/2023/03/06/cross-compile/","content":"<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><h2 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a><a href=\"https://blog.csdn.net/u012503639/article/details/104159375\">基本组成</a></h2><h3 id=\"binutils\"><a href=\"#binutils\" class=\"headerlink\" title=\"binutils\"></a>binutils</h3><h3 id=\"gcc\"><a href=\"#gcc\" class=\"headerlink\" title=\"gcc\"></a>gcc</h3><h3 id=\"glibc\"><a href=\"#glibc\" class=\"headerlink\" title=\"glibc\"></a>glibc</h3>"},{"title":"cutlass","url":"/2024/01/26/cutlass/","content":"<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><ol>\n<li>主动设置<code>--cache-control=all</code>选项来保证在进行 kernel profiling 的时候清空历史 cache 数据，通过设置<code>--clock-control=base</code>选项来锁定 GPU 运行的频率，避免动态调频对性能测量的影响。</li>\n<li><code>Swizzle</code>主要是在到 8192 以后，且 B 矩阵 transpose 的情况下必须要用（不用则效率腰斩，调出来 SWIZZLE 最优是 8）</li>\n<li><a href=\"https://github.com/NVIDIA/cub\">cutlass 参考了 cub 的设计</a></li>\n<li>cutlass 是对 gemm 实现过程的各种级别的抽象；手写搬数时需要进行大量计算<ul>\n<li>block tile 矩阵乘法内积； thread tile 矩阵乘法外积</li>\n<li>global memory &lt;-&gt; shared memory &lt;-&gt; register &lt;-&gt; core</li>\n<li>double buffering: shared memory, register</li>\n<li>bank conflict: permute</li>\n</ul>\n</li>\n<li>排列（英语：Permutation）是将相异对象或符号根据确定的顺序重排。每个顺序都称作一个排列</li>\n<li>MMA &#x3D; matrix multiply accumulate</li>\n<li>cutlass kernel 融合效果好</li>\n<li>可以看一下 cutlass 发版历史，了解一下过程</li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/v0.1.1/README.md\">v0.1.1&#x2F;README.md</a><ul>\n<li>thread block tile, warp tile, thread tile</li>\n</ul>\n</li>\n<li>CUTLASS is a collection of CUDA C++ template abstractions for implementing high-performance <code>matrix-matrix multiplication (GEMM)</code> and <code>related computations</code> at all levels and scales within CUDA<ul>\n<li><code>GEMM</code></li>\n<li><code>related computations</code> 主要指的是接在 GEMM 后面的 activation 或者一些 pointwise 计算，比如 bias，scales，这些计算可以和 GEMM 融合在一起，从而减少访存压力，由于这类计算一般发生在 GEMM 之后，我们管这类计算叫 epilogue(中文：结语)</li>\n</ul>\n</li>\n<li>大量使用模板以及各种各种手段，把尽可能多的事情放在编译期完成。</li>\n<li>对用户暴露大量的实现策略，用户需要自己做出实现策略的选择。这是 CUTLASS 和 CUBLAS,CUDNN 的重要差别所在，CUBLAS 和 CUDNN 用户只需要描述计算问题，所有的策略选择在内部完成。这意味着从软件分层上来说，CUTLASS 可以是 CUBLAS 和 CUDNN 的 backend，换而言之，CUBLAS 和 CUDNN 可以是 CUTLASS 的用户</li>\n<li>c++模板，只用包含头文件</li>\n<li>CUDA Templates for Linear Algebra Subroutines and Solvers</li>\n<li>CUTLASS 和 cuBLAS 都是与 NVIDIA GPUs 相关的库，专门用于高效地执行线性代数运算</li>\n<li>大矩阵 GEMM 运算 CuTlass 可以显著提速,是目前 GPU 上最快的 GEMM 库。</li>\n<li>它允许开发者使用模板元编程自定义和优化矩阵乘法（GEMM）等线性代数运算，更加灵活。</li>\n<li>cuBLAS 提供了一个简单、标准的 BLAS 接口，易于使用，而 CUTLASS 提供了更多的定制性和灵活性，但需要更深入的理解和控制。</li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/functionality.md\">缩写的含义</a><ul>\n<li>N: Column Major Matrix</li>\n<li>T: Row Major matrix</li>\n<li>{N,T} x {N,T}: All combinations, i.e., NN, NT, TN, TT(blas 中约定 Normal(N)矩阵为列优先，T 表示 transpose，即对列优先的矩阵进行转置则为行优先)</li>\n<li>f: floating point</li>\n<li>s: signed int</li>\n<li>b: bit</li>\n<li>cf: complex float</li>\n<li>bf16: bfloat16</li>\n<li>tf32: tfloat32</li>\n<li>Simt: Use Simt CUDA Core MMA(使用 cuda core)</li>\n<li>TensorOp: Use Tensor Core MMA</li>\n<li>SpTensorOp: Use Sparse Tensor Core MMA</li>\n<li>WmmaTensorOp: Use WMMA abstraction to use Tensor Core MMA</li>\n</ul>\n</li>\n<li><code>One of CUTLASS&#39;s design patterns is to define gemm argument objects that are constructible in host code and passed to kernels by value.</code> These may include pointers, strides, scalars, and other arguments needed by Gemm and its components.The benefits of this pattern are <code>(1.) a structured, composable strategy for passing host-constructible arguments to kernels and (2.) minimized initialization overhead on kernel entry.</code></li>\n<li>group gemm 和 batch gemm 区别： group 是 batch 更通用的形式，允许有不同尺寸的矩阵，batch 则需要多个矩阵尺寸相同</li>\n<li>三种 tile<ul>\n<li>thread block tile(例如：128x128x32)</li>\n<li>warp tile(例如：64x64x32)</li>\n<li>mma tile(例如：16x8x16)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"cute-cuda-tensor-tools\"><a href=\"#cute-cuda-tensor-tools\" class=\"headerlink\" title=\"cute (cuda tensor tools)\"></a>cute (cuda tensor tools)</h2><ol>\n<li>CUTLASS 对 stream-K GEMM 算法的实现，该算法使用了 CuTe 的许多特性。</li>\n<li>One could summarize almost all CuTe use cases as follows:<ul>\n<li>create Layouts,</li>\n<li>create Tensors with those Layouts</li>\n<li>invoke (either CuTe’s, or custom) algorithms on those Tensors.</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=PWWOGrLZtZg\">youtube 介绍</a></li>\n<li><code>Layout maps from coordinate space(s) to an index space</code>. 从坐标(逻辑存储)映射到索引(物理存储);</li>\n<li>需要十分明确 coordinate 和 index 概念， 1D coordinate 和 index 是不同的</li>\n<li>The map from a natural coordinate to an index is performed by taking the inner product of the natural coordinate with the Layout’s Stride. coordinate 和 stride 内积来实现到 index 的映射;</li>\n<li><code>cute::crd2idx(c, shape, stride)</code>来计算 c(coordinate)的 index</li>\n<li>直接根据 coordinate 顺序计算 index， 不要用想象， 用公式； 例如 A &#x3D; (2,2):(4,1); coordinate 顺序为 A(0) &#x3D; A(0, 0) &#x3D; 0; A(1) &#x3D; A(1, 0) &#x3D; 4x1 &#x3D; 4; A(2) &#x3D; A(0, 1) &#x3D; 1; A(3) &#x3D; A(1, 1) &#x3D; 5; 所以 A(c)为 0 4 1 5</li>\n<li>Layout 对象调用,返回 index，layout(i)</li>\n<li>The core abstraction of CuTe are the hierarchically multidimensional layouts which can be composed with data arrays to represent tensors.</li>\n<li>tensor</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tensor = ptr + layout <span class=\"comment\">## 根据coodinate得到元素value</span></span><br><span class=\"line\">layout = shape + stride <span class=\"comment\">## 根据coodinate得到index</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>从右往左读</code> The map from an input coordinate to a natural coordinate is the application of a colexicographical order (reading right to left, instead of “lexicographical,” which reads left to right) within the Shape</li>\n<li>shape and stride 是 IntTupple, A Layout is a tuple of (Shape, Stride).</li>\n<li>CuTe 的 Tensor 类表示一个多维数组。数组的元素可以驻留在任何类型的内存中，包括<code>全局内存、共享内存和寄存器内存</code>。</li>\n<li>Tensor 的行为完全由它的两个组件决定，这两个组件对应于它的两个模板参数： Engine 和 Layout 。Engine 表示元素的一维数组。当用户对 Tensor 执行数组访问时， Tensor 使用其 Layout 从逻辑坐标映射到一维索引。然后， Tensor 使用其 Engine 将一维索引映射到对该元素的引用。</li>\n<li>tensor Ownership of the elements; Tensors can be owning or nonowning.<ul>\n<li>Whether a Tensor is “owning” or “nonowning” depends entirely on its Engine.</li>\n<li>ViewEngine 和 ConstViewEngine 包装指向各种内存的指针。</li>\n<li>make_gmem_ptr(g) when g is a pointer to global memory, or make_smem_ptr(s) when s is a pointer to shared memory.</li>\n</ul>\n</li>\n<li>print 会打印 tensor 存储空间所在的位置和 shape、stride 信息，而 print_tensor 除了以上信息还会打印 Tensor 中具体的每一个数值：</li>\n<li>We wrap each MMA’s PTX instruction in an “Operation” struct.</li>\n<li>For each Operation struct, we define a “Traits” struct that defines all of the meta-information needed to use the Operation. 对于每个操作结构，我们定义一个“Traits”结构，它定义使用该操作所需的所有信息。</li>\n<li>mma ptx -&gt; mma_operation -&gt; mma_trait(封装各种信息) -&gt; mma_atom -&gt; tiled_mma -&gt; thr_mma -&gt; cute::gemm()</li>\n<li>copy ptx -&gt; copy_operation -&gt; copy_trait -&gt; copy_atom -&gt; tiled_copy -&gt; thr_copy -&gt; cute::copy()</li>\n<li>通过 Tensor 和 Layout 抽象我们可以实现对计算矩阵的分块；基于 Copy 抽象，我们可以完成块状矩阵 A、B 数据从 global 内存到寄存器的加载；通过 MMA 抽象我们可以利用 Tensor Core 完成寄存器上小块矩阵的乘法运算；再次通过 Copy 抽象，我们可以将寄存器上的结果拷贝到 global 内存，完成完整的 GEMM 运算</li>\n<li>A has shape (M, K) and strides (1, ldA). Since A has stride 1 in the M mode, we say that A is <code>M major</code>. B has shape (N, K) and strides (1, ldB), so B is “N-major.” Similarly, C has shape (M, N) and strides (1, ldC), so C is “M major.”</li>\n<li>layout 两个核心概念<ul>\n<li>shape: define the coordinate mappings</li>\n<li>stride: defines the index mappings, 在逻辑位置和物理（数据）做映射的时候每一个元素之间的差为 n</li>\n</ul>\n</li>\n<li>thread layout and data layout</li>\n<li>mapping correct threads to correct values for you computation</li>\n<li>layout is a function</li>\n<li><a href=\"https://www.zhihu.com/column/c_1696937812497235968\">CUDA 高性能编程</a></li>\n<li>计算机中的内存是一维的线性地址空间，而数学计算问题所要处理的空间经常是高维的。如 GEMM（General Matrix Multiplication）问题的数学计算体系是二维计算空间，Deep Learning 计算体系是三维以上的计算空间(batch, height, width, channel, etc.)。如何高效的表达高维计算空间，如何高效便捷的将计算所要求的高维空间映射到一维空间变得越来越重要。历史上对该问题的探究可以分为三个阶段：<ul>\n<li>第一阶段 BLAS 的 row&#x2F;col-major + leading dimension 描述阶段；</li>\n<li>第二阶段 Tensor 的 shape + stride 阶段；</li>\n<li>第三阶段为 Hierarchy Tensor 阶段。(组合设计模式实现？)</li>\n</ul>\n</li>\n<li>引入有层次的描述（Layout）代数来表达计算空间和一维地址空间的映射问题。Layout 是一个数据排列的描述体系，其可以实现将<code>逻辑坐标</code>映射到<code>索引(物理)坐标</code>（offset 表示）</li>\n<li>Tensor 是数据的表达，其表达一个相对独立且有结构的数据体，而 Tensor 内的数据排布则由 Layout 来表达</li>\n<li>二维矩阵的描述和一维类似，shape 表示其逻辑形状，stride 表示具体的某个元素和物理空间的映射时的间隔量。</li>\n<li>逻辑空间到物理空间的映射通过点积来完成。如 shape: (3,4); stride: (4, 1); cood: (2, 2), 物理 offset &#x3D; 2x4 + 2x1 &#x3D; 10</li>\n<li>Layout 的本质是函数，其可以实现由一种坐标系统变换到一个表示偏移量的标量</li>\n<li>Layout 的本质是函数，函数的本质是集合</li>\n<li>((2, 4), (3, 5))，同样我们可以得到其 stride: ((3, 6), (1, 24)) <a href=\"https://zhuanlan.zhihu.com/p/662089556\">link</a><ul>\n<li>(2, 4)表示行方向按 2 个一组，分 4 组</li>\n<li>(3, 5)表示列方向按 3 个一组，分 5 组</li>\n<li>(3, 6)表示行方向内层元素之间 stride 为 3，外层元素 stride 为 6</li>\n<li>(1, 24)表示列方向内存元素之间 stride 为 1，外层元素 stride 为 24</li>\n<li>行为：2x4 &#x3D; 8</li>\n<li>列为：3x5 &#x3D; 15</li>\n<li>(6, 4)表示：((6%2, 6&#x2F;2), (4%3, 4&#x2F;3)) &#x3D; ((0, 3), (1, 1))， offset &#x3D; 0<em>3 + 3</em>6 + 1<em>1 + 24</em>1 &#x3D; 43</li>\n<li>((1, 3), (2, 4))位置如何找？在行上，先看 3，后看 1，确定外围 tensor 是第 4 个，内层 tensor 是第 1 个；列同理</li>\n</ul>\n</li>\n<li>Layout 描述了数据的排列和底层存储位置关系，但 Layout 并没有指定存储。Tensor 就是在 Layout 的基础上包含了存储，即<code>Tensor = Layout + storage</code>, 数据存储的具体表现上可以是指针表达的数据或则是栈上数据（GPU 上表现为寄存器）</li>\n<li>深度学习框架中的 Tensor 更强调数据的表达实体，通过 Tensor 实体与实体之间的计算产生新的 Tensor 实体，即<code>多份数据实体</code>，cute 中的 Tensor 更多的是对 Tensor 进行分解和组合等操作，而这些操作多是对 Layout 的变换（只是逻辑层面的数据组织形式），<code>底层的数据实体一般不变更</code>。</li>\n<li>深度学习框架中的 Tensor 是用来表达数据实体，cute 中的 Tensor 是偏向描述的实体。</li>\n<li>使用 Tensor 语义和工具能够更形象化的表达我们的逻辑，方便我们的思考，而 CUDA 的优化思路和技巧并不会因为 Tensor 的引入而变简单或困难。Tensor 只是工具，可以方便我们的表达，至于深层次的优化思路那还是对经验的挑战。</li>\n<li>Tensor 表达虽然提供了很多方便，但也只限于表达的高效和便捷，如何对程序进行优化，Tensor 表达的引入并没有提供额外帮助，它仍然需要我们从别的途径来获得。即便如此，<code>表达和抽象依然无比重要</code>，那正如：伽罗瓦如果没有群这一表达工具，就难以解决多项式根的问题；杨振宁没有群这一工具就难以构思举世的杨-米尔斯理论。</li>\n<li>抽象和工具让我们可以在更高的维度上思考。</li>\n<li>cute 提供了 MMA 能力来完成 D &#x3D; A x B + C 的矩阵乘法运算，其针对指令封装，适配层，原子能力、块状 MMA、线程划分和执行进行了抽象，形成了 MMAOperation、MMA_Traits、MMA_Atom、TiledMMA、ThrMMA、cute::gemm 数据结构和函数，我们通过这些结构能够完成逻辑块状矩阵乘法的划分和执行。这些抽象通过软件分层设计使得各层次独立，我们不必关注底层细节，只需要从提供的模块中组合我们的逻辑即可，同时抽象的解偶设计，使得我们可以专注于顶层逻辑而降低对底层细节的要求。</li>\n<li>swizzle 抽象， Layout 的作用是给定坐标返回 offset，而 swizzle 的作用则是给定 offset 返回 bank conflict free 的 offset。 <a href=\"https://zhuanlan.zhihu.com/p/671419093\">link</a><ul>\n<li>shared memory 读写都按逻辑坐标，真实物理坐标都是 bank free 的(太强了)</li>\n<li>先从一维映射到逻辑二维，再从逻辑二维找到 bank free 二维，最后再返回一维</li>\n<li>ibank &#x3D; irow ^ icol 真是妙啊</li>\n<li>在做全局内存到共享内存数据搬运时，<code>思考模型是逻辑空间，而执行时需要考虑存储空间以避免bank conflict</code></li>\n</ul>\n</li>\n<li><code>layout和swizzle都是一种抽象，可以使用逻辑的方式思考，具体存储交给映射关系</code></li>\n<li><code>new layout language to describe coordinate and index bookkeepings; coordinate 是思考时用到的逻辑方式，具体的存储由 layout 映射关系来处理，可以将经历放在逻辑上</code></li>\n<li><code>Any problem in computer science can be solved by another layer of indirection</code> 计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决;例如虚拟地址<ul>\n<li>layout 和 swizzle 都可以看做是中间层或者代理</li>\n</ul>\n</li>\n<li><code>loccal tile</code> 是 Tensor 中用户可以使用到的重要的函数，可以通过 tile 方法对 tensor 进行分块，通过 local_tile 可以实现从大的 tensor 中切取 tile 块，并且通过 coord 进行块的选取<ul>\n<li>用于数据分块</li>\n</ul>\n</li>\n<li><code>local partition</code>和 local tile 类似，现将大的 Tensor 按照 tile 大小进行分块，分块后每一块取出 coordinate 指定的元素拼拼成新的块<ul>\n<li>用于给线程分数据</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"cutlass-优化手段\"><a href=\"#cutlass-优化手段\" class=\"headerlink\" title=\"cutlass 优化手段\"></a><a href=\"https://zhuanlan.zhihu.com/p/677616101\">cutlass 优化手段</a></h2><ol>\n<li><code>bank conflict free的shared memory layout</code></li>\n<li><code>thread block swizzle</code>：这个优化对于中大型矩阵乘法比较明显，更改了发射 block 的顺序，以增加 locality，从而提高 l2cache 的命中率，实现上非常简单，核心代码就是一个取余操作，但有用多级流水线(software pipeline)：2 条可以不要 async.copy 这个指令(sm80 才有的)，大于 2 条流水就需要了，原理上没什么，和 CPU 的多级流水一个道理，主要是指令的应用。</li>\n<li><code>predicate iterator</code>：这个是一个软件层组件写法的优化，叫 predicate 的原因是，这个 iterator 会返回一个布尔值，在 gpu 的指令里是一个 special register，用来表示这块内存是不是需要 load，这个在软件层会涉及一些优化手段，比较有趣的是会在 host 侧 precompute 了哪些下标需要 load，用位运算来 mask，计算开销(位运算在 gpu 里开销较小)和存储开销(一个 byte 可以存 8 个 mask 值)都很小。为什么需要让存储开销很小？因为在 gpu 架构里，register 是很贵的，一个 thread 只能使用 255 个 register，如果超出了就会存在 local memory 里，register 读取很快，一个 cycle 就可以完成，而 local memory 就会慢非常多，register 用超了会非常非常影响性能！</li>\n<li><code>shared memory重排搬出</code>：mma 指令计算完成之后，结果是存在 register 里的，且 register 中存储的数据是不连续的(32bits 连续)，原因是由于 mma 指令造成的，我们知道 vectorize load&#x2F;store 会提高访存带宽，所以我们可以在 shared memory 里重新排序，一并搬出。但并不是什么情况下重排都是正优化，因为重排还是会增加一次 shared memory store&#x2F;load，比如在小 channel 的 conv2d 中，直接从 register 搬出到 global memory 性能会更好</li>\n<li><code>cooperative fetching和vectorize load</code>：这两个是 GPU 的一些基本优化方法，即尽量用更大的 data type 来搬运，以及尽量让一个 warp 里的不同线程是连续地访存同一块内存地址，原理可以参考</li>\n<li><code>tiling description</code>: 提供了实例化方法，来调整 block 计算量和 warp 计算量，</li>\n</ol>\n<h2 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h2><ol>\n<li><code>cutlass::half_t</code> 不支持 half</li>\n<li><code>cutlass::bfloat16</code> Ampere ElementAccumulator 应该为 float, 看手册可以看到只支持 float32 的 accumulate <a href=\"https://www.nvidia.com/content/PDF/nvidia-ampere-ga-102-gpu-architecture-whitepaper-v2.pdf\">link</a><ul>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/examples/23_ampere_gemm_operand_reduction_fusion/ampere_gemm_operand_reduction_fusion.cu#L68\">ampere_gemm_operand_reduction_fusion</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"fusion\"><a href=\"#fusion\" class=\"headerlink\" title=\"fusion\"></a>fusion</h2><ol>\n<li>为了减少核启动(launch)和内存访问的开销</li>\n<li>It also removes kernel launch overhead 减少 kernel launch 开销</li>\n<li>注意融合分两种：<ul>\n<li>简单融合：简单将两个 kernel 合并成一个，并没有减少从主存加载数据次数，只是减少了 kernel 调度的开销</li>\n<li>高效融合：利用 shared memory 减少从主存加载数据次数</li>\n</ul>\n</li>\n<li>两个 gemm 融合， 关键在 k 维度， 假设 A@B@C， 分块时 A，B 矩阵滑动取数，结果放到 C 中，只能取一块，结果和 C 相乘的时候需要所有的分块矩阵</li>\n</ol>\n<h2 id=\"docs\"><a href=\"#docs\" class=\"headerlink\" title=\"docs\"></a>docs</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/cutlass_3x_design.md\">cutlass_3x_design</a><ul>\n<li>CUTLASS 3.0 将其接口层与硬件分离，将它们集中在 GEMM 算法的自然结构周围，不依赖于任何特定的 GPU generation</li>\n<li>CUTLASS 2.x 将 GEMM 操作的移动部分分解为一个层次结构，该层次结构密切反映了 GPU 架构的组织。然而，这种设计有时会导致耦合过于紧密，无法扩展到不适合同一架构层次结构的较新 GPU。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/gemm_api_3x.md\">gemm_api_3x</a></li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/gemm_api.md\">gemm_api</a><ul>\n<li>包含层级结构</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/code_organization.md\">代码组织</a></li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/fundamental_types.md\">数据类型</a></li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/cute/01_layout.md\">CuTe layout</a></li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/efficient_gemm.md\">efficient_gemm.md</a></li>\n<li>最全流程图<br><img src=\"https://github.com/NVIDIA/cutlass/blob/main/media/images/gemm-structural-components.png\" alt=\"gemm-structural-components\"></li>\n</ol>\n<h3 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h3><ol>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/quickstart.md\">quickstart</a></li>\n<li><a href=\"https://github.com/NVIDIA/cutlass/blob/main/media/docs/quickstart.md#building-for-multiple-architectures\">选择 arch</a></li>\n<li>下不下来 google test, 修改 cmakelists.txt, 注释掉 gtest</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libgtest-dev</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/NVIDIA/cutlass.git</span><br><span class=\"line\"><span class=\"built_in\">export</span> CUDACXX=<span class=\"variable\">$&#123;CUDA_INSTALL_PATH&#125;</span>/bin/nvcc</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/cuda/bin/:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build &amp;&amp; <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake .. -DCUTLASS_NVCC_ARCHS=86</span><br><span class=\"line\">make cutlass_profiler -j12</span><br><span class=\"line\">./tools/profiler/cutlass_profiler --kernels=sgemm --m=4352 --n=4096 --k=4096</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li><p>00 basic gemm</p>\n<ul>\n<li>创建 cutlass::gemm::device::Gemm，CutlassGemm::Arguments 实例 gemm_operator 和 args</li>\n<li>gemm_operator(args) launch kernel</li>\n</ul>\n</li>\n<li><p>01 cutlass utilities</p>\n<ul>\n<li>HostTensor contributes management for both host and device memory. HostTensor allocates host and device memory upon construction. Basic element-wise operations on host memory synchronize device memory automatically.</li>\n<li>cutlass::reference::host::Gemm</li>\n<li>cutlass::reference::device::TensorFillRandomGaussian()</li>\n<li>cutlass::reference::host::BlockFillSequential()</li>\n<li>cutlass::reference::host::TensorEquals()</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/NVIDIA/cutlass/tree/main/examples/02_dump_reg_shmem\">02_dump_reg_shmem</a></p>\n<ul>\n<li>Don’t use cuda-gdb to debug any heavy templated CUDA code. We just insert printf to dump the information to debug. We have some utilities to help you to do it. <a href=\"https://github.com/NVIDIA/cutlass/issues/372#issuecomment-987532556\">link</a></li>\n</ul>\n</li>\n<li><p>41_fused_multi_head_attention</p>\n</li>\n<li><p>cute&#x2F;tutorial&#x2F;sgemm_nt_1.cu</p>\n<ul>\n<li>thread layout tA, tB 是读 AB 数据时线程 layout, tC 是计算 C 时的线程 layout</li>\n<li>tAsA 搬 block tile 数据用， tCsA 计算 block tile 用</li>\n<li>tCrC 每个线程算 8x8 数据， shared memory 中 A、B 数据也为 8x8，</li>\n<li>使用 cuda core 计算，并没使用 tensor core</li>\n<li>tAsA 表示 copy 时 thr_copy A 时 Shared memory 上的 thread 数据</li>\n<li>tCsA, tCsB, tCrC 表示 mma 计算 thr_mma 用到的 A，B shared memory thread 数据和 C 寄存器数据; 提供线程号，则获得具体线程的数据划分能力，对给定的数据块进行划分，得到线程级的数据描述。</li>\n<li>可以顺序赋值给 A, B, 类型改为 int, 来模仿各 tile layout</li>\n<li>axpby:alpha x plus beta y <code>y = alpha*x + beta*y</code>; where x and y are vectors of n elements and alpha and beta are scalars.</li>\n<li>axpy here is simply an abbreviation of alpha times x plus y.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><h3 id=\"cutlass-device-dump\"><a href=\"#cutlass-device-dump\" class=\"headerlink\" title=\"cutlass device dump\"></a><a href=\"https://github.com/NVIDIA/cutlass/blob/main/tools/util/include/cutlass/util/device_dump.h#L131\">cutlass device dump</a></h3><ol>\n<li>cutlass::debug::dump_shmem()<ul>\n<li>每行 128B，bank: 4B x 32 &#x3D; 128B</li>\n</ul>\n</li>\n<li>cutlass::debug::dump_fragment()</li>\n</ol>\n<h3 id=\"cute-tensor\"><a href=\"#cute-tensor\" class=\"headerlink\" title=\"cute tensor\"></a><a href=\"https://github.com/NVIDIA/cutlass/blob/main/include/cute/tensor.hpp#L985\">cute tensor</a></h3><ol>\n<li>cute::print(tensor)</li>\n<li>cute::print_tensor(tensor); 可以打印各种维度</li>\n<li>cute::print_tensor_os()</li>\n<li>operator&lt;&lt;()</li>\n<li>print 会打印 tensor 存储空间所在的位置和 shape、stride 信息，而 print_tensor 除了以上信息还会打印 Tensor 中具体的每一个数值：</li>\n</ol>\n<h3 id=\"cute-layout\"><a href=\"#cute-layout\" class=\"headerlink\" title=\"cute layout\"></a><a href=\"https://github.com/NVIDIA/cutlass/blob/main/include/cute/layout.hpp#L1694\">cute layout</a></h3><ol>\n<li>cute::print(layout): <code>print(layout.shape()); print(&quot;:&quot;); print(layout.stride());</code></li>\n<li>cute::print_layout(layout)<ul>\n<li>NOTE: 只能打印二维 layout; 代码会做检查 <code>CUTE_STATIC_ASSERT_V(rank(layout) == Int&lt;2&gt;&#123;&#125;);</code> 可以 slice 成二维的再打印</li>\n</ul>\n</li>\n<li>cute::print_layout(tensor.layout());</li>\n<li>operator&lt;&lt;(): <code> os &lt;&lt; shape(layout) &lt;&lt; &quot;:&quot; &lt;&lt; stride(layout);</code></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.youtube.com/watch?v=QLdUML5MCfE&t=42s\">CUTLASS 3 0 Next Generation Composable and Reusable GPU Linear Algebra Library - TVMCon2023</a></li>\n<li><a href=\"https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/\">nvidia cutlass-linear-algebra-cuda</a></li>\n<li><a href=\"https://dl.acm.org/doi/pdf/10.1145/3582016.3582018\">Graphene: An IR for Optimized Tensor Computations on GPUs</a></li>\n<li><a href=\"https://www.zhihu.com/column/c_1696937812497235968\">CUDA 高性能编程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/588953452\">cutlass 源码导读（1）——API 与设计理念</a></li>\n</ol>\n"},{"title":"data_view","url":"/2023/07/09/data-view/","content":"<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><ol>\n<li><code>bar with table</code><ul>\n<li><a href=\"https://stackoverflow.com/questions/71551678/how-to-turn-a-contingency-table-directly-into-a-bar-graph-when-using-the-base-ta\">ggplot2 R language</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/0iAbHZ-hN6Mj2c2j2Uw03w\">example</a></li>\n</ul>\n</li>\n<li>openai 数据分析可视化</li>\n<li><a href=\"https://github.com/rougier/scientific-visualization-book\">科学可视化：Python+Matplotlib</a></li>\n</ol>\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><ol>\n<li><a href=\"https://github.com/Enter-tainer/cxx2flow\">cxx2flow C++代码生成流程图</a><ul>\n<li>可以生成 dot 文件</li>\n<li><a href=\"http://magjac.com/graphviz-visual-editor/\">graphviz-visual-editor 在线编辑 dot</a></li>\n<li><a href=\"https://github.com/tintinweb/vscode-interactive-graphviz\">vscode-interactive-graphviz 渲染 dot</a></li>\n<li><a href=\"https://github.com/Enter-tainer/cxx2flow/releases\">cxx2flow&#x2F;releases</a> 直接下载二进制用</li>\n<li>cxx2flow-linux-amd64 test.cpp –cpp &gt; test.dot</li>\n<li>cxx2flow main.cpp my_custom_func | dot -Tsvg -o test.svg</li>\n<li>注意要有 main 函数才能生成, 一个函数一个函数生成，函数名改为 main</li>\n<li><a href=\"https://graphviz.org/docs/attrs/splines/\">线条格式</a></li>\n<li>写一个功能：从文件夹中获取所有 cpp, 对每个 cpp, 生成所有函数的 svg, 每个函数一个 svg<ul>\n<li>ctags -x gpu&#x2F;model_process_tensorrt_impl.cpp | grep “(“ | awk ‘{print $1}’ 获取 cpp 中函数名</li>\n<li>提取出函数体到一个文件，再生成 svg <a href=\"https://stackoverflow.com/a/37339591/23011500\">提取函数体</a></li>\n<li>doxygen 提取</li>\n<li>doxygen</li>\n</ul>\n</li>\n<li><a href=\"https://stackoverflow.com/a/51318005/23011500\">不使用流程图</a></li>\n</ul>\n</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/572327280?utm_id=0\">3σ 准则</a></li>\n<li><a href=\"https://www.rerun.io/blog#principles-for-a-computer-vision-focused-seeingtool\">可视化工具原则</a></li>\n<li>使用 rerun 实时或回放监测的数据: 将可视化代码与算法代码分开</li>\n<li>两二进制文件比较服务器(转成 float 对比)<ul>\n<li>error 画图</li>\n<li>三列, 数据 1， 数据 2， error， error 用色阶表示</li>\n</ul>\n</li>\n<li><a href=\"https://pandas.pydata.org/docs/user_guide/style.html\">pandas table 颜色设置（好用）</a>, 类似 excel 表格色阶</li>\n<li>excel 中可以套用表格格式来美化表格, 利用好色阶，条件格式, 数据条</li>\n<li>将 log 文件拖到浏览器中，生成报告(正则表达式先生成 pandas， 然后生成报告)</li>\n<li>csv server</li>\n<li><a href=\"https://www.51cto.com/article/719697.html\">提高数据可视化效果的五个原则</a></li>\n<li><a href=\"https://techcommunity.microsoft.com/t5/excel-blog/announcing-python-in-excel-combining-the-power-of-python-and-the/ba-p/3893439\">excel with python</a></li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"apache-superset\"><a href=\"#apache-superset\" class=\"headerlink\" title=\"apache&#x2F;superset\"></a><a href=\"https://github.com/apache/superset/tree/master\">apache&#x2F;superset</a></h2><ol>\n<li><a href=\"https://manage.app.preset.io/app/\">online test</a></li>\n</ol>\n<h2 id=\"rerun\"><a href=\"#rerun\" class=\"headerlink\" title=\"rerun\"></a>rerun</h2><ol>\n<li>可以实时查看结果并回放，后续支持 c++;</li>\n<li><a href=\"https://github.com/rerun-io/rerun/tree/latest/examples/python/plots\">python&#x2F;plots</a></li>\n</ol>\n<h2 id=\"PlotNeuralNet\"><a href=\"#PlotNeuralNet\" class=\"headerlink\" title=\"PlotNeuralNet\"></a><a href=\"https://github.com/HarisIqbal88/PlotNeuralNet\">PlotNeuralNet</a></h2><h2 id=\"matplotlib\"><a href=\"#matplotlib\" class=\"headerlink\" title=\"matplotlib\"></a>matplotlib</h2><ol>\n<li><a href=\"https://github.com/matplotlib/cheatsheets\">cheatsheets</a></li>\n</ol>\n<h2 id=\"seaborn\"><a href=\"#seaborn\" class=\"headerlink\" title=\"seaborn\"></a><a href=\"https://seaborn.pydata.org/index.html\">seaborn</a></h2><h2 id=\"plotly-py\"><a href=\"#plotly-py\" class=\"headerlink\" title=\"plotly.py\"></a><a href=\"https://github.com/plotly/plotly.py\">plotly.py</a></h2><h2 id=\"streamlit\"><a href=\"#streamlit\" class=\"headerlink\" title=\"streamlit\"></a><a href=\"https://github.com/streamlit/streamlit\">streamlit</a></h2><ol>\n<li><a href=\"https://jiaxiyang-streamlit-example-streamlit-app-t8698c.streamlit.app/\">csv view server</a><ul>\n<li><code>grep &quot;diff time&quot; 1117.log | awk &#39;&#123;print $NF&#125;&#39; | awk &#39;BEGIN &#123; print &quot;数据描述&quot; &#125; &#123; print $0 &#125;&#39; &gt; test.csv</code> 搜索 log，创建 csv</li>\n<li><code>paste $(ls *.csv)  -d &quot;,&quot; &gt; output.csv</code> 合并多个 csv 文件</li>\n<li><code>paste $(ls *.csv)  -d &quot;,&quot; &gt; tmp.csv &amp;&amp; tr -d &#39;\\r&#39; &lt; tmp.csv &gt; output.csv &amp;&amp; rm tmp.csv</code> 处理回车符问题: ^M 符号通常表示回车符 (Carriage Return)</li>\n</ul>\n</li>\n<li><a href=\"https://streamlit.io/gallery\">共享的 gallery</a></li>\n<li><a href=\"https://daniellewisdl-streamlit-cheat-sheet-app-ytm9sg.streamlit.app/\">cheatsheet</a></li>\n<li><a href=\"https://discuss.streamlit.io/\">discuss.streamlit.io</a></li>\n<li><a href=\"https://github.com/mkhorasani/Streamlit-Authenticator\">Streamlit-Authenticator</a></li>\n<li>NOTE: 测试文件名不能取名 steamlit.py, 否则会引起 circle import</li>\n<li>Streamlit 可让您在几分钟（而不是几周）内将数据脚本转变为可共享的 Web 应用程序。</li>\n<li><code>pip install --upgrade streamlit</code></li>\n<li>docker 注意端口号</li>\n<li>网页中的 csv 数据点击表头可排序</li>\n</ol>\n<h3 id=\"部署到服务器\"><a href=\"#部署到服务器\" class=\"headerlink\" title=\"部署到服务器\"></a>部署到服务器</h3><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull samdobson/streamlit:latest</span><br><span class=\"line\">pip install pip -U -<span class=\"selector-tag\">i</span> https:<span class=\"comment\">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class=\"line\">pip config set global<span class=\"selector-class\">.index-url</span> https:<span class=\"comment\">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class=\"line\">pip install matplotlib openpyxl</span><br><span class=\"line\">streamlit run streamlit_csv_server<span class=\"selector-class\">.py</span>  <span class=\"attr\">--server</span><span class=\"selector-class\">.port</span> <span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"chatgpt\"><a href=\"#chatgpt\" class=\"headerlink\" title=\"chatgpt\"></a>chatgpt</h3><p>Streamlit 是一个开源的 Python 库，它使得创建和共享数据驱动的 web 应用程序变得非常简单和快速。它提供了一个直观的 API，可以方便地从数据生成丰富的交互式界面。<br>以下是 Streamlit 的一些关键特性：</p>\n<ol>\n<li><strong>简单性</strong>：Streamlit 的 API 非常简洁，只需要几行 Python 代码就可以构建一个应用程序。你可以将所有的精力集中在数据和模型上，而不是界面设计和 Web 开发。</li>\n<li><strong>交互性</strong>：Streamlit 支持很多交互元素，例如滑动条、选择框、输入框等等。你可以用这些元素收集用户输入，并实时更新应用程序的输出。</li>\n<li><strong>快速迭代</strong>：Streamlit 的设计哲学是”先编码，再调整”。你可以先构建一个基本的应用程序，然后再逐步增加新功能，或者修改现有功能。Streamlit 会自动跟踪你的代码变化，并实时更新应用程序。</li>\n<li><strong>灵活性</strong>：Streamlit 支持 Python 的各种数据处理库（如 Pandas、NumPy）和可视化库（如 Matplotlib、Plotly）。你可以很容易地将这些库与 Streamlit 一起使用。</li>\n<li><strong>部署</strong>：使用 Streamlit Share 或其他云服务（如 Heroku、AWS 等），你可以很容易地将你的应用程序部署到 Web 上，让其他人也可以访问和使用。<br>Streamlit 的工作流程基本上就是这样：首先，你会写一个 Python 脚本，其中包含了你的数据处理和可视化代码，然后你会添加一些 Streamlit 的特殊命令，以创建交互式的用户界面。然后，你可以运行这个脚本，Streamlit 会生成一个可交互的 Web 应用，并在本地打开一个 Web 浏览器窗口显示这个应用。你可以在这个窗口中与你的应用互动，查看不同输入条件下的结果。</li>\n</ol>\n<h3 id=\"compare\"><a href=\"#compare\" class=\"headerlink\" title=\"compare\"></a>compare</h3><ol>\n<li>Streamlit：如果你正在寻找一个轻量级的，可以快速原型设计和部署机器学习和数据科学应用的工具，Streamlit 是一个很好的选择。它的设计理念是“代码即应用”，并且有一个很直观的接口。</li>\n<li>Dash：如果你正在寻找一个更强大的工具，你的项目需要更复杂的交互和可视化，Dash 可能更适合你。Dash 为数据可视化提供了更多的控制权，但也可能需要编写更多的代码。</li>\n<li>Panel：Panel 是一个非常灵活的工具，它可以让你在 Jupyter notebook 中创建应用，然后将其转化为独立的 Web 应用。如果你已经习惯于使用 Jupyter 进行数据分析，那么 Panel 可能是一个很好的选择。</li>\n<li>Voila：如果你喜欢在 Jupyter notebook 环境中工作，并希望能够无缝地将你的工作转化为交互式 Web 应用，那么 Voila 可能是一个很好的选择。</li>\n<li>Shiny：如果你是 R 语言的用户，Shiny 是一个非常强大的工具，用于构建交互式 Web 应用。Shiny 是 R 社区中使用最广泛的工具之一。</li>\n</ol>\n","categories":["DataView"],"tags":["DataView","CsvServer"]},{"title":"deformable_attention","url":"/2024/11/13/deformable-attention/","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>Deformable Attention</strong> 是一种在视觉任务中用于增强自注意力机制的技术，特别是在处理图像、视频等高维数据时，能够有效地处理不规则、非均匀的空间或时间分布。它的关键思想是通过对关注区域进行选择性采样，而不是计算所有位置的注意力权重，从而显著提高计算效率和精度，尤其是在处理大规模数据时。</p>\n<p>Deformable Attention 最初应用于<strong>Deformable DETR</strong>（Deformable Detection Transformer）中，针对检测任务优化了传统的自注意力机制，后来被推广到其他任务，如图像分割、姿态估计等。下面是 Deformable Attention 的一些关键特性和原理：</p>\n<h3 id=\"1-传统自注意力的瓶颈\"><a href=\"#1-传统自注意力的瓶颈\" class=\"headerlink\" title=\"1. 传统自注意力的瓶颈\"></a>1. <strong>传统自注意力的瓶颈</strong></h3><p>标准的自注意力机制（如在 Transformer 中使用的注意力机制）通常会计算输入的每一个位置与所有其他位置的关系，这导致了计算复杂度是输入序列长度的平方。在图像中，若处理的是高分辨率图像或长序列数据，这样的计算开销会非常巨大。具体来说：</p>\n<ul>\n<li><strong>计算复杂度</strong>：对于长序列，计算每一对位置之间的相似度需要 ( O(N^2) ) 的时间复杂度，其中 ( N ) 是序列的长度。对于图像数据而言，每个像素与所有其他像素的关系计算量也非常庞大。</li>\n</ul>\n<h3 id=\"2-Deformable-Attention-的设计思想\"><a href=\"#2-Deformable-Attention-的设计思想\" class=\"headerlink\" title=\"2. Deformable Attention 的设计思想\"></a>2. <strong>Deformable Attention 的设计思想</strong></h3><p>Deformable Attention 通过限制计算注意力的区域来减少计算量。与标准的全局自注意力机制不同，Deformable Attention 仅关注输入数据中的 <strong>少量关键位置</strong>，这些关键位置通过学习自适应地选择，能够有效地捕捉到重要的上下文信息。</p>\n<ul>\n<li><strong>选择性采样</strong>：而不是计算每个位置和所有其他位置的关系，Deformable Attention 只选择一些特定的、与当前查询相关的关键位置进行计算。这些关键位置通常是通过一个学习的<strong>采样位置</strong>来选择的，因此能关注到更多有用的信息。</li>\n</ul>\n<h3 id=\"3-Deformable-Attention-的实现原理\"><a href=\"#3-Deformable-Attention-的实现原理\" class=\"headerlink\" title=\"3. Deformable Attention 的实现原理\"></a>3. <strong>Deformable Attention 的实现原理</strong></h3><p>Deformable Attention 的核心思想是通过<strong>可变形采样</strong>（deformable sampling）来动态选择哪些位置会参与到注意力的计算中。这通常通过引入一个采样的位置信息来完成，该信息在训练过程中不断优化，以便能自适应地选择合适的区域。</p>\n<ul>\n<li><p><strong>采样位置的生成</strong>：在 Deformable Attention 中，会对每个查询（query）生成一组采样位置（采样点），这些位置不一定是规则网格上的点，而是通过某种方式（如通过网络学习的偏移量）选择的。采样位置通常会覆盖输入特征的局部区域，从而捕获重要的上下文信息。</p>\n</li>\n<li><p><strong>注意力计算</strong>：通过对选定的局部位置进行自注意力计算，可以大大减少计算量，因为只需要计算局部区域的注意力，而不是全局的每一对位置之间的关系。</p>\n</li>\n<li><p><strong>位置信息</strong>：Deformable Attention 采用相对位置信息来进一步增强模型的表达能力，能够处理不同位置间的空间关系。</p>\n</li>\n</ul>\n<h3 id=\"4-Deformable-Attention-与标准自注意力的比较\"><a href=\"#4-Deformable-Attention-与标准自注意力的比较\" class=\"headerlink\" title=\"4. Deformable Attention 与标准自注意力的比较\"></a>4. <strong>Deformable Attention 与标准自注意力的比较</strong></h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>标准自注意力</th>\n<th>Deformable Attention</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>计算复杂度</strong></td>\n<td>( O(N^2) )</td>\n<td>( O(N \\cdot M) )，( M \\ll N )</td>\n</tr>\n<tr>\n<td><strong>注意力区域</strong></td>\n<td>全局注意力，计算所有位置间的关系</td>\n<td>局部区域注意力，选择关键位置进行计算</td>\n</tr>\n<tr>\n<td><strong>效率</strong></td>\n<td>计算开销大，内存消耗大</td>\n<td>更高效，内存消耗少</td>\n</tr>\n<tr>\n<td><strong>灵活性</strong></td>\n<td>对所有位置进行相同的注意力计算</td>\n<td>动态选择关键位置，自适应性强</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-Deformable-Attention-的优势\"><a href=\"#5-Deformable-Attention-的优势\" class=\"headerlink\" title=\"5. Deformable Attention 的优势\"></a>5. <strong>Deformable Attention 的优势</strong></h3><ul>\n<li><strong>计算效率</strong>：由于仅计算少量的关键位置，Deformable Attention 在计算效率上相较于传统的自注意力机制有显著提升，尤其是在处理大规模输入数据时（如高分辨率图像、长时间序列等）。</li>\n<li><strong>灵活性与自适应性</strong>：Deformable Attention 可以根据任务和输入数据的不同，自适应地选择最相关的位置进行注意力计算，而不是使用固定的网格结构。这样可以更灵活地处理复杂的空间或时间关系。</li>\n<li><strong>减少计算冗余</strong>：在传统自注意力中，每个位置都与所有其他位置进行计算，这会带来大量冗余计算。Deformable Attention 通过局部采样减少了这些冗余计算，特别是在高分辨率图像的情况下，计算的效率提升尤为明显。</li>\n</ul>\n<h3 id=\"6-应用领域\"><a href=\"#6-应用领域\" class=\"headerlink\" title=\"6. 应用领域\"></a>6. <strong>应用领域</strong></h3><p>Deformable Attention 在多个领域中取得了显著的成果，特别是在计算机视觉任务中：</p>\n<ul>\n<li><p><strong>目标检测</strong>：Deformable DETR（Deformable Detection Transformer）是 Deformable Attention 的一个重要应用，改进了传统 DETR 模型在目标检测中的性能，尤其是在处理大尺度图像时更为高效。</p>\n</li>\n<li><p><strong>图像分割</strong>：Deformable Attention 也被用于图像分割任务，能够有效地捕捉到图像中的细节信息，特别是在处理不规则形状和边界时。</p>\n</li>\n<li><p><strong>姿态估计</strong>：通过对特定关键点的注意力计算，Deformable Attention 在姿态估计任务中也得到了广泛应用，能够更准确地捕捉人体姿态变化。</p>\n</li>\n</ul>\n<h3 id=\"7-Deformable-Attention-的进一步发展\"><a href=\"#7-Deformable-Attention-的进一步发展\" class=\"headerlink\" title=\"7. Deformable Attention 的进一步发展\"></a>7. <strong>Deformable Attention 的进一步发展</strong></h3><p>Deformable Attention 的应用仍在不断扩展，研究者正在探索其在其他领域的潜力，例如：</p>\n<ul>\n<li><strong>自然语言处理</strong>：在自然语言处理中，Deformable Attention 可能能够帮助捕捉长文本中的重要上下文信息，尤其是当文本存在复杂的依赖关系时。</li>\n<li><strong>视频处理</strong>：Deformable Attention 可以在视频处理任务中，通过自适应选择关键帧或区域，从而提高效率并降低计算量。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Deformable Attention 通过对注意力计算的局部化和选择性采样，大大提高了计算效率和灵活性，尤其在处理高维数据（如高分辨率图像和长序列）时展现了优势。它在计算机视觉领域，特别是目标检测和图像分割中，取得了显著的成果，并且有潜力应用于其他领域，如自然语言处理和视频分析等。</p>\n"},{"title":"diffusion","url":"/2023/12/19/diffusion/","content":"<h2 id=\"diffusers\"><a href=\"#diffusers\" class=\"headerlink\" title=\"diffusers\"></a>diffusers</h2><ol>\n<li><a href=\"https://github.com/huggingface/diffusers\">huggingface&#x2F;diffusers</a><ul>\n<li>Diffusers: State-of-the-art diffusion models for image and audio generation in PyTorch and FLAX.</li>\n<li>可以用 xformers 来加速推理和训练 <a href=\"https://github.com/huggingface/diffusers/blob/main/docs/source/en/optimization/xformers.md\">readme</a></li>\n<li>State-of-the-art diffusion pipelines that can be run in inference with just a few lines of code.</li>\n</ul>\n</li>\n<li>diffusers 加速技术<ul>\n<li><a href=\"https://huggingface.co/docs/diffusers/tutorials/fast_diffusion#accelerate-inference-of-text-to-image-diffusion-models\">accelerate-inference-of-text-to-image-diffusion-models</a></li>\n<li><a href=\"https://huggingface.co/docs/diffusers/optimization/fp16\">diffusers&#x2F;optimization</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"MagicDrive\"><a href=\"#MagicDrive\" class=\"headerlink\" title=\"MagicDrive\"></a><a href=\"https://arxiv.org/abs/2310.02601\">MagicDrive</a></h2><ol>\n<li>MagicDrive can be used for data augmentation, facilitating the training for perception models on both BEV segmentation and 3D object detection tasks.</li>\n<li>bevfusion 用来处理原始 bev 数据得到 bev map 和 3d box</li>\n<li>可以不自己产生 bev map 和 3d boxes, 从真实数据拿。只需要不同的 prompt 就能生成不同的场景</li>\n<li>可以使用 diffusion model 替换真实场景中的物体</li>\n<li>Training Support for BEV Segmentation and 3D Object Detection. MagicDrive can produce augmented data with accurate annotation controls, enhancing the training for perception tasks.</li>\n<li>生成的数据可以用于训练</li>\n<li>用了 control-net diffusers pipeline 和 xformers 来加速</li>\n</ol>\n<h2 id=\"papers\"><a href=\"#papers\" class=\"headerlink\" title=\"papers\"></a>papers</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/595866176\">必读的 10 篇经典论文</a></li>\n<li><a href=\"https://arxiv.org/abs/2006.11239\">Denoising Diffusion Probabilistic Models</a></li>\n<li><a href=\"https://arxiv.org/abs/2112.10752\">High-Resolution Image Synthesis with Latent Diffusion Models</a> stable diffusion 的原型<ul>\n<li><a href=\"https://github.com/CompVis/latent-diffusion\">code</a></li>\n<li><a href=\"https://github.com/CompVis/stable-diffusion\">stable-diffusion code</a></li>\n</ul>\n</li>\n<li><a href=\"https://arxiv.org/abs/2204.03458\">Video Diffusion Models</a><ul>\n<li><a href=\"https://github.com/lucidrains/video-diffusion-pytorch\">code</a></li>\n</ul>\n</li>\n</ol>\n"},{"title":"windows WSL2","url":"/2022/04/26/docker-windows/","content":"<h2 id=\"install-WSL2\"><a href=\"#install-WSL2\" class=\"headerlink\" title=\"install WSL2\"></a><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">install WSL2</a></h2><ol>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package\">update kernel</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual\">install manual</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-CN/windows/terminal/install\">install windows terminal</a></li>\n</ol>\n"},{"title":"deep-learning","url":"/2023/12/21/deep-learning/","content":"<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><ol>\n<li><p>神经网络本质上是一个计算图。计算图的节点是算子，边是参与运算的张量</p>\n</li>\n<li><p><code>Deep learning</code> is an approach to machine learning characterized by deep stacks of computations. This depth of computation is what has enabled deep learning models to disentangle the kinds of complex and hierarchical patterns found in the most challenging real-world datasets.</p>\n</li>\n<li><p><code>SGD</code>: 全称为 Stochastic Gradient Descent 即随机梯度下降,是机器学习中常用的优化算法,用于训练各种模型(如神经网络)寻找最优参数, optimizer</p>\n</li>\n<li><p><code>neuron</code> : the Linear Unit y &#x3D; wx + b; w: weight, b: bias</p>\n</li>\n<li><p><code>layers</code>: Neural networks typically organize their neurons into layers. When we collect together linear units having a common set of inputs we get a <code>dense layer</code>.</p>\n</li>\n<li><p>一个 layer 共享一个 bias: y &#x3D; w1 _ x1 + b1 + w2 _ x2 + b2 &#x3D;&#x3D;&gt; y &#x3D; w1 _ x1 + w2 _ x2 + b</p>\n</li>\n<li><p><code>ReLU</code>: rectified linear unit</p>\n</li>\n<li><p><code>Linear Unit + ReLU</code>: y &#x3D; max(0, w * x + b)</p>\n</li>\n<li><p>relu 没有参数， leakyrelu 有参数</p>\n</li>\n<li><p>Without activation functions, neural networks can only learn linear relationships.</p>\n</li>\n<li><p>A <code>loss function</code> that measures how good the network’s predictions are.</p>\n</li>\n<li><p>An <code>optimizer</code> that can tell the network how to change its weights.</p>\n</li>\n<li><p><code>MAE</code>: mean absolute error; loss function, for regression</p>\n</li>\n<li><p>Each iteration’s sample of training data is called a <code>minibatch</code> (or often just “batch”), while a complete round of the training data is called an <code>epoch</code>.</p>\n</li>\n<li><p>The <code>learning rate</code> and the size of the <code>minibatches</code> are the two parameters that have the largest effect on how the SGD training proceeds.</p>\n</li>\n<li><p><code>Adam</code> is an SGD algorithm that has an adaptive learning rate that makes it suitable for most problems without any parameter tuning (it is “self tuning”, in a sense). Adam is a great general-purpose optimizer.</p>\n</li>\n<li><p><code>Underfitting the training set</code> is when the loss is not as low as it could be because the model hasn’t learned enough signal.</p>\n</li>\n<li><p><code>Overfitting the training set</code> is when the loss is not as low as it could be because the model learned too much noise. The trick to training deep learning models is finding the best balance between the two.</p>\n</li>\n<li><p><code>Early Stopping</code>: stop the training whenever it seems the validation loss isn’t decreasing anymore. Interrupting the training this way is called early stopping. Once we detect that the validation loss is starting to rise again, we can reset the weights back to where the minimum occured.</p>\n</li>\n<li><p><code>dropout layer</code> we randomly drop out some fraction of a layer’s input units every step of training, making it much harder for the network to learn those spurious patterns in the training data. Instead, it has to search for broad, general patterns, whose weight patterns tend to be more robust. 可以纠正过拟合</p>\n</li>\n<li><p><code>Batch Normalization layer</code></p>\n<ul>\n<li>why? Features that tend to produce activations of very different sizes can make for unstable training behavior.</li>\n<li>A batch normalization layer looks at each batch as it comes in, first normalizing the batch with its own mean and standard deviation, and then also putting the data on a new scale with two trainable rescaling parameters.</li>\n<li>做两次 normalize, 先基于输入的 batch 数据做， 后基于训练的均值和方差来做</li>\n<li>Models with batchnorm tend to need fewer epochs to complete training. Moreover, batchnorm can also fix various problems that can cause the training to get “stuck”.</li>\n<li>get better performance if you standardize your data before using it for training</li>\n</ul>\n</li>\n<li><p>The main difference regression and classification is in the loss function we use and in what kind of outputs we want the final layer to produce. 主要区别是损失函数和最后一层的输出类型</p>\n</li>\n<li><p><code>Accuracy</code> is one of the many metrics in use for measuring success on a classification problem. Accuracy is the ratio of correct predictions to total predictions: <code>accuracy = number_correct / total</code></p>\n</li>\n<li><p><code>Cross-Entropy</code> 交叉熵</p>\n<ul>\n<li>Cross-entropy is a sort of measure for the distance from one probability distribution to another.</li>\n<li>SGD needs a loss function that changes smoothly, but accuracy, being a ratio of counts, changes in “jumps”. So, we have to choose a substitute to act as the loss function. This substitute is the cross-entropy function.</li>\n<li>With regression, our goal was to minimize the distance between the expected outcome and the predicted outcome. We chose MAE to measure this distance.</li>\n<li>For classification, what we want instead is a distance between probabilities, and this is what cross-entropy provides.</li>\n</ul>\n</li>\n<li><p><code>softmax</code> 也是激活函数， layer to layer; not functions of a single fold x; 在 softmax 函数的实现中减去最大值是一种数值稳定性的技巧。从所有输入值中减去同一个常数不会改变函数的输出。如果 x 很大，可能导致 exp(x)溢出</p>\n</li>\n<li><p><code>relu</code> 是 single x 的激活函数</p>\n</li>\n<li><p><a href=\"https://medium.com/@tariqanwarph/activation-function-and-glu-variants-for-transformer-models-a4fcbe85323f\">GEGLU</a></p>\n</li>\n<li><p><code>MLP, CNN, RNN, Transformer</code> 四大深度学习架构 Multilayer Perceptron(MLP)</p>\n</li>\n<li><p>样本和特征, batch 是样本</p>\n</li>\n<li><p><code>正则化(Regularization)</code> 指的是在训练过程中添加额外信息以防止模型过度拟合的技术。</p>\n<ul>\n<li>L1 正则化:在损失函数中添加模型权重参数绝对值的和,使权重 decay 到 0,从而使模型更稀疏。</li>\n<li>L2 正则化:在损失函数中添加模型权重参数平方和,惩罚大的参数值,使权重较为平均分布,避免个别权重参数过大。也称为权重衰减(weight decay)。</li>\n<li>Early Stopping:在模型测试指标不再改善时中止训练,防止过拟合。</li>\n<li>Dropout:以一定概率随机置部分节点为 0,增加模型泛化能力</li>\n<li>Data Augmentation:人工生成更多训练数据,改善模型泛化能力。</li>\n<li>Batch Normalization: 通过调整网络中间层的激活值，使其在训练时保持一个更稳定的分布。虽然其主要目的是加快训练过程，但它也有一定的正则化效果。</li>\n</ul>\n</li>\n<li><p><a href=\"https://zh.d2l.ai/chapter_convolutional-modern/batch-norm.html\">Batch Normalization 计算</a></p>\n<ul>\n<li>全连接层<br>仿射变换和激活函数之间;对 minibatch 整体做 normalization</li>\n<li>卷积<br>卷积层之后和非线性激活函数之前; 对每个通道分别做 normalization; NCHW, 固定 C; 对于 RGB， 相当于 R, G, B 单独做 normalization</li>\n<li>预测时：均值和方差为整个训练数据集的样本均值和方差(或者学习的均值和方差)</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/LXP-Never/p/11566064.html\">各种 normlization 方法， 带图</a></p>\n</li>\n<li><p><a href=\"https://blog.tensorflow.org/2022/11/whats-new-in-tensorflow-211.html\">文本 normalization 图示</a></p>\n<ul>\n<li>layer norm:输入一句话直接对其输出做 norm，不用管其他句子</li>\n</ul>\n</li>\n<li><p><code>SiLU: f(x) = s * sigmoid(x)</code></p>\n</li>\n<li><p>图神经网络（Graph Neural Networks，GNN)</p>\n</li>\n</ol>\n<h3 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a><a href=\"https://zh.d2l.ai/chapter_convolutional-neural-networks/channels.html\">卷积</a></h3><ol>\n<li><a href=\"https://docs.nvidia.com/deeplearning/performance/dl-performance-convolutional/index.html#tc-usage\">Convolutional Layers User’s Guide</a></li>\n<li>每个卷积核输出一个 feature map； 代表一种特征</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/63974249\">卷积转换为矩阵乘</a><ul>\n<li>batch conv 转化为 gemm， 注意不是 batch gemm</li>\n<li>stride 有重叠还是矩阵乘,行多输出</li>\n</ul>\n</li>\n<li>tensor core 用 Implicit GEMM 实现的卷积不用生成中间的矩阵，直接原位计算， 不需要 im2col <a href=\"https://docs.nvidia.com/deeplearning/performance/dl-performance-convolutional/index.html#tc-usage\">link</a></li>\n<li>因为为 Tensor Core 实现的卷积需要 NHWC 布局，并且当输入张量以 NHWC 布局时速度最快</li>\n</ol>\n<h2 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h2><ol>\n<li>构建深度学习模型的基本流程就是：搭建计算图，求得损失函数，然后计算损失函数对模型参数的导数，再利用梯度下降法等方法来更新参数。</li>\n</ol>\n<h2 id=\"backward\"><a href=\"#backward\" class=\"headerlink\" title=\"backward\"></a>backward</h2><ol>\n<li>反向传播用于算梯度</li>\n<li>backward()实际上是通过 DCG 图从根张量追溯到每一个叶子节点，然后计算将计算出的梯度存入每个叶子节点的.grad 属性中</li>\n<li>在某种程度上，反向传播只是链式法则的一个花哨的名字—— Jeremy Howard</li>\n<li>backward 不传入参数时，默认为传入 backward(torch.tensor(1.0))。</li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/pytorch_with_examples.html\">Learning PyTorch with Examples</a></li>\n<li><a href=\"https://blog.csdn.net/niexinyu0026/article/details/122262082\">用 numpy、PyTorch 自动求导、torch.nn 库实现两层神经网络</a> <a href=\"https://www.cnblogs.com/luedong/p/14492361.html\">link</a></li>\n<li><a href=\"https://blog.csdn.net/baidu_38797690/article/details/122180655\">PyTorch：梯度计算之反向传播函数 backward()</a></li>\n</ol>\n<h2 id=\"optimizer\"><a href=\"#optimizer\" class=\"headerlink\" title=\"optimizer\"></a>optimizer</h2><ol>\n<li>根据参数梯度来更新参数</li>\n<li>pytorch 中初始化需要注意 model 参数位置， model.to(gpu_device)之后初始化 optim</li>\n</ol>\n<h2 id=\"dataset\"><a href=\"#dataset\" class=\"headerlink\" title=\"dataset\"></a>dataset</h2><ol>\n<li>用于管理训练时(x_train, y_train)</li>\n</ol>\n<h2 id=\"dataloader\"><a href=\"#dataloader\" class=\"headerlink\" title=\"dataloader\"></a>dataloader</h2><ol>\n<li>dataset batch 管理</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.kaggle.com/learn/intro-to-deep-learning\">kaggle intro-to-deep-learning</a></li>\n<li><a href=\"https://www.kaggle.com/code/ryanholbrook/deep-learning-animations-and-illustrations/notebook\">sgd 动画</a></li>\n<li><a href=\"https://www.kaggle.com/code/ryanholbrook/overfitting-and-underfitting\">overfitting-and-underfitting</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Activation_function\">激活函数</a></li>\n</ol>\n<h3 id=\"术语表\"><a href=\"#术语表\" class=\"headerlink\" title=\"术语表\"></a>术语表</h3><ol>\n<li><a href=\"https://mp.weixin.qq.com/s/0evrjcivb5ArZGLQ4tGrmg\">深度学习速查词典</a></li>\n<li><a href=\"https://developers.google.com/machine-learning/glossary?hl=zh-cn\">google 机器学习术语表</a></li>\n</ol>\n<h2 id=\"全连接层与矩阵计算\"><a href=\"#全连接层与矩阵计算\" class=\"headerlink\" title=\"全连接层与矩阵计算\"></a>全连接层与矩阵计算</h2><ol>\n<li><a href=\"https://excalidraw.com/#json=EUPwP_pkPfoNDDVEC4b71,-89u61cxUzIS_dhKYsdHQQ\">图示</a><br><img src=\"https://i.ibb.co/bWthfyQ/o-XLOSNus4-J.png\" alt=\"图\"></li>\n<li>输出的每个神经元可以看到所有输入，提取了输入的某种特征</li>\n<li>两个相乘的矩阵分别为 m×k 和 k×n 时，计算强度的计算略有不同。在这种情况下，矩阵乘法需要进行大约 m×n×k 次乘法和相同数量的加法操作。<ul>\n<li><code>浮点运算次数</code>：每个元素的计算涉及 k 次乘法和 k-1 次加法（对于每行和每列中的每个交叉点）。因此，总的浮点运算次数大约是 2m×n×k 次。</li>\n<li><code>内存操作</code>：如果每个矩阵元素是单精度浮点数（4 字节），那么矩阵 A 需要 m×k×4 字节，矩阵 B 需要 k×n×4 字节，矩阵 C 需要 m×n×4 字节的内存。因此，总的内存操作大约是 (m×k + k×n + m×n)×4 字节。</li>\n<li><code>计算强度（算术强度)</code>可以表示为： <code>2mnk/(4(mk + kn + mn)) = 0.5/((1/n + 1/m + 1/k))</code>; 计算强度与 m, k, n 成正比, 实际中，由于现代处理器和 GPU 上的内存缓存效应，以及各种数学库和编译器优化技术的应用，真实的计算强度可能会有所不同。</li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html\">dl-performance-matrix-multiplication</a><ul>\n<li>包含 tensor core 计算</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/blob/master/src/MMult_4x4_5.c#L54C2-L78C4\">矩阵分块减少访存示例</a></li>\n</ol>\n"},{"title":"dsp","url":"/2024/05/06/dsp/","content":"<h2 id=\"cadence\"><a href=\"#cadence\" class=\"headerlink\" title=\"cadence\"></a>cadence</h2><ol>\n<li><a href=\"https://www.cadence.com/content/dam/cadence-www/global/en_US/documents/solutions/automotive/tensilica-vision-dsp-wp.pdf\">Tensilica Vision DSP Family</a><ul>\n<li>包含 P6, Q8 参数</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"VLIW\"><a href=\"#VLIW\" class=\"headerlink\" title=\"VLIW\"></a>VLIW</h2><ol>\n<li>VLIW 架构在嵌入式市场，如 DSP，领域获得了成功应用。</li>\n<li>总而言之，VLIW 指令集架构简化了硬件设计，将最复杂的工作推给了编译器。</li>\n<li>通常，常用的应用中，发现足够的并行指令填满 VLIW 的可执行单元是非常困难的。这就导致 VLIW 的利用率较低，即出现设计&#x2F;宣称处理能力很高，但是实际的性能却较低的现象。</li>\n</ol>\n"},{"title":"eigen","url":"/2022/03/26/eigen/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li>gdb 调试 <a href=\"https://gitlab.com/libeigen/eigen/-/blob/master/debug/gdb/printers.py\">printer</a></li>\n<li>vector 转 tensor <a href=\"https://stackoverflow.com/a/44664806\">link</a> <a href=\"https://blog.csdn.net/weareu/article/details/86486682\">link1</a></li>\n<li>Tensor 转 vector</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Tensor&gt; <span class=\"function\"><span class=\"type\">static</span> std::vector&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">run</span><span class=\"params\">(<span class=\"type\">const</span> Tensor &amp;tensor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Eigen::internal::remove_const&lt;<span class=\"keyword\">typename</span> Tensor::Scalar&gt;::type</span><br><span class=\"line\">      Scalar;</span><br><span class=\"line\">  <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Tensor::Index Index;</span><br><span class=\"line\">  <span class=\"type\">const</span> Index total_size = Eigen::internal::<span class=\"built_in\">array_prod</span>(tensor.<span class=\"built_in\">dimensions</span>());</span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">float</span>&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (total_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    Eigen::Map&lt;<span class=\"type\">const</span> Eigen::Array&lt;Scalar, Eigen::Dynamic, <span class=\"number\">1</span>&gt;&gt; <span class=\"built_in\">array</span>(</span><br><span class=\"line\">        <span class=\"built_in\">const_cast</span>&lt;Scalar *&gt;(tensor.<span class=\"built_in\">data</span>()), total_size);</span><br><span class=\"line\">    std::cout &lt;&lt; array[<span class=\"number\">0</span>] &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; total_size; ++i) &#123;</span><br><span class=\"line\">      result.<span class=\"built_in\">push_back</span>(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// os &lt;&lt; array;                                                                                                                                         &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>头文件和编译选项</li>\n</ol>\n<figure class=\"highlight stan\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#include &lt;<span class=\"string\">eigen</span>3/E<span class=\"string\">igen</span>/E<span class=\"string\">igen</span>&gt;</span></span><br><span class=\"line\">find_package(Eigen3 REQUIRED)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>矩阵默认<a href=\"https://eigen.tuxfamily.org/dox/group__TopicStorageOrders.html\">按列存储</a>， 按行需要指定</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Eigen::Matrix&lt;<span class=\"type\">double</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, Eigen::RowMajor&gt; cam_intra;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>常用数据结构：</p>\n<ul>\n<li>Vector3d: <code>auto col = Eigen::Vector3d(0, 0, 0);</code></li>\n<li>RowVector4d: <code>auto row = Eigen::RowVector4d(0, 0, 0, 1);</code></li>\n<li>MatrixXd: <code>Eigen::MatrixXd tmp(3, 4);</code></li>\n<li>Matrix: <code>Eigen::Matrix&lt;double, 4, 4, Eigen::RowMajor&gt; cam_intra;</code></li>\n<li>Map: <code>auto T_cab2cam = Eigen::Map&lt;Eigen::Vector3d&gt;(std_vector.data());</code></li>\n</ul>\n</li>\n<li><p>矩阵相乘： <code>A * B</code></p>\n</li>\n<li><p>矩阵求逆： <code>A.inverse()</code></p>\n</li>\n<li><p><a href=\"https://eigen.tuxfamily.org/dox/group__TutorialBlockOperations.html\">矩阵取列：</a> <code>A.col()</code></p>\n</li>\n<li><p>矩阵取行： <code>A.row()</code></p>\n</li>\n</ol>\n<h2 id=\"basci-module\"><a href=\"#basci-module\" class=\"headerlink\" title=\"basci module\"></a>basci module</h2><ol>\n<li>Matrix init</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Eigen::Matrix3d R_e2cab;</span><br><span class=\"line\">  R_e2cab &lt;&lt; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>,  <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,          <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>;          <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>std::vecotr to Eigen::Vecotr or Eigen::Matrix</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">auto R_cab2cam_tmp = <span class=\"title class_\">Eigen</span><span class=\"symbol\">:</span><span class=\"symbol\">:Map&lt;Eigen</span><span class=\"symbol\">:</span><span class=\"symbol\">:RowVector3d&gt;</span>(v_R_cab2cam.data());</span><br><span class=\"line\">auto cam_k = <span class=\"title class_\">Eigen</span><span class=\"symbol\">:</span><span class=\"symbol\">:Map&lt;Eigen</span><span class=\"symbol\">:</span><span class=\"symbol\">:Matrix&lt;double</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"title class_\">Eigen</span><span class=\"symbol\">:</span><span class=\"symbol\">:RowMajor&gt;&gt;</span>(v_cam_k.data());</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Eigen::Vecotr or Eigen::Matrix to std::vector</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">vec_cam_intra</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">     cam_intra.data(), cam_intra.data() + cam_intra.rows() * cam_intra.cols())</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Matrix concat</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Eigen::MatrixXd <span class=\"title\">cab2cam_tmp</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> col_tmp = Eigen::<span class=\"built_in\">RowVector4d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"function\">Eigen::MatrixXd <span class=\"title\">cab2cam</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">cab2cam &lt;&lt; cab2cam_tmp, col_tmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Eigen::MatrixXd <span class=\"title\">cab2cam_tmp</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> col_tmp = Eigen::<span class=\"built_in\">Vector3d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"function\">Eigen::MatrixXd <span class=\"title\">cab2cam</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">cab2cam &lt;&lt; cab2cam_tmp, col_tmp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Matrix slice (<a href=\"https://eigen.tuxfamily.org/dox/group__TutorialBlockOperations.html\">block</a>)</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Eigen::Matrix&lt;<span class=\"type\">double</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, Eigen::RowMajor&gt; cam2ego;</span><br><span class=\"line\">Eigen::Matrix&lt;<span class=\"type\">double</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, Eigen::RowMajor&gt; R_cam2ego = cam2ego.<span class=\"built_in\">block</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Eigen::Vector3d T_cam2ego = cam2ego.<span class=\"built_in\">block</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://gitlab.com/libeigen/eigen.git\">gitlab repo</a></li>\n<li><a href=\"https://eigen.tuxfamily.org/dox/GettingStarted.html\">getting started</a></li>\n</ol>\n<h2 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glog/logging.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;yaml-cpp/yaml.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;eigen3/Eigen/Eigen&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">GetPgCamParm</span><span class=\"params\">(<span class=\"type\">const</span> std::string camera_param, <span class=\"type\">const</span> std::string cali_param,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  <span class=\"type\">const</span> std::string result_param)</span> </span>&#123;</span><br><span class=\"line\">  YAML::Node cam_info = YAML::<span class=\"built_in\">LoadFile</span>(camera_param);</span><br><span class=\"line\">  YAML::Node cb_xyz = YAML::<span class=\"built_in\">LoadFile</span>(cali_param);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cam_k</span></span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">double</span>&gt; v_cam_k;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cam_info[<span class=\"string\">&quot;mtx&quot;</span>][<span class=\"string\">&quot;data&quot;</span>]) &#123;</span><br><span class=\"line\">    v_cam_k = cam_info[<span class=\"string\">&quot;mtx&quot;</span>][<span class=\"string\">&quot;data&quot;</span>].as&lt;std::vector&lt;<span class=\"type\">double</span>&gt;&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Can&#x27;t get cam_info[\\&quot;mtx\\&quot;][\\&quot;data\\&quot;]&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> cam_k =</span><br><span class=\"line\">      Eigen::Map&lt;Eigen::Matrix&lt;<span class=\"type\">double</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, Eigen::RowMajor&gt;&gt;(v_cam_k.<span class=\"built_in\">data</span>());</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\ncam_k:\\n&quot;</span> &lt;&lt; cam_k;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cam_intra</span></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> col = Eigen::<span class=\"built_in\">Vector3d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"function\">Eigen::MatrixXd <span class=\"title\">tmp</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">  tmp &lt;&lt; cam_k, col;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> row = Eigen::<span class=\"built_in\">RowVector4d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  Eigen::Matrix&lt;<span class=\"type\">double</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, Eigen::RowMajor&gt; cam_intra;</span><br><span class=\"line\">  cam_intra &lt;&lt; tmp, row;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\ncam_intra:\\n&quot;</span> &lt;&lt; cam_intra;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// R_e2cab</span></span><br><span class=\"line\">  Eigen::Matrix3d R_e2cab;</span><br><span class=\"line\">  R_e2cab &lt;&lt; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>,  <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,          <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>;          <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\nR_e2cab:\\n&quot;</span> &lt;&lt; R_e2cab;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// T_e2cab</span></span><br><span class=\"line\">  Eigen::Vector3d T_e2cab;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cb_xyz[<span class=\"string\">&quot;boarad2ego&quot;</span>]) &#123;</span><br><span class=\"line\">    T_e2cab &lt;&lt; cb_xyz[<span class=\"string\">&quot;boarad2ego&quot;</span>][<span class=\"string\">&#x27;x&#x27;</span>].<span class=\"built_in\">as</span>&lt;<span class=\"type\">double</span>&gt;(),</span><br><span class=\"line\">        cb_xyz[<span class=\"string\">&quot;boarad2ego&quot;</span>][<span class=\"string\">&#x27;y&#x27;</span>].<span class=\"built_in\">as</span>&lt;<span class=\"type\">double</span>&gt;(),</span><br><span class=\"line\">        cb_xyz[<span class=\"string\">&quot;boarad2ego&quot;</span>][<span class=\"string\">&#x27;z&#x27;</span>].<span class=\"built_in\">as</span>&lt;<span class=\"type\">double</span>&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Can&#x27;t get cb_xyz[\\&quot;boarad2ego\\&quot;]&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\nT_e2cab:\\n&quot;</span> &lt;&lt; T_e2cab;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ego2cab</span></span><br><span class=\"line\">  <span class=\"function\">Eigen::MatrixXd <span class=\"title\">ego2cab_tmp</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">  ego2cab_tmp &lt;&lt; R_e2cab, T_e2cab;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\nego2cab_tmp:\\n&quot;</span> &lt;&lt; ego2cab_tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// R_cab2cam</span></span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">double</span>&gt; v_R_cab2cam;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cam_info[<span class=\"string\">&quot;rvec&quot;</span>][<span class=\"string\">&quot;data&quot;</span>]) &#123;</span><br><span class=\"line\">    v_R_cab2cam = cam_info[<span class=\"string\">&quot;rvec&quot;</span>][<span class=\"string\">&quot;data&quot;</span>].as&lt;std::vector&lt;<span class=\"type\">double</span>&gt;&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Can&#x27;t get cam_info[\\&quot;rvec\\&quot;][\\&quot;data\\&quot;]&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> R_cab2cam_tmp = Eigen::<span class=\"built_in\">Map</span>&lt;Eigen::RowVector3d&gt;(v_R_cab2cam.<span class=\"built_in\">data</span>());</span><br><span class=\"line\">  <span class=\"type\">double</span> n_norm = R_cab2cam_tmp.<span class=\"built_in\">norm</span>();</span><br><span class=\"line\">  <span class=\"function\">Eigen::AngleAxisd <span class=\"title\">rotation_vector</span><span class=\"params\">(n_norm, R_cab2cam_tmp / n_norm)</span></span>;</span><br><span class=\"line\">  Eigen::Matrix3d R_cab2cam = rotation_vector.<span class=\"built_in\">toRotationMatrix</span>();</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\nR_cab2cam:\\n&quot;</span> &lt;&lt; R_cab2cam;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// T_cab2cam</span></span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">double</span>&gt; v_T_cab2cam;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cam_info[<span class=\"string\">&quot;tvec&quot;</span>][<span class=\"string\">&quot;data&quot;</span>]) &#123;</span><br><span class=\"line\">    v_T_cab2cam = cam_info[<span class=\"string\">&quot;tvec&quot;</span>][<span class=\"string\">&quot;data&quot;</span>].as&lt;std::vector&lt;<span class=\"type\">double</span>&gt;&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Can&#x27;t get cam_info[\\&quot;tvec\\&quot;][\\&quot;data\\&quot;]&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> T_cab2cam = Eigen::<span class=\"built_in\">Map</span>&lt;Eigen::Vector3d&gt;(v_T_cab2cam.<span class=\"built_in\">data</span>());</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\nT_cab2cam:\\n&quot;</span> &lt;&lt; T_cab2cam;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cab2cam</span></span><br><span class=\"line\">  <span class=\"function\">Eigen::MatrixXd <span class=\"title\">cab2cam_tmp</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">  cab2cam_tmp &lt;&lt; R_cab2cam, T_cab2cam;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> col_tmp = Eigen::<span class=\"built_in\">RowVector4d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"function\">Eigen::MatrixXd <span class=\"title\">cab2cam</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">  cab2cam &lt;&lt; cab2cam_tmp, col_tmp;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\ncab2cam:\\n&quot;</span> &lt;&lt; cab2cam;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ego2cab</span></span><br><span class=\"line\">  <span class=\"function\">Eigen::MatrixXd <span class=\"title\">ego2cab</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">  ego2cab &lt;&lt; ego2cab_tmp, col_tmp;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\nego2cab:\\n&quot;</span> &lt;&lt; ego2cab;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cam2ego</span></span><br><span class=\"line\">  Eigen::MatrixXd cam2ego = (cab2cam * ego2cab).<span class=\"built_in\">inverse</span>();</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&quot;\\ncam2ego:\\n&quot;</span> &lt;&lt; cam2ego;</span><br><span class=\"line\">  <span class=\"built_in\">LOG</span>(INFO) &lt;&lt; <span class=\"string\">&quot;\\ncam2ego row:\\n&quot;</span> &lt;&lt; cam2ego.<span class=\"built_in\">row</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">LOG</span>(INFO) &lt;&lt; <span class=\"string\">&quot;\\ncam2ego row:\\n&quot;</span> &lt;&lt; cam2ego.<span class=\"built_in\">col</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// get results</span></span><br><span class=\"line\">  <span class=\"built_in\">LOG</span>(INFO) &lt;&lt; <span class=\"string\">&quot;\\nintrinsic: \\n&quot;</span> &lt;&lt; cam_intra;</span><br><span class=\"line\">  <span class=\"function\">std::vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">vec_cam_intra</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      cam_intra.data(), cam_intra.data() + cam_intra.rows() * cam_intra.cols())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  Eigen::Matrix&lt;<span class=\"type\">double</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, Eigen::RowMajor&gt; R_cam2ego =</span><br><span class=\"line\">      cam2ego.<span class=\"built_in\">block</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"built_in\">LOG</span>(INFO) &lt;&lt; <span class=\"string\">&quot;\\nR_cam2ego: \\n&quot;</span> &lt;&lt; R_cam2ego;</span><br><span class=\"line\">  <span class=\"function\">std::vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">vec_R_cam2ego</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      R_cam2ego.data(), R_cam2ego.data() + R_cam2ego.rows() * R_cam2ego.cols())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  Eigen::Vector3d T_cam2ego = cam2ego.<span class=\"built_in\">block</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">LOG</span>(INFO) &lt;&lt; <span class=\"string\">&quot;\\nT_cam2ego: \\n&quot;</span> &lt;&lt; T_cam2ego;</span><br><span class=\"line\">  <span class=\"function\">std::vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">vec_T_cam2ego</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      T_cam2ego.data(), T_cam2ego.data() + T_cam2ego.rows() * T_cam2ego.cols())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// save result to yaml</span></span><br><span class=\"line\">  YAML::Node config;</span><br><span class=\"line\">  <span class=\"comment\">// test[&quot;camera&quot;][&quot;v_cam_k&quot;].push_back(v);</span></span><br><span class=\"line\">  <span class=\"comment\">// note: push_back and = are not same</span></span><br><span class=\"line\">  config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;intrinsic&quot;</span>] = vec_cam_intra;</span><br><span class=\"line\">  config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_R&quot;</span>] = vec_R_cam2ego;</span><br><span class=\"line\">  config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_t&quot;</span>] = vec_T_cam2ego;</span><br><span class=\"line\">  <span class=\"function\">std::ofstream <span class=\"title\">fout</span><span class=\"params\">(result_param)</span></span>;</span><br><span class=\"line\">  fout &lt;&lt; config;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">GetPgCamParm</span>(<span class=\"string\">&quot;camera_params.yaml&quot;</span>, <span class=\"string\">&quot;cali_board2vehicle_xyz.yaml&quot;</span>,</span><br><span class=\"line\">               <span class=\"string\">&quot;pg_cam2_param.yaml&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Program"],"tags":["Eigen"]},{"title":"explore","url":"/2022/10/18/explore/","content":"<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><ol>\n<li>新功能用 sourcegraph 探索大家都怎么使用的， 如探索 mermaid 使用</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://star-history.com/\">star-history</a> 可以多个 repo 同时显示, 左侧有 Monthly Pick</li>\n<li><a href=\"https://github.com/trending\">github trending</a></li>\n<li><a href=\"https://githubnext.com/\">github next</a></li>\n<li><a href=\"https://github.com/search?o=desc&q=stars:%3E0&s=stars&type=Repositories\">github star sort</a></li>\n<li><a href=\"https://github.com/521xueweihan/HelloGitHub/tree/master\">HelloGitHub</a></li>\n<li><a href=\"https://github.com/collections/productivity-tools\">productivity-tools</a></li>\n<li><a href=\"https://github.com/awesome-selfhosted/awesome-selfhosted\">awesome-selfhosted 可以部署到本地的服务</a></li>\n<li><a href=\"https://github.com/freeCodeCamp/freeCodeCamp\">freeCodeCamp</a></li>\n<li><a href=\"https://github.com/codecrafters-io/build-your-own-x\">build-your-own-x</a></li>\n<li><a href=\"https://github.com/practical-tutorials/project-based-learning#cc\">project-based-learning like build-your-own-x</a></li>\n<li><a href=\"https://github.com/donnemartin/system-design-primer\">system-design-primer</a></li>\n<li><a href=\"https://github.com/kamranahmedse/developer-roadmap\">developer-roadmap</a></li>\n<li><a href=\"https://discord.com/invite/xS7Z362\">llvm discord</a> 312567150</li>\n<li><a href=\"https://github.com/topics/profiling\">topics&#x2F;profiling</a></li>\n<li><a href=\"https://osawards.com/\">Open Source Awards</a></li>\n<li><a href=\"https://osawards.com/javascript/2022\">osawards.com&#x2F;javascript</a></li>\n<li><a href=\"https://opensource.google/projects\">opensource.google</a></li>\n<li><a href=\"https://github.com/DIYgod\">DIYgod</a></li>\n<li><a href=\"https://discord.gg/tccpp\">together c &amp; c++ discord</a></li>\n<li><a href=\"https://discord.gg/JAEgDRbxtq\">better c++ discord</a></li>\n<li><a href=\"https://github.com/fffaraz/awesome-cpp#readme\">Awesome cpp</a></li>\n<li><a href=\"https://github.com/ruanyf/weekly?tab=readme-ov-file\">weekly</a></li>\n<li><a href=\"https://blog.csdn.net/blueskybluesoul/article/details/128593539\">5 大平台编程语言排行榜</a></li>\n</ol>\n<h3 id=\"AI\"><a href=\"#AI\" class=\"headerlink\" title=\"AI\"></a>AI</h3><ol>\n<li><a href=\"https://huggingface.co/blog/zh\">huggingface blog</a></li>\n<li><a href=\"https://paperswithcode.com/\">paperwithcode</a></li>\n<li><a href=\"https://github.com/chenzomi12/DeepLearningSystem\">DeepLearningSystem</a></li>\n<li><a href=\"https://github.com/microsoft/generative-ai-for-beginners\">microsoft&#x2F;generative-ai-for-beginners</a> 注意仓库里有中文翻译</li>\n<li><a href=\"https://github.com/microsoft/AI-For-Beginners\">AI-For-Beginners</a></li>\n<li><a href=\"https://star-history.com/blog/llama2\">Llama 2 and Ecosystem Edition</a></li>\n<li><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU5ODY2MTk3Nw==&action=getalbum&album_id=2467151539284246528&scene=173&from_msgid=2247492618&from_itemidx=1&count=3&nolastread=1#wechat_redirect\">oneflow AI 基础设施</a></li>\n<li><a href=\"https://www.youtube.com/@AndrejKarpathy/videos\">Andrej Karpathy</a></li>\n<li><a href=\"https://www.youtube.com/@statquest\">statquest</a></li>\n</ol>\n<h2 id=\"blog\"><a href=\"#blog\" class=\"headerlink\" title=\"blog\"></a>blog</h2><ol>\n<li><a href=\"https://diygod.cc/\">diygod</a></li>\n<li><a href=\"https://www.brendangregg.com/overview.html\">brendangregg</a></li>\n<li><a href=\"http://arthurchiao.art/articles-zh/\">arthurchiao</a></li>\n<li><a href=\"https://gaomf.cn/2020/06/03/shared_library_global_symbol_override/\">码农半亩地</a></li>\n<li><a href=\"https://github.com/freelancer-leon/notes/tree/master\">freelancer-leon&#x2F;notes</a></li>\n</ol>\n"},{"title":"flashattention","url":"/2024/02/03/flashattention/","content":"<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><ol>\n<li>在计算机编程和软件项目中，csrc 通常是 “C Source” 的缩写，意为 “C 源代码”。即使 csrc 目录可能包含 C++ 代码，这个名字仍然被保留，因为它沿用了这一传统的命名惯例<ul>\n<li>flash attention</li>\n<li>pytorch</li>\n<li>xformer</li>\n<li>vllm</li>\n</ul>\n</li>\n<li>(不考虑 softmax)Attention 不融合消耗大量内存，如果 n 很大 qk (atttion 矩阵 nxn)结果非常大; 如果 kenel 进行融合；分块计算，只需要保存中间结果，见 xformer 示意图：<a href=\"https://twitter.com/fvsmassa/status/1580229170629849089\">xformer link</a></li>\n<li>FlashAttention 在<code>batch和heads两个维度上进行了并行化</code>：使用一个 thread block 来处理一个 attention head，总共需要 thread block 的数量等于 batch size × number of heads。每个 block 被调到到一个 SM 上运行，例如 A100 GPU 上有 108 个 SMs。当 block 数量很大时（例如 ≥80），这种调度方式是高效的，因为几乎可以有效利用 GPU 上所有计算资源。但是在处理长序列输入时，由于内存限制，通常会减小 batch size 和 head 数量，这样并行化成都就降低了。 <a href=\"https://zhuanlan.zhihu.com/p/645376942\">link</a></li>\n<li>FlashAttention-2 还在<code>序列长度这一维度上进行并行化</code>，显著提升了计算速度。此外，当 batch size 和 head 数量较小时，在序列长度上增加并行性有助于提高 GPU 占用率。</li>\n<li><code>FlashAttention目的不是节约FLOPs，而是减少对HBM的访问。</code></li>\n<li>重点是 FlashAttention 在<code>训练和预测过程中的结果和标准Attention一样</code>，对用户是无感的，而其他加速方法做不到这点。</li>\n<li>FlashAttention does not read and write the large attention NxN matrix to HBM, FlashAttention 不会读取大型 NxN 注意力矩阵并将其写入 HBM</li>\n<li>In this paper, we argue that a missing principle is making attention algorithms IO-aware [1]—that is, carefully accounting for reads and writes to different levels of fast and slow memory</li>\n<li>Our main goal is to avoid reading and writing the <code>attention matrix to and from HBM</code>. 没有优化前 multihead attation 每个 head 都需要一个 NxN attention matrix</li>\n<li>The most common approach to accelerate memory-bound operations is kernel fusion: if there are multiple operations applied to the same input, the input can be loaded once from HBM, instead of multiple times for each operation. Compilers can automatically fuse many elementwise operations</li>\n<li>注意训练时的 forward 和推理时的 forward 的区别; 训练时输入 N 固定; 推理是 LLM inference（或称为 decoding）</li>\n<li>there have been many attempts to fuse several elementwise operations, such as fusing masking with softmax</li>\n<li>Let N be the sequence length, d be the head dimension, and M be size of SRAM with d &lt;&#x3D; M &lt;&#x3D; Nd;. Standard attention (Algorithm ) requires <code>O(Nd + NN)</code> HBM accesses, while FlashAttention (Algorithm 1) requires <code>O(NNdd/M)</code> HBM accesses.</li>\n<li>对于 d(64-128) 和 N（大约 100KB）的典型值，d2 比 M 小很多倍，并且因此，FlashAttention 所需的 HBM 访问次数比标准实现少很多倍。</li>\n</ol>\n<h3 id=\"flash-attenion-v2\"><a href=\"#flash-attenion-v2\" class=\"headerlink\" title=\"flash attenion v2\"></a>flash attenion v2</h3><ol>\n<li>先讲述 FlashAttention-2 对 FlashAttention 的改进，从而<code>减少了非矩阵乘法运算（non-matmul）的FLOPs</code>。然后说明如何将任务分配给不同的<code>thread block</code>进行并行计算，充分利用 GPU 资源。最后描述了如何在一个 thread block 内部分配任务给<code>不同的warps</code>，以减少访问共<br>享内存次数。这些优化方案使得 FlashAttention-2 的性能提升了 2-3 倍</li>\n<li>softmax 将 rescale 最后一起进行，中间结果可以多利用 tensor core 矩阵乘</li>\n</ol>\n<h3 id=\"flash-decoding\"><a href=\"#flash-decoding\" class=\"headerlink\" title=\"flash decoding\"></a><a href=\"https://crfm.stanford.edu/2023/10/12/flashdecoding.html\">flash decoding</a></h3><ol>\n<li>flash attention 是针对模型训练时的 forward 和 backward; 训练时的 forward 是并行运算的</li>\n<li>flash decoding 是针对模型推理时的 inference； 推理时的 inference 是 Autoregressive(AR)</li>\n<li>flash attention 的优化不适合直接应用于推理过程。因为在训练过程中，FlashAttention 对 batch size 和 query length 进行了并行化加速。而在推理过程中，<code>query length 通常为 1</code>，这意味着如果 batch size 小于 GPU 上的 SM 数量（例如 A100 上有 108 个 SMs），那么整个计算过程只使用了 GPU 的一小部分！特别是当上下文较长时，通常会减小 batch size 来适应 GPU 内存。例如 batch size &#x3D; 1 时，FlashAttention 对 GPU 利用率小于 1%！</li>\n<li>流程：对 K 和 V 进行划分成多块，并行计算各块 attention，最后各块结果做 reduction</li>\n</ol>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><ol>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/61a777247900f6c2a37376f3ffd7134385fdc95c/setup.py#L133\">编译 cuda</a></li>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/61a777247900f6c2a37376f3ffd7134385fdc95c/csrc/flash_attn/flash_api.cpp#L1462\">pybind11 python interface</a></li>\n<li><a href=\"https://github.com/search?q=repo:Dao-AILab/flash-attention%20flash_attn_cuda&type=code\">python using pybind11 api</a></li>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/61a777247900f6c2a37376f3ffd7134385fdc95c/csrc/flash_attn/flash_api.cpp#L317\">mha_fwd</a><ul>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/9c0e9ee86d0e0022b60deddb405c20ab77481582/flash_attn/flash_attn_interface.py#L51\">python call place</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/61a777247900f6c2a37376f3ffd7134385fdc95c/csrc/flash_attn/flash_api.cpp#L221C17-L221C29\">run_mha_fwd</a></li>\n<li><a href=\"https://github.com/search?q=repo:Dao-AILab/flash-attention%20run_mha_fwd_&type=code\">run_mha_fwd 多种实现</a></li>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/5cdabc2809095b98c311283125c05d222500c8ff/csrc/flash_attn/src/flash_fwd_launch_template.h#L31\">run_flash_fwd</a></li>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/5cdabc2809095b98c311283125c05d222500c8ff/csrc/flash_attn/src/flash_fwd_kernel.h#L1043\">compute_attn kernel 实现</a></li>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/5cdabc2809095b98c311283125c05d222500c8ff/csrc/flash_attn/src/flash_fwd_kernel.h#L28\">compute_attn_1rowblock 最关键实现函数</a></li>\n<li><a href=\"https://github.com/Dao-AILab/flash-attention/blob/5cdabc2809095b98c311283125c05d222500c8ff/csrc/flash_attn/src/utils.h#L138\">flash::gemm</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/apex/blob/master/apex/contrib/csrc/fmha/fmha_api.cpp\">软件架构参考 apex fmha</a><ul>\n<li>fmha: fast_multihead_attn</li>\n<li>We use FMHA code as a starting point, and apply two well-established techniques (tiling and recomputa-tion) to deal with long sequences and to save memory as mentioned; we can support much longer sequences (e.g., up to length 64K). We also support more head dimensions (16, 32, 64, 128) and broader GPU types (all Turing and Ampere GPUs at the time of writing).</li>\n</ul>\n</li>\n</ol>\n"},{"title":"gemma","url":"/2024/02/29/gemma/","content":"<h2 id=\"gemma-cpp\"><a href=\"#gemma-cpp\" class=\"headerlink\" title=\"gemma.cpp\"></a><a href=\"https://github.com/google/gemma.cpp\">gemma.cpp</a></h2><ol>\n<li>使用了 hightway 加速</li>\n<li><a href=\"https://www.kaggle.com/models/google/gemma/frameworks/gemmaCpp?select=tokenizer.spm\">下载模型</a></li>\n<li><code>./build/gemma --verbosity 2 --tokenizer tokenizer.spm --compressed_weights 2b-it-sfp.sbs --model 2b-it</code></li>\n<li><a href=\"https://github.com/google/gemma.cpp/blob/main/gemma.cc\">关键代码</a><ul>\n<li>GenerateImpl() 包含 prefill 和 generate 两个阶段</li>\n<li>prefill 阶段使用了 Prefill()函数<ul>\n<li>每次处理 kPrefillBatchSize 个输入，循环处理</li>\n</ul>\n</li>\n<li>generate 阶段使用了 Transformer()，Softmax(), SampleTopK()函数</li>\n</ul>\n</li>\n<li>add_definitions(-DPROFILER_ENABLED&#x3D;1), 打开 hightway profiler, 命令行%q 退出，<a href=\"https://github.com/google/gemma.cpp/issues/73#issuecomment-1973230523\">link</a></li>\n</ol>\n"},{"title":"Git bisect to debug","url":"/2021/03/05/git-biset-to-debug/","content":"<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><ol>\n<li>Use binary search to find the commit that introduced a bug</li>\n</ol>\n<h2 id=\"Command\"><a href=\"#Command\" class=\"headerlink\" title=\"Command\"></a>Command</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect start</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect bad                 <span class=\"comment\"># Current version is bad</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect good v2.6.13-rc2    <span class=\"comment\"># v2.6.13-rc2 is known to be good</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect skip                 <span class=\"comment\"># Current version cannot be tested</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect reset</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">run script</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect run my_script arguments</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> ~/test.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\">make || exit 125                     # this skips broken builds</span><br><span class=\"line\">~/check_test_case.sh                 # does the test case pass?</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect start HEAD v1.3.1 --      <span class=\"comment\"># HEAD is bad, v1.2 is good</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect run ~/test.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git bisect run sh -c <span class=\"string\">&quot;make || exit 125; ~/check_test_case.sh&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git bisect reset                   <span class=\"comment\"># quit the bisect session</span></span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://git-scm.com/docs/git-bisect\">git bisect</a></li>\n<li><a href=\"https://juejin.cn/post/6844903537860673544\">Git 二分调试法，火速定位疑难Bug</a></li>\n</ol>\n","categories":["Tools","Git"],"tags":["Git"]},{"title":"github-ci","url":"/2022/10/30/github-ci/","content":"<h2 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h2><ol>\n<li>fork 的 repo 需要手动在 actions 里 enable</li>\n<li><a href=\"https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow\">disabling-and-enabling-a-workflow</a></li>\n<li><a href=\"https://docs.github.com/cn/actions\">actions doc</a></li>\n<li><a href=\"https://github.com/dorny/test-reporter\">test-reporter</a></li>\n<li><a href=\"https://github.com/test-summary/\">test-summary</a></li>\n</ol>\n<h2 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h2><ol>\n<li>use 可以连续用</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Ubuntu</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">release-test:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dataflow</span> <span class=\"string\">build</span> <span class=\"string\">on</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span> <span class=\"comment\">## checkout到分支</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">prefix-dev/setup-pixi@v0.3.0</span> <span class=\"comment\">## 安装pixi</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">deps</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">apt</span> <span class=\"string\">install</span> <span class=\"string\">-y</span> <span class=\"string\">libc6-dbg</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">run</span> <span class=\"string\">all</span> <span class=\"string\">test</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">pixi</span> <span class=\"string\">run</span> <span class=\"string\">all</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;Upload Artifact&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-artifact@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">my-artifact</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">.gitignore</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"upload-artifact\"><a href=\"#upload-artifact\" class=\"headerlink\" title=\"upload-artifact\"></a><a href=\"https://github.com/actions/upload-artifact#zipped-artifact-downloads\">upload-artifact</a></h2><ol>\n<li>config</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;Upload Artifact&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-artifact@v3</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">my-artifact</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">.gitignore</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>ci job 左侧 summary 可以下载 artifacts</li>\n</ol>\n<h2 id=\"upload-release-asset\"><a href=\"#upload-release-asset\" class=\"headerlink\" title=\"upload-release-asset\"></a><a href=\"https://github.com/actions/upload-release-asset\">upload-release-asset</a></h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/75995802/resource-not-accessible-by-integration-github-action-fails-for-pushed-commit\">push 失败问题： 需要设置 repo read_and_write 权限</a></li>\n<li>参考 cpp_sandbox 和 python_sandbox</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://docs.github.com/zh/actions/quickstart\">官方文档</a></li>\n<li><a href=\"https://github.com/marketplace?type=actions\">action samples</a></li>\n<li><a href=\"https://github.com/microsoft/onnxruntime/blob/main/README.md\">readme show build status</a></li>\n<li><a href=\"https://github.com/taskflow/taskflow/tree/master/.github/workflows\">taskflow samples</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/250534172\">基于 Github Action 的 CI&#x2F;CD 流程</a></li>\n</ol>\n"},{"title":"git","url":"/2020/09/17/git/","content":"<h2 id=\"workflow\"><a href=\"#workflow\" class=\"headerlink\" title=\"workflow\"></a>workflow</h2><ol>\n<li><a href=\"https://docs.gitlab.cn/jh/topics/gitlab_flow.html#gitlab-flow-%E4%BB%8B%E7%BB%8D\">GitLab Flow 介绍</a></li>\n<li><a href=\"http://dockone.io/article/2350\">GitLab Flow 的 11 条规则</a></li>\n<li>dev 分支开发新功能</li>\n<li>main or master branch 合入新功能</li>\n<li>tag 来确定 release</li>\n</ol>\n<h2 id=\"submodule\"><a href=\"#submodule\" class=\"headerlink\" title=\"submodule\"></a>submodule</h2><ol>\n<li><code>git submodule add https://github.com/NVIDIA/cutlass.git</code></li>\n<li><code>git submodule update --init --recursive</code></li>\n</ol>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li><code>git-lfs</code> - Work with large files in Git repositories</li>\n<li><code>git lfs clone https://xxx</code></li>\n<li><code>git lfs install &amp;&amp; git lfs pull</code> 已经存在的 repo</li>\n<li>git lfs pull 加速</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://10.31.10.80:7890</span><br><span class=\"line\">git config --global https.proxy https://10.31.10.80:7890</span><br><span class=\"line\">git config --global --list</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>git fetch –prune 会自动创建本地分支</li>\n<li>先合并 commit, 再 rebase， 就不会出现 merge 多次现象,</li>\n<li><code>git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;作者： $name\\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;添加行数: %s, 删除的行数: %s, 代码总行数: %s\\n&quot;, add, subs, loc &#125;&#39; -; done</code> 统计仓库每个成员代码量</li>\n<li><code>GIT_TRACE=1 GIT_CURL_VERBOSE=1 git clone </code> 定位问题</li>\n<li><code>git commit --amend --date=now --no-edit</code> 修改 commit 时间 <a href=\"https://stackoverflow.com/a/5017265\">link</a></li>\n<li><code>--no-pager</code> 直接显示，不用按 q 退出 git –no-pager log -n 20</li>\n<li>magit <code>$</code> 查看具体命令</li>\n<li><code>git add --update</code> 添加所有修改的文件</li>\n<li><code>git describe --always --dirty --match &#39;NOT A TAG&#39;</code>当前信息 无 tag<br>1 <code>git describe --dirty --tags</code>: 显示当前 commit 信息；例如 v1.0.1-100-gad0ddd0-dirty; v1.0.1 是最近 tag, 100 是第多少次提交；gxxx 是 commit 号， dirty 是有改动</li>\n<li><code>tldr git tag</code>: show how to use git tag</li>\n<li><code>origin</code>为<code>远程</code>仓库名，不是分支。 .git&#x2F;config 中有远程仓库 origin 对应的 url 和 fetch</li>\n<li>upstream 上游仓库: <a href=\"https://blog.csdn.net/xo3ylAF9kGs/article/details/114810781\">Git 的 origin 和 upstream，如何用？</a><br><img src=\"https://img-blog.csdnimg.cn/img_convert/3753944fa6c4d586d337464233e75a61.png\" alt=\"upstream\"></li>\n<li><code>git tag v0.0.1 &amp;&amp; git push orgin v0.0.1</code> 创建和 push tag</li>\n</ol>\n<h2 id=\"git-修改-commit\"><a href=\"#git-修改-commit\" class=\"headerlink\" title=\"git 修改 commit\"></a>git 修改 commit</h2><ol>\n<li>git rebase –interactive HEAD~2</li>\n<li>修改： <code>c</code> &#x3D;&gt; <code>w</code> &#x3D;&gt; <code>C-c C-c</code></li>\n<li>合并： magit: rebase <code>r</code> &#x3D;&gt;<code>i</code> &#x3D;&gt; <code>C-c C-c</code> &#x3D;&gt; <code>f .. f</code> &#x3D;&gt; <code>C-c C-c</code></li>\n<li><code>ce</code> Extend 当前 Staged 的文件合并到上一次提交中 git commit –amend –no-edit</li>\n<li><code>ca</code> Amend 只修改上次提交的日志 git commit –amend</li>\n</ol>\n<h2 id=\"commit-规范\"><a href=\"#commit-规范\" class=\"headerlink\" title=\"commit 规范\"></a>commit 规范</h2><ol>\n<li><a href=\"https://www.conventionalcommits.org/zh-hans/v1.0.0/\">约定式提交</a></li>\n<li><a href=\"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\">Commit Message Guidelines</a></li>\n<li><a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#\">手册</a></li>\n<li><a href=\"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\">Angular 约定</a></li>\n<li><a href=\"https://github.com/feflow/git-commit-style-guide\">guide</a></li>\n</ol>\n<h2 id=\"add-git-info-in-C-exe\"><a href=\"#add-git-info-in-C-exe\" class=\"headerlink\" title=\"add git info in C++ exe\"></a>add git info in C++ exe</h2><ol>\n<li><a href=\"http://xit0.org/2013/04/cmake-use-git-branch-and-commit-details-in-project/\">cmake</a></li>\n<li><a href=\"https://stackoverflow.com/questions/51727566/how-to-make-git-commit-hash-available-in-c-code-without-needless-recompiling\">without compiling</a></li>\n</ol>\n<h2 id=\"ERROR\"><a href=\"#ERROR\" class=\"headerlink\" title=\"ERROR\"></a>ERROR</h2><ol>\n<li><code>git config --global http.postBuffer 5242880000</code> <a href=\"https://www.cnblogs.com/mmzs/p/12039888.html\">git clone https 失败</a></li>\n</ol>\n<h2 id=\"git-权限问题\"><a href=\"#git-权限问题\" class=\"headerlink\" title=\"git 权限问题\"></a><a href=\"https://www.cnblogs.com/zqb-all/p/10631505.html\">git 权限问题</a></h2><ol>\n<li>mount 问题解决<code>chmod o+w -R .</code> <code>find . -type f | xargs chmod o+w</code> <code>chmod o+w $(find . -type f)</code> 给其他用户加写权限， 不会有 git 历史，umask 022</li>\n<li><a href=\"https://learnku.com/laravel/t/5340/linux-solution-to-modify-the-file-permissions-caused-by-the-git-record-file-changes\">不跟踪权限</a></li>\n</ol>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ol>\n<li><p>Git 是一个<code>内容寻址文件系统</code>，Git 的核心部分是一个简单的键值对数据库（key-value data store）。你可以向 Git 仓库中插入任意类型的内容，它会返回一个唯一的键，通过该键可以在任意时刻再次取回该内容。</p>\n</li>\n<li><p>.git 下四个条目很重要：HEAD 文件、（尚待创建的）index 文件，和 objects 目录、refs 目录。 它们都是 Git 的核心组成部分。</p>\n<ul>\n<li><code>objects</code> 目录存储所有数据内容；</li>\n<li><code>refs</code> 目录存储指向数据（分支、远程仓库和标签等）的提交对象的指针；</li>\n<li><code>HEAD</code> 文件指向目前被检出的分支；</li>\n<li><code>index</code> 文件保存暂存区信息。</li>\n</ul>\n</li>\n<li><p>.git 其他文件</p>\n<ul>\n<li><code>description</code> 文件仅供 GitWeb 程序使用，我们无需关心。</li>\n<li><code>config</code> 文件包含项目特有的配置选项。</li>\n<li><code>info</code> 目录包含一个全局性排除（global exclude）文件， 用以放置那些不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）。</li>\n<li><code>hooks</code> 目录包含客户端或服务端的钩子脚本</li>\n</ul>\n</li>\n<li><p><code>git hash-object</code> 会接受你传给它的东西，而它只会返回可以存储在 Git 仓库中的唯一键。 -w 选项会指示该命令不要只返回键，还要将该对象写入数据库中。 这就是开始时 Git 存储内容的方式——一个文件对应一条内容， 以该内容加上特定头部信息一起的 SHA-1 校验和为文件命名。 校验和的前两个字符用于命名子目录，余下的 38 个字符则用作文件名。</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"> $ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;test content&#x27;</span> | git hash-object -w --stdin</span><br><span class=\"line\">d670460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class=\"line\"> $ find .git/objects -<span class=\"built_in\">type</span> f</span><br><span class=\"line\">.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;version 1&#x27;</span> &gt; test.txt</span><br><span class=\"line\">$ git hash-object -w test.txt</span><br><span class=\"line\">83baae61804e65cc73a7201a7252750c76066a30</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;version 2&#x27;</span> &gt; test.txt</span><br><span class=\"line\">$ git hash-object -w test.txt</span><br><span class=\"line\">1f7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>通过 <code>cat-file</code> 命令从 Git 那里取回数据。 这个命令简直就是一把剖析 Git 对象的瑞士军刀。 为 cat-file 指定 -p 选项可指示该命令自动判断内容的类型，</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class=\"line\"><span class=\"built_in\">test</span> content</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用 <code>git cat-file -t</code> 命令，可以让 Git 告诉我们其内部存储的任何对象类型，只要给定该对象的 SHA-1 值：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class=\"line\">blob</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>上述类型的对象我们称之为 <code>数据对象（blob object）</code></p>\n</li>\n<li><p>Git 另一种对象类型是<code>树对象（tree object）</code>，它能解决文件名保存的问题，也允许我们将多个文件组织到一起。 Git 以一种类似于 UNIX 文件系统的方式存储内容，但作了些许简化。 所有内容均以树对象和数据对象的形式存储，其中树对象对应了 UNIX 中的目录项，数据对象则大致上对应了 inodes 或文件内容。 一个树对象包含了一条或多条树对象记录（tree entry），每条记录含有一个指向数据对象或者子树对象的 SHA-1 指针，以及相应的模式、类型、文件名信息。 例如，某项目当前对应的最新树对象可能是这样的：</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git cat-file -p master^&#123;tree&#125;</span><br><span class=\"line\">100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README</span><br><span class=\"line\">100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile</span><br><span class=\"line\">040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib</span><br></pre></td></tr></table></figure>\n\n<p>master^{tree} 语法表示 master 分支上最新的提交所指向的树对象。 请注意，lib 子目录（所对应的那条树对象记录）并不是一个数据对象，而是一个指针，其指向的是另一个树对象：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0</span><br><span class=\"line\">100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>可以通过底层命令 <code>git update-index</code> 为一个单独文件——我们的 test.txt 文件的首个版本——创建一个暂存区。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git update-index --add --cacheinfo 100644 83baae61804e65cc73a7201a7252750c76066a30 test.txt</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>可以通过 <code>git write-tree</code> 命令将暂存区内容写入一个树对象。 此处无需指定 -w 选项——如果某个树对象此前并不存在的话，当调用此命令时， 它会根据当前暂存区状态自动创建一个新的树对象：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git write-tree</span><br><span class=\"line\">d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span><br><span class=\"line\">$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span><br><span class=\"line\">100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt</span><br><span class=\"line\">$ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span><br><span class=\"line\">tree</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;new file&#x27;</span> &gt; new.txt</span><br><span class=\"line\">$ git update-index --add --cacheinfo 100644 \\</span><br><span class=\"line\">  1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt</span><br><span class=\"line\">$ git update-index --add new.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git write-tree</span><br><span class=\"line\">0155eb4229851634a0f03eb265b69f5a2d56f341</span><br><span class=\"line\">$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341</span><br><span class=\"line\">100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt</span><br><span class=\"line\">100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>只是为了好玩：你可以将第一个树对象加入第二个树对象，使其成为新的树对象的一个子目录。 通过调用 <code>git read-tree</code> 命令，可以把树对象读入暂存区。 本例中，可以通过对该命令指定 –prefix 选项，将一个已有的树对象作为子树读入暂存区：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span><br><span class=\"line\">$ git write-tree</span><br><span class=\"line\">3c4e9cd789d88d8d89c1073707c3585e41b0e614</span><br><span class=\"line\">$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614</span><br><span class=\"line\">040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak</span><br><span class=\"line\">100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt</span><br><span class=\"line\">100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>那么现在就有了三个树对象，分别代表我们想要跟踪的不同项目快照。 然而问题依旧：若想重用这些快照，你必须记住所有三个 SHA-1 哈希值。 并且，你也完全不知道是谁保存了这些快照，在什么时刻保存的，以及为什么保存这些快照。 而以上这些，正是<code>提交对象（commit object）</code>能为你保存的基本信息。</li>\n<li>可以通过调用 <code>commit-tree</code> 命令创建一个提交对象，为此需要指定一个树对象的 SHA-1 值，以及该提交的父提交对象（如果有的话）。 我们从之前创建的第一个树对象开始：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;first commit&#x27;</span> | git commit-tree d8329f</span><br><span class=\"line\">fdf4fc3344e67ab068f836878b6c4951e3b15f3d</span><br></pre></td></tr></table></figure>\n\n<p>由于创建时间和作者数据不同，你现在会得到一个不同的散列值。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git cat-file -p fdf4fc3</span><br><span class=\"line\">tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span><br><span class=\"line\">author Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700</span><br><span class=\"line\">committer Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">first commit</span><br></pre></td></tr></table></figure>\n\n<p>提交对象的格式很简单：它先指定一个顶层树对象，代表当前项目快照； 然后是可能存在的父提交（前面描述的提交对象并不存在任何父提交）； 之后是作者&#x2F;提交者信息（依据你的 user.name 和 user.email 配置来设定，外加一个时间戳）； 留空一行，最后是提交注释。</p>\n<ol>\n<li><p>每次我们运行 git add 和 git commit 命令时，Git 所做的工作实质就是将被改写的文件保存为数据对象， 更新暂存区，记录树对象，最后创建一个指明了顶层树对象和父提交的提交对象。 这三种主要的 Git 对象——<code>数据对象、树对象、提交对象</code>——最初均以单独文件的形式保存在 .git&#x2F;objects 目录下。</p>\n</li>\n<li><p>如果你对仓库中从一个提交（比如 1a410e）开始往前的历史感兴趣，那么可以运行 git log 1a410e 这样的命令来显示历史，不过你需要记得 1a410e 是你查看历史的起点提交。 如果我们有一个文件来保存 SHA-1 值，而该文件有一个简单的名字， 然后用这个名字指针来替代原始的 SHA-1 值的话会更加简单。<br>在 Git 中，这种简单的名字被称为<code>引用（references，或简写为 refs）</code></p>\n</li>\n<li><p>若要创建一个新引用来帮助记忆最新提交所在的位置，从技术上讲我们只需简单地做如下操作：</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> 1a410efbd13591db07496601ebc7a059dd55cfe9 &gt; .git/refs/heads/master</span><br></pre></td></tr></table></figure>\n\n<p>现在，你就可以在 Git 命令中使用这个刚创建的新引用来代替 SHA-1 值了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline master</span><br><span class=\"line\">1a410efbd13591db07496601ebc7a059dd55cfe9 third commit</span><br><span class=\"line\">cac0cab538b970a37ea1e769cbbde608743bc96d second commit</span><br><span class=\"line\">fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</span><br></pre></td></tr></table></figure>\n\n<p>我们不提倡直接编辑引用文件。 如果想更新某个引用，Git 提供了一个更加安全的命令 <code>update-ref</code> 来完成此事：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>这基本就是 Git <code>分支的本质：一个指向某一系列提交之首的指针或引用</code>。 若想在第二个提交上创建一个分支，可以这么做：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git update-ref refs/heads/test cac0ca</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>至此，我们的 Git 数据库从概念上看起来像这样：<br><img src=\"https://git-scm.com/book/en/v2/images/data-model-4.png\" alt=\"包含分支引用的 Git 目录对象\"><br>当运行类似于 git branch <branch> 这样的命令时，Git 实际上会运行 update-ref 命令， 取得当前所在分支最新提交对应的 SHA-1 值，并将其加入你想要创建的任何新引用中。</p>\n</li>\n<li><p>当你执行 git branch <branch> 时，Git 如何知道最新提交的 SHA-1 值呢？ 答案是 HEAD 文件。</p>\n</li>\n<li><p><code>HEAD 文件通常是一个符号引用（symbolic reference），指向目前所在的分支</code>。 所谓符号引用，表示它是一个指向其他引用的指针。</p>\n</li>\n<li><p>当我们执行 git commit 时，该命令会创建一个提交对象，并用 HEAD 文件中那个引用所指向的 SHA-1 值设置其父提交字段。<br>你也可以手动编辑该文件，然而同样存在一个更安全的命令来完成此事：git symbolic-ref。 可以借助此命令来查看 HEAD 引用对应的值：</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git symbolic-ref HEAD</span><br><span class=\"line\">refs/heads/master</span><br></pre></td></tr></table></figure>\n\n<p>同样可以设置 HEAD 引用的值：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git symbolic-ref HEAD refs/heads/test</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> .git/HEAD</span><br><span class=\"line\">ref: refs/heads/test</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>标签引用</code><br>前面我们刚讨论过 Git 的<code>三种主要的对象类型（数据对象、树对象 和 提交对象 ）</code>，然而实际上还有第四种。 <code>标签对象（tag object）</code> 非常类似于一个提交对象——它包含一个标签创建者信息、一个日期、一段注释信息，以及一个指针。 主要的区别在于，标签对象通常指向一个提交对象，而不是一个树对象。 <code>它像是一个永不移动的分支引用——永远指向同一个提交对象</code>，只不过给这个提交对象加上一个更友好的名字罢了。</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://learngitbranching.js.org/?locale=zh_CN\">git 游戏</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/190303151\">git 可视化</a></li>\n<li><a href=\"https://www.cnblogs.com/xueweihan/p/13524162.html\">5 git workflow</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?bsh_bid=2219775734\">一文弄懂 Gitflow、Github flow、Gitlab flow 的工作流</a></li>\n<li><a href=\"https://blog.51cto.com/nanjke/3030113\">gitflow github_flow gitlab_flow</a></li>\n<li><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">A successful Git branching model</a></li>\n<li><a href=\"https://github.com/ByteByteGoHq/system-design-101#how-does-git-work\">how-does-git-work</a></li>\n</ol>\n","categories":["Tools","git"],"tags":["git"]},{"title":"github","url":"/2022/09/26/github/","content":"<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><ol>\n<li>github clone&#x2F;push 问题<ul>\n<li><a href=\"https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port#enabling-ssh-connections-over-https\">enabling-ssh-connections-over-https</a></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    Hostname ssh.github.com</span><br><span class=\"line\">    Port 443</span><br><span class=\"line\">    User git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"explore\"><a href=\"#explore\" class=\"headerlink\" title=\"explore\"></a>explore</h2><ol>\n<li><a href=\"https://star-history.com/\">star-history</a> 可以多个 repo 同时显示</li>\n<li><a href=\"https://starchart.cc/\">starchart.cc</a></li>\n<li><a href=\"https://github.com/anuraghazra/github-readme-stats\">github-readme-stats</a></li>\n<li><a href=\"https://github.com/search?o=desc&q=stars:%3E0&s=stars&type=Repositories\">start sort</a></li>\n<li><a href=\"https://octobox.io/\">octobox.io 管理 github 通知</a><ul>\n<li>直接登录 github 就能显示</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"gist\"><a href=\"#gist\" class=\"headerlink\" title=\"gist\"></a>gist</h2><h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://shields.io/badges\">badges&#x2F;shields</a> 左上角按要求输入变量，会生成 URL, 点击 execute 会预览结果<ul>\n<li><a href=\"https://shields.io/badges/static-badge\">任意格式</a> <a href=\"https://img.shields.io/badge/try%20it-online-orange\">sample</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/doctest/doctest\">badge example</a></li>\n<li><a href=\"https://dev.to/azure/github-how-to-display-the-status-badge-for-a-github-action-5449\">build-badge</a></li>\n<li><a href=\"https://www.repostatus.org/\">repostatus</a></li>\n<li><a href=\"https://isitmaintained.com/\">issuse badge</a></li>\n<li><a href=\"https://github.com/Platane/snk\">自动生成蛇的行走路径，一口气吃光所有“绿块”</a></li>\n<li>访问 github 有问题，访问 gitlab 无问题， 可以先用 gitlab 去 mirrors github repo， 再访问 gitlab</li>\n<li>点击<code>go to file</code>， 搜索文件</li>\n</ol>\n"},{"title":"gitlab","url":"/2022/06/30/gitlab/","content":"<h2 id=\"base-usage\"><a href=\"#base-usage\" class=\"headerlink\" title=\"base usage\"></a>base usage</h2><ol>\n<li><code>grep</code></li>\n<li><code>find file</code></li>\n<li><code>edit in Web IDE</code></li>\n<li><code>history</code> direct to branch commit</li>\n<li><code>Permalink</code></li>\n<li><code>commits tags branch Storage</code> behind project name</li>\n<li><code>snippets</code></li>\n<li><code>Use wiki</code></li>\n</ol>\n<h2 id=\"DevOps-lifecycle\"><a href=\"#DevOps-lifecycle\" class=\"headerlink\" title=\"DevOps lifecycle\"></a><a href=\"https://about.gitlab.com/stages-devops-lifecycle/value-stream-analytics/\">DevOps lifecycle</a></h2><ol>\n<li><a href=\"https://gitlab.cn/stages-devops-lifecycle/\">中文文档</a></li>\n</ol>\n<h2 id=\"value-stream-analytics\"><a href=\"#value-stream-analytics\" class=\"headerlink\" title=\"value-stream-analytics\"></a><a href=\"https://about.gitlab.com/stages-devops-lifecycle/value-stream-analytics/\">value-stream-analytics</a></h2><ol>\n<li>On the left sidebar, select <code>Analytics &gt; Value stream</code>.</li>\n</ol>\n<h2 id=\"merge-request\"><a href=\"#merge-request\" class=\"headerlink\" title=\"merge request\"></a>merge request</h2><h2 id=\"code-review\"><a href=\"#code-review\" class=\"headerlink\" title=\"code review\"></a>code review</h2><h2 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue\"></a>issue</h2><h3 id=\"issue-board\"><a href=\"#issue-board\" class=\"headerlink\" title=\"issue board\"></a>issue board</h3><h2 id=\"milestone\"><a href=\"#milestone\" class=\"headerlink\" title=\"milestone\"></a>milestone</h2><h2 id=\"Package-Registry\"><a href=\"#Package-Registry\" class=\"headerlink\" title=\"Package Registry\"></a>Package Registry</h2><h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38774185\">基于 GitLab 的工作流程设计</a></li>\n<li><a href=\"https://docs.gitlab.cn/jh/topics/gitlab_flow.html#gitlab-flow-%E4%BB%8B%E7%BB%8D\">GitLab Flow 介绍</a></li>\n<li><a href=\"http://dockone.io/article/2350\">GitLab Flow 的 11 条规则</a></li>\n</ol>\n","categories":["Tools","gitlab"],"tags":["gitlab"]},{"title":"go","url":"/2023/09/04/go/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><code>sudo apt install golang</code></li>\n<li><code>go env -w GOPROXY=https://goproxy.cn</code></li>\n<li><code>export PATH=$PATH:$GOPATH/bin</code></li>\n<li><code>go install github.com/google/pprof@latest</code></li>\n</ol>\n"},{"title":"gpt","url":"/2023/12/30/gpt/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/openai/gpt-2\">openai&#x2F;gpt-2 开源代码</a></li>\n</ol>\n"},{"title":"gtest","url":"/2022/04/02/gtest/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><a href=\"https://google.github.io/googletest/primer.html\">doc</a></li>\n<li><a href=\"https://google.github.io/googletest/reference/assertions.html\">断言列表</a></li>\n<li>opencv 源码 PERF_TEST</li>\n<li><code>test_exe --gtest_filter=TestSuite.TestName</code> 单独运行某个测试，当测试失败时，GoogleTest 允许您单独运行它以进行快速调试。</li>\n<li>断言是成对的，测试同一件事，但对当前函数有不同的影响。<ul>\n<li>ASSERT_ *版本在失败时会生成致命错误，并中止当前函数。</li>\n<li>EXPECT_ *版本生成非致命性故障，不会中止当前函数。</li>\n<li>通常优先使用 EXPECT* *，因为它们允许在测试中报告多个故障。但是，如果失败时函数继续运行没有意义，则应使用 ASSERT* *。</li>\n</ul>\n</li>\n<li>gtest_main.a 有什么用？可以不用写自己的 main 函数，链接 libgtest_main.a 就可以了。</li>\n<li><code>add_test(NAME gtests COMMAND gtests --gtest_output=xml:report.xml)</code></li>\n<li>CMakeLists.txt</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">find_package(GTest REQUIRED)</span><br><span class=\"line\">include_directories(<span class=\"variable\">$&#123;GTEST_INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\">target_link_libraries(xxx <span class=\"variable\">$&#123;GTEST_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li><code>enable_testing()</code> 需要在第一级 CMakeLists.txt 里，否则<code>make test</code>不生效</li>\n<li><code>ctest -N &amp;&amp; ctest -VV --test-dir build</code></li>\n<li><code>make test</code>: gtest 想要被 make test 发现需要<a href=\"https://google.github.io/googletest/quickstart-cmake.html\">link</a></li>\n<li><code>Testing/Temporary/LastTest.log</code> 为<code>make test</code>结果</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(GoogleTest)</span><br><span class=\"line\">gtest_discover_tests(hello_test)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"report-xml-json-html\"><a href=\"#report-xml-json-html\" class=\"headerlink\" title=\"report (xml json html)\"></a>report (xml json html)</h2><ol>\n<li>gtest 结果 xml 可以显示到 ci pipeline 结果中去 <a href=\"https://docs.gitlab.com/ee/ci/testing/unit_test_reports.html\">link</a></li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cpp:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gtxxx</span> <span class=\"string\">--gtest_output=xml:report.xml</span></span><br><span class=\"line\"><span class=\"string\">unit_test_reports</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">reports:</span></span><br><span class=\"line\">      <span class=\"attr\">junit:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">report.xml</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">fail.xml</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>.&#x2F;gtxxx –gtest_output&#x3D;xml:filename</p>\n</li>\n<li><p><code>make test</code></p>\n</li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">::testing::GTEST_FLAG(output)</span> = &quot;xml:test2.xml&quot;;</span><br><span class=\"line\"><span class=\"meta\">::testing::GTEST_FLAG(output)</span> = &quot;json:test2.json&quot;;</span><br><span class=\"line\"><span class=\"meta\">::testing::InitGoogleTest(&amp;argc,</span> argv);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://blog.csdn.net/Neil4/article/details/104484792\">to html</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://google.github.io/googletest/quickstart-cmake.html\">cmake 集成</a></li>\n<li>base</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(</span><br><span class=\"line\">  hello_test</span><br><span class=\"line\">  GTest::gtest_main</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li>通用框架: 添加 gtest 不用修改 CMakeLists.txt</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enable_testing</span>() <span class=\"comment\"># 需要在第一级 CMakeLists.txt 里，否则`make test`不生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(gtest-source-pattern <span class=\"string\">&quot;gtest/*.cpp&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">file</span>(GLOB gtest-sources <span class=\"variable\">$&#123;gtest-source-pattern&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(gtests)</span><br><span class=\"line\"><span class=\"keyword\">target_sources</span>(gtests PRIVATE <span class=\"variable\">$&#123;gtest-sources&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(gtests</span><br><span class=\"line\">                           PRIVATE <span class=\"variable\">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/gtest/)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(gtests PRIVATE gtest <span class=\"variable\">$&#123;COMMON_LIB&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_test</span>(fcw::gtests gtests)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>main, 测试可以分散在不同文件，只有一个 main</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;gtest/gtest.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">  ::testing::<span class=\"built_in\">GTEST_FLAG</span>(output) = <span class=\"string\">&quot;xml:report.xml&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ::testing::GTEST_FLAG(output) = &quot;json:test2.json&quot;;</span></span><br><span class=\"line\">  ::testing::<span class=\"built_in\">InitGoogleTest</span>(&amp;argc, argv);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">RUN_ALL_TESTS</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"yaml-gtest-CMakeLists-txt\"><a href=\"#yaml-gtest-CMakeLists-txt\" class=\"headerlink\" title=\"yaml gtest CMakeLists.txt\"></a>yaml gtest CMakeLists.txt</h3><ol>\n<li>NOTE: use pattern</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">find_package</span>(Threads REQUIRED)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(gtest_force_shared_crt <span class=\"keyword\">ON</span> CACHE BOOL <span class=\"string\">&quot;&quot;</span> FORCE)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(BUILD_MOCK <span class=\"keyword\">ON</span> CACHE BOOL <span class=\"string\">&quot;&quot;</span> FORCE)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_POLICY_DEFAULT_CMP0048 NEW)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(</span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/gtest-1.11.0&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/prefix&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(SYSTEM <span class=\"string\">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/gtest-1.11.0/googletest/include&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(<span class=\"keyword\">test</span>-new-api-pattern <span class=\"string\">&quot;new-api/*.cpp&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(<span class=\"keyword\">test</span>-source-pattern <span class=\"string\">&quot;*.cpp&quot;</span> <span class=\"string\">&quot;integration/*.cpp&quot;</span> <span class=\"string\">&quot;node/*.cpp&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (CMAKE_VERSION <span class=\"keyword\">VERSION_GREATER</span> <span class=\"number\">3.11</span>)</span><br><span class=\"line\">  <span class=\"keyword\">list</span>(INSERT <span class=\"keyword\">test</span>-new-api-pattern <span class=\"number\">0</span> CONFIGURE_DEPENDS)</span><br><span class=\"line\">  <span class=\"keyword\">list</span>(INSERT <span class=\"keyword\">test</span>-source-pattern <span class=\"number\">0</span> CONFIGURE_DEPENDS)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">file</span>(GLOB <span class=\"keyword\">test</span>-new-api-sources <span class=\"variable\">$&#123;test-new-api-pattern&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">file</span>(GLOB <span class=\"keyword\">test</span>-sources <span class=\"variable\">$&#123;test-source-pattern&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(yaml-cpp-tests <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_sources</span>(yaml-cpp-tests</span><br><span class=\"line\">  PRIVATE</span><br><span class=\"line\">    <span class=\"variable\">$&#123;test-new-api-sources&#125;</span></span><br><span class=\"line\">    <span class=\"variable\">$&#123;test-sources&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(yaml-cpp-tests</span><br><span class=\"line\">  PRIVATE</span><br><span class=\"line\">    <span class=\"variable\">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/integration</span><br><span class=\"line\">    <span class=\"variable\">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span></span><br><span class=\"line\">    <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src)</span><br><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(yaml-cpp-tests</span><br><span class=\"line\">  PRIVATE</span><br><span class=\"line\">    $&lt;$&lt;CXX_COMPILER_ID:Clang&gt;:-Wno-c99-extensions -Wno-variadic-macros -Wno-sign-compare&gt;</span><br><span class=\"line\">    $&lt;$&lt;CXX_COMPILER_ID:GNU&gt;:-Wno-variadic-macros -Wno-sign-compare&gt;)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(yaml-cpp-tests</span><br><span class=\"line\">  PRIVATE</span><br><span class=\"line\">    Threads::Threads</span><br><span class=\"line\">    yaml-cpp</span><br><span class=\"line\">    gmock)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set_property</span>(<span class=\"keyword\">TARGET</span> yaml-cpp-tests PROPERTY CXX_STANDARD_REQUIRED <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> <span class=\"keyword\">DEFINED</span> CMAKE_CXX_STANDARD)</span><br><span class=\"line\">  <span class=\"keyword\">set_target_properties</span>(yaml-cpp-tests PROPERTIES CXX_STANDARD <span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_test</span>(yaml-cpp::<span class=\"keyword\">test</span> yaml-cpp-tests)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (build-windows-dll)</span><br><span class=\"line\">  <span class=\"keyword\">add_custom_command</span>(</span><br><span class=\"line\">    <span class=\"keyword\">TARGET</span> yaml-cpp-tests</span><br><span class=\"line\">    POST_BUILD <span class=\"keyword\">COMMAND</span> <span class=\"variable\">$&#123;CMAKE_COMMAND&#125;</span> -E</span><br><span class=\"line\">    copy_if_different <span class=\"string\">&quot;$&lt;TARGET_FILE:yaml-cpp&gt;&quot;</span> <span class=\"string\">&quot;$&lt;TARGET_FILE_DIR:yaml-cpp-tests&gt;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links-1\"><a href=\"#links-1\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/doctest/doctest\">doctest</a></li>\n</ol>\n","categories":["Program","Cpp"],"tags":["Cpp"]},{"title":"hightway","url":"/2023/05/09/hightway/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/google/highway/tree/master\">highway</a></li>\n<li><a href=\"https://google.github.io/highway/en/master/faq.html#getting-started\">getting-started</a></li>\n<li><a href=\"https://github.com/libjxl/libjxl\">libjxl reference implementation of JPEG XL (encoder and decoder)</a></li>\n<li><a href=\"https://github.com/chromium/chromium/blob/22b51215052e84b7c4ee35ba2d4d21638b906b35/third_party/distributed_point_functions/code/dpf/internal/get_hwy_mode.cc\">hello_world</a></li>\n<li><a href=\"https://google.github.io/highway/en/master/impl_details.html#adding-a-new-op\">adding-a-new-op</a></li>\n<li><a href=\"https://github.com/google/highway/blob/6c285d64ae50e0f48866072ed3a476fc12df5ab6/hwy/print-inl.h#L59-L59\">print simd</a></li>\n</ol>\n<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><a href=\"https://github.com/google/highway/blob/master/hwy/profiler.h\">profiler 使用 RAII 可以设置 zone</a><ul>\n<li>生命周期结束做一些操作</li>\n<li>add_definitions(-DPROFILER_ENABLED&#x3D;1)</li>\n</ul>\n</li>\n<li>可以打印 V.raw</li>\n<li>源码编译 build 目录下工具<code>hwy_list_targets</code>可以显示 cpu 支持的加速硬件 <a href=\"https://github.com/google/highway/blob/master/hwy/tests/list_targets.cc\">src</a>; HWY_STATIC_TARGET: SSE2 显示默认支持</li>\n<li>具体运行程序见 cpp_sandbox&#x2F;highway</li>\n<li>Advanced Encryption Standard (AES); NEON_WITHOUT_AES</li>\n<li><a href=\"https://github.com/google/highway/blob/f86369577e9f884f9156dddbf03ee786493c67f9/hwy/examples/benchmark.cc#LL245C5-L245C31\">获取支持的加速硬件</a><ul>\n<li><code>cat /proc/cpuinfo</code> 看 flags</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/google/highway/blob/33d7d0a6651bd783f97534c936bc9733a3117478/hwy/nanobenchmark.cc#L736\">获取函数运行 cycle</a></li>\n</ol>\n<h2 id=\"simd-library\"><a href=\"#simd-library\" class=\"headerlink\" title=\"simd library\"></a><a href=\"https://www.reddit.com/r/cpp/comments/106ivke/simd_intrinsics_and_the_possibility_of_a_standard/\">simd library</a></h2><ol>\n<li><a href=\"https://github.com/google/highway\">highway cpu 向量加速库 SIMD</a></li>\n<li><a href=\"https://github.com/jfalcou/eve\">eve</a></li>\n<li><a href=\"https://github.com/xtensor-stack/xsimd\">xsimd</a></li>\n<li><a href=\"https://github.com/ermig1979/Simd\">图像处理与机器学习 Simd</a></li>\n<li><a href=\"https://en.cppreference.com/w/cpp/experimental/simd\">parallelism TS v2</a></li>\n<li><a href=\"https://github.com/simd-everywhere/simde\">simde</a> 如果平台不存在硬件加速，使用模拟函数，如在 x86 上运行 neon</li>\n</ol>\n"},{"title":"huggingface","url":"/2024/01/04/huggingface/","content":"<h2 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a><a href=\"https://huggingface.co/docs/transformers/main_classes/pipelines\">pipeline</a></h2><ol>\n<li>The pipelines are a great and easy way to use models for inference.</li>\n<li>llama2</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use a pipeline as a high-level helper</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> transformers <span class=\"keyword\">import</span> pipeline</span><br><span class=\"line\">pipe = pipeline(<span class=\"string\">&quot;text-generation&quot;</span>, model=<span class=\"string\">&quot;./Llama-2-7b-hf&quot;</span>)</span><br><span class=\"line\">pipe(<span class=\"string\">&quot;how are you&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\"><span class=\"built_in\">help</span>(pipeline)</span><br><span class=\"line\"><span class=\"built_in\">help</span>(pipe)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看模型信息\"><a href=\"#查看模型信息\" class=\"headerlink\" title=\"查看模型信息\"></a>查看模型信息</h2><ol>\n<li><a href=\"https://github.com/saratbhargava/ai-blog-resources/blob/main/LLM/Llama_2_param_count.ipynb\">基础信息</a></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Load model directly</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> transformers <span class=\"keyword\">import</span> AutoTokenizer, AutoModelForCausalLM</span><br><span class=\"line\"></span><br><span class=\"line\">model = AutoModelForCausalLM.from_pretrained(<span class=\"string\">&quot;./Llama-2-7b-hf&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(model)</span><br><span class=\"line\"><span class=\"keyword\">from</span> prettytable <span class=\"keyword\">import</span> PrettyTable</span><br><span class=\"line\"></span><br><span class=\"line\">table = PrettyTable([<span class=\"string\">&#x27;Name&#x27;</span>, <span class=\"string\">&#x27;Shape&#x27;</span>, <span class=\"string\">&#x27;Param&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> model.named_parameters():</span><br><span class=\"line\">    param_count = param.numel()</span><br><span class=\"line\">    table.add_row([name, param.shape, param_count])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(table)</span><br><span class=\"line\">num_parameters = <span class=\"built_in\">sum</span>(p.numel() <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> model.parameters())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num_parameters)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"models\"><a href=\"#models\" class=\"headerlink\" title=\"models\"></a><a href=\"https://huggingface.co/models\">models</a></h2><ol>\n<li>repo 包含<ul>\n<li>config.json 每个架构一个 config.json <a href=\"https://huggingface.co/docs/transformers/main/model_doc/llama2#transformers.LlamaConfig\">llama config</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"模型文件类型\"><a href=\"#模型文件类型\" class=\"headerlink\" title=\"模型文件类型\"></a><a href=\"https://www.zhihu.com/question/620641385/answer/3230090109\">模型文件类型</a></h2><ol>\n<li>支持 bin 或 safetensors 文件</li>\n<li>safetensors 是谷歌开发的一种 TensorFlow Lite 模型文件格式，用于在移动设备上运行模型</li>\n<li>bin 文件自存储模型的参数，不包含</li>\n<li>pytorch 两种方式<ul>\n<li>保存整个模型：保存整个模型的结构（代码）、参数 <code>torch.save(model, &#39;model.pth&#39;)</code></li>\n<li>保存模型参数：仅保存模型的参数，而不保存模型的结构（代码）。<code>torch.save(model.state_dict(), &#39;model_params.pth&#39;</code></li>\n</ul>\n</li>\n<li>有些模型保存未 gguf 格式，需要专门推理引擎才能使用</li>\n<li><a href=\"https://github.com/ggerganov/ggml/blob/master/docs/gguf.md\">gguf doc</a></li>\n<li>gguf：It is a successor file format to GGML, GGMF and GGJT, and is designed to be unambiguous by containing all the information needed to load a model. It is also designed to be extensible, so that new features can be added to GGML without breaking compatibility with older models.</li>\n<li>The .bin files that are used by llama.cpp allow users to easily share models in a single file. Except they had one big problem: lack of flexibility. You could not add additional information about the model.</li>\n<li><a href=\"https://github.com/ggerganov/llama.cpp/discussions/2948\">hugging face models to gguf</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://huggingface.co/docs/transformers/v4.36.1/zh/index\">transformers 中文文档</a></li>\n<li><a href=\"https://huggingface.co/blog/zh/llama2\">blog</a></li>\n<li><a href=\"https://huggingface.co/blog/zh/llama2\">Llama 2 来袭 - 在 Hugging Face 上玩转它</a></li>\n</ol>\n"},{"title":"Image Process","url":"/2022/02/05/image_process/","content":"<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ol>\n<li>7yuv 可以直接显示二进制格式图片 图片命名为 xxxx_960_576.yuv, 可以直接打开不用再输入尺寸</li>\n</ol>\n<h2 id=\"视差图与深度图\"><a href=\"#视差图与深度图\" class=\"headerlink\" title=\"视差图与深度图\"></a>视差图与深度图</h2><h3 id=\"视差图\"><a href=\"#视差图\" class=\"headerlink\" title=\"视差图\"></a>视差图</h3><ol>\n<li><a href=\"https://blog.csdn.net/ppdyhappy/article/details/113618409\">原理</a></li>\n</ol>\n<h3 id=\"深度图\"><a href=\"#深度图\" class=\"headerlink\" title=\"深度图\"></a>深度图</h3><h3 id=\"视差图转深度图\"><a href=\"#视差图转深度图\" class=\"headerlink\" title=\"视差图转深度图\"></a>视差图转深度图</h3><ol>\n<li>公式: <code>depth[i] = f * b / disp[i]; </code> f 为焦距，b 为基线</li>\n<li><a href=\"https://blog.nowcoder.net/n/947d9e8e6e3d41aa95d25e2daa9d14f6?from=nowcoder_improve\">视差转深度</a></li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;opencv2/highgui.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;opencv2/imgcodecs.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;opencv2/imgproc.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> fx = <span class=\"number\">6.9972691554787775e+02</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> baseline = <span class=\"number\">1</span> / <span class=\"number\">4.9899299400374328</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">  Mat img = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;disparity.png&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  cout &lt;&lt; img.<span class=\"built_in\">type</span>() &lt;&lt; endl;</span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;fx: &quot;</span> &lt;&lt; fx &lt;&lt; endl;</span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;baseline: &quot;</span> &lt;&lt; baseline &lt;&lt; endl;</span><br><span class=\"line\">  <span class=\"function\">Mat <span class=\"title\">depth</span><span class=\"params\">(img.rows, img.cols, CV_32F)</span></span>;  <span class=\"comment\">//深度图</span></span><br><span class=\"line\">  cout &lt;&lt; depth.<span class=\"built_in\">type</span>() &lt;&lt; endl;</span><br><span class=\"line\">  <span class=\"comment\">//视差图转深度图</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> row = <span class=\"number\">0</span>; row &lt; depth.rows; row++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> col = <span class=\"number\">0</span>; col &lt; depth.cols; col++) &#123;</span><br><span class=\"line\">      <span class=\"type\">float</span> d = img.<span class=\"built_in\">ptr</span>&lt;uchar&gt;(row)[col];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      depth.<span class=\"built_in\">ptr</span>&lt;<span class=\"type\">float</span>&gt;(row)[col] = fx * baseline / d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;depth.png&quot;</span>, depth);</span><br><span class=\"line\">  <span class=\"comment\">// Mat depth_8u1 = depth.clone();</span></span><br><span class=\"line\">  Mat depth_8u1;</span><br><span class=\"line\">  depth.<span class=\"built_in\">convertTo</span>(depth_8u1, CV_8U);</span><br><span class=\"line\">  Mat color_mat;</span><br><span class=\"line\">  <span class=\"built_in\">applyColorMap</span>(depth_8u1, color_mat, COLORMAP_TURBO);</span><br><span class=\"line\">  <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;color_depth.png&quot;</span>, color_mat);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"opencv-函数\"><a href=\"#opencv-函数\" class=\"headerlink\" title=\"opencv 函数\"></a>opencv 函数</h2><ol>\n<li><code>.convert</code>类型转换 <code>depth.convertTo(depth_8u1, CV_8U);</code></li>\n<li><code>applyColorMap</code> 灰度图转彩色(深度彩色输出) <code>applyColorMap(depth_8u1, color_mat, COLORMAP_TURBO);</code></li>\n<li>获取 cv::Mat 矩阵元素 <code> mat.ptr&lt;float&gt;(row)[col] = camera_f * camera_b / d;</code></li>\n</ol>\n<h2 id=\"vector-to-rgb-jpg\"><a href=\"#vector-to-rgb-jpg\" class=\"headerlink\" title=\"vector to rgb jpg\"></a>vector to rgb jpg</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">std::vector&lt;<span class=\"built_in\">char</span>&gt; source<span class=\"constructor\">_out(<span class=\"params\">w</span> <span class=\"operator\">*</span> <span class=\"params\">h</span> <span class=\"operator\">*</span> 3)</span></span><br><span class=\"line\">cv::Mat img(h, w, CV_8UC3);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (unsigned <span class=\"built_in\">int</span> row_ind = <span class=\"number\">0</span>; row_ind &lt; h; ++row_ind) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (unsigned <span class=\"built_in\">int</span> col_ind = <span class=\"number\">0</span>; col_ind &lt; w; ++col_ind) &#123;</span><br><span class=\"line\">    img.at&lt;cv::Vec3b&gt;(row_ind, col_ind) =</span><br><span class=\"line\">        cv::<span class=\"constructor\">Vec3b(<span class=\"params\">source_out</span>[(<span class=\"params\">row_ind</span> <span class=\"operator\">*</span> <span class=\"params\">w</span> + <span class=\"params\">col_ind</span>)</span><span class=\"operator\"> * </span><span class=\"number\">3</span> + <span class=\"number\">2</span>],</span><br><span class=\"line\">                  source_out<span class=\"literal\">[(<span class=\"identifier\">row_ind</span> <span class=\"operator\">*</span> <span class=\"identifier\">w</span> + <span class=\"identifier\">col_ind</span>) <span class=\"operator\">*</span> <span class=\"number\">3</span> + <span class=\"number\">1</span>]</span>,</span><br><span class=\"line\">                  source_out<span class=\"literal\">[(<span class=\"identifier\">row_ind</span> <span class=\"operator\">*</span> <span class=\"identifier\">w</span> + <span class=\"identifier\">col_ind</span>) <span class=\"operator\">*</span> <span class=\"number\">3</span> + <span class=\"number\">0</span>]</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cv::imwrite(<span class=\"string\">&quot;output.jpg&quot;</span>, img);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"opencv-多张图片同事显示\"><a href=\"#opencv-多张图片同事显示\" class=\"headerlink\" title=\"opencv 多张图片同事显示\"></a>opencv 多张图片同事显示</h2><ol>\n<li><a href=\"https://python.iitter.com/other/302393.html\">OpenCV 一个窗口同时显示多张图片</a></li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> cv::Mat <span class=\"title\">concat_images</span><span class=\"params\">(std::vector&lt;cv::Mat&gt; imgs)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">int</span> MAX_PIXEL = <span class=\"number\">540</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> imgs_num = imgs.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> sqrt_value = std::<span class=\"built_in\">sqrt</span>(imgs_num);</span><br><span class=\"line\">  Size first_img_size = imgs[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> max_pixel = std::<span class=\"built_in\">max</span>(first_img_size.height, first_img_size.width);</span><br><span class=\"line\">  <span class=\"type\">double</span> prop = max_pixel &lt; MAX_PIXEL ? (<span class=\"type\">double</span>)max_pixel / (<span class=\"type\">double</span>)MAX_PIXEL</span><br><span class=\"line\">                                      : (<span class=\"type\">double</span>)MAX_PIXEL / (<span class=\"type\">double</span>)max_pixel;</span><br><span class=\"line\">  <span class=\"function\">Size <span class=\"title\">std_size</span><span class=\"params\">(first_img_size.width * prop, first_img_size.height * prop)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&quot;std size: &quot;</span> &lt;&lt; std_size;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">int</span> img_cols = (sqrt_value - (<span class=\"type\">int</span>)sqrt_value == <span class=\"number\">0.0</span>)</span><br><span class=\"line\">                     ? std::<span class=\"built_in\">floor</span>(sqrt_value)</span><br><span class=\"line\">                     : std::<span class=\"built_in\">floor</span>(sqrt_value) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&quot;img_cols:  &quot;</span> &lt;&lt; img_cols;</span><br><span class=\"line\">  Mat tmp_img;</span><br><span class=\"line\">  <span class=\"function\">Point2i <span class=\"title\">location</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">Mat <span class=\"title\">result</span><span class=\"params\">(std_size.height * ((imgs_num - <span class=\"number\">1</span>) / img_cols + <span class=\"number\">1</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             std_size.width * img_cols, imgs[<span class=\"number\">0</span>].type())</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">VLOG</span>(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&quot;concat image size: &quot;</span> &lt;&lt; result.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; imgs_num; i++) &#123;</span><br><span class=\"line\">    location.x = (i % img_cols) * std_size.width;</span><br><span class=\"line\">    location.y = (i / img_cols) * std_size.height;</span><br><span class=\"line\">    <span class=\"built_in\">resize</span>(imgs[i], tmp_img, std_size, prop, prop, INTER_LINEAR);</span><br><span class=\"line\">    tmp_img.<span class=\"built_in\">copyTo</span>(<span class=\"built_in\">result</span>(<span class=\"built_in\">Rect</span>(location, std_size)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双线性-resize\"><a href=\"#双线性-resize\" class=\"headerlink\" title=\"双线性 resize\"></a>双线性 resize</h2><ol>\n<li><a href=\"https://excalidraw.com/#json=eOxeValvEDgQU1IrMOjU_,arZv-AnyFoupAOXfEKY1-w\">示意图</a></li>\n<li><a href=\"https://www.freesion.com/article/6921829775/\">双线性插值算法（C++实现）</a></li>\n</ol>\n","categories":["Algorithm"],"tags":["Algorithm"]},{"title":"invest","url":"/2024/06/18/invest/","content":"<h2 id=\"时间价值\"><a href=\"#时间价值\" class=\"headerlink\" title=\"时间价值\"></a>时间价值</h2><h2 id=\"终值-FV\"><a href=\"#终值-FV\" class=\"headerlink\" title=\"终值 FV\"></a>终值 FV</h2><ol>\n<li><a href=\"https://support.content.office.net/en-us/coach/excelcoach_FV_PartII.html\">excel 计算器</a></li>\n</ol>\n<h2 id=\"净现值-NPV\"><a href=\"#净现值-NPV\" class=\"headerlink\" title=\"净现值 NPV\"></a>净现值 NPV</h2><ol>\n<li>将贷款净现值与本金做对比</li>\n<li>注意按年算的</li>\n<li>execel 上计算<code>=NPV(rate, B2:B291)</code>: 和原始投入做比较，<ul>\n<li>rate 为银行利率或通货膨胀率</li>\n<li>rate 按 0.3</li>\n</ul>\n</li>\n<li>搜中国通货膨胀率</li>\n<li>房贷注意减去房租，只要通货膨胀在 1%就是划算的</li>\n<li>注意算首付利息(都按现值算)</li>\n<li>都按现值算有问题，未考虑首付无利息问题，按未来值(终值)</li>\n<li>付出的终值 - 资产的终值</li>\n</ol>\n<h2 id=\"内部收益率-IRR\"><a href=\"#内部收益率-IRR\" class=\"headerlink\" title=\"内部收益率(IRR)\"></a>内部收益率(IRR)</h2><ol>\n<li>有计算器</li>\n<li>资金流入现值总额与资金流出现值总额相等、净现值等于零时的折现率。</li>\n<li>用于计算投资是否可行</li>\n<li>采用内部收益率（IRR）进行项目评估的时候，如果内部收益率大于当前的折现率，那么其净现值就会大于零</li>\n</ol>\n<h2 id=\"折现率\"><a href=\"#折现率\" class=\"headerlink\" title=\"折现率\"></a>折现率</h2><h2 id=\"复利\"><a href=\"#复利\" class=\"headerlink\" title=\"复利\"></a>复利</h2><ol>\n<li><a href=\"https://www.xiadun.net/gongju/fuli.html\">复利计算器</a></li>\n</ol>\n<h2 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/260938216?utm_psn=1786379550101471233\">NPV（净现值）与 IRR（内部收益率）</a></li>\n</ol>\n"},{"title":"jupyter","url":"/2023/12/26/jupyter/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create --name d2l python=3.9 -y</span><br><span class=\"line\">conda activate d2l</span><br><span class=\"line\">pip install torch==1.12.0 torchvision==0.13.0 d2l==0.17.6 RICE</span><br><span class=\"line\">jupyter notebook <span class=\"comment\"># 映射端口号 注意不用使用机器自带jupyter</span></span><br><span class=\"line\">jupyter notebook --port 5900 <span class=\"comment\"># 映射端口号, 可能不好使</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shortkeys\"><a href=\"#shortkeys\" class=\"headerlink\" title=\"shortkeys\"></a>shortkeys</h2><ol>\n<li><code>S-Enter</code> 运行并到下一 cell</li>\n<li><code>C-Enter</code> 运行 code</li>\n</ol>\n"},{"title":"llama.cpp","url":"/2024/01/10/llama-cpp/","content":"<h2 id=\"语言模型质量评测\"><a href=\"#语言模型质量评测\" class=\"headerlink\" title=\"语言模型质量评测\"></a>语言模型质量评测</h2><ol>\n<li><a href=\"https://github.com/ggerganov/llama.cpp?tab=readme-ov-file#perplexity-measuring-model-quality\">perplexity-measuring-model-quality</a></li>\n<li><code>./perplexity -m models/7B/ggml-model-q4_0.gguf -f wiki.test.raw</code><ul>\n<li>使用 openblas 版本</li>\n<li><code>OMP_NUM_THREADS=16 OPENBLAS_NUM_THREADS=16 ./build/bin/perplexity -m ../llama/llama-2-7b/ggml-model-q4_0.gguf -f wikitext-2-raw/wiki.test.raw</code></li>\n</ul>\n</li>\n<li>7b q4_0 result:</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">llama_print_timings: prompt eval time = 11159747.56 ms / 335360 tokens (   33.28 ms per token,    30.05 tokens per second)</span><br><span class=\"line\">Final estimate: PPL = 5.9621 +/- 0.03348</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>7b fp16 result:</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">llama_print_timings: prompt eval time = 9850067.93 ms / 335360 tokens (   29.37 ms per token,    34.05 tokens per second)</span><br><span class=\"line\">Final estimate: PPL = 5.7962 +/- 0.03235</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"run-on-cpu\"><a href=\"#run-on-cpu\" class=\"headerlink\" title=\"run on cpu\"></a>run on cpu</h2><ol>\n<li>build</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ggerganov/llama.cpp</span><br><span class=\"line\"><span class=\"built_in\">cd</span> llama.cpp</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">cmake --build . --config Release -j16</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>convert llama2 model</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## llama repo下下载了7b模型</span></span><br><span class=\"line\">python convert.py ../llama/llama-2-7b/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## q4_0量化</span></span><br><span class=\"line\">./build/bin/quantize ../llama/llama-2-7b/ggml-model-f16.gguf ../llama/llama-2-7b/ggml-model-q4_0.gguf q4_0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>run</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./build/bin/main -m ../llama/llama-2-7b/ggml-model-f16.gguf -p <span class=\"string\">&quot;Building a website can be done in 10 simple steps:\\nStep 1:&quot;</span> -n 40 -e</span><br></pre></td></tr></table></figure>\n\n<p>4.result</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">llama_print_timings:        load time =    2123.21 ms</span><br><span class=\"line\">llama_print_timings:      sample time =      22.01 ms /    40 runs   (    0.55 ms per token,  1817.19 tokens per second)</span><br><span class=\"line\">llama_print_timings: prompt eval time =     820.50 ms /    19 tokens (   43.18 ms per token,    23.16 tokens per second)</span><br><span class=\"line\">llama_print_timings:        eval time =   15164.51 ms /    39 runs   (  388.83 ms per token,     2.57 tokens per second)</span><br><span class=\"line\">llama_print_timings:       total time =   16023.55 ms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"run-on-cpu-with-mpi-on\"><a href=\"#run-on-cpu-with-mpi-on\" class=\"headerlink\" title=\"run on cpu with mpi on\"></a>run on cpu with mpi on</h2><ol>\n<li>build</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install libopenmpi-dev</span><br><span class=\"line\">cmake -S . -B build -DLLAMA_MPI=ON</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake --build . --config Release -j16</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>result</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">llama_print_timings:        load time =    2092.53 ms</span><br><span class=\"line\">llama_print_timings:      sample time =      20.81 ms /    40 runs   (    0.52 ms per token,  1922.15 tokens per second)</span><br><span class=\"line\">llama_print_timings: prompt eval time =     668.81 ms /    19 tokens (   35.20 ms per token,    28.41 tokens per second)</span><br><span class=\"line\">llama_print_timings:        eval time =   10150.64 ms /    39 runs   (  260.27 ms per token,     3.84 tokens per second)</span><br><span class=\"line\">llama_print_timings:       total time =   10855.62 ms</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># run with mulit core</span></span></span><br><span class=\"line\">mpirun -np 8 ./build/bin/main -m ../llama/llama-2-7b/ggml-model-f16.gguf -p &quot;Building a website can be done in 10 simple steps:\\nStep 1:&quot; -n 40 -e</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"openBlas\"><a href=\"#openBlas\" class=\"headerlink\" title=\"openBlas\"></a>openBlas</h2><ol>\n<li>build</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd build</span><br><span class=\"line\">cmake .. -DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=OpenBLAS</span><br><span class=\"line\">cmake --build . --config Release -j16</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>result</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./build/bin/main -m ../llama/llama-2-7b/ggml-model-f16.gguf -p <span class=\"string\">&quot;Building a website can be done in 10 simple steps:\\nStep 1:&quot;</span> -n 40 -e</span><br><span class=\"line\">llama_print_timings:        load time =    2008.93 ms</span><br><span class=\"line\">llama_print_timings:      sample time =      50.88 ms /   100 runs   (    0.51 ms per token,  1965.37 tokens per second)</span><br><span class=\"line\">llama_print_timings: prompt <span class=\"built_in\">eval</span> time =     647.12 ms /    19 tokens (   34.06 ms per token,    29.36 tokens per second)</span><br><span class=\"line\">llama_print_timings:        <span class=\"built_in\">eval</span> time =   25045.01 ms /    99 runs   (  252.98 ms per token,     3.95 tokens per second)</span><br><span class=\"line\">llama_print_timings:       total time =   25779.49 ms</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OMP_NUM_THREADS=32 OPENBLAS_NUM_THREADS=32 都设置比较快</span></span><br><span class=\"line\">OMP_NUM_THREADS=32 OPENBLAS_NUM_THREADS=32 ./build/bin/main -m ../llama/llama-2-7b/ggml-model-f16.gguf -p <span class=\"string\">&quot;Building a website can be done in 10 simple steps:\\nStep 1:&quot;</span> -n 40 -e</span><br><span class=\"line\">llama_print_timings:        load time =    1977.25 ms</span><br><span class=\"line\">llama_print_timings:      sample time =      19.27 ms /    40 runs   (    0.48 ms per token,  2076.20 tokens per second)</span><br><span class=\"line\">llama_print_timings: prompt <span class=\"built_in\">eval</span> time =     622.66 ms /    19 tokens (   32.77 ms per token,    30.51 tokens per second)</span><br><span class=\"line\">llama_print_timings:        <span class=\"built_in\">eval</span> time =    6629.75 ms /    39 runs   (  169.99 ms per token,     5.88 tokens per second)</span><br><span class=\"line\">llama_print_timings:       total time =    7284.48 ms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cublas\"><a href=\"#cublas\" class=\"headerlink\" title=\"cublas\"></a>cublas</h2><ol>\n<li>build</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export CUDA_VISIBLE_DEVICES=0,1</span><br><span class=\"line\">export PATH=/usr/local/cuda/bin/:$&#123;PATH&#125;</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake .. -DLLAMA_CUBLAS=ON</span><br><span class=\"line\">cmake --build . --config Release -j16</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>result</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">llama_print_timings:        load time =    2225.07 ms</span><br><span class=\"line\">llama_print_timings:      sample time =      21.19 ms /    40 runs   (    0.53 ms per token,  1887.33 tokens per second)</span><br><span class=\"line\">llama_print_timings: prompt eval time =     814.74 ms /    19 tokens (   42.88 ms per token,    23.32 tokens per second)</span><br><span class=\"line\">llama_print_timings:        eval time =   10324.64 ms /    39 runs   (  264.73 ms per token,     3.78 tokens per second)</span><br><span class=\"line\">llama_print_timings:       total time =   11176.41 ms</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>q4_0 result</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">llama_print_timings:        load time =    1097.19 ms</span><br><span class=\"line\">llama_print_timings:      sample time =      22.74 ms /    40 runs   (    0.57 ms per token,  1759.25 tokens per second)</span><br><span class=\"line\">llama_print_timings: prompt eval time =     780.84 ms /    19 tokens (   41.10 ms per token,    24.33 tokens per second)</span><br><span class=\"line\">llama_print_timings:        eval time =    6715.37 ms /    39 runs   (  172.19 ms per token,     5.81 tokens per second)</span><br><span class=\"line\">llama_print_timings:       total time =    7536.04 ms</span><br></pre></td></tr></table></figure>\n"},{"title":"llama2","url":"/2023/12/24/llama2-c/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><h3 id=\"llama2-参数量计算\"><a href=\"#llama2-参数量计算\" class=\"headerlink\" title=\"llama2 参数量计算\"></a>llama2 参数量计算</h3><ol>\n<li>见 transformer 参数计算</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/649125936\">LLAMA2 的参数计算</a></li>\n<li><a href=\"https://medium.com/@saratbhargava/mastering-llama-math-part-1-a-step-by-step-guide-to-counting-parameters-in-llama-2-b3d73bc3ae31\">Mastering Llama Math (Part-1): A Step-by-Step Guide to Counting Parameters in Llama-2</a></li>\n<li><code>窗口长度, 上下文长度(Context Length)</code>指的是模型在做预测时能够看到的上下文单词的数量。具体来说,在 transformer 等注意力机制的模型中,输入是一个定长的窗口,窗口中的每个词会通过自注意力机制关联到窗口中的其他词。这个窗口的长度就是上下文长度。</li>\n<li><code>词向量</code>：embeding 层的输出就是词向量</li>\n<li>推理时间复杂度：整体级别是 l<em>n</em>d^2+l<em>d</em>n^2，其中：d 是词向量维度，n 是窗口或序列长度，l：层数<ul>\n<li>无论是窗口长度还是词向量维度，都会让推理时间呈平方指数级上升。</li>\n<li>层数对推理时间的影响是线性的。</li>\n<li>而词表大小对推理时间基本没有影响。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"长文本-输入输出更长-token\"><a href=\"#长文本-输入输出更长-token\" class=\"headerlink\" title=\"长文本(输入输出更长 token)\"></a>长文本(输入输出更长 token)</h3><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/657210829\">大模型长文本建模的难点与方案</a></li>\n<li><a href=\"https://36kr.com/p/2470939687950470\">卷完参数后，大模型公司又盯上了“长文本”？</a></li>\n</ol>\n<h2 id=\"llama2-c\"><a href=\"#llama2-c\" class=\"headerlink\" title=\"llama2.c\"></a><a href=\"https://github.com/karpathy/llama2.c\">llama2.c</a></h2><ol>\n<li><a href=\"https://www.youtube.com/watch?v=zjkBMFhNj_g\">Intro to Large Language Models</a> ka</li>\n<li><a href=\"https://github.com/facebookresearch/llama/blob/main/llama/model.py\">python 推理代码</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=oM4VmoabDAI\">Coding LLaMA 2 from scratch in PyTorch - KV Cache, Grouped Query Attention, Rotary PE, RMSNorm</a></li>\n<li>build and run</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/karpathy/llama2.c.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> llama2.c</span><br><span class=\"line\">make run; make rundebug</span><br><span class=\"line\">wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories15M.bin</span><br><span class=\"line\">./run stories15M.bin</span><br><span class=\"line\">make runfast  <span class=\"comment\"># 加速运行， 80 tok/s =&gt; 180 tok/s</span></span><br><span class=\"line\">make runomp &amp;&amp; OMP_NUM_THREADS=4 ./run out/model.bin <span class=\"comment\"># 多核加速， from 80 tok/s =&gt; 320 tok/s 主要加速matmul</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码理解\"><a href=\"#代码理解\" class=\"headerlink\" title=\"代码理解\"></a>代码理解</h3><ol>\n<li>固定长 n 的 kv cache, 并且最大支持 n 的序列，使用 for 循环计算 attention，没有使用矩阵乘， 不用移动 kv cache; 矩阵乘时需要 kv cache 是矩阵，如果 kv cache 矩阵 padding, 是固定长, 需要移动 cache</li>\n<li><code>Tokenizer, Transformer, Sampler</code> 三大部分</li>\n<li>tokenizer 也是一个模型，需要训练</li>\n<li>Tokenizer 的主要作用是将自然语言文本转换为机器学习模型可以理解的格式。这通常意味着将文本拆分成词汇、子词或字符单元（即 tokens），然后将这些 tokens 转换为数字 ID。这些 ID 对应于模型的词汇表中的索引。</li>\n<li>当有 prompt 时，有预热过程，从第一个 prompt_tokens 开始推理，if we are still processing the input prompt, force the next prompt token， otherwise sample the next token from the logits</li>\n<li>Sampler 的主要作用是根据模型输出的 logits（未归一化的概率对数）来决定下一个生成的 token</li>\n<li>Temperature Scaling：通过温度参数调整 logits。温度较低（&lt;1）会使 softmax 输出分布更加尖锐（更确定），温度较高（&gt;1）则使分布更平滑（更随机），由 softmax 前的 scale 决定</li>\n<li>采样策略对生成文本的质量和多样性有显著影响。例如，argmax 采样可能导致非常重复和可预测的文本，而合适的随机采样可以增加多样性和创造性，同时保持文本的连贯性和可读性。通过合理配置 temperature 和 topp 参数，可以在随机性和确定性之间找到平衡，生成符合预期的文本。</li>\n<li>top-p 采样：<ul>\n<li>模型输出的 logits（未归一化的概率对数），转换为 softmax 概率</li>\n<li>创建一个结构体数组，每个元素包含 token 的索引和对应的概率。</li>\n<li>概率小于 cutoff 过滤掉</li>\n<li>排序</li>\n<li>计算累计概率， 累计概率超过 topp 后不选择</li>\n<li>随机数*累计概率；找到这个随机数对应的累积概率区间内的 token。</li>\n<li>返回所选 token 的索引</li>\n<li>控制生成质量：通过调整 p 的值，可以控制生成文本的随机性和确定性。较低的 p 值会导致更确定性的输出（更少的 token 可供选择），而较高的 p 值会增加输出的多样性。</li>\n<li>避免不合理的 token：Top-p 采样可以有效地避免选择那些极不可能的 token，这对于生成更加连贯和自然的文本至关重要。</li>\n</ul>\n</li>\n<li>前馈神经网络（Feed-Forward Neural Network, <code>FFN</code>）</li>\n<li><code>forward</code> 跟 all you need is attention 论文描述的结构非常像</li>\n<li>相对位置编码（RoPE）：模型利用 RoPE 来给序列中的每个 token 引入位置信息。这种方式与原始 Transformer 中的绝对位置编码不同。</li>\n<li>对于每个输入 token， 生成 q, k, v, q 用来和之前的 k 做 attention 得到 scores, scores 和 k 做加权得到多头输出; 缓存 k, v 用于之后的推理</li>\n<li>q 和之前所有 k 做 attension, 结果在和 v 做加权</li>\n<li><a href=\"https://paperswithcode.com/method/grouped-query-attention\">grouped-query-attention</a></li>\n<li>Config 中通过 n_heads 和 n_kv_heads 可以看出是 multi-head, group-query, multi-query； 相同时（不为 1）是 multi-head, 都为 1 时是 multi-query; n_kv_heads &lt; n_heads 时是 group_query</li>\n<li>MQA，全称 Multi Query Attention, 而 GQA 则是前段时间 Google 提出的 MQA 变种，全称 Group-Query Attention。MHA（Multi-head Attention）是标准的多头注意力机制，h 个 Query、Key 和 Value 矩阵。</li>\n<li>推理的过程是一个自回归的过程，也就是说前 i 次的 token 会作为第 i+1 次的预测数据送入模型，拿到第 i+1 次的推理 token。</li>\n<li>embedding 还能起到降维的作用，将 one-hot 的[s,vocab_size]大小变成了[s,d]。</li>\n<li>在大多数基于 Transformer 的模型中，embedding 层输出的词向量维度通常与 Transformer 的隐藏层(attention layer)维度（也称为 Transformer dimension）相匹配。</li>\n<li>Config 中的 dim 和 hidden_dim:<ul>\n<li>dim（Transformer Dimension）: 这个参数指的是 Transformer 模型中主要的隐藏层维度。在标准的 Transformer 模型中，这包括自注意力层（Self-Attention Layer）的输出维度和 embedding 层的维度。因此，dim 通常与 embedding 层输出的词向量的大小相匹配。</li>\n<li>hidden_dim（Feed-Forward Network Dimension）: 这个参数指的是 Transformer 模型中前馈网络（Feed-Forward Network, FFN）层的内部隐藏层的维度。FFN 是 Transformer 每个注意力层之后的一个子层，它的维度通常与主要隐藏层维度不同。这个维度通常更大，用于在模型中引入额外的非线性。</li>\n</ul>\n</li>\n<li>Config 中的窗口长度等于 seq_len， 词向量维度等于 dim</li>\n</ol>\n<h3 id=\"embedding-和-tokenizer-的区别\"><a href=\"#embedding-和-tokenizer-的区别\" class=\"headerlink\" title=\"embedding 和 tokenizer 的区别\"></a>embedding 和 tokenizer 的区别</h3><ol>\n<li>Tokenizer 是第一步：它将原始文本转换为一系列的 token 索引。Embedding 是第二步：利用这些索引在 embedding 层中查找或生成每个 token 的向量表示。互补关系：Tokenizer 和 embedding 层一起工作，将自然语言文本转换为机器学习模型可以有效处理的数值形式。</li>\n<li>tokenizer 负责将文本转换为一系列的 token，而 embedding 则负责将这些 token 转换为机器学习模型可以理解的语义向量。</li>\n<li>通过 token_embedding_table 查找 token 对应的的向量</li>\n</ol>\n<h3 id=\"模型基本结构\"><a href=\"#模型基本结构\" class=\"headerlink\" title=\"模型基本结构\"></a>模型基本结构</h3><ol>\n<li>层的堆叠：模型由多个相同的层堆叠而成，每层包含两个主要子模块：多头自注意力（Multi-Head Self-Attention）和前馈神经网络（Feed-Forward Neural Network, FFN）。</li>\n</ol>\n<h2 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h2><ol>\n<li>openmp 加速会获得较大加速比, 编译选项加<code>-fopenmp -march=native</code></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">matmul</span><span class=\"params\">(<span class=\"type\">float</span>* xout, <span class=\"type\">float</span>* x, <span class=\"type\">float</span>* w, <span class=\"type\">int</span> n, <span class=\"type\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// W (d,n) @ x (n,) -&gt; xout (d,)</span></span><br><span class=\"line\">    <span class=\"comment\">// by far the most amount of time is spent inside this little function</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">pragma</span> omp parallel for private(i)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; d; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> val = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            val += w[i * n + j] * x[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xout[i] = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://chat.openai.com/c/4e520557-e827-40c5-9357-db76b5a5e6ba\">chatgpt 解释</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/651248009\">一文看懂 llama2(原理,模型,训练)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/83814532\">Embedding 的作用</a></li>\n<li><a href=\"https://kexue.fm/archives/9529\">为什么现在的 LLM 都是 Decoder-only 的架构？</a></li>\n<li><a href=\"https://github.com/ggerganov/ggml/blob/master/docs/gguf.md\">gguf doc</a></li>\n<li><a href=\"https://github.com/mit-han-lab/streaming-llm\">pytorch llama</a></li>\n<li><a href=\"https://github.com/hpcaitech/SwiftInfer?tab=readme-ov-file\">tensorrt llm llama</a></li>\n</ol>\n"},{"title":"llm.c","url":"/2024/06/14/llm-c/","content":"<h2 id=\"download-models\"><a href=\"#download-models\" class=\"headerlink\" title=\"download models\"></a>download models</h2><ol>\n<li>gitee</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/hf-models/openai-community-gpt2.git</span><br><span class=\"line\">cd gpt2</span><br><span class=\"line\">apt install git-lfs</span><br><span class=\"line\">git lfs pull</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/karpathy/llm.c\">karpathy&#x2F;llm.c</a></li>\n<li><a href=\"https://gitee.com/hf-models/openai-community-gpt2.git\">gitee hugging face gpt2</a></li>\n</ol>\n"},{"title":"log","url":"/2022/09/30/log/","content":"<h2 id=\"glog\"><a href=\"#glog\" class=\"headerlink\" title=\"glog\"></a>glog</h2><ol>\n<li><code>GLOG_colorlogtostderr=1 ./test</code> 输出彩色</li>\n<li><code>GLOG_alsologtostderr=false</code> 关闭 log</li>\n<li>export GLOG_log_dir&#x3D;.&#x2F;log_tmp 输入 log 到 log_tmp 目录下</li>\n</ol>\n<h2 id=\"logrotate\"><a href=\"#logrotate\" class=\"headerlink\" title=\"logrotate\"></a>logrotate</h2><ol>\n<li>使用 logrotate 实现 log 循环覆盖功能，将 log 文件限制在一定大小。由于 logrotate 程序不能解决多文件未知变量名的情况，讨论了一下解决办法，设置环境变量 GLOG_max_log_size&#x3D;1，使得程序输出的 log 被分片，每片最大为 1M,然后使用脚本保留最新的几片 log，从而控制 log 的大小在一定范围内。</li>\n</ol>\n<p><a href=\"https://www.cnblogs.com/kevingrace/p/6307298.html\">https://www.cnblogs.com/kevingrace/p/6307298.html</a> 配置</p>\n<p><a href=\"http://blog.csdn.net/hxh129/article/details/8178647\">http://blog.csdn.net/hxh129/article/details/8178647</a> 指定文件大小，超过就转存</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">size=`ll /var/log/messages | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 5`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$size</span> -ge xxxxx ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">logrotate  /xxx/xxx.conf;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"logrotate-功能\"><a href=\"#logrotate-功能\" class=\"headerlink\" title=\"logrotate 功能\"></a>logrotate 功能</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">sleep</span> 15; <span class=\"keyword\">do</span></span><br><span class=\"line\">        file_num=`<span class=\"built_in\">ls</span> -l |grep <span class=\"string\">&quot;^-&quot;</span>|<span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$file_num</span>&quot;</span> -gt 8 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                rm_num=$((<span class=\"variable\">$file_num</span> - <span class=\"number\">8</span>))</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">ls</span> -t /tmp | <span class=\"built_in\">tail</span> -n <span class=\"variable\">$rm_num</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">                        <span class=\"built_in\">rm</span> <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">done</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">sleep</span> 15; <span class=\"keyword\">do</span></span><br><span class=\"line\">        file_num=`<span class=\"built_in\">ls</span> -l |grep <span class=\"string\">&quot;^-&quot;</span>|<span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$file_num</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$file_num</span>&quot;</span> -gt 8 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                rm_num=$((<span class=\"variable\">$file_num</span> - <span class=\"number\">8</span>))</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$rm_num</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">ls</span> -lt</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">ls</span> -t /tmp | <span class=\"built_in\">tail</span> -n <span class=\"variable\">$rm_num</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">                        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;clear log file <span class=\"variable\">$i</span>&quot;</span>;</span><br><span class=\"line\">                        <span class=\"built_in\">rm</span> <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> || <span class=\"built_in\">echo</span> ok</span><br><span class=\"line\">                <span class=\"keyword\">done</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">alive_counter=0</span><br><span class=\"line\">prog=run_smartsv</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">sleep</span> 5; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $((alive_counter % <span class=\"number\">5</span> )) -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">        file_num=`<span class=\"built_in\">ls</span> -l |grep <span class=\"string\">&quot;^-&quot;</span>|<span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$file_num</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$file_num</span>&quot;</span> -gt 6 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                rm_num=$((<span class=\"variable\">$file_num</span> - <span class=\"number\">6</span>))</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$rm_num</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">ls</span> -lt</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">ls</span> -t /tmp | <span class=\"built_in\">tail</span> -n <span class=\"variable\">$rm_num</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">                        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;clear log file <span class=\"variable\">$i</span>&quot;</span>;</span><br><span class=\"line\">                        <span class=\"built_in\">rm</span> <span class=\"string\">&quot;<span class=\"variable\">$i</span>&quot;</span> || <span class=\"built_in\">echo</span> ok</span><br><span class=\"line\">                <span class=\"keyword\">done</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n"},{"title":"magit","url":"/2022/06/24/magit/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><code>C-h m</code> 查看 magit 快捷键</li>\n<li><code>$</code> 查看具体命令及历史</li>\n<li><code>S-tab</code></li>\n<li><code>M-2</code> magit-section-show-level-2-all</li>\n<li><code>y</code> show branchs and tags</li>\n<li><code>du</code> and <code>ds</code>: diff unstaged and staged</li>\n<li><code>X</code> reset: 撤销，commit 不保存记录</li>\n<li><code>V</code> revert: 撤销， 保存 commit 撤销记录</li>\n<li><code>AA</code> + <code>commit id</code>: cherry pick 将某次提交应用到当前分支</li>\n</ol>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><ol>\n<li>修改： <code>c</code> &#x3D;&gt; <code>w</code> &#x3D;&gt; <code>C-c C-c</code></li>\n<li>合并： magit: rebase <code>r</code> &#x3D;&gt;<code>i</code> &#x3D;&gt; <code>C-c C-c</code> &#x3D;&gt; <code>f .. f</code> &#x3D;&gt; <code>C-c C-c</code></li>\n<li><code>ce</code> Extend 当前 Staged 的文件合并到上一次提交中 git commit –amend –no-edit</li>\n<li><code>ca</code> Amend 只修改上次提交的日志 git commit –amend</li>\n</ol>\n<h2 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h2><ol>\n<li><code>tt</code>: create tag</li>\n<li><code>pt</code>: push all tags</li>\n</ol>\n<h2 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h2><ol>\n<li>单一文件：<ul>\n<li>stage</li>\n<li><code>zi</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"command-such-as-add-a-new-file-in-a-directory\"><a href=\"#command-such-as-add-a-new-file-in-a-directory\" class=\"headerlink\" title=\"command (such as: add a new file in a directory)\"></a>command (such as: add a new file in a directory)</h2><ol>\n<li><code>!</code> run git command</li>\n<li><code>!!</code> run git command in current repo root path</li>\n</ol>\n"},{"title":"matplotlib","url":"/2023/07/05/matplotlib/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://matplotlib.org/stable/gallery/index.html\">examples</a></li>\n<li><a href=\"https://matplotlib.org/stable/tutorials/introductory/pyplot.html\">tutorials</a></li>\n</ol>\n"},{"title":"model-compression","url":"/2024/01/10/model-compression/","content":"<h2 id=\"quantization-量化\"><a href=\"#quantization-量化\" class=\"headerlink\" title=\"quantization 量化\"></a>quantization 量化</h2><h2 id=\"pruning-剪枝\"><a href=\"#pruning-剪枝\" class=\"headerlink\" title=\"pruning 剪枝\"></a>pruning 剪枝</h2><h3 id=\"稀疏化\"><a href=\"#稀疏化\" class=\"headerlink\" title=\"稀疏化\"></a>稀疏化</h3><ol>\n<li><a href=\"https://blog.csdn.net/u013010889/article/details/53305595\">scipy csr_matrix 和 csc_matrix 函数详解</a></li>\n</ol>\n<h2 id=\"knowledge-distillation-蒸馏\"><a href=\"#knowledge-distillation-蒸馏\" class=\"headerlink\" title=\"knowledge distillation 蒸馏\"></a>knowledge distillation 蒸馏</h2><h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://xailient.com/blog/4-popular-model-compression-techniques-explained/\">4-popular-model-compression-techniques-explained</a></li>\n</ol>\n"},{"title":"multimodal","url":"/2023/12/19/multimodal/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://openai.com/research/clip\">clip</a> <a href=\"https://imzhanghao.com/2022/10/27/multimodal-learning/\">multimodal-learning 中文解析</a></li>\n</ol>\n"},{"title":"neon","url":"/2023/03/23/neon/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>新的 Armv8a 架构有 32 个 128bit 向量寄存器，老的 ArmV7a 架构有 32 个 64bit（可当作 16 个 128bit）向量寄存器，编码时记得数一下占用多少个专用寄存器（例如 1 个 float32x4 就占用 1 个 128bit 寄存器），别用过量了，避免寄存器溢出 (Register Spilling）(<a href=\"https://blog.csdn.net/qq_41112170/article/details/90286091\">https://blog.csdn.net/qq_41112170/article/details/90286091</a>) 导致的负优化。</li>\n<li>armv8: 一条 Neon 指令最多可以计算 4 个 float32，或者 8 个 float16，或者 16 个 int8。</li>\n<li><code>uint8x16_t</code> 表示 16 个 uint8</li>\n<li><code>float32x4_t</code> 表示 4 个 float32</li>\n</ol>\n<h2 id=\"intrinsics\"><a href=\"#intrinsics\" class=\"headerlink\" title=\"intrinsics\"></a><a href=\"https://developer.arm.com/architectures/instruction-sets/intrinsics/\">intrinsics</a></h2><ol>\n<li></li>\n</ol>\n<h2 id=\"要使用-NEON-加速步骤：\"><a href=\"#要使用-NEON-加速步骤：\" class=\"headerlink\" title=\"要使用 NEON 加速步骤：\"></a>要使用 NEON 加速步骤：</h2><ol>\n<li><code>load</code> 将相关数组数据加载到 NEON 寄存器。</li>\n<li><code>calculate</code> 使用 NEON 指令对多个数据元素进行并行操作。</li>\n<li><code>store</code> 将结果从 NEON 寄存器存储回主存储器。</li>\n</ol>\n<h2 id=\"编译选项\"><a href=\"#编译选项\" class=\"headerlink\" title=\"编译选项\"></a>编译选项</h2><ol>\n<li>j5 需要 <code>-ftree-vectorize -funroll-loops</code> 组合才能优化，单独不行</li>\n<li><code>-mfpu=neon</code> 此选项告诉编译器要为 NEON 浮点单元生成代码。这适用于较老的 ARM 架构和编译器版本。</li>\n<li><code>-march</code> 使用此选项指定目标架构，例如<code>-march=armv8-a</code>。这可以确保编译器针对特定的 ARM 版本生成优化代码。</li>\n<li><code>-mfloat-abi</code> 该选项定义了浮点数应该如何在函数调用中传递。有三个选项可以选择：soft、softfp 和 hard。使用 NEON 时，通常建议使用-mfloat-abi&#x3D;hard。</li>\n<li><code>-ftree-vectorize</code> 这是一个优化选项，允许编译器自动将循环转换为使用向量指令。虽然这不是直接与 NEON 相关的，但它可以帮助自动利用 NEON 功能。</li>\n<li><code>-funroll-loops</code>这也是一个优化选项，用于循环展开，可能有助于提高 NEON 代码的性能。</li>\n</ol>\n<h2 id=\"SVE-Scalable-Vector-Extension\"><a href=\"#SVE-Scalable-Vector-Extension\" class=\"headerlink\" title=\"SVE(Scalable Vector Extension)\"></a>SVE(Scalable Vector Extension)</h2><ol>\n<li>是 arm AArch64 架构下的下一代 SIMD 指令集，旨在加速高性能计算，SVE 引入了很多新的架构特点</li>\n<li>SVE（可扩展矢量指令 Scalable Vector Extension）是针对高性能计算（HPC）和机器学习等领域开发的一套全新的矢量指令集，它是下一代 SIMD 指令集实现，而不是 NEON 指令集的简单扩展。SVE 指令集中有很多概念与 NEON 指令集类似，例如矢量、通道、数据元素等。SVE 指令集也提出了一个全新的概念：可变矢量长度编程模型(VectorLength Agnostic，VLA)。</li>\n<li>SVE 指令集的矢量寄存器的长度最小支持 128 位，最大可以支持 2048 位，以 128 位为增量。</li>\n<li>SVE 指令集是在 A64 指令集的基础上新增的一组指令集，而 SVE2 是在 ARMv9 架构上发布的，它是 SVE 指令集的一个超集和扩充。</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/399686472\">ARMv9 的 SVE&#x2F;SVE2 入门教程</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"http://www.armadeus.org/wiki/index.php?title=NEON_HelloWorld\">hello world</a></li>\n<li><a href=\"https://github.com/Ewenwan/MVision/blob/master/CNN/HighPerformanceComputing/ARM_NEON_CNN%E7%BC%96%E7%A8%8B.md\">ARM_NEON_CNN 编程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/441686632\">CPU 优化技术-NEON 指令介绍</a></li>\n</ol>\n"},{"title":"nvidia","url":"/2023/11/10/nvidia/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://epochai.org/blog/trends-in-machine-learning-hardware\">trends-in-machine-learning-hardware</a></li>\n<li><code>export CUDA_VISIBLE_DEVICES=0,1</code>强制使用哪几个 GPU 上</li>\n<li>sdk manager 图像界面安装各种工具</li>\n<li>fp32 -&gt; fp16(int8)是否加速要看芯片手册</li>\n<li>芯片手册中有 cuda core 算力和 tensor core 算力 <a href=\"https://www.nvidia.com/content/PDF/nvidia-ampere-ga-102-gpu-architecture-whitepaper-v2.pdf\">link</a><ul>\n<li>3090 的 cuda core int32 算力是 fp21 的一半</li>\n<li>3090 的 cuda core fp32 和 fp16 算力一样</li>\n<li>3090 的 fp32 cuda core 和 tensor core 算力一样</li>\n<li>3090 的 tensor core fp16 算力是 fp32 的 2 倍或 4 倍</li>\n<li>3070 一样的现象</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"查看-GPU-info\"><a href=\"#查看-GPU-info\" class=\"headerlink\" title=\"查看 GPU info\"></a>查看 GPU info</h2><ol>\n<li><p><a href=\"https://github.com/nvidia/cuda-samples\">cuda-sample</a> 见 cuda.md</p>\n<ul>\n<li><code>cd /usr/local/cuda-12/samples/1_Utilities/deviceQuery &amp;&amp; make &amp;&amp; ./deviceQuery</code> 查看 gpu 详细信息,<ul>\n<li>arch: 3080， 3090 是 sm_86, orin 是 sm_87</li>\n<li>sm num</li>\n<li>cuda core num &#x2F; per sm</li>\n<li>Maximum number of threads per block</li>\n<li>Maximum number of threads per multiprocessor</li>\n<li>Max dimension size of a thread block (x,y,z)</li>\n<li>Max dimension size of a grid size (x,y,z)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>通过对比 sm 个数等信息可以估算大致性能差距</p>\n</li>\n<li><p>查看 driver 版本 <code>cat /proc/driver/nvidia/version</code></p>\n</li>\n</ol>\n<h3 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h3><ol>\n<li><code>nvitop</code></li>\n<li><code>nvtop</code> 有风险</li>\n<li><a href=\"https://github.com/wookayin/gpustat\">gpustat</a><ul>\n<li>不要用源码装：否则 NVML 版本不匹配</li>\n</ul>\n</li>\n<li><a href=\"https://www.cnblogs.com/michaelcjl/p/16657548.html\">nvidia-smi 命令参数含义</a></li>\n<li><code>nvidia-smi</code> 可以看出每个 GPU 的显存总量和使用量 还可以看到 cuda 版本</li>\n<li><code>nvidia-smi -L</code>列出 GPU 列表, 查看 GPU 先开显卡型号</li>\n<li><code>nvidia-smi -l 1</code> 会每秒更新一次显示信息。<code>watch -n 1 nvidia-smi</code> 类似 top</li>\n<li><code>nvidia-smi -q</code> 查看 GPU 信息</li>\n<li><code>free -h</code> 看内存，注意服务器上内存和显存不一样, 不共享; PCIe 接在服务器上。 服务器市场的需求与集成设备（如 Jetson 系列）不同。服务器用户通常需要高度定制化的解决方案，可以独立升级和优化各个组件，而集成设备则更注重成本效益和空间效率。</li>\n<li>加速器：不包含 arm</li>\n</ol>\n<h2 id=\"edge\"><a href=\"#edge\" class=\"headerlink\" title=\"edge\"></a>edge</h2><ol>\n<li>SOC: 包含 arm</li>\n<li>NVIDIA Jetson 系列设备，包括像 Jetson Nano、Jetson TX1&#x2F;TX2、Jetson Xavier、 Jetson Orin 等，使用的是 NVIDIA 的 <code>Tegra</code> 架构。在这种架构中，CPU 和 GPU 确实共享内存，这被称为<code>统一内存（Unified Memory）或共享内存</code>。</li>\n<li>统一内存的优缺点：<a href=\"https://chat.openai.com/c/c4285778-9988-4bba-80b2-0ae08689af88\">link</a><ul>\n<li>优点：简化编程模型， 提高效率</li>\n<li>缺点：内存访问延迟，带宽限制，复杂的内存管理</li>\n</ul>\n</li>\n<li>tegra 是 SOC 架构</li>\n<li><code>jtop</code> <a href=\"https://github.com/rbonghi/jetson_stats\">jetson_stats</a> jetson-stats is a package for monitoring and control your NVIDIA Jetson [Orin, Xavier, Nano, TX] series.</li>\n<li><code>jetson_release</code></li>\n</ol>\n<h2 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h2><ol>\n<li><a href=\"https://www.techpowerup.com/gpu-specs/\">gpu specs</a></li>\n</ol>\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><ol>\n<li><code>FLOPS = 2 x freqs * cores</code> fma 有 2 个 flop， f32 性能 cores 就是 f32 cuda core number</li>\n</ol>\n<h3 id=\"memory\"><a href=\"#memory\" class=\"headerlink\" title=\"memory\"></a>memory</h3><ol>\n<li><code>B/s = bps * width / 8</code></li>\n</ol>\n<h3 id=\"pcie\"><a href=\"#pcie\" class=\"headerlink\" title=\"pcie\"></a>pcie</h3><h2 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h2><ol>\n<li>性能参数：产品 -&gt; 规格</li>\n<li><a href=\"https://www.nvidia.cn/autonomous-machines/embedded-systems/\">边缘计算产品</a> 查看模组对比， 可以看到各个芯片的参数<ul>\n<li><a href=\"https://developer.nvidia.com/embedded/develop/roadmap\">jetson roadmap</a></li>\n</ul>\n</li>\n<li>数据中心： A, H, L, V 系列<ul>\n<li><a href=\"https://www.nvidia.cn/data-center/h100/\">H100 性能参数</a> 游戏：RTX, GTX</li>\n<li>RTX: Ray Tracing eXtreme</li>\n<li>GTX: Graphics Processor protoType eXtreme</li>\n<li><a href=\"https://www.nvidia.cn/geforce/graphics-cards/compare/?section=compare-specs\">GeForce 显卡比较</a></li>\n<li>在 NVIDIA 的 GeForce 系列显卡中，Ti 是一个特殊的标识，用来表示某个型号的改进或升级版。从本意来讲，TI 属于’Titanium’的缩写，和太空金属’钛’是一个意思，在显卡中他代表着更高级版本。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><ol>\n<li>搜 white paper 看细节</li>\n<li><a href=\"https://www.nvidia.com/en-us/design-visualization/ampere-architecture/\">ampere-architecture 官方架构详细介绍</a></li>\n<li><a href=\"https://www.nvidia.com/en-us/data-center/technologies/hopper-architecture/\">hopper-architecture</a><ul>\n<li>下方的白皮书</li>\n<li>手册中有芯片 cuda core 算力和 tensor core 算力</li>\n<li>利用 tensor core 才能达到最大算力</li>\n<li>int32 不一定有 float32 算力高，因为 float32 计算单元更多</li>\n<li>多关注 SM 架构<br><img src=\"https://i.ibb.co/2c186WT/g-LTQhd-K40g.png\" alt=\"sm\"></li>\n</ul>\n</li>\n<li><a href=\"https://docs.nvidia.com/nsight-compute/2023.3/ProfilingGuide/index.html#metrics-hw-model\">Hardware Model</a><ul>\n<li>对 sm 介绍比较好</li>\n</ul>\n</li>\n<li>可以从架构图上看出一个 SM 有多少个 cuda core</li>\n<li><a href=\"https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list\">cuda-compiler-driver-nvcc gpu-feature-list</a></li>\n<li><a href=\"https://blog.csdn.net/kunhe0512/article/details/126247243\">https://blog.csdn.net/kunhe0512/article/details/126247243</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/394352476\">NVIDIA GPU 架构梳理</a></li>\n<li>天梯图</li>\n<li>架构演进</li>\n<li>tegra 是 SOC 架构, tesla 是 GPU 架构</li>\n<li>NVIDIA GeForce RTX 3090 使用的是 NVIDIA 的 Ampere 架构 sm_86</li>\n<li>NVIDIA Jetson Orin 是基于 NVIDIA 的 Ampere 架构的高性能 AI 计算平台</li>\n<li>CUDA_ARCHS 是指定 CUDA 代码编译目标 NVIDIA GPU 架构的编译标志。</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/631850036\">为各种 NVIDIA 架构匹配 CUDA arch 和 CUDA gencode</a></li>\n<li>架构历史</li>\n<li><a href=\"https://www.baseten.co/blog/understanding-nvidias-datacenter-gpu-line/\">understanding-nvidias-datacenter-gpu-line</a><br><img src=\"https://i.ibb.co/hZVxQFd/ZEI0-D9zw-C5.png\" alt=\"历史\"></li>\n</ol>\n<h2 id=\"JetPack\"><a href=\"#JetPack\" class=\"headerlink\" title=\"JetPack\"></a><a href=\"https://docs.nvidia.com/jetson/jetpack/introduction/index.html\">JetPack</a></h2><ol>\n<li>NVIDIA JetPack SDK is the most comprehensive solution for building AI applications. JetPack SDK provides a full development environment for hardware-accelerated AI-at-the-edge development.JetPack SDK includes Jetson Linux Driver Package with bootloader, Linux kernel, Ubuntu desktop environment, and a complete set of libraries for acceleration of GPU computing, multimedia, graphics, and computer vision. It also includes samples, documentation, and developer tools for both host computer and developer kit, and supports higher level SDKs such as DeepStream for streaming video analytics, Isaac for robotics and Riva for conversational AI.</li>\n</ol>\n<h2 id=\"vpi\"><a href=\"#vpi\" class=\"headerlink\" title=\"vpi\"></a><a href=\"https://docs.nvidia.com/vpi/algorithms.html\">vpi</a></h2><ol>\n<li>支持多种硬件做前处理, 如 resize, convert color, remap (VIC 都支持，可以释放 GPU 资源)</li>\n</ol>\n"},{"title":"ollama","url":"/2024/03/19/ollama/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://github.com/ollama/ollama\">ollama&#x2F;ollama</a></li>\n<li><a href=\"https://github.com/ollama-ui/ollama-ui\">ollama-ui&#x2F;ollama-ui</a></li>\n<li><a href=\"https://github.com/open-webui/open-webui\">open-webui&#x2F;open-webui</a></li>\n<li>可以在多个操作系统上开启大语言模型服务</li>\n<li>windows 先安装 ollama 工具，在 powershell 上可以运行</li>\n<li><code>ollama run llama2</code></li>\n<li><code>ollama run gemma:2b</code></li>\n<li><code>ollama serve</code></li>\n</ol>\n"},{"title":"onnx","url":"/2022/04/14/onnx-md/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>打印信息</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> onnx</span><br><span class=\"line\">model = onnx.load(<span class=\"string\">&#x27;linear_func.onnx&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(model)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>wget https://github.com/onnx/models/raw/b9a54e89508f101a1611cd64f4ef56b9cb62c7cf/vision/classification/resnet/model/resnet50-v2-7.onnx</code></li>\n<li><a href=\"https://github.com/onnx/onnx/blob/main/docs/Operators.md#resize\">resize 算子示例</a><ul>\n<li>Attributes(注意和输入区别)</li>\n<li>Inputs</li>\n<li>Outputs</li>\n<li>Examples</li>\n</ul>\n</li>\n<li><code>model = onnx.load(&quot;mnist_cc.onnx&quot;)</code> 模型无结构信息，print(model)无结果，model 是 onnx.onnx_ml_pb2.ModelProto 类型</li>\n<li>vscode 使用 vscode-netron 可以和源码一起对比看</li>\n<li>onnx: 奥尼克死</li>\n<li>vscode 打开 onnx 文件，可以看出 op 生成所依赖的文件路径</li>\n<li>onnx 支持设置明确 batch size. By default, TensorFlow does not set an explicit batch size. <a href=\"https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-861/quick-start-guide/index.html#onnx-export\">link</a></li>\n<li>why onnx?<br><img src=\"https://pic2.zhimg.com/80/v2-3214168ce95096026d2079623342317d_720w.webp\" alt=\"onnx 流程\"></li>\n<li>ONNX （Open Neural Network Exchange）</li>\n<li>ONNX 文件不仅仅存储了神经网络模型的权重，同时也存储了模型的结构信息以及网络中每一层的输入输出和一些其它的辅助信息。</li>\n<li>ONNX 使用的是 Protobuf 这个序列化数据结构去存储神经网络的权重信息。</li>\n<li>onnx 实现了一个 python 运行时，可用于评估 ONNX 模型和评估 ONNX 操作。目的是阐明 ONNX 的语义并帮助理解和调试 ONNX 工具和转换器。它无意用于生产，性能也不是目标</li>\n<li>ONNX 是强类型的，其定义不支持隐式强制转换。</li>\n<li>Constant 值预先已知，用于存 weights 和 bias,</li>\n<li>Variable 值在推理时之前未知，但可能包含有关数据类型和形状的信息。用于存中间结果</li>\n<li>Constant 和 Variable 都是 tensor</li>\n<li>在 ONNX (Open Neural Network Exchange) 模型中，”attributes” 是与模型的各个节点或算子相关联的关键信息。这些属性为算子提供了额外的规范和配置信息，使得算子能够正确执行其预定的操作。理解属性在 ONNX 模型中的作用是重要的，尤其是在模型转换、优化或理解模型行为时。</li>\n<li>属性用于指定算子的具体行为。例如，在一个卷积算子中，属性可以定义卷积核的大小、步长（stride）、填充（padding）等。</li>\n<li>不变参数(weights bias div mul 需要的参数)使用 constant tensor 类型，输入是 variable tensor, attributes 是 op <code>初始化</code>用到的数值， 计算不用</li>\n<li>onnx 模型 variable tensor 不需要 type 信息，转化后才有信息; weights 有 type 信息</li>\n</ol>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><h3 id=\"netron\"><a href=\"#netron\" class=\"headerlink\" title=\"netron\"></a>netron</h3><ol>\n<li>神经网络本质上是一个计算图。计算图的节点是算子，边是参与运算的张量</li>\n<li>线是 tensor, 方块是 op，op 中的 weight 也是 tensor, op 中的 type 是算子类型，输入 tensor 和 op weight 根据算子类型和参数计算得到输出 tensor</li>\n<li>op 可以想象成函数，tensor 和属性是函数输入输出参数</li>\n<li><a href=\"https://github.com/lutzroeder/netron?tab=readme-ov-file#models\">samples 直接看</a></li>\n<li><a href=\"https://hiranh.medium.com/visualize-keras-neural-networks-with-netron-9d3f9b3e4b5a\">可以显示 type shape 等信息</a></li>\n<li>显示 shape 信息（需要实例）</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> onnx <span class=\"keyword\">import</span> shape_inference</span><br><span class=\"line\">model = onnx.load(<span class=\"string\">&quot;mnist_cc.onnx&quot;</span>)</span><br><span class=\"line\">inferred_model = shape_inference.infer_shapes(model)</span><br><span class=\"line\">onnx.save(inferred_model, <span class=\"string\">&quot;shape.onnx&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>netron 点击 input 或 output 可以显示模型整体信息</li>\n<li>netron 查看 weights 需要点击+</li>\n<li>netron 左侧菜单栏可以点击 toggle names, weights, attributes</li>\n<li>Netron supports ONNX, TensorFlow Lite, Core ML, Keras, Caffe, Darknet, MXNet, PaddlePaddle, ncnn, MNN and TensorFlow.js. Netron has experimental support for PyTorch, TorchScript, TensorFlow, OpenVINO, RKNN, MediaPipe, ML.NET and scikit-learn.</li>\n</ol>\n<h3 id=\"onnx-simplifier\"><a href=\"#onnx-simplifier\" class=\"headerlink\" title=\"onnx-simplifier\"></a><a href=\"https://github.com/daquexian/onnx-simplifier\">onnx-simplifier</a></h3><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/examples/cli/surgeon/02_folding_constants\">tensorrt polygraphy surgeon 也能 folding constant</a></li>\n<li>为了支持动态图，onnx 不得不使用复杂的方式来实现，例如 reshape，如果输入是变量，不是常量，会多出来很多分支。<a href=\"https://zhuanlan.zhihu.com/p/346511883\">link</a><ul>\n<li>直接转化为常量 int(x.shape[0])</li>\n<li>很多节点比如 cast 节点，Identity 这些节点可能都不需要，我们需要进行简化</li>\n</ul>\n</li>\n<li><a href=\"https://convertmodel.com/#input=onnx&output=onnx\">网页版本</a></li>\n<li>sample</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> onnx</span><br><span class=\"line\"><span class=\"keyword\">from</span> onnxsim <span class=\"keyword\">import</span> simplify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load your predefined ONNX model</span></span><br><span class=\"line\">model = onnx.load(filename)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># convert model</span></span><br><span class=\"line\">model_simp, check = simplify(model)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> check, <span class=\"string\">&quot;Simplified ONNX model could not be validated&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">onnx.save(onnx_model, <span class=\"string\">&quot;path/to/the/model.onnx&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PaddlePaddle-VisualDL\"><a href=\"#PaddlePaddle-VisualDL\" class=\"headerlink\" title=\"PaddlePaddle&#x2F;VisualDL\"></a><a href=\"https://github.com/PaddlePaddle/VisualDL/tree/develop\">PaddlePaddle&#x2F;VisualDL</a></h3><h3 id=\"zetane\"><a href=\"#zetane\" class=\"headerlink\" title=\"zetane\"></a><a href=\"https://github.com/zetane/viewer\">zetane</a></h3><ol>\n<li>can load onnx model and show intermediate results when the model is executed. 查看模型中间结果</li>\n</ol>\n<h3 id=\"onnx2py-py\"><a href=\"#onnx2py-py\" class=\"headerlink\" title=\"onnx2py.py\"></a><a href=\"https://github.com/microsoft/onnxconverter-common/blob/master/onnxconverter_common/onnx2py.py\">onnx2py.py</a></h3><ol>\n<li>creates a python file from an ONNX graph. This script can create the same graph. It may be modified by a user to change the graph.</li>\n</ol>\n<h3 id=\"onnx-tool-可以统计计算量，每层输出-shape\"><a href=\"#onnx-tool-可以统计计算量，每层输出-shape\" class=\"headerlink\" title=\"onnx-tool 可以统计计算量，每层输出 shape\"></a><a href=\"https://github.com/ThanatosShinji/onnx-tool/blob/main/README_CN.md\">onnx-tool 可以统计计算量，每层输出 shape</a></h3><ol>\n<li><code>python3 -m onnx_tool -m profile -i tensorrt/resnet50/model.onnx</code></li>\n</ol>\n<h3 id=\"pytorch-OpCounter\"><a href=\"#pytorch-OpCounter\" class=\"headerlink\" title=\"pytorch-OpCounter\"></a><a href=\"https://github.com/Lyken17/pytorch-OpCounter\">pytorch-OpCounter</a></h3><h3 id=\"polygraph\"><a href=\"#polygraph\" class=\"headerlink\" title=\"polygraph\"></a><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/\">polygraph</a></h3><ol>\n<li><code>polygraphy inspect model tensorrt/resnet50/model.onnx</code></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://onnx.ai/onnx/intro/concepts.html\">官方介绍</a></li>\n<li><a href=\"https://netron.app/\">netron.app</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/346511883\">onnx 介绍</a></li>\n<li><a href=\"https://github.com/onnx/models\">onnx&#x2F;models</a></li>\n<li><a href=\"https://github.com/onnx/onnx/blob/main/docs/Operators.md\">Operators</a></li>\n<li><a href=\"https://onnx.ai/onnx/operators/index.html\">ops 变化</a></li>\n<li><a href=\"https://onnx.ai/supported-tools.html#deployModel\">支持 onnx 的训练和推理框架</a></li>\n</ol>\n<h2 id=\"查看-onnx-算子列表-python-sandbox-onnx-op-set-py\"><a href=\"#查看-onnx-算子列表-python-sandbox-onnx-op-set-py\" class=\"headerlink\" title=\"查看 onnx 算子列表 python_sandbox&#x2F;onnx&#x2F;op_set.py\"></a>查看 onnx 算子列表 python_sandbox&#x2F;onnx&#x2F;op_set.py</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">model = onnx.load(model_path)</span><br><span class=\"line\">nodes = model.graph.node</span><br><span class=\"line\">opset = <span class=\"built_in\">set</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> nodes:</span><br><span class=\"line\">    opset.add((node.op_type))</span><br><span class=\"line\"></span><br><span class=\"line\">sorted_opset = <span class=\"built_in\">list</span>(opset)</span><br><span class=\"line\">sorted_opset.sort()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;model_path&#125;</span> 使用的算子集：&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> op <span class=\"keyword\">in</span> sorted_opset:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;op&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"model-conver\"><a href=\"#model-conver\" class=\"headerlink\" title=\"model conver\"></a>model conver</h2><h3 id=\"pytorch\"><a href=\"#pytorch\" class=\"headerlink\" title=\"pytorch\"></a>pytorch</h3><ol>\n<li><a href=\"https://hub.docker.com/r/pytorch/pytorch\">pytorch docker</a></li>\n<li><a href=\"https://pytorch.org/tutorials/advanced/super_resolution_with_onnxruntime.html\">(OPTIONAL) EXPORTING A MODEL FROM PYTORCH TO ONNX AND RUNNING IT USING ONNX RUNTIME</a></li>\n<li>需要!pip install onnx onnxruntime Pillow</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">import torchvision.models as models</span><br><span class=\"line\">model = models.resnet50(pretrained=True)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">        model.cuda()</span><br><span class=\"line\">torch.onnx.export(......)</span><br></pre></td></tr></table></figure>\n"},{"title":"onnxruntime","url":"/2023/06/12/onnxruntime/","content":"<h2 id=\"concept\"><a href=\"#concept\" class=\"headerlink\" title=\"concept\"></a>concept</h2><p><img src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2022/12/image3-2.png\" alt=\"ONNX 运行时高级架构\"><br>ONNX Runtime 是一个性能优秀的跨平台推理（inference）引擎，用于 ONNX（Open Neural Network Exchange）模型。它具有灵活的支持和高效的性能，可用于各种硬件设备（包括在边缘设备上）和操作系统。</p>\n<p>以下是关于 ONNX Runtime 的一些基本概念：</p>\n<ol>\n<li><strong>ONNX 模型执行</strong>：ONNX Runtime 提供了执行 ONNX 模型的能力。你可以加载一个 ONNX 模型，然后使用 ONNX Runtime 来进行推理。</li>\n<li><strong>硬件优化</strong>：ONNX Runtime 被设计为能够充分利用不同的硬件能力。它支持 CPU，GPU，以及更专用的硬件加速器（如 Microsoft 的 DirectML 和 NVIDIA 的 TensorRT）。</li>\n<li><strong>跨平台</strong>：ONNX Runtime 可以在多种操作系统（包括 Windows，Linux，和 Mac OS）上运行，并且支持多种硬件设备，包括在边缘设备上。</li>\n<li><strong>语言绑定</strong>：ONNX Runtime 提供了多种语言的 API，包括 C，C++，Python，C#，Java，和 JavaScript，使得开发者可以在他们选择的语言中使用 ONNX Runtime。</li>\n<li><strong>会话（Session）</strong>：在 ONNX Runtime 中，一次模型的推理被称为一个会话。你可以创建一个会话，然后通过这个会话来执行模型。</li>\n<li><strong>提供者（Providers）</strong>：ONNX Runtime 支持通过不同的“提供者”来执行模型。这些提供者可以是 CPU，CUDA（NVIDIA GPUs），TensorRT（NVIDIA GPUs），DirectML（Windows GPUs），OpenVINO（Intel GPUs）等。<br>通过 ONNX Runtime，开发者可以将 ONNX 模型部署到各种平台和设备上，同时保持良好的性能和灵活性。</li>\n</ol>\n<h3 id=\"Providers\"><a href=\"#Providers\" class=\"headerlink\" title=\"Providers\"></a><a href=\"https://onnxruntime.ai/docs/execution-providers/\">Providers</a></h3><p>ONNX Runtime 的”提供者”（Providers）是执行 ONNX 模型运算的后端引擎。每种提供者都是为特定的硬件或者软件平台优化的。使用正确的提供者可以大大提高模型的执行效率。<br>以下是一些主要的 ONNX Runtime 提供者：</p>\n<ol>\n<li><strong>CPU Execution Provider</strong>: CPU 提供者是 ONNX Runtime 的默认提供者，它在 CPU 上执行模型运算。CPU 提供者在所有系统上都可用，不需要任何额外的依赖。</li>\n<li><strong>CUDA Execution Provider</strong>: CUDA 提供者是为 NVIDIA 的 GPU 优化的，它使用 CUDA 和 cuDNN 库来在 GPU 上执行模型运算。使用 CUDA 提供者需要安装 CUDA 和 cuDNN。</li>\n<li><strong>TensorRT Execution Provider</strong>: TensorRT 提供者也是为 NVIDIA 的 GPU 优化的，但是它使用 NVIDIA 的 TensorRT 库来执行模型运算。TensorRT 提供者可以提供比 CUDA 提供者更高的性能，但是需要更复杂的设置。</li>\n<li><strong>DirectML Execution Provider</strong>: DirectML 提供者是为 Windows 系统上的 GPU 优化的，它使用 Microsoft 的 DirectML 库来执行模型运算。DirectML 提供者可以在任何支持 DirectX 12 的 Windows 系统上使用。</li>\n<li><strong>OpenVINO Execution Provider</strong>: OpenVINO 提供者是为 Intel 的硬件优化的，包括 CPU，GPU，VPU，和 FPGA。它使用 Intel 的 OpenVINO 库来执行模型运算。</li>\n<li><strong>Nuphar Execution Provider</strong>: Nuphar 是一个为 CPU 优化的 JIT 编译器，主要用于对模型中的循环结构进行优化。</li>\n<li><strong>VitisAI Execution Provider</strong>: VitisAI 提供者是为 Xilinx FPGA 硬件优化的，使用了 Xilinx 的 Vitis AI 库。<br>当你创建一个 ONNX Runtime 会话时，你可以指定用于执行模型运算的提供者。如果你没有指定提供者，ONNX Runtime 会使用默认的 CPU 提供者。如果你在一个支持 GPU 的系统上运行 ONNX Runtime，并且你已经安装了相应的依赖，你可以选择使用 CUDA，TensorRT，DirectML，或者 OpenVINO 提供者来提高模型的执行效率。<br>Note: provider 在 onnxruntime repo 里</li>\n</ol>\n<h2 id=\"TVM-and-onnxruntime\"><a href=\"#TVM-and-onnxruntime\" class=\"headerlink\" title=\"TVM and onnxruntime\"></a>TVM and onnxruntime</h2><p>TVM 是一个开源的机器学习编译器堆栈，它可以将机器学习模型从各种框架（例如 TensorFlow、PyTorch、ONNX、Keras 等）优化编译到各种硬件（例如 CPU、GPU、FPGA、ASIC 等）。<br>ONNX Runtime 是一个用于运行和推理 ONNX 模型的高性能跨平台推理引擎。然而，TVM 的关键优势在于它的自动调度程序和编译器栈，能够生成优化的计算内核，而 ONNX Runtime 的优势在于它对 ONNX 模型的广泛支持以及一系列优化技术。ONNX Runtime 支持多种硬件平台，包括 CPU、GPU 和专用加速器。它可以在不同硬件上运行，无需重新编译模型。<br>TVM 和 ONNX Runtime 的结合可以在两者之间提供一个桥梁，使得开发者可以利用 TVM 的优化能力，同时使用 ONNX Runtime 的灵活性和易用性。<br>ONNX Runtime 和 TVM 结合的一种方式是使用 TVM 作为 ONNX Runtime 的一个执行提供者。TVM 有一个 ONNX 编译器，可以将 ONNX 模型编译成 TVM 模块，然后在 ONNX Runtime 中注册这个模块作为一个提供者，这样 ONNX Runtime 就可以使用 TVM 来执行模型。<br>另一种方式是使用 TVM 来优化 ONNX 模型，然后在 ONNX Runtime 中执行优化后的模型。这种方法的优点是可以使用 TVM 的自动调度程序和编译器栈来优化模型，然后使用 ONNX Runtime 的高效运行时来执行优化后的模型。<br>这两种方法都需要一些设置和配置，并且可能需要修改 ONNX Runtime 或者 TVM 的代码。然而，它们都可以提供更好的性能和更高的灵活性，使得开发者可以更好地利用他们的硬件资源。</p>\n<p>TVM 和 ONNX Runtime 都是用于机器学习模型推理的工具，但它们各自有着不同的优势和设计目标。<br><strong>TVM</strong>是一个开源的深度学习编译器和优化器，它的主要目标是提供一种灵活的方式来优化和部署深度学习模型到各种硬件平台，包括 CPU、GPU、FPGA 和 ASIC 等。TVM 的优势在于：</p>\n<ol>\n<li><strong>硬件无关的优化</strong>：TVM 的自动调度功能可以生成针对特定硬件优化的代码，无论这个硬件是 CPU、GPU 还是其他类型的硬件。</li>\n<li><strong>端到端的编译优化</strong>：TVM 包括了从高层图优化到底层代码生成的全流程优化。</li>\n<li><strong>支持多种深度学习框架</strong>：TVM 可以接受多种框架的模型，包括 TensorFlow、PyTorch、MXNet、Keras、ONNX 等。<br>而<strong>ONNX Runtime</strong>是一个用于运行和推理 ONNX 模型的跨平台高性能推理引擎，它的主要目标是提供一种高效、灵活且易于使用的方式来部署和执行 ONNX 模型。ONNX Runtime 的优势在于：</li>\n<li><strong>广泛的 ONNX 模型支持</strong>：ONNX Runtime 支持 ONNX 模型中的所有运算符和特性。</li>\n<li><strong>性能优化</strong>：ONNX Runtime 包含了一系列优化技术，包括图优化、运算符融合、内存优化等，以提高模型的执行性能。</li>\n<li><strong>硬件加速</strong>：通过不同的执行提供者（如 CUDA、TensorRT、DirectML 等），ONNX Runtime 可以利用硬件加速器来提高模型的执行速度。<br>两者之间并非完全的竞争关系，它们可以相互结合，例如使用 TVM 作为 ONNX Runtime 的一个执行提供者，使得 ONNX Runtime 能够利用 TVM 的优化能力。</li>\n</ol>\n<h2 id=\"compare-results-with-pytorch\"><a href=\"#compare-results-with-pytorch\" class=\"headerlink\" title=\"compare results with pytorch\"></a>compare results with pytorch</h2><ol>\n<li><a href=\"https://pytorch.org/tutorials/beginner/onnx/export_simple_model_to_onnx_tutorial.html#compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime\">Compare the PyTorch results with the ones from the ONNX Runtime</a></li>\n<li><a href=\"https://pytorch.org/tutorials/advanced/super_resolution_with_onnxruntime.html\">Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime</a></li>\n</ol>\n<h2 id=\"compare-results-with-tensorrt\"><a href=\"#compare-results-with-tensorrt\" class=\"headerlink\" title=\"compare results with tensorrt\"></a>compare results with tensorrt</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/examples/cli/inspect/\">polygraph</a><ul>\n<li><code>polygraphy inspect model tensorrt/resnet50/model.onnx</code></li>\n<li><code>polygraphy inspect capability model.onnx</code> Inspecting TensorRT ONNX Support</li>\n<li><code>polygraphy inspect model op16_iter7_refine_filter_fb.trt --model-type=engine --show layers</code></li>\n<li><code>polygraphy run dynamic_identity.onnx --trt --onnxrt</code> Comparing TensorRT And ONNX-Runtime Outputs</li>\n<li><code>polygraphy run dynamic_identity.onnx --trt --fp16 --onnxrt --input-shapes X:[1,2,4,4]</code> Comparing TensorRT Precisions</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/examples/cli/run/05_comparing_with_custom_input_data\">run&#x2F;05_comparing_with_custom_input_data</a></li>\n<li><code>polygraphy surgeon sanitize model.onnx --fold-constants -o folded.onnx</code> 可以 fold constant, 作为 op 参数, 不用作为 input</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><ol>\n<li><code>pip install onnxruntime</code></li>\n<li><a href=\"https://github.com/microsoft/onnxruntime/releases\">c++直接下载编译好的库</a></li>\n</ol>\n<h2 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a><a href=\"https://github.com/microsoft/onnxruntime-inference-examples/tree/main/c_cxx\">sample</a></h2><ol>\n<li>测试</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 https://github.com/microsoft/onnxruntime-inference-examples.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> onnxruntime-inference-examples/c_cxx/</span><br><span class=\"line\">make -p build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake -DONNXRUNTIME_ROOTDIR=/xxx/onnxruntime-linux-x64-1.15.1 ..</span><br><span class=\"line\">make -j4</span><br><span class=\"line\">curl https://media.githubusercontent.com/media/onnx/models/main/vision/classification/squeezenet/model/squeezenet1.0-7.onnx --output squeezenet.onnx</span><br><span class=\"line\">./build/model-explorer/model-explorer squeezenet.onnx</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://github.com/microsoft/onnxruntime-inference-examples/blob/main/c_cxx/model-explorer/model-explorer.cpp\">c++ sample code</a></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;onnxruntime_cxx_api.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Load the model and create InferenceSession</span></span><br><span class=\"line\">Ort::Env env;</span><br><span class=\"line\">std::string model_path = <span class=\"string\">&quot;path/to/your/onnx/model&quot;</span>;</span><br><span class=\"line\"><span class=\"function\">Ort::Session <span class=\"title\">session</span><span class=\"params\">(env, model_path, Ort::SessionOptions&#123; <span class=\"literal\">nullptr</span> &#125;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Load and preprocess the input image to</span></span><br><span class=\"line\"><span class=\"comment\">// inputTensor, inputNames, and outputNames</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Run inference</span></span><br><span class=\"line\">std::vector outputTensors =</span><br><span class=\"line\"> session.<span class=\"built_in\">Run</span>(Ort::RunOptions&#123;<span class=\"literal\">nullptr</span>&#125;,</span><br><span class=\"line\"> \t\t\tinputNames.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">\t\t\t&amp;inputTensor,</span><br><span class=\"line\">\t\t\tinputNames.<span class=\"built_in\">size</span>(),</span><br><span class=\"line\">\t\t\toutputNames.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">\t\t\toutputNames.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">float</span>* outputDataPtr = outputTensors[<span class=\"number\">0</span>].<span class=\"built_in\">GetTensorMutableData</span>();</span><br><span class=\"line\">std::cout &lt;&lt; outputDataPtr[<span class=\"number\">0</span>] &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>sample 解析<ul>\n<li>Session 处理各种环境信息，比如模型信息， 环境变量等，同时也进行调度， 不负责管理模型输入输出数据</li>\n<li>由 Ort::Value::CreateTensor 申请模型输入输出的内存， 所有权归上层应用</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"模型优化\"><a href=\"#模型优化\" class=\"headerlink\" title=\"模型优化\"></a>模型优化</h2><h3 id=\"sample-1\"><a href=\"#sample-1\" class=\"headerlink\" title=\"sample\"></a>sample</h3><h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://onnxruntime.ai/index.html#getStartedTable\">支持的平台选择</a></li>\n<li><a href=\"https://onnxruntime.ai/docs/execution-providers/\">onnxruntime.ai</a></li>\n<li><a href=\"https://onnxruntime.ai/docs/execution-providers/\">docs</a></li>\n<li><a href=\"https://github.com/microsoft/onnxruntime/tree/eed02a3f782407e569c29a8a86c58a4d398d0b0e/onnxruntime/core/providers\">onnxruntime&#x2F;core&#x2F;providers</a></li>\n<li><a href=\"https://github.com/Xilinx/Vitis-AI/tree/c55b7565bde608dd65dda94abea154ad7db4d594/examples/vai_library/samples_onnx\">vitis ai onnxruntime samples</a></li>\n<li><a href=\"https://github.com/search?q=repo:microsoft/onnxruntime%20USE_VITISAI&type=code\">onnxruntime vitis support</a></li>\n<li><a href=\"https://software-dl.ti.com/jacinto7/esd/processor-sdk-rtos-jacinto7/07_03_00_07/exports/docs/tidl_j7_02_00_00_07/ti_dl/docs/user_guide_html/md_tidl_osr_onnxrt_tidl.html\">tda4 onnx runtime</a></li>\n<li><a href=\"https://onnxruntime.ai/docs/api/c/struct_ort_1_1_session.html\">doxygen</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/582974246\">推理模型部署(一)：ONNX runtime 实践</a></li>\n</ol>\n"},{"title":"op","url":"/2024/05/09/op/","content":"<h2 id=\"plan\"><a href=\"#plan\" class=\"headerlink\" title=\"plan\"></a>plan</h2><ol>\n<li>基础工程<ul>\n<li>unit test</li>\n<li>benchmark</li>\n<li>ci</li>\n</ul>\n</li>\n<li>加速技术<ul>\n<li>simd</li>\n</ul>\n</li>\n<li>profiling 工具<ul>\n<li>perf</li>\n<li>nsight system&#x2F;compute</li>\n</ul>\n</li>\n<li>编程语言<ul>\n<li>cuda<ul>\n<li>cutlass</li>\n</ul>\n</li>\n<li>triton</li>\n<li>halide</li>\n<li>opencl</li>\n</ul>\n</li>\n<li>平台<ul>\n<li>gpu</li>\n<li>arm</li>\n<li>dsp</li>\n</ul>\n</li>\n<li>自定义算子<ul>\n<li>(重要)注意插件和自定义算子区别：C++ or Cuda 自定义算子可以直接被 pytorch 使用，不用封装成插件，也不用为导出 onnx 模型做一些额外工作。导出 onnx 时需要做一些操作，在运行 trt 模型时需要将算子封装成 plugin</li>\n<li>c++算子：cuda 实现，c++封装，python 调用，不用实现前后 forward</li>\n<li>pytorch 自定义算子：需要继承 torch.autograd.Function，实现前后 forward, 可以是 python 算子；如果是 C 算子，在 python 中调用 c++ or cuda, 如果不考虑导出 onnx 不用做封装，导出的话需要 symbolic，opset15 更简单 <a href=\"https://leimao.github.io/blog/PyTorch-Custom-ONNX-Operator-Export/\">link</a> <a href=\"https://godweiyang.com/2021/03/21/torch-cpp-cuda-2/\">详解 PyTorch 编译并调用自定义 CUDA 算子的三种方式</a><ul>\n<li>隐藏 cuda 实现：编译 cuda 到 cubin， 在 cpp 中读 cubin，再用 pytorch setup.py 编译 <a href=\"https://chatgpt.com/share/8fb13ae5-3d21-4c1e-be5a-7648d8b2ea9a\">link</a></li>\n<li>cuda 需要 torch tensor 包一层，tensorrt 插件不用</li>\n<li><a href=\"https://pytorch.org/tutorials/recipes/torch_compile_user_defined_triton_kernel_tutorial.html\">triton</a></li>\n</ul>\n</li>\n<li>tensorrt 插件：将 c++ or cuda 实现的算子封装成 tensorrt plugin</li>\n<li><a href=\"https://github.com/godweiyang/NN-CUDA-Example\">plugin</a></li>\n<li>tensorrt 两种方法支持自定义 op<ul>\n<li>onnx graphsurgeon 修改 op <a href=\"https://leimao.github.io/blog/TensorRT-Custom-Plugin-Example/\">link</a></li>\n<li>pytorch 直接导出带自定义 op 的 onnx <a href=\"https://leimao.github.io/blog/PyTorch-Custom-ONNX-Operator-Export/\">link</a></li>\n</ul>\n</li>\n<li><a href=\"https://numba.readthedocs.io/en/stable/user/examples.html\">numba jit 加速</a></li>\n</ul>\n</li>\n<li>常见算子列表</li>\n<li>大模型算子</li>\n<li>库<ul>\n<li>openblas</li>\n<li>cudnn</li>\n<li>cublas</li>\n<li><a href=\"https://github.com/OAID/Tengine\">Tengine</a> (久未更新代码)</li>\n<li>tensorrt-llm plugins kernel</li>\n</ul>\n</li>\n<li>算子融合<ul>\n<li>conv + elementwise(relu, add, BN ….)</li>\n<li>elementwise + elementwise</li>\n<li>conv + conv</li>\n</ul>\n</li>\n<li>python 驱动测试 (开发板上可能无开发环境，需要 c++单测)<ul>\n<li>setup.py 编译 kernel</li>\n<li>pybind11 封装 kernel</li>\n<li>python 直接调用 kernel，可用于训练和推理</li>\n<li>python 调用 trt plugin 来验证 plugin 正确性</li>\n</ul>\n</li>\n<li>训练加速<ul>\n<li>正向反向传播算子</li>\n<li><a href=\"https://pytorch.org/docs/stable/autograd.html\">torch.autograd.function</a><ul>\n<li>实现函数的前向传播、反向传播，已经封装好了，理解起来很快，看一个案例就能理解。</li>\n</ul>\n</li>\n<li>viztracer + nsys + ncu + nvtx 分析性能瓶颈</li>\n<li>多卡加速</li>\n<li>ddp</li>\n<li>dataloader 取数据的能力和计算的能力要平衡</li>\n<li>1 gpu 4 worker</li>\n<li>读数据和解码耗时<ul>\n<li>cpu: <a href=\"https://github.com/dev0x13/pywuffs\">pywuffs</a> png 更有效，jpg 和 cv 差不太多</li>\n<li>gpu: <a href=\"https://github.com/NVIDIA/nvImageCodec/tree/main/example/python\">nvImageCodec</a><ul>\n<li>png decode 也是 cpu 做的</li>\n</ul>\n</li>\n<li>torch: <a href=\"https://pytorch.org/vision/main/io.html\">vision io</a></li>\n</ul>\n</li>\n<li>当 cpu 是瓶颈的时候，增加 worker 数量对数据读取帮助不大，反而会增加内存的消耗，将低 worker 数可以减少存储的消耗</li>\n</ul>\n</li>\n<li>推理加速（主要是减少 latency, 增大吞吐可以数据并行，多台机器，每台运行不同数据)<ul>\n<li>单机多卡</li>\n<li>分布式</li>\n</ul>\n</li>\n<li>量化支持</li>\n<li>调试<ul>\n<li>vscode + nsight + cuda-gdb</li>\n</ul>\n</li>\n<li>dump 实测数据方式<ul>\n<li><a href=\"https://pytorch.org/tutorials/beginner/saving_loading_models.html#save\">torch save</a><ul>\n<li>op 输入输出先写到一个 dict 里，一起 save;</li>\n<li>追加功能，读 pt 文件到 dict, 插入新的键值，重新写</li>\n</ul>\n</li>\n<li>pickle(python 自带)</li>\n</ul>\n</li>\n<li>python 与 C++ 交互方式<ul>\n<li><a href=\"https://github.com/pytorch/extension-cpp.git\">pytorch&#x2F;extension-cpp</a><ul>\n<li>c++ op forward backward &#x3D;&gt; pybind11 &#x3D;&gt; python op(torch.autograd.Fuction) with forward and backward &#x3D;&gt; layer(torch.nn.Module) forward 中调用 op.apply()</li>\n<li>onnx export 时 symbol 会替换 module 中 forward 调用继承了 torch.autograd.Function 的自定义算子 apply 函数</li>\n</ul>\n</li>\n<li>pytorch tensor + pybind11</li>\n<li><a href=\"https://github.com/pybind/python_example\">Setuptools example</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/459955492\">pytorch 之 c++&#x2F;cuda 拓展</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/348555597\">PyTorch 源码解读之 cpp_extension：揭秘 C++&#x2F;CUDA 算子实现和调用全流程</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/blob/main/setup.py\">pytorch setup.py</a></li>\n<li><a href=\"https://github.com/open-mmlab/mmdetection3d\">mmdetection3d</a></li>\n<li><a href=\"https://github.com/open-mmlab/mmdetection3d/tree/main/projects/BEVFusion\">BEVFusion</a></li>\n<li><code>pip install -v -e .</code></li>\n</ul>\n</li>\n<li>torch compile<ul>\n<li><a href=\"https://pytorch.org/tutorials/intermediate/torch_compile_tutorial.html\">doc</a></li>\n<li>需要 pytorch 2</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://www.hiascend.com/document/detail/zh/CANNCommunityEdition/80RC1alpha003/devguide/opdevg/tbeaicpudevg/atlasopdev_10_0006.html\">算子基本概念</a></li>\n</ol>\n"},{"title":"package manager","url":"/2023/11/05/package-manager/","content":"<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h2><h3 id=\"CPM\"><a href=\"#CPM\" class=\"headerlink\" title=\"CPM\"></a><a href=\"https://github.com/cpm-cmake/CPM.cmake\">CPM</a></h3><h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><h3 id=\"virtual-environments\"><a href=\"#virtual-environments\" class=\"headerlink\" title=\"virtual-environments\"></a><a href=\"https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/\">virtual-environments</a></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install python3-venv</span><br><span class=\"line\">python3 -m venv .venv</span><br><span class=\"line\"><span class=\"built_in\">source</span> .venv/bin/activate</span><br><span class=\"line\">deactivate</span><br><span class=\"line\">pip install pip -U -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip install -r requirements.txt</span><br><span class=\"line\">python3 -m pip install --upgrade pip</span><br><span class=\"line\">python3 -m pip install <span class=\"string\">&#x27;requests==2.18.4&#x27;</span></span><br><span class=\"line\">python3 -m pip install <span class=\"string\">&#x27;requests&gt;=2.0.0,&lt;3.0.0&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"miniconda-选择对应-python-版本-install-时可以选路径\"><a href=\"#miniconda-选择对应-python-版本-install-时可以选路径\" class=\"headerlink\" title=\"miniconda 选择对应 python 版本, install 时可以选路径\"></a><a href=\"https://docs.conda.io/en/latest/miniconda.html#linux-installers\">miniconda</a> 选择对应 python 版本, install 时可以选路径</h3><h3 id=\"anaconda\"><a href=\"#anaconda\" class=\"headerlink\" title=\"anaconda\"></a><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\">anaconda</a></h3><h3 id=\"mamba\"><a href=\"#mamba\" class=\"headerlink\" title=\"mamba\"></a><a href=\"https://github.com/mamba-org/mamba\">mamba</a></h3><h2 id=\"rust\"><a href=\"#rust\" class=\"headerlink\" title=\"rust\"></a>rust</h2><h3 id=\"cargo\"><a href=\"#cargo\" class=\"headerlink\" title=\"cargo\"></a>cargo</h3><h2 id=\"multi\"><a href=\"#multi\" class=\"headerlink\" title=\"multi\"></a>multi</h2><h3 id=\"pixi\"><a href=\"#pixi\" class=\"headerlink\" title=\"pixi\"></a><a href=\"https://github.com/prefix-dev/pixi\">pixi</a></h3><ol>\n<li>pixi is a cross-platform, multi-language package manager and workflow tool built on the foundation of the conda ecosystem. It provides developers with an exceptional experience similar to popular package managers like cargo or yarn, but for any language.</li>\n</ol>\n"},{"title":"pagedattention","url":"/2024/02/22/pagedattention/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>attention 输入为 q k v 输出 q 维度类似的结果; 参数可能为各种 shape 信息 地址 head num, scale, mask 等。如果是 paged attention 需要处理 q k v 地址不连续的情况, 也需要考虑计算并行度问题</li>\n<li>cuda core 计算的</li>\n<li><a href=\"https://github.com/vllm-project/vllm/blob/main/csrc/attention/attention_kernels.cu\">attention 代码</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/638468472\">从 FlashAttention 到 PagedAttention, 如何进一步优化 Attention 性能</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/673284781\">vLLM 皇冠上的明珠：深入浅出理解 PagedAttention CUDA 实现</a><ul>\n<li>vLLM 中，LLM 推理的 prefill 阶段 attention 计算使用第三方库 xformers 的优化实现，decoding 阶段 attention 计算则使用项目编译 CUDA 代码实现。具体代码在 vllm 的 csrc&#x2F;attention&#x2F;attention_kernels.cu 文件里，开发者洋洋洒洒写了八百多行 CUDA 代码。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"pandas","url":"/2023/07/11/pandas/","content":"<h2 id=\"describe\"><a href=\"#describe\" class=\"headerlink\" title=\"describe\"></a><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html\">describe</a></h2><ol>\n<li>获取统计信息， 可配置</li>\n</ol>\n"},{"title":"pip","url":"/2023/06/26/pip/","content":"<h2 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h2><ol>\n<li><code>pip install viztracer -i https://pypi.tuna.tsinghua.edu.cn/simple</code>使用清华源安装</li>\n<li>注意 conda 源和 pip 源的区别，并不是共用</li>\n<li><code>pip show numpy</code>查看 numpy 信息, 包括安装路径</li>\n<li><code>pip list</code></li>\n<li><code>pip install torchtext --upgrade</code></li>\n<li><code>pip install torchtext==0.6.0</code></li>\n<li><code>pip freeze &gt; requirements.txt</code> 导出 requirements</li>\n<li>注意 conda 源和 pip 源的区别，并不是共用</li>\n<li>set source</li>\n</ol>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pip -U -i https://pypi.tuna.tsinghua.edu.<span class=\"keyword\">cn</span>/simple</span><br><span class=\"line\">pip config <span class=\"keyword\">set</span> <span class=\"keyword\">global</span>.<span class=\"built_in\">index</span>-url https://pypi.tuna.tsinghua.edu.<span class=\"keyword\">cn</span>/simple</span><br><span class=\"line\">pip3 install tensorrt_llm -U --extra-<span class=\"built_in\">index</span>-url https://pypi.nvidia.<span class=\"keyword\">com</span> # 可以追加<span class=\"keyword\">source</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>install from source <code>pip install git+https://github.com/huggingface/transformers</code></li>\n</ol>\n"},{"title":"pixi","url":"/2023/11/03/pixi/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>不同工程可以用软连接共享.pixi 文件夹</li>\n<li>cfonts 使得 task 更清楚</li>\n<li><code>curl -fsSL https://pixi.sh/install.sh | bash</code> install</li>\n<li>工程目录下<code>.pixi</code>包含各种环境依赖</li>\n<li>pixi is a cross-platform, multi-language package manager and workflow tool built on the foundation of the conda ecosystem. It provides developers with an exceptional experience similar to popular package managers like cargo or yarn, but for any language.</li>\n<li>Supports multiple languages including Python, C++, and R using Conda packages.</li>\n<li>可用于 github actions, 只需要配置 pixi，不用手动安装各种环境</li>\n<li>参考写 task <a href=\"https://github.com/prefix-dev/pixi/blob/main/examples/cpp-sdl/pixi.toml\">example</a></li>\n<li>如果下载不了 package， 可以删除~&#x2F;.cache&#x2F;rattler&#x2F;cache&#x2F;repodata 试试</li>\n<li>执行命令在 repo 下都行</li>\n<li><code>pixi global install &lt;cmake&gt;</code>在机器上安装 cmake; 安装到<del>&#x2F;.pixi&#x2F;bin， 需要需改.zshrc &#96;export PATH&#x3D;</del>&#x2F;.pixi&#x2F;bin:$PATH&#96;</li>\n<li><code>pixi shell</code>中可以用 pixi 安装的最新命令</li>\n<li><code>pixi add gxx clangxx</code> install g++ and clang++； ++符号不允许</li>\n<li>下载的时候 VPN 设置为 global， 用 rule 可能识别为本地， 下载出问题</li>\n<li>python 需要先安装 pip</li>\n</ol>\n<h2 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a><a href=\"https://prefix.dev/docs/pixi/cli\">command</a></h2><ol>\n<li><code>pixi init &lt;name&gt;</code> 初始化工程, 添加 pixi.toml 和 gitignore 信息</li>\n<li><code>pixi add cmake ninja opencv glog</code>添加依赖库</li>\n<li><code>pixi add &quot;clang-tools&lt;=15.0.0,&gt;13.0&quot;</code></li>\n<li><code>pixi run &lt;task&gt;</code> run task</li>\n<li><code>pixi search glog</code> search package</li>\n<li><code>pixi info</code> 查看各种信息， cache 位置：~&#x2F;.cache&#x2F;rattler&#x2F;, task list</li>\n<li><code>pixi global list</code> list global package</li>\n<li><code>pixi shell</code> 进入 pixi shell， 执行&#x2F;tmp&#x2F;pixi_env_xxx.sh 脚本设置环境变量， 可以在配置文件 activate 脚本中使用</li>\n</ol>\n<h2 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a><a href=\"https://prefix.dev/docs/pixi/configuration\">config</a></h2><ol>\n<li>pixi shell 可以查看环境变量</li>\n<li>channels &#x3D; [“conda-forge”, “robostack”, “bioconda”, “nvidia”, “pytorch”]; 设置源 <a href=\"https://prefix.dev/channels\">link</a></li>\n<li>env set, 可以设置 LD_LIBRARY_PATH</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">activation</span>]</span><br><span class=\"line\"><span class=\"string\">scripts</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;env_setup.sh&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\"env\"></a>env</h2><ol>\n<li><code>PIXI_PACKAGE_ROOT</code> repo 目录</li>\n<li><code>CONDA_PREFIX</code> pixi env 目录 ${PIXI_PACKAGE_ROOT}&#x2F;.pixi&#x2F;env</li>\n<li><code>PIXI_PACKAGE_PLATFORMS</code> platform 类型</li>\n<li><code>PATH</code> 只有 PATH, 没有 LD_LIBRARY_PATH, 需要自己在配置文件 activate 脚本里设置</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">export</span> <span class=\"string\">LD_LIBRARY_PATH=$&#123;CONDA_PREFIX&#125;/lib</span>  <span class=\"comment\"># for run app</span></span><br><span class=\"line\"><span class=\"string\">export</span> <span class=\"string\">CMAKE_PREFIX_PATH=$&#123;CONDA_PREFIX&#125;/lib</span>  <span class=\"comment\"># for cmake find_package</span></span><br><span class=\"line\"><span class=\"string\">export</span> <span class=\"string\">PKG_CONFIG_PATH=$&#123;CONDA_PREFIX&#125;/share/pkgconfig:$&#123;CONDA_PREFIX&#125;/lib/pkgconfig</span>  <span class=\"comment\"># for pkg-config</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/prefix-dev/pixi\">pixi</a></li>\n<li><a href=\"https://github.com/prefix-dev/pixi/blob/main/docs/FAQ.md\">What is the difference with conda, mamba, poetry, pip</a></li>\n<li><a href=\"https://www.rerun.io/docs/howto/arrow-cpp-install\">cpp using example</a></li>\n<li><a href=\"https://github.com/rerun-io/cpp-example-opencv-eigen/blob/main/pixi.toml\">rerun cpp-example-opencv-eigen pixi example</a></li>\n</ol>\n"},{"title":"probability_theory","url":"/2024/06/18/probability-theory/","content":"<h2 id=\"先验概率\"><a href=\"#先验概率\" class=\"headerlink\" title=\"先验概率\"></a>先验概率</h2><h2 id=\"后验概率\"><a href=\"#后验概率\" class=\"headerlink\" title=\"后验概率\"></a>后验概率</h2><h2 id=\"最大似然估计\"><a href=\"#最大似然估计\" class=\"headerlink\" title=\"最大似然估计\"></a>最大似然估计</h2><h2 id=\"排列组合\"><a href=\"#排列组合\" class=\"headerlink\" title=\"排列组合\"></a><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6\">排列组合</a></h2><h2 id=\"概率论\"><a href=\"#概率论\" class=\"headerlink\" title=\"概率论\"></a><a href=\"https://zh.wikipedia.org/wiki/%E6%A6%82%E7%8E%87%E8%AE%BA\">概率论</a></h2>"},{"title":"qualcomm","url":"/2024/09/24/qualcomm/","content":"<p>a</p>\n<h2 id=\"战略\"><a href=\"#战略\" class=\"headerlink\" title=\"战略\"></a>战略</h2><ol>\n<li>市面上真正能提供舱驾融合&#x2F;舱驾一体计算平台的厂商并不多，英伟达 DRIVE Thor、高通骁龙 Flex SoC 以及黑芝麻武当 C1200 家族，是目前市面上少数相对成熟的产品。DRIVE Thor 以千 T 级的算力著称，而高通 Flex SoC 以及黑芝麻 C1200 是性价比派系的代表</li>\n<li><a href=\"https://www.sohu.com/a/788526882_121124477\">高通第四代汽车 SoC 芯片分析，聚焦 CPU，AI 无所谓</a><ul>\n<li>高通更多地考虑汽车座舱和 L2 级的舱驾一体，这样的市场定位不需要太高的 AI 性能，45TOPS 足以满足 99.9%的应用场景，座舱领域所谓的大模型 AI 都完全依赖云端计算，端侧部署成本太高，可能高达数千美元，即便端侧部署，体验也和云端计算有很大差距。</li>\n<li>高通手机领域收入 62 亿美元，汽车业务收入 6.03 亿美元，IoT 业务收入 12 亿美元。</li>\n<li>对于 AI 运算的 NPU，还是高通的六角 DSP，缺乏亮点，乏善可陈，高通一句话带过，没有多说。</li>\n</ul>\n</li>\n<li>到 2024 年，Ride 智驾平台经过 4 年的演进，已经形成了从前视一体机（RV1 Lite）到支持城市 NOA（SA8650P）的完整谱系。这一代的 8650 和 8620，尤其强化了性价比的标签。</li>\n<li>Flex SoC 的第一款产品 8775</li>\n<li>为了向舱驾融合和跨域计算提供强大的中央计算平台，高通率先推出了汽车行业首款同时支持数字座舱和先进驾驶辅助系统（ADAS）的可扩展系列 SoC——Snapdragon Ride Flex。</li>\n<li>高通技术公司提供高性能中央计算 SoC——Snapdragon Ride Flex，旨在跨异构计算资源支持混合关键级工作负载，以单颗 SoC 同时支持数字座舱、ADAS 和 AD 功能</li>\n<li>手机芯片大厂联发科正携手 AI 芯片大厂英伟达（NVIDIA）开发基于 Arm 架构的 AI PC 处理器；在去年 5 月底的 COMPUTEX 2023 台北电脑展上，联发科携手英伟达共同宣布两家公司将在汽车芯片领域进行合作。联发科技将利用小芯片高速互联技术，开发整合有英伟达的 GPU 的车用 SoC 处理器，共同为新一代智能汽车提供解决方案。</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>模型文件 Deep Learning Container (DLC)</li>\n<li><a href=\"https://chipsandcheese.com/2023/10/04/qualcomms-hexagon-dsp-and-now-npu/\">qualcomms-hexagon-dsp-and-now-npu</a><ul>\n<li>dsp 到 npu</li>\n<li>有专用的矩阵乘指令</li>\n<li>Hexagon 的 NPU 每个周期可以完成大量 16K 乘法累加运算</li>\n</ul>\n</li>\n<li>Developers can get one step closer to the silicon and improve the performance of their AI models on Qualcomm® AI accelerators: Qualcomm® Kryo™ CPU, Qualcomm® Adreno™ GPU and Qualcomm® Hexagon™ NPU.<ul>\n<li>Hexagon Arch: 可以指 DSP 和 NPU, 一个意思</li>\n</ul>\n</li>\n<li><a href=\"https://docs.qualcomm.com/bundle/publicresource/topics/80-63442-2/overview.html#supported-snapdragon-devices\">架构列表</a><ul>\n<li>Hexagon arch: V66, V68, V69, V73, V75</li>\n<li>SM8650 是 V75 架构</li>\n</ul>\n</li>\n<li>Hexagon 是高通公司一系列数字信号处理器(DSP) 和后来的神经处理单元(NPU) 产品的品牌名称。 Hexagon 也称为 QDSP6，代表“第六代数字信号处理器”。据高通称，Hexagon 架构旨在为各种应用提供低功耗的性能。 <a href=\"https://en.wikipedia.org/wiki/Qualcomm_Hexagon\">link</a></li>\n<li>Hexagon Tensor Accelerator (HTA) for AI acceleration.</li>\n<li>Vector Execution (HVX)</li>\n<li><a href=\"https://docs.qualcomm.com/bundle/publicresource/topics/80-63442-50/backend.html\">执行后端</a></li>\n<li><a href=\"https://docs.qualcomm.com/bundle/publicresource/topics/80-63442-50/api.html\">QNN API</a></li>\n</ol>\n<h2 id=\"AI-stack\"><a href=\"#AI-stack\" class=\"headerlink\" title=\"AI stack\"></a>AI stack</h2><ol>\n<li><a href=\"https://www.qualcomm.com/developer/artificial-intelligence#overview\">overview</a></li>\n<li><a href=\"https://www.qualcomm.com/developer/software/neural-processing-sdk-for-ai\">neural-processing-sdk-for-ai</a><ul>\n<li>(SNPE?)</li>\n<li>The Qualcomm® Neural Processing SDK is engineered to help developers save time and effort in optimizing performance of trained neural networks on devices with Qualcomm® AI products.</li>\n<li><a href=\"https://www.qualcomm.com/developer/software/neural-processing-sdk-for-ai#tutorials\">tutorials</a></li>\n<li><a href=\"https://docs.qualcomm.com/bundle/publicresource/topics/80-63442-2/introduction.html\">doc introduction</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.qualcomm.com/developer/software/qualcomm-ai-engine-direct-sdk\">ai-engine-direct-sdk</a><ul>\n<li>Qualcomm AI Engine Direct is also referred to as Qualcomm Neural Network (QNN)</li>\n<li>The Qualcomm® AI Engine Direct SDK provides lower-level, unified APIs for AI development. 低级别 API, 用于调用多种异构硬件核心</li>\n<li>CPU, GPU, NPU, cDSP, standalone tensor acclerator，</li>\n<li><a href=\"https://docs.qualcomm.com/bundle/publicresource/topics/80-63442-50/introduction.html\">doc introduction</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.qualcomm.com/developer/software/ai-model-efficiency-toolkit\">ai-model-efficiency-toolkit</a><ul>\n<li>工具集：压缩， 量化，编译，网络搜索</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"AI-hub\"><a href=\"#AI-hub\" class=\"headerlink\" title=\"AI hub\"></a>AI hub</h2><ol>\n<li><a href=\"https://www.qualcomm.com/developer/artificial-intelligence#overview\">overview</a></li>\n</ol>\n<h3 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h3><ol>\n<li><a href=\"https://app.aihub.qualcomm.com/docs/hub/getting_started.html\">aihub quick-example-pytorch</a><ul>\n<li>需要先注册</li>\n<li>sample model 会传到服务器进行 compile, profile 和 run; 服务器上会记录中间 onnx, 编译好的模型(*.so)，预测运行时间，消耗的内存，layer 个数及 cycle 数</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"doc\"><a href=\"#doc\" class=\"headerlink\" title=\"doc\"></a>doc</h2><ol>\n<li><a href=\"https://docs.qualcomm.com/bundle/publicresource/topics/80-77512-1/hexagon-dsp-sdk-collection-landing-page.html?product=1601111740010422\">hexagon sdk</a></li>\n</ol>\n<h2 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h2><ol>\n<li><a href=\"https://www.eefocus.com/article/1726287.html\">佐思汽研《2024 年自动驾驶 SoC 研究报告》</a></li>\n<li>SA8650 有 100TOPS 的 AI 算力，高于主要竞品英伟达 ORIN-N，同时图形输出能力很强，最高支持 4 个屏幕。 SA8650 可以对应 12 个摄像头，即 8 个 800 万像素，4 个 400 万像素。 SA8650 功耗大概 25-40 瓦，超过 25 瓦就最好采用水冷设计，目前 SA8650 的设计方案都是水冷</li>\n</ol>\n<h2 id=\"QNN\"><a href=\"#QNN\" class=\"headerlink\" title=\"QNN\"></a>QNN</h2><ol>\n<li>下载<a href=\"https://www.qualcomm.com/developer/software/qualcomm-ai-engine-direct-sdk\">https://www.qualcomm.com/developer/software/qualcomm-ai-engine-direct-sdk</a> 点击右上角 get software<ul>\n<li>wget -c <a href=\"https://apigwx-aws.qualcomm.com/qsc/public/v1/api/download/software/qualcomm_neural_processing_sdk/v2.26.0.240828.zip\">https://apigwx-aws.qualcomm.com/qsc/public/v1/api/download/software/qualcomm_neural_processing_sdk/v2.26.0.240828.zip</a></li>\n<li>文档路径在${QNN_SDK_ROOT}&#x2F;docs</li>\n</ul>\n</li>\n<li><code>qnn-throughput-net-run --config resnet50.json --output=resnet50_out.json</code> 运行模型<ul>\n<li>配置 json 里包含 backends(.so 文件), models(.bin 文件), contexts, testCase 设置</li>\n</ul>\n</li>\n<li>交叉编译<ul>\n<li>需要指定 ${QNN_AARCH64_LINUX_OE_GCC_93}&#x2F;sysroots <a href=\"https://docs.qualcomm.com/bundle/publicresource/topics/80-63442-50/setup.html#toolchains\">OE</a></li>\n<li>examples&#x2F;QNN&#x2F;NetRun&#x2F;linuxOE&#x2F;oe-linux-qnn-net-run.sh</li>\n<li><a href=\"https://github.com/quic-yocto/meta-qcom-qim-product-sdk?tab=readme-ov-file\">yacto 编译</a></li>\n</ul>\n</li>\n<li>模拟器<ul>\n<li>先看</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ol>\n<li>查看 npu 利用率<ul>\n<li>sysMonApp 低级别工具，会提供详细信息</li>\n<li>sysprofiler_app 高级别工具，基于 sysMonApp <code>sysprofiler_app --cdsp  --cdsp1 --live</code> 有些版本不支持同事看两个</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li>先看一下开发板系统，是 ubuntu 还是 oe</li>\n<li>linux 版本系统不是很稳定(会死机？)，推荐用 qnx 系统</li>\n<li>npu(htp) 可以编程， simd</li>\n<li>模型部署自定义插件是关键，插件在 npu 上运行</li>\n<li>有 x86 模拟器</li>\n<li>bin 文件和 so 文件区别：.bin 文件通常只包含模型的数据（如权重、偏置等），而 .so 文件是与硬件交互的可执行代码库，包含对模型推理的具体实现。在部署时，通常会将 .bin 文件中的模型数据加载到 .so 文件中的推理引擎中，然后由该引擎在高通硬件上执行推理操作。</li>\n<li>QNX Software Development Platform (SDP) 需要购买</li>\n</ol>\n"},{"title":"pytorch","url":"/2023/06/09/pytorch/","content":"<h2 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h2><ol>\n<li>直接用 torch.compile 编译一个函数(都是用 torch 实现的，可以生成 triton 函数)来加速，<a href=\"https://pytorch.org/docs/stable/torch.compiler_get_started.html\">getting start</a></li>\n<li>CPython 的 Frame Evaluation API（框架评估 API）是一个高级特性，允许开发者定制 Python 解释器执行代码的方式。这个 API 提供了一种方法，能够在 Python 解释器运行时动态插入和替换代码执行的框架，从而可以进行代码插桩、动态优化或其他高级操作。</li>\n<li>torch.compile is a PyTorch function introduced in PyTorch 2.x that aims to solve the problem of accurate graph capturing in PyTorch and ultimately enable software engineers to run their PyTorch programs faster.</li>\n<li><a href=\"https://github.com/pytorch/pytorch/issues/93794\">torch dynamo 加速性能例子</a></li>\n<li><a href=\"https://pytorch.org/docs/stable/torch.compiler.html\">torch dynamo 后端</a></li>\n<li>In 2.0, if you wrap your model in model &#x3D; torch.compile(model), your model goes through 3 steps before execution:<ul>\n<li>Graph acquisition: first the model is rewritten as blocks of subgraphs. Subgraphs which can be compiled by TorchDynamo are “flattened” and the other subgraphs (which might contain control-flow code or other unsupported Python constructs) will fall back to Eager-Mode.</li>\n<li>Graph lowering: all the PyTorch operations are decomposed into their constituent kernels specific to the chosen backend.</li>\n<li>Graph compilation, where the kernels call their corresponding low-level device-specific operations.</li>\n</ul>\n</li>\n<li>For instance, something innocuous as a print statement in your model’s forward triggers a graph break. 模型中打印会中断 graph 执行</li>\n<li><code>torch.compile()</code> We expect this one line code change to provide you with between 30%-2x training time speedups on the vast majority of models that you’re already running.</li>\n<li>芯片商可以集成到 dynamo 后端（和 inductor 并列)或 inductor 后端(和 triton 并列)或混合后端<ul>\n<li>目前 Inductor 有两个后端：(1) 生成多线程 CPU 代码的 C++，(2) 生成高性能 GPU 代码的 Triton</li>\n</ul>\n</li>\n<li>编译过程<br><img src=\"https://pytorch.org/assets/images/pytorch-2.0-img4.jpg\" alt=\"编译过程\"></li>\n<li>堆栈<br><img src=\"https://pytorch.org/assets/images/pytorch-2.0-img12.png\" alt=\"堆栈\"></li>\n<li>Our philosophy on PyTorch has always been to keep flexibility and hackability our top priority, and performance as a close second.</li>\n<li>In the past 5 years, we built <code>torch.jit.trace, TorchScript, FX tracing, Lazy Tensors</code>. But none of them felt like they gave us everything we wanted. Some were flexible but not fast, some were fast but not flexible and some were neither fast nor flexible. Some had bad user-experience (like being silently wrong). While TorchScript was promising, it needed substantial changes to your code and the code that your code depended on. This need for substantial change in code made it a non-starter for a lot of PyTorch users. 之前的都不行</li>\n<li><code>TorchDynamo</code> TorchDynamo acquired the graph 99% of the time, correctly, safely and with negligible overhead – without needing any changes to the original code. This is when we knew that we finally broke through the barrier that we were struggling with for many years in terms of flexibility and speed.</li>\n<li><a href=\"https://pytorch.org/get-started/pytorch-2.0/\">pytorch 2.0</a></li>\n<li><a href=\"https://pytorch.org/blog/optimizing-production-pytorch-performance-with-graph-transformations\">eager mode vs graph mode:</a><ul>\n<li>在 PyTorch 中，”Eager Execution”（即即时执行模式）是指一种动态图计算模式，其中每个操作都立即被执行，而不是被先放入计算图中。这与静态图计算框架（如 TensorFlow 的早期版本）的工作方式不同。在即时执行模式中，你可以像使用 NumPy 一样进行操作，逐步构建计算图，方便调试和交互。</li>\n<li>开发用 eager 模型，部署用 torchscript 来过渡到 graph mode(会做融合)</li>\n<li>With TorchScript, PyTorch provides ease-of-use and flexibility in eager mode, while seamlessly transitioning to graph mode for speed, optimization, and functionality in C++ runtime environments.</li>\n</ul>\n</li>\n<li>torch.jit.trace 基于字节码， torch.jit.script 基于 AST</li>\n<li>torch inductor<ul>\n<li>作为 torch.compile 的基础技术，配备 Nvidia 和 AMD GPU 的 TorchInductor 将依靠 OpenAI Triton 深度学习编译器来生成高性能代码并隐藏底层硬件细节。OpenAI Triton 生成的内核可实现与手写内核和专用 cuda 库(如 cublas)相当的性能。</li>\n</ul>\n</li>\n<li>torch.compile 的基础是新技术——TorchDynamo、AOTAutograd、PrimTorch 和 TorchInductor</li>\n<li>TorchInductor 是一种深度学习编译器，可为多个加速器和后端生成快速代码。对于 NVIDIA 和 AMD GPU，它使用 OpenAI Triton 作为关键构建块。对于 intel CPU，我们使用多线程、向量化指令生成 C++ 代码，并在可能的情况下将适当的操作卸载到 mkldnn。</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><code>from torch.utils.cpp_extension import load_inline</code>可以方便的在 pytorch 中调用 cuda</li>\n<li><code>torch.cuda.current_stream().synchronize()</code> 只同步当前 CUDA 流</li>\n<li><a href=\"https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch\">nvdia docker</a></li>\n<li>比较两个 tensor 是否相近 <a href=\"https://pytorch.org/docs/stable/generated/torch.isclose.html\">torch.isclose</a><ul>\n<li><a href=\"https://numpy.org/doc/stable/reference/generated/numpy.isclose.html\">numpy.isclose</a></li>\n</ul>\n</li>\n<li>收集 pytorch 环境相关信息：<a href=\"https://github.com/pytorch/pytorch/issues/44299#issue-695606076\">link</a><ul>\n<li><a href=\"https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py\">collect_env.py</a></li>\n</ul>\n</li>\n<li>导出 onnx 时如果遇见 cuda 算子有问题，可以写个 fake 算子, 直接 return out, 不用计算</li>\n<li><code>python -m torch.utils.collect_env</code></li>\n<li>静态图：先编译，如果增加一个计算，需要重新编译, 改变网络意味着重新开始，类似 C++工程的重头编译</li>\n<li>动态图：实时构图，增加一个计算不用编译，直接在原来的图上添加计算节点，类似 C++工程的增量编译</li>\n<li>深度学习模型实际上就是一个计算图。模型部署时通常把模型转换成静态的计算图，即没有控制流（<code>分支语句、循环语句</code>）的计算图。</li>\n<li><code>device = &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;</code></li>\n<li>pytorch 导出模型时会显示 ONNX IR, 类似三段式<ul>\n<li><a href=\"https://github.com/pytorch/pytorch/blob/main/torch/onnx/utils.py#L190\">Functions to export models into the ONNX IR format.</a></li>\n<li>verbose &#x3D; True</li>\n</ul>\n</li>\n<li>pytorch 导出 onnx 问题<ul>\n<li>先跑通 model(x)</li>\n<li>Only tuples, lists and Variables are supported as JIT inputs&#x2F;outputs. Dictionaries and strings are also accepted, but their usage is not recommended. Here, received an input of unsupported type: DataContainer</li>\n<li>需要处理 dataloader DataContainer 到 list</li>\n</ul>\n</li>\n<li>pytorch 模型结构定义之后, 有些算子不一定会使用，导出 onnx 模型时不使用的算子不会导出，应为导出模型进行一次模型推理，在推理的过程中记录所有经过的计算，将这些记录整合成计算图</li>\n<li>pytorch 为什么不直接用 numpy?<ul>\n<li><code>GPU 支持</code>：PyTorch 设计之初就考虑到了与 GPU 的兼容性，允许其在 GPU 上直接执行张量运算，大大加快了深度学习模型的训练和推理速度。相比之下，NumPy 主要是为 CPU 设计的，不支持 GPU 或其他类型的加速硬件。</li>\n<li><code>自动微分</code>：PyTorch 提供了自动微分功能，这对于深度学习至关重要。通过它的 <code>autograd</code> 系统，PyTorch 能够自动计算模型参数的梯度，这对于训练神经网络来说是必需的。NumPy 没有内置这样的功能。</li>\n<li><code>深度学习特定的操作</code>：PyTorch 提供了许多专为深度学习设计的操作和函数，如卷积、池化等，这些在 NumPy 中不是直接可用的。</li>\n<li><code>动态计算图</code>：PyTorch 使用动态计算图（也称为即时执行），这意味着计算图在运行时动态构建，从而提供了更灵活的编程模式，特别是对于复杂的模型和动态输入。而 NumPy 没有这样的概念。</li>\n<li><code>可扩展性和生态系统</code>：虽然 NumPy 在科学计算方面非常强大，但 PyTorch 提供了更适合于大规模、复杂的深度学习模型和应用的工具和库。</li>\n</ul>\n</li>\n<li>在使用动态图（Dynamic Graph）框架（如 PyTorch 或 TensorFlow 的 Eager Execution 模式）进行单步调试时，并不是每一步操作都会完全重新构建整个计算图。相反，每一步操作通常对应计算图的一部分，这个部分在执行时被动态创建和执行。在单步调试时，整个模型的计算图不会在每一步都被重新构建。只有实际执行的操作会被动态添加到图中。</li>\n<li>在使用动态图框架（如 PyTorch 或 TensorFlow 的 Eager Execution 模式）进行单步调试时，整个模型的计算图并不会在每一步都被重新构建。动态图的特点是在运行时动态构建和执行计算图的一部分，而非整个图。这种方法与静态图框架（如 TensorFlow 的传统模式）形成对比，后者在执行任何计算前需要先构建完整的计算图并对其进行优化。</li>\n<li>循环：<ul>\n<li>不固定：动态图</li>\n<li>固定：可以被展开，构成静态图</li>\n</ul>\n</li>\n<li><code>torch==1.11.0+cu113</code></li>\n<li><code>pip install torch==1.11.0+cu113 --extra-index-url https://download.pytorch.org/whl/cu113</code></li>\n<li><code>pip freeze | grep torch</code>: 查看库版本</li>\n<li><code>pip show torch</code>: 查看库版本</li>\n<li><code>python3 -c &quot;import torch; print(torch.__version__)&quot;</code></li>\n<li>pytorch tensor to binary file: <code>tensor.cpu().numpy().astype(np.float32).tofile(&quot;test.bin&quot;)</code>; c++ read binary file</li>\n<li>tensor 中取单个元素会降维；例如从二维 tensor 取单行或者单列结果会变为一维 tensor</li>\n<li><code>help(torch.ones)</code> 显示函数 help</li>\n<li><code>print(dir(torch.distributions))</code> 显示 torch 的 distributions</li>\n</ol>\n<h2 id=\"extending\"><a href=\"#extending\" class=\"headerlink\" title=\"extending\"></a><a href=\"https://pytorch-cn.readthedocs.io/zh/latest/notes/extending/\">extending</a></h2><h3 id=\"Autograd\"><a href=\"#Autograd\" class=\"headerlink\" title=\"Autograd\"></a>Autograd</h3><ol>\n<li>Autograd Profiler 可以统计 autograd 性能</li>\n<li><code>c = a.detach().clone()</code> c 不计算 grad, requires_grad&#x3D;False</li>\n<li>通过 watch model[0].weight.data 和 model[0].weight.grad 看 weight 值和 grad 变化， <a href=\"https://pytorch.org/tutorials/beginner/pytorch_with_examples.html#pytorch-optim\">sample</a></li>\n<li>见 deep_learning.md 下的 backward</li>\n<li>通过 loss 函数求各个 module weights 的 grad，存在 weights tensor.grad 里，中间的 activation 没有 grad, 只有叶子节点有</li>\n<li>Operation 对 tensor 求 grad</li>\n<li>自定义 OP 需要继承 torch.autograd.Fuction <a href=\"https://pytorch.org/tutorials/beginner/pytorch_with_examples.html#pytorch-defining-new-autograd-functions\">pytorch-defining-new-autograd-functions</a><ul>\n<li>forward 输入参数个数是 backward 输出参数个数</li>\n<li>backward 输入参数个数是 forward 输出参数个数</li>\n<li>通过 ctx 在 forward 和 backward 中传递 tensor, 用于计算梯度</li>\n</ul>\n</li>\n<li>每个原始的 Autograd 运算符实际上都是在 tensor 上运行的两个函数。 正向函数从输入 tensor 计算输出 tensor。 反向函数接收相对于某个标量值的输出 tensor 的梯度，并计算相对于相同标量值的输入 tensor 的梯度。</li>\n<li>反向传播用于算梯度</li>\n<li>backward()实际上是通过 DCG 图从根张量追溯到每一个叶子节点，然后计算将计算出的梯度存入每个叶子节点的.grad 属性中</li>\n<li>在某种程度上，反向传播只是链式法则的一个花哨的名字—— Jeremy Howard</li>\n<li>backward 不传入参数时，默认为传入 backward(torch.tensor(1.0))。</li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/pytorch_with_examples.html\">Learning PyTorch with Examples</a></li>\n<li><a href=\"https://blog.csdn.net/niexinyu0026/article/details/122262082\">用 numpy、PyTorch 自动求导、torch.nn 库实现两层神经网络</a> <a href=\"https://www.cnblogs.com/luedong/p/14492361.html\">link</a></li>\n<li><a href=\"https://blog.csdn.net/baidu_38797690/article/details/122180655\">PyTorch：梯度计算之反向传播函数 backward()</a></li>\n</ol>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><ol>\n<li>print(model)只是打印 self 定义的 layer，并不是计算图</li>\n<li><a href=\"https://github.com/szagoruyko/pytorchviz\">pytorchviz</a> 在 pytorch 中画计算图</li>\n</ol>\n<h2 id=\"tensor\"><a href=\"#tensor\" class=\"headerlink\" title=\"tensor\"></a>tensor</h2><ol>\n<li><a href=\"https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html\">基础运算</a></li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/introyt/tensors_deeper_tutorial.html\">高级</a></li>\n<li><a href=\"https://zh.d2l.ai/chapter_preliminaries/ndarray.html\">d2l ndarray</a></li>\n<li><code>x = torch.arange(10)</code> tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</li>\n<li><code>x = torch.arange(10.0)</code> tensor([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</li>\n<li><code>type(x)</code> 打印 x 类型</li>\n<li><code>torch.randn(2)</code> tensor([ 0.6872, -0.3433]); 返回一个填充随机正态分布的张量(mean&#x3D;0, std&#x3D;1)。即,生成的值大概符合平均数为 0,标准差为 1 的正态分布。</li>\n<li><code>X = torch.rand(2,20)</code> 返回一个填充随机均匀分布的张量,即在[0,1)区间内均匀随机。</li>\n<li><code>x = x.reshape(2, 5)</code></li>\n<li><code>x.shape</code> torch.Size([2, 5])</li>\n<li><code>a = torch.tensor(3.4); a.shape</code> torch.Size([]) 标量</li>\n<li><code>a = torch.tensor([3.4]);a.shape</code> torch.Size([1]) 向量</li>\n<li><code>x.numel()</code> 10; element number</li>\n<li><code>len(x)</code> 2; len()为 python 内置函数， 用于 tensor 时是指 tesnor 的维度（dimension）</li>\n<li><code>torch.ones(2, 4)</code></li>\n<li><code>torch.zeros(2, 4)</code></li>\n<li><code>X.reshape(-1)</code> 展平为一维</li>\n<li><code>//</code>向下取整除法</li>\n<li><code>%</code> 求模，取余</li>\n<li><code>math.ceil(x)</code>向上取整数</li>\n<li><code>math.floor(x)</code>向下取整</li>\n<li><code>round(x)</code> 四舍六入五成双（例如 round(2.5)&#x3D;2, round(3.5)&#x3D;4, round(4.5)&#x3D;4, round(5.5)&#x3D;6) 小数部分为 0.5 向偶数</li>\n<li>tensor 基本运算</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.tensor([<span class=\"number\">1.0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>])  <span class=\"comment\"># 1.0 mean float</span></span><br><span class=\"line\">y = torch.tensor([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">x + y, x - y, x * y, x / y, x ** y  <span class=\"comment\"># **运算符是求幂运算</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>tensor 矩阵运算</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = torch.arange(<span class=\"number\">9</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">Y = torch.arange(<span class=\"number\">9</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">X.t() <span class=\"comment\"># 转置</span></span><br><span class=\"line\">X @ Y <span class=\"comment\"># 矩阵乘</span></span><br><span class=\"line\">torch.matmul(X, Y) <span class=\"comment\"># 矩阵乘</span></span><br><span class=\"line\">X * Y <span class=\"comment\"># 元素分别相乘</span></span><br><span class=\"line\">X + <span class=\"number\">5</span> <span class=\"comment\"># 广播：分别加5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>torch.exp(x)</code> tensor 求指数</li>\n<li>concat and condition</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = torch.arange(<span class=\"number\">12</span>, dtype=torch.float32).reshape((<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">Y = torch.tensor([[<span class=\"number\">2.0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]])</span><br><span class=\"line\">torch.cat((X, Y), dim=<span class=\"number\">0</span>), torch.cat((X, Y), dim=<span class=\"number\">1</span>)  <span class=\"comment\"># dim=0按行拼接， dim=1按列拼接， 0代表最里面一个维度</span></span><br><span class=\"line\">X == Y <span class=\"comment\"># shape: torch.Size([3, 4])</span></span><br><span class=\"line\">X &lt; Y</span><br><span class=\"line\">X &gt; Y</span><br><span class=\"line\">X.<span class=\"built_in\">sum</span>() <span class=\"comment\"># 求和</span></span><br><span class=\"line\">X.mean() <span class=\"comment\"># 求均值</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>原位操作 下划线</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = torch.tensor([<span class=\"number\">0</span>, math.pi / <span class=\"number\">4</span>, math.pi / <span class=\"number\">2</span>, <span class=\"number\">3</span> * math.pi / <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a:&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.sin(a))   <span class=\"comment\"># this operation creates a new tensor in memory</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)              <span class=\"comment\"># a has not changed</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = torch.tensor([<span class=\"number\">0</span>, math.pi / <span class=\"number\">4</span>, math.pi / <span class=\"number\">2</span>, <span class=\"number\">3</span> * math.pi / <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nb:&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.sin_(b))  <span class=\"comment\"># note the underscore</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>索引和切片</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X[-<span class=\"number\">1</span>] <span class=\"comment\"># 取最后一个元素</span></span><br><span class=\"line\">X[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\"># 取第二个和第三个元素，不包含X[3]</span></span><br><span class=\"line\">X[<span class=\"number\">1</span>,<span class=\"number\">2</span>] = <span class=\"number\">9</span> <span class=\"comment\"># 赋值</span></span><br><span class=\"line\">X[<span class=\"number\">0</span>:<span class=\"number\">2</span>, :] = <span class=\"number\">12</span> <span class=\"comment\"># 前两行赋值为12</span></span><br><span class=\"line\">X = torch.arange(<span class=\"number\">12</span>, dtype=torch.float32).reshape((<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">X[<span class=\"number\">1</span>:<span class=\"number\">3</span>, <span class=\"number\">2</span>:<span class=\"number\">4</span>] 取右下角两行两列</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>节省内存: 注意 Y &#x3D; Y + X 与 X +&#x3D; Y 效果不一致</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">before = <span class=\"built_in\">id</span>(Y)</span><br><span class=\"line\">Y = Y + X</span><br><span class=\"line\"><span class=\"built_in\">id</span>(Y) == before <span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\">Z = torch.zeros_like(Y)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(Z):&#x27;</span>, <span class=\"built_in\">id</span>(Z))</span><br><span class=\"line\">Z[:] = X + Y</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(Z):&#x27;</span>, <span class=\"built_in\">id</span>(Z))</span><br><span class=\"line\"></span><br><span class=\"line\">before = <span class=\"built_in\">id</span>(X)</span><br><span class=\"line\">X += Y</span><br><span class=\"line\"><span class=\"built_in\">id</span>(X) == before <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>和 numpy 转换</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A = X.numpy()</span><br><span class=\"line\">B = torch.tensor(A)</span><br><span class=\"line\"><span class=\"built_in\">type</span>(A), <span class=\"built_in\">type</span>(B)</span><br><span class=\"line\"></span><br><span class=\"line\">a = torch.tensor([<span class=\"number\">3.5</span>])</span><br><span class=\"line\">a, a.item(), <span class=\"built_in\">float</span>(a), <span class=\"built_in\">int</span>(a) <span class=\"comment\"># (tensor([3.5000]), 3.5, 3.5, 3)  tuple</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>type 转换 <a href=\"https://pytorch.org/docs/stable/tensors.html\">type</a></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = torch.arange(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">X.dtype <span class=\"comment\"># torch.int64</span></span><br><span class=\"line\">X.to(torch.float32)</span><br><span class=\"line\">torch.tensor([<span class=\"number\">1.2</span>]).<span class=\"built_in\">type</span>() <span class=\"comment\"># torch.FloatTensor</span></span><br><span class=\"line\">torch.tensor([<span class=\"number\">1.2</span>]).dtype <span class=\"comment\"># torch.float32</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>判断是否有 gpu</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;We have a GPU!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Sorry, CPU only.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">    my_device = torch.device(<span class=\"string\">&#x27;cuda&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    my_device = torch.device(<span class=\"string\">&#x27;cpu&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Device: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_device))</span><br><span class=\"line\"></span><br><span class=\"line\">x = torch.rand(<span class=\"number\">2</span>, <span class=\"number\">2</span>, device=my_device)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cpu cuda</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tensor.device <span class=\"comment\">#查看在gpu还是cpu</span></span><br><span class=\"line\">X.cpu()</span><br><span class=\"line\">X.cuda() <span class=\"comment\"># 默认cuda:0</span></span><br><span class=\"line\">X.to(<span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">X.to(<span class=\"string\">&quot;cuda:0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">device = torch.device(<span class=\"string\">&quot;cuda&quot;</span>)</span><br><span class=\"line\">Y = X.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PyTorch的GPU端对tensor数据类型的支持是有限的,很多运算只实现了float/double类型的GPU支持。</span></span><br><span class=\"line\">X = torch.arange(<span class=\"number\">9</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">3</span>).cuda().to(torch.float32)</span><br><span class=\"line\">Y = torch.arange(<span class=\"number\">9</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">3</span>).cuda().to(torch.float32)</span><br><span class=\"line\">torch.matmul(X, Y)</span><br><span class=\"line\">X @ Y</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>model cpu cuda</li>\n<li>model.to(“cuda”)会将 model 参数放在显存中</li>\n</ol>\n<h2 id=\"torchscript\"><a href=\"#torchscript\" class=\"headerlink\" title=\"torchscript\"></a><a href=\"https://cloud.tencent.com/developer/article/2010575\">torchscript</a></h2><ol>\n<li>TorchScript 是 PyTorch 模型推理部署的中间表示，可以在高性能环境 libtorch（C ++）中直接加载，实现模型推理，而无需 Pytorch 训练框架依赖。torch.jit 是 torchscript Python 语言包支持，支持 pytorch 模型快速，高效，无缝对接到 libtorch 运行时，实现高效推理。</li>\n<li>torchscript 主要包含权重和计算过程(IR; 类似.text; 各种函数，有一个入口)</li>\n<li>trace 指的是进行一次模型推理，在推理的过程中记录所有经过的计算，将这些记录整合成计算图<ul>\n<li>for 循环被展开</li>\n</ul>\n</li>\n<li>script 会直接解析网络定义的 python 代码，生成抽象语法树 AST，因此这种方法可以解决一些 trace 无法解决的问题，比如对 branch&#x2F;loop 等数据流控制语句的建图。<ul>\n<li>for 循环编程子图</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h2><ol>\n<li><a href=\"https://datawhalechina.github.io/thorough-pytorch/%E7%AC%AC%E4%BA%94%E7%AB%A0/5.1%20PyTorch%E6%A8%A1%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%9A%84%E6%96%B9%E5%BC%8F.html\">PyTorch 模型定义的方式</a><ul>\n<li>Sequential 适用于快速验证结果</li>\n<li>ModuleList 和 ModuleDict 在某个完全相同的层需要重复出现多次时，非常方便实现，可以一行顶多行；</li>\n</ul>\n</li>\n<li>定义模型时可以直接初始化参数，也可以后期加载<ul>\n<li><code>self.lin1.weight = nn.Parameter(torch.arange(-4.0, 5.0).view(3, 3))</code></li>\n</ul>\n</li>\n<li>basic</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\">model = nn.Sequential(nn.Linear(<span class=\"number\">20</span>, <span class=\"number\">256</span>), nn.ReLU(), nn.Linear(<span class=\"number\">256</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">X = torch.rand(<span class=\"number\">2</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">model(X)</span><br><span class=\"line\"><span class=\"built_in\">help</span>(model) <span class=\"comment\">#可以看帮助</span></span><br><span class=\"line\"></span><br><span class=\"line\">output = x</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;输入:&#x27;</span>, output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每层输出</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, layer <span class=\"keyword\">in</span> model.named_children():</span><br><span class=\"line\">    output = layer(output)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;层:&#x27;</span>, name, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27;输出:&#x27;</span>, output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每层参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> model.named_parameters():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Name: <span class=\"subst\">&#123;name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Size: <span class=\"subst\">&#123;param.size()&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Values: \\n<span class=\"subst\">&#123;param.data&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>model parmas</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Load model directly</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> transformers <span class=\"keyword\">import</span> AutoTokenizer, AutoModelForCausalLM</span><br><span class=\"line\"></span><br><span class=\"line\">model = AutoModelForCausalLM.from_pretrained(<span class=\"string\">&quot;./Llama-2-7b-hf&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(model)</span><br><span class=\"line\"><span class=\"keyword\">from</span> prettytable <span class=\"keyword\">import</span> PrettyTable</span><br><span class=\"line\"></span><br><span class=\"line\">table = PrettyTable([<span class=\"string\">&#x27;Name&#x27;</span>, <span class=\"string\">&#x27;Shape&#x27;</span>, <span class=\"string\">&#x27;Param&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> model.named_parameters():</span><br><span class=\"line\">    param_count = param.numel()</span><br><span class=\"line\">    table.add_row([name, param.shape, param_count])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(table)</span><br><span class=\"line\"></span><br><span class=\"line\">num_parameters = <span class=\"built_in\">sum</span>(p.numel() <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> model.parameters())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num_parameters)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>打印 model parameters <a href=\"https://pytorch.org/tutorials/beginner/introyt/autogradyt_tutorial.html\">autograd_tutorial</a> <a href=\"https://pytorch.org/tutorials/beginner/introyt/modelsyt_tutorial.html\">model turorial</a><ul>\n<li><code>list(model.parameters())</code></li>\n<li><code>list(model.named_parameters())</code></li>\n<li><code>print(model.layer2.weight[0][0:10])</code></li>\n<li><code>print(model[0].weight)</code> sequnce</li>\n<li><code>print(model[0].bias)</code></li>\n<li><code>print([param for name,param in model.named_parameters()][0])</code></li>\n</ul>\n</li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/saving_loading_models.html#save\">torch save and load</a></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.save(model, PATH)</span><br><span class=\"line\"></span><br><span class=\"line\">model = torch.load(PATH)</span><br><span class=\"line\">model.<span class=\"built_in\">eval</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"model-export\"><a href=\"#model-export\" class=\"headerlink\" title=\"model export\"></a>model export</h2><ol>\n<li>Expected all tensors to be on the same device<ul>\n<li>vsocde 断点到_jit_pass_onnx_constant_fold， 查看 graph， 会看到每个 op 所在 device 和代码位置</li>\n</ul>\n</li>\n<li>注意 pytorch 模型在转出 onnx 时会做融合或拆分，不是一对一的关系</li>\n<li>nonzero: B&#x3D;A[b &gt; c], b &gt; c 是 bool, B 取 b &gt; c 的值; tensorrt8.6 之前不支持， 可用 topk + mask 替代</li>\n<li>nonzero: Returns the indices of the elements that are non-zero</li>\n<li>squeeze: 如果某一维是 1，把它删掉。需要判断， 也会导致图里面有 If</li>\n<li>update: a[100] &#x3D; 1 不会产生新 tensor, tensorrt 不支持，导出的图会有问题， 用 scatter 替换,scatter 会生成新的 tensor</li>\n<li>a[b&gt;c]会产生 nonzero, 有 nonzero 就会有 if 分支，就是动态图</li>\n<li>export 加 verbose &#x3D; True, # onnx op 显示代码位置; pytorch1.10 还不支持，需要搜 log</li>\n<li>当我们使用了 Pytorch 里面的[]索引操作或者其它需要判断的情况，ONNX 模型会多出一些 if OP，这个时候这个 if OP 的输入已经是一个确定的 True，因为我们已经介绍过为 False 那部分的子图会被丢掉。<a href=\"http://giantpandacv.com/project/%E9%83%A8%E7%BD%B2%E4%BC%98%E5%8C%96/AI%20%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%85%B6%E5%AE%83%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/ONNX%E5%86%8D%E6%8E%A2/\">link</a></li>\n<li><a href=\"https://glaringlee.github.io/onnx.html#id17\">不要用 ONNX_FALLTHROUGH</a><ul>\n<li>此模式可用于导出未在 ONNX 中注册和支持的任何运算符（ATen 或非 ATen）。导出失败并按原样导出操作符，作为自定义操作。</li>\n</ul>\n</li>\n<li>copy.deepcopy() 可能导致 export 出问题</li>\n<li>export 有问题需要从最外层一步步定位到内部看哪里出问题了，提前 return,多层次上都提前返回, 一步步定位哪里导出的问题, 注意 export 函数中 model_output 不要填，否则会强制输数个数报错<ul>\n<li>不要的代码先注释掉</li>\n</ul>\n</li>\n<li>export 出问题可以先定位具体哪个 module 出的问题</li>\n<li>Function 类有一个很好的性质：如果它定义了 symbolic 静态方法，该 Function 在执行 torch.onnx.export() 时就可以根据 symbolic 中定义的规则转换成 ONNX 算子。</li>\n<li>导出 onnx 模型时不用 pytorch 自定义算子不用定义 backward, trace 只运行 forward</li>\n<li>ONNX 是一套标准，本身并不包括实现。导出为 onnx 时我们就简略地定义一个 ONNX 可变形卷积算子，而不去写它在某个推理引擎上的实现。</li>\n<li>symbolic 符号函数，可以看成是 PyTorch 算子类的一个静态方法。在把 PyTorch 模型转换成 ONNX 模型时，各个 PyTorch 算子的符号函数 symbolic 会被依次调用，以完成 PyTorch 算子到 ONNX 算子的转换。<ul>\n<li>第一个参数就固定叫 g，它表示和计算图相关的内容。g 有一个方法 op。在把 PyTorch 算子转换成 ONNX 算子时，需要在符号函数中调用此方法来为最终的计算图添加一个 ONNX 算子。</li>\n<li>g.op(“Asinh”, input)则完成了 ONNX 算子的定义。其中，第一个参数”Asinh”是算子在 ONNX 中的名称。</li>\n</ul>\n</li>\n<li>(good)PyTorch 转 ONNX 的跟踪导出法是不是万能的。如果我们在模型中做了一些很“出格”的操作，跟踪法会把某些取决于输入的中间结果变成常量，从而使导出的 ONNX 模型和原来的模型有出入。 <a href=\"https://mmdeploy.readthedocs.io/zh-cn/v1.2.0/tutorial/03_pytorch2onnx.html#id4\">link</a><ul>\n<li>涉及张量与普通变量转换的逻辑都会导致最终的 ONNX 模型不太正确, 例如 64 要用 torch.tensor(64)</li>\n<li>我们也可以利用这个性质，在保证正确性的前提下令模型的中间结果变成常量。这个技巧常常用于模型的静态化上，即令模型中所有的张量形状都变成常量; shape to constant</li>\n</ul>\n</li>\n<li><a href=\"https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html\">Saving and loading a general checkpoint in PyTorch</a></li>\n<li>PyTorch 模型在导出到 ONNX 模型时，模型的输入参数的类型必须全部是 torch.Tensor</li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/onnx/export_simple_model_to_onnx_tutorial.html\">Export a PyTorch model to ONNX</a><ul>\n<li>pytorch model to onnx(导出为 batch 1 时需要设置输入数据第一维度为 1,)</li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/onnx/export_simple_model_to_onnx_tutorial.html#compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime\">Compare the PyTorch results with the ones from the ONNX Runtime</a></li>\n<li><a href=\"https://pytorch.org/tutorials/advanced/super_resolution_with_onnxruntime.html\">Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime</a></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.models <span class=\"keyword\">as</span> models</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.onnx <span class=\"keyword\">as</span> onnx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载预训练模型</span></span><br><span class=\"line\">model = models.resnet18(pretrained=<span class=\"literal\">True</span>) <span class=\"comment\">## 有网络结构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个输入张量作为示例; 注意数据和模型要么都在cuda，要么都在cpu</span></span><br><span class=\"line\">input_data = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>)</span><br><span class=\"line\">input_data = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>).cuda()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置模型为推理模式</span></span><br><span class=\"line\">model.<span class=\"built_in\">eval</span>() <span class=\"comment\"># 只影响, 不启用 Batch Normalization 和 Dropout</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将模型和输入张量转换为ONNX格式</span></span><br><span class=\"line\">onnx_path = <span class=\"string\">&quot;model.onnx&quot;</span></span><br><span class=\"line\">onnx.export(model, input_data, onnx_path) <span class=\"comment\"># 有参数可以做常量折叠</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型已成功转换为ONNX格式并保存在:&quot;</span>, onnx_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Input to the model</span></span><br><span class=\"line\">x = torch.randn(batch_size, <span class=\"number\">1</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>, requires_grad=<span class=\"literal\">True</span>)</span><br><span class=\"line\">torch_out = torch_model(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Export the model</span></span><br><span class=\"line\">torch.onnx.export(torch_model,               <span class=\"comment\"># model being run</span></span><br><span class=\"line\">                  x,                         <span class=\"comment\"># model input (or a tuple for multiple inputs)</span></span><br><span class=\"line\">                  <span class=\"string\">&quot;super_resolution.onnx&quot;</span>,   <span class=\"comment\"># where to save the model (can be a file or file-like object)</span></span><br><span class=\"line\">                  export_params=<span class=\"literal\">True</span>,        <span class=\"comment\"># store the trained parameter weights inside the model file</span></span><br><span class=\"line\">                  opset_version=<span class=\"number\">10</span>,          <span class=\"comment\"># the ONNX version to export the model to</span></span><br><span class=\"line\">                  do_constant_folding=<span class=\"literal\">True</span>,  <span class=\"comment\"># whether to execute constant folding for optimization</span></span><br><span class=\"line\">                  input_names = [<span class=\"string\">&#x27;input&#x27;</span>],   <span class=\"comment\"># the model&#x27;s input names</span></span><br><span class=\"line\">                  output_names = [<span class=\"string\">&#x27;output&#x27;</span>], <span class=\"comment\"># the model&#x27;s output names</span></span><br><span class=\"line\">                  verbose = <span class=\"literal\">True</span>,            <span class=\"comment\"># onnx op 显示代码位置</span></span><br><span class=\"line\">                  dynamic_axes=&#123;<span class=\"string\">&#x27;input&#x27;</span> : &#123;<span class=\"number\">0</span> : <span class=\"string\">&#x27;batch_size&#x27;</span>&#125;,    <span class=\"comment\"># variable length axes</span></span><br><span class=\"line\">                                <span class=\"string\">&#x27;output&#x27;</span> : &#123;<span class=\"number\">0</span> : <span class=\"string\">&#x27;batch_size&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"model-info\"><a href=\"#model-info\" class=\"headerlink\" title=\"model info\"></a>model info</h2><ol>\n<li>需要 model.eval()； 不会打印 dropout 层, 不启用 Batch Normalization 和 Dropout</li>\n<li><a href=\"https://github.com/TylerYep/torchinfo\">torchinfo</a></li>\n<li><code>summary(model, [(1, 1, 32000), (1,1,32000), (1, 1, 32000), (1,1,32000)], dtypes=[torch.long, torch.long, torch.long, torch.long])</code></li>\n</ol>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ol>\n<li><a href=\"https://github.com/pytorch/captum\">captum</a> Model interpretability and understanding for PyTorch</li>\n<li><a href=\"https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html\">tensorboard_tutorial</a></li>\n</ol>\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol start=\"2\">\n<li>量化模型</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/pytorch/tutorials/tree/main\">tutorials</a></li>\n<li><a href=\"https://pytorch.org/tutorials/distributed/home.html\">分布式训练</a></li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html\">tutorials</a></li>\n<li><a href=\"https://pytorch.org/docs/stable/index.html\">docs</a></li>\n<li><a href=\"https://yiyibooks.cn/yiyibooks/pytorch_131/index.html\">中文</a></li>\n</ol>\n"},{"title":"rerun","url":"/2023/10/08/rerun/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><a href=\"https://foxglove.dev/\">foxglove 支持 ros</a> <a href=\"https://docs.ros.org/en/foxy/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.html\">Visualizing-ROS-2-Data-With-Foxglove-Studio</a></li>\n<li>日志重放工具 log-replay tools <a href=\"https://www.rerun.io/blog/rosbag\">link</a></li>\n<li>观察工具 <a href=\"https://www.rerun.io/blog#what-is-a-seeingtool\">what-is-a-seeingtool</a></li>\n<li><a href=\"https://vimeo.com/97903574\">Seeing Spaces 它是 Figma、Webflow、Our World in Data 等许多项目的灵感来源</a></li>\n<li>类似 rosbag</li>\n<li>rerun 可以纪录每帧对应的 latency，fps, 画图，平均值？方便分析哪一帧耗时</li>\n<li>不链接 viewer 也不保存，相当于不操作？方便开启和关闭 log</li>\n<li>使用 rerun 实时或回放监测的数据</li>\n<li><code>rr.set_time_sequence(&quot;frame_nr&quot;, x) # frame_nr为横坐标</code> 横坐标可以选择按帧或时间显示</li>\n<li>测试程序可以关闭 viewer(init spawn false)， 将结果记录到 rrd 文件里（rr.save), 使用 online demo 回放</li>\n<li>可以显示 log 和文档 <a href=\"https://github.com/rerun-io/rerun/tree/main/examples/python/detect_and_track_objects\">link</a></li>\n<li><code>pip install rerun-sdk &amp;&amp; python3 -m rerun_demo</code>安装并运行 demo</li>\n<li><code>python3 -m rerun</code>启动客户端</li>\n<li><code>python3 -m rerun --web-viewer</code>启动 web, <code>http://&#123;ip&#125;:9090/</code> to open webserver</li>\n<li><code>python3 -m rerun --web-viewer --web-viewer-port 5900</code> wsl docker</li>\n<li><code>python3 -m rerun --web-viewer --web-viewer-port 5900 --save test.rrd</code> 保存接收到的 log, save 时不能打开 web</li>\n<li><a href=\"https://www.rerun.io/docs/reference/sdk-operating-modes\">4 sdk-operating-modes</a> Connnect: Connects to a remote Rerun Viewer and streams all the data via TCP.</li>\n<li>good: docker web live data<ul>\n<li><code>python3 -m rerun --web-viewer --web-viewer-port 5900 --ws-server-port 6080</code> 注意–web-viewer-port 是打开 viewer 的端口， –ws-server-port 是用于连接 server 端口</li>\n<li><code>examples/python/clock/main.py --connect --addr=127.0.0.1:9876</code> example 用到的代码<code>rr.connect(127.0.0.1:9876)</code>; 注意 viewer 默认监听的是 9876, –port 才能修改，注意和–web-viewer-port 的区别</li>\n<li><code>http://localhost:10087/?url=ws://localhost:10089</code> (in docker -p10087:5900 -p10089:6080) or <code>http://10.31.2.47:9090/?url=ws://10.31.2.47:9877</code> 注意两个 localhost 和端口号都要替换</li>\n</ul>\n</li>\n<li>测试是否收到数据<ul>\n<li><code>python3 -m rerun --web-viewer --web-viewer-port 5900  --test-receive</code></li>\n<li><code>examples/python/clock/main.py --connect --addr=127.0.0.1:9876</code></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rerun-io/rerun/blob/0a2a594b1f9527e91400a0b1d2dbb4943080f385/rerun_py/README.md?plain=1#L50\">connect sample</a></li>\n<li>多次链接有多次数据</li>\n<li>python connect code</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rerun <span class=\"keyword\">as</span> rr  <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> `rerun`, not `rerun-sdk`!</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">rr.init(<span class=\"string\">&quot;rerun_example_my_data&quot;</span>, spawn=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rr.connect(<span class=\"string\">&quot;192.168.1.3:9876&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">positions = np.zeros((<span class=\"number\">10</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">positions[:,<span class=\"number\">0</span>] = np.linspace(-<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">colors = np.zeros((<span class=\"number\">10</span>,<span class=\"number\">3</span>), dtype=np.uint8)</span><br><span class=\"line\">colors[:,<span class=\"number\">0</span>] = np.linspace(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">rr.log(<span class=\"string\">&quot;my_points&quot;</span>,rr.Points3D(positions, colors=colors, radii=<span class=\"number\">0.5</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h2><ol>\n<li><a href=\"https://github.com/rerun-io/cpp-example-opencv-eigen\">cpp-example-opencv-eigen</a><ul>\n<li><code>pixi run example</code></li>\n</ul>\n</li>\n<li>测试程序可去掉<code>rec.spawn</code>, 添加<ul>\n<li><code>rec.save(&quot;test.rrd&quot;);</code> 保存结果到 test.rrd</li>\n<li><code>rec.connect(&quot;127.0.0.1:9876&quot;);</code> 连接本地的 viewer, 本地的 viewer(in docker -p10087:5900 -p10089:6080) <code>python3 -m rerun --web-viewer --web-viewer-port 5900 --ws-server-port 6080</code>; 本地浏览器<code>http://localhost:10087/?url=ws://localhost:10089</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ol>\n<li><code>export RERUN=off</code>环境变量控制是否输出 log</li>\n<li><code>rerun --help</code>可以查看环境变量</li>\n</ol>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><ol>\n<li><a href=\"https://www.rerun.io/docs/getting-started/troubleshooting\">troubleshooting</a></li>\n</ol>\n<h2 id=\"logging\"><a href=\"#logging\" class=\"headerlink\" title=\"logging\"></a><a href=\"https://www.rerun.io/docs/reference/types/archetypes/text_log#textlogintegration\">logging</a></h2><ol>\n<li>code</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">import rerun as rr</span><br><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">def <span class=\"selector-tag\">main</span>() -&gt; <span class=\"attribute\">None</span>:</span><br><span class=\"line\">    rr.<span class=\"built_in\">init</span>(<span class=\"string\">&quot;rerun_example_my_data&quot;</span>, spawn=False)</span><br><span class=\"line\">    rr.<span class=\"built_in\">save</span>(<span class=\"string\">&quot;recording.rrd&quot;</span>)</span><br><span class=\"line\">    rr.<span class=\"built_in\">set_time_sequence</span>(<span class=\"string\">&quot;frame&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    logging.<span class=\"built_in\">getLogger</span>().<span class=\"built_in\">addHandler</span>(rr.<span class=\"built_in\">LoggingHandler</span>(<span class=\"string\">&quot;logs/handler&quot;</span>))</span><br><span class=\"line\">    logging.<span class=\"built_in\">getLogger</span>().<span class=\"built_in\">setLevel</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    logging.<span class=\"built_in\">info</span>(<span class=\"string\">&quot;This INFO log got added through the standard logging interface&quot;</span>)</span><br><span class=\"line\">    rr.<span class=\"built_in\">set_time_sequence</span>(<span class=\"string\">&quot;frame&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    logging.<span class=\"built_in\">info</span>(<span class=\"string\">&quot;Test logging&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">main</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"samples\"><a href=\"#samples\" class=\"headerlink\" title=\"samples\"></a>samples</h2><ol>\n<li>只记录数据不显示, 用于回放 w</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rerun <span class=\"keyword\">as</span> rr</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> cos, sin, tau</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log_trig</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Log a time series</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">int</span>(tau * <span class=\"number\">2</span> * <span class=\"number\">100.0</span>)):</span><br><span class=\"line\">        rr.set_time_sequence(<span class=\"string\">&quot;frame_nr&quot;</span>, t)</span><br><span class=\"line\"></span><br><span class=\"line\">        sin_of_t = sin(<span class=\"built_in\">float</span>(t) / <span class=\"number\">100.0</span>)</span><br><span class=\"line\">        rr.log(<span class=\"string\">&quot;trig/sin&quot;</span>, rr.TimeSeriesScalar(sin_of_t, label=<span class=\"string\">&quot;sin(0.01t)&quot;</span>, color=[<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">        cos_of_t = cos(<span class=\"built_in\">float</span>(t) / <span class=\"number\">100.0</span>)</span><br><span class=\"line\">        rr.log(<span class=\"string\">&quot;trig/cos&quot;</span>, rr.TimeSeriesScalar(cos_of_t, label=<span class=\"string\">&quot;cos(0.01t)&quot;</span>, color=[<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log_linear</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>):</span><br><span class=\"line\">        rr.set_time_sequence(<span class=\"string\">&quot;frame_nr&quot;</span>, x) <span class=\"comment\"># frame_nr为横坐标</span></span><br><span class=\"line\">        y = x</span><br><span class=\"line\">        rr.log(<span class=\"string\">&quot;linear/x&quot;</span>, rr.TimeSeriesScalar(y, label=<span class=\"string\">&quot;y=x&quot;</span>, color=[<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    rr.init(<span class=\"string\">&quot;rerun_example_my_data&quot;</span>, spawn=<span class=\"literal\">False</span>) <span class=\"comment\"># spawn设置为False表示只记录数据， 不使用viewer显示</span></span><br><span class=\"line\">    rr.save(<span class=\"string\">&quot;recording.rrd&quot;</span>) <span class=\"comment\"># 保存为rrd</span></span><br><span class=\"line\">    log_trig()</span><br><span class=\"line\">    log_linear()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>cool</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rerun <span class=\"keyword\">as</span> rr</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">rr.init(<span class=\"string\">&quot;rerun_example_my_data&quot;</span>, spawn=<span class=\"literal\">False</span>)</span><br><span class=\"line\">rr.save(<span class=\"string\">&quot;recording.rrd&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">SIZE = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">pos_grid = np.meshgrid(*[np.linspace(-<span class=\"number\">10</span>, <span class=\"number\">10</span>, SIZE)]*<span class=\"number\">3</span>)</span><br><span class=\"line\">positions = np.vstack([d.reshape(-<span class=\"number\">1</span>) <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> pos_grid]).T</span><br><span class=\"line\"></span><br><span class=\"line\">col_grid = np.meshgrid(*[np.linspace(<span class=\"number\">0</span>, <span class=\"number\">255</span>, SIZE)]*<span class=\"number\">3</span>)</span><br><span class=\"line\">colors = np.vstack([c.reshape(-<span class=\"number\">1</span>) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> col_grid]).astype(np.uint8).T</span><br><span class=\"line\"></span><br><span class=\"line\">rr.log(</span><br><span class=\"line\">            <span class=\"string\">&quot;my_points&quot;</span>,</span><br><span class=\"line\">                rr.Points3D(positions, colors=colors, radii=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">                )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"demos\"><a href=\"#demos\" class=\"headerlink\" title=\"demos\"></a>demos</h2><ol>\n<li><a href=\"https://github.com/rerun-io/rerun/tree/latest/examples/python/plots\">plots</a></li>\n<li><a href=\"https://github.com/rerun-io/rerun/tree/main/examples/python/live_depth_sensor\">live-depth-sensor</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://discord.com/invite/PXtCgFBSmH\">rerun discord 在线信息 </a></li>\n<li><a href=\"https://github.com/rerun-io/rerun\">rerun-io&#x2F;rerun</a></li>\n<li><a href=\"https://www.rerun.io/docs\">docs 示意图</a></li>\n<li><a href=\"https://app.rerun.io/\">online demo</a></li>\n<li><a href=\"https://github.com/rerun-io/rerun/milestones\">rerun&#x2F;milestones</a></li>\n</ol>\n","categories":["Tools","Debug"],"tags":["Debug","DataView"]},{"title":"resume","url":"/2021/10/05/resume/","content":"<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://rxresu.me/\">rxresu.me</a></li>\n<li><a href=\"https://github.com/AmruthPillai/Reactive-Resume\">Reactive-Resume</a> 填写内容，自动生成简历</li>\n<li><a href=\"https://github.com/resumejob/awesome-resume\">简历用语</a></li>\n<li><a href=\"https://github.com/xriley/Orbit-Theme\">Orbit-Theme</a></li>\n<li><a href=\"https://github.com/posquit0/Awesome-CV\">Awesome-CV</a> CV: Curriculum Vitae 个人简历</li>\n<li><a href=\"https://www.overleaf.com/latex/templates/awesome-cv/dfnvtnhzhhbm\">overleaf awesome-cv template</a></li>\n<li><a href=\"https://github.com/jankapunkt/latexcv/tree/master/sidebar\">latexcv</a></li>\n<li><a href=\"https://github.com/dyweb/awesome-resume-for-chinese\">awesome-resume-for-chinese</a></li>\n</ol>\n"},{"title":"samba","url":"/2022/03/18/samba/","content":"<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/samba/smb.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[share]</span><br><span class=\"line\">     path = /home/jiaxiyang/share</span><br><span class=\"line\">     available = <span class=\"built_in\">yes</span></span><br><span class=\"line\">     valid <span class=\"built_in\">users</span> = jiaxiyang</span><br><span class=\"line\">     <span class=\"built_in\">read</span> only = no</span><br><span class=\"line\">     browsable = <span class=\"built_in\">yes</span></span><br><span class=\"line\">     public = <span class=\"built_in\">yes</span></span><br><span class=\"line\">     writable = <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"add-user\"><a href=\"#add-user\" class=\"headerlink\" title=\"add user\"></a>add user</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo smbpasswd -<span class=\"selector-tag\">a</span> jiaxiyang</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"restart\"><a href=\"#restart\" class=\"headerlink\" title=\"restart\"></a>restart</h2><h3 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"regexp\">/etc/i</span>nit.d/samba restart</span><br><span class=\"line\">sudo <span class=\"regexp\">/etc/i</span>nit.d/smbd restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"centos\"><a href=\"#centos\" class=\"headerlink\" title=\"centos\"></a>centos</h3><figure class=\"highlight nsis\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"params\">system</span>ctl start smb.service</span><br><span class=\"line\">sudo <span class=\"params\">system</span>ctl restart smb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h2><h3 id=\"ubuntu-1\"><a href=\"#ubuntu-1\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount.cifs <span class=\"regexp\">//</span><span class=\"number\">10.10</span>.<span class=\"number\">0.61</span><span class=\"regexp\">/jiaxiyang/</span> samba_16 -o user=jiaxiyang</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">映射网络驱动器</span><br><span class=\"line\">\\\\ipaddr\\share</span><br><span class=\"line\"><span class=\"symbol\">NOTE: </span>share is [share] in smb.conf</span><br></pre></td></tr></table></figure>\n"},{"title":"shareX","url":"/2023/11/15/shareX/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>设置上传 url<br><img src=\"https://i.ibb.co/3C66vgd/UQTv-UKxj-Vi.png\" alt=\"设置上传url\"></li>\n</ol>\n<h2 id=\"设置自定义服务器\"><a href=\"#设置自定义服务器\" class=\"headerlink\" title=\"设置自定义服务器\"></a>设置自定义服务器</h2><ol>\n<li><a href=\"https://api.imgbb.com/\">imagebb 生成 key</a><br><img src=\"https://i.ibb.co/Dz3Xkyn/Jf4m-Fd-WXg-F.png\" alt=\"生成key\"></li>\n<li><a href=\"https://github.com/ShareX/CustomUploaders/blob/master/imgbb.com.sxcu\">自定义目标设置贴入，修改 key</a><br><img src=\"https://i.ibb.co/MM2mLg5/2z4l9e-PS2x.png\" alt=\"修改key\"><br><img src=\"https://i.ibb.co/TwmGMk8/BUHj-Zwd0ke.png\" alt=\"key\"></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://getsharex.com/\">shareX</a></li>\n<li><a href=\"https://imgbb.com/\">图片共享</a></li>\n<li><a href=\"https://imgur.com/\">imgur</a></li>\n</ol>\n"},{"title":"roadmap","url":"/2023/06/08/roadmap/","content":"<h2 id=\"如何成为资深-AI-推理软件工程师-chatgpt\"><a href=\"#如何成为资深-AI-推理软件工程师-chatgpt\" class=\"headerlink\" title=\"如何成为资深 AI 推理软件工程师(chatgpt)\"></a>如何成为资深 AI 推理软件工程师(chatgpt)</h2><p>成为资深 AI 推理软件工程师需要具备以下关键步骤和能力：</p>\n<ol>\n<li>建立扎实的 AI 基础：首先，建立扎实的人工智能基础知识。深入了解机器学习和深度学习的基本概念、算法和原理，包括神经网络、优化算法、模型评估等。</li>\n<li>学习推理引擎和框架：研究和学习不同的 AI 推理引擎和框架，如 TensorRT、OpenVINO、TVM 等。了解它们的特点、优化技术和部署方法，熟悉使用它们进行模型推理的流程和工具。</li>\n<li>实践推理项目：通过实践推理项目来应用所学的知识。参与真实的 AI 推理项目，涉及模型优化、推理性能调优、模型部署等方面。通过实践，积累经验并提升自己在 AI 推理软件工程方面的能力。</li>\n<li>熟悉硬件加速和优化技术：AI 推理软件工程师需要了解硬件加速和优化技术，如 GPU、FPGA 等。学习并熟悉如何利用硬件加速器进行模型推理的优化，包括模型转换、量化、融合等技术。</li>\n<li>深入了解模型优化和压缩：掌握模型优化和压缩的技术，以减小模型的大小和计算量，提高推理性能。了解剪枝、量化、知识蒸馏等技术，并能够应用到实际项目中。</li>\n<li>掌握性能分析和调优工具：熟悉性能分析和调优工具，如 TensorBoard、NVIDIA Nsight 等。能够使用这些工具来分析和调优模型推理的性能瓶颈，并做出相应的优化策略。</li>\n<li>深入理解模型部署和集成：了解模型部署和集成的流程和工具。掌握常见的部署方式，如嵌入式设备、边缘计算平台、云平台等，能够将优化后的模型成功部署到目标平台上。</li>\n<li>持续学习和关注最新技术：AI 领域发展迅速，持续学习和关注最新的技术和研究成果至关重要。阅读相关的学术论文、技术博客、研讨会等，保持对新技术和方法的敏感度</li>\n</ol>\n<p>要成为 AI 推理软件专家，可以采取以下步骤：</p>\n<ol>\n<li>建立扎实的 AI 基础知识：深入学习机器学习和深度学习的基本理论、算法和模型。了解常见的神经网络结构和优化算法，如卷积神经网络、循环神经网络、注意力机制等。</li>\n<li>学习推理引擎和框架：熟悉不同的 AI 推理引擎和框架，如 TensorRT、OpenVINO、ONNX Runtime 等。了解它们的特点、优化技术和部署方法，掌握使用它们进行模型推理和优化的技巧。</li>\n<li>实践推理项目：参与实际的 AI 推理项目，从数据预处理、模型选择、推理性能优化等方面积累实践经验。通过实践中的挑战和解决方案，提升在 AI 推理软件工程中的能力。</li>\n<li>研究模型优化和压缩技术：深入研究模型优化和压缩技术，如剪枝、量化、蒸馏等。了解如何减小模型的大小和计算量，提高推理性能，并能够应用这些技术来优化和压缩模型。</li>\n<li>掌握性能分析和调优工具：熟悉性能分析和调优工具，如 TensorBoard、Profiler 等。学会使用这些工具来分析和评估模型的推理性能，并针对性地进行调优。</li>\n<li>深入了解硬件加速和优化技术：了解常见的硬件加速器，如 GPU、FPGA 等，并学习如何充分利用硬件加速器提高模型推理的效率和速度。掌握硬件相关的优化技术和工具。</li>\n<li>持续学习和追踪最新技术：AI 领域发展迅速，保持学习和追踪最新技术和研究成果非常重要。阅读学术论文、参加研讨会和会议，关注业界领先公司的技术博客和公开项目，与其他专家进行交流和讨论。</li>\n<li>实践和贡献开源项目：参与开源项目，为 AI 推理软件的开发和优化做出贡献。通过与开源社区的合作和分享，不断提升自己的技能和知识，并展示自己在 AI 推理软件方面的专业能力。</li>\n<li>与领域专家合作：寻求与领域内的专家合作和交流，参与相关的研究团队或实验室，共同探讨和解决 AI 推理软件领域的问题。与其他专家的合作将加速个人成长和知识积累。</li>\n</ol>\n<p>通过持续的学习、实践和不断提升自身能力，成为 AI 推理软件专家需要一定的时间和经验积累，但坚持不懈和热爱学习将助您在这个领域取得成功。</p>\n<h2 id=\"如何学习推理优化技术\"><a href=\"#如何学习推理优化技术\" class=\"headerlink\" title=\"如何学习推理优化技术\"></a>如何学习推理优化技术</h2><p>要学习推理优化技术，可以按照以下步骤进行：</p>\n<ol>\n<li>建立基础知识：首先，建立对深度学习模型推理的基本理解。了解常用的深度学习框架，如 TensorFlow、PyTorch 等，以及它们的推理过程和优化方法。掌握深度学习模型的基本结构和常用的推理算法。</li>\n<li>学习推理优化技术的理论：深入学习推理优化技术的理论知识。这包括模型剪枝、量化、蒸馏、深度压缩等技术。了解这些技术的原理、优势和适用场景。阅读相关的学术论文、研究报告和专业书籍，掌握推理优化技术的最新研究成果。</li>\n<li>掌握推理优化工具和框架：学习使用推理优化工具和框架，如 TVM、ONNX Runtime、NVIDIA TensorRT 等。了解它们的使用方法、API 接口和优化技术支持。通过实际操作和示例代码，掌握如何在具体的环境中应用推理优化技术。</li>\n<li>实践项目和案例研究：选择一些实际的项目和案例，应用推理优化技术进行实践研究。可以使用开源数据集和模型，尝试不同的推理优化方法，并进行性能对比和评估。通过实践项目，加深对推理优化技术的理解和掌握。</li>\n<li>参加培训和研讨会：参加相关的培训课程、研讨会和工作坊，了解推理优化技术的最新进展和应用实践。这些培训活动通常由专业机构、学术界和工业界组织举办，提供专业指导和实际操作经验。</li>\n<li>加入社区和论坛：加入相关的学术社区、开发者论坛和技术交流平台，与其他学习者和专家进行交流和讨论。这些社区和论坛提供了学习资源、问题解答和经验分享，可以获取更多的学习资料和实践建议。</li>\n<li>持续学习和实践：推理优化技术是一个不断发展和演进的领域，需要持续学习和实践。跟踪最新的研究成果和技术进展，参与相关的竞赛和挑战，与行业内的专家保持联系，不断提升自己的技能和知识水平。<br>总之，学习推理优化技术需要坚实的基础知识、实践项目的经验和与专家的交流。通过不断学习和实践，逐步提升自己的技能，成为一名熟练的推理优化技术专家。</li>\n</ol>\n<h2 id=\"如何学习推理框架\"><a href=\"#如何学习推理框架\" class=\"headerlink\" title=\"如何学习推理框架\"></a>如何学习推理框架</h2><p>学习推理框架的步骤如下：</p>\n<ol>\n<li>确定学习目标：明确你想学习的推理框架，如 TensorRT、ONNX Runtime、OpenVINO 等。了解每个框架的特点、适用场景和优势，选择符合你学习目标和需求的框架。</li>\n<li>学习基础知识：掌握深度学习的基础知识，包括神经网络的结构、训练和推理过程等。了解常见的深度学习框架，如 TensorFlow、PyTorch 等，并学习它们的基本使用方法和 API。</li>\n<li>框架官方文档：查阅所选推理框架的官方文档。官方文档是学习和使用框架的最重要资源，其中包含框架的详细说明、API 文档、示例代码和教程。仔细阅读官方文档，了解框架的功能、接口和使用方法。</li>\n<li>在线教程和视频：寻找相关的在线教程和视频资源。许多推理框架提供官方的在线教程，可以帮助你快速入门和掌握基本操作。此外，还可以搜索其他人分享的教程和视频，如博客文章、YouTube 视频等。</li>\n<li>实践项目：选择一些实际的项目来应用所学的推理框架。可以使用开源的深度学习模型和数据集，将它们加载到推理框架中，进行模型推理和结果分析。通过实践项目，加深对框架的理解和掌握。</li>\n<li>社区交流和讨论：参与相关的开发者社区和技术论坛，与其他学习者和专家进行交流和讨论。这些社区和论坛提供了宝贵的学习资源、问题解答和经验分享，可以从中获得更多的学习资料和实践建议。</li>\n<li>持续学习和更新：推理框架和相关技术在不断发展和更新，保持学习的持续性非常重要。关注最新的技术进展、研究成果和开发者社区的动态，了解最新的框架版本和功能，不断更新自己的知识和技能。</li>\n</ol>\n<h2 id=\"如何学习-python\"><a href=\"#如何学习-python\" class=\"headerlink\" title=\"如何学习 python\"></a>如何学习 python</h2><p>成为 Python 专家需要付出一定的努力和持续的学习。以下是一些建议：</p>\n<ol>\n<li>扎实的基础知识：掌握 Python 的基础知识，包括语法、数据类型、流程控制、函数、模块等。理解 Python 的核心概念和特性，建立坚实的基础。</li>\n<li>深入学习核心库：熟悉 Python 的核心库，如 NumPy、Pandas、Matplotlib 等。这些库是 Python 数据分析和科学计算的基石，深入学习它们的使用方法和高级特性。</li>\n<li>探索常用库和框架：学习并熟悉 Python 的常用库和框架，如 Django、Flask、TensorFlow、PyTorch 等。了解它们的特点、用途和 API，能够使用它们构建实际项目。</li>\n<li>阅读优秀的 Python 代码：阅读优秀的 Python 代码可以帮助你学习和理解高效、优雅的编程风格和技巧。参考开源项目、博客文章、书籍等资源，学习其他 Python 专家的实际应用。</li>\n<li>实践项目：选择一些实际的项目来应用 Python 技术。通过实践项目，深入理解 Python 在不同领域的应用，掌握解决问题的实际方法和技巧。</li>\n<li>参与社区和开源项目：积极参与 Python 开发者社区和开源项目。与其他 Python 专家交流和讨论，分享自己的经验和知识。通过参与开源项目，提升自己的编码能力和项目管理能力。</li>\n<li>持续学习和更新：Python 生态系统在不断发展和更新，保持学习的持续性非常重要。关注最新的 Python 版本、库和框架的发布，了解最新的技术趋势和最佳实践。</li>\n<li>掌握调试和性能优化技巧：学会使用调试工具和技巧来解决代码中的问题。了解 Python 的性能优化技巧，提高代码的执行效率和资源利用率。</li>\n<li>教学和分享经验：通过教学和分享经验，巩固自己的知识，并帮助其他人学习 Python。可以编写博客文章、教程，参与技术分享活动等。<br>最重要的是保持对 Python 的热情和持续的学习态度。不断学习新知识，探索新技术，并将其应用到实际项目中，才能逐步成为 Python 专家。</li>\n</ol>\n<h2 id=\"AI-推理框架\"><a href=\"#AI-推理框架\" class=\"headerlink\" title=\"AI 推理框架\"></a>AI 推理框架</h2><p>AI 推理框架是用于部署和执行训练好的深度学习模型进行推理（预测）的软件工具。这些框架提供了一套接口和工具，使得将训练好的模型部署到生产环境中变得更加容易和高效。<br>以下是一些常见的 AI 推理框架：</p>\n<ol>\n<li>TensorFlow：由 Google 开发的开源深度学习框架，提供了高度灵活的图计算模型和丰富的工具和库。TensorFlow 的推理部分包括 TensorFlow Serving 和 TensorFlow Lite，用于在服务器和嵌入式设备上进行推理。</li>\n<li>PyTorch：由 Facebook 开发的开源深度学习框架，提供了动态图计算模型和易用性。PyTorch 的推理部分包括 TorchScript 和 TorchServe，用于在生产环境中进行高性能推理。</li>\n<li>ONNX：开放神经网络交换格式（Open Neural Network Exchange），是一种开放的中间表示格式，可用于在不同的深度学习框架之间转换和共享模型。ONNX 定义了一套通用的推理规范，使得模型能够在支持 ONNX 的框架中进行部署和执行。</li>\n<li>TensorRT：英伟达（NVIDIA）推出的推理加速引擎，针对英伟达 GPU 进行了优化。TensorRT 通过网络优化、低精度推理和并行计算等技术，提供高性能和低延迟的深度学习推理能力。</li>\n<li>OpenVINO：英特尔（Intel）推出的开放式视觉推理和神经网络优化工具包，用于在英特尔硬件上进行高效的深度学习推理。OpenVINO 支持多种模型优化技术，包括量化、剪枝和硬件加速等。<br>这些 AI 推理框架都有各自的特点和优势，选择合适的框架取决于你的应用需求、硬件平台和编程偏好。学习和掌握这些框架可以帮助你有效地进行深度学习模型的推理部署，并实现高性能和高效能的预测任务。</li>\n</ol>\n<h2 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect\"></a>collect</h2><ol>\n<li>模型部署<ul>\n<li><a href=\"https://mmdeploy.readthedocs.io/zh-cn/latest/tutorial/01_introduction_to_model_deployment.html\">(good)mmdeploy 文档</a></li>\n<li>Transform DNNs to Low Level Code: <code>model -&gt; graph -&gt; kernel -&gt; device</code> <a href=\"https://www.jokeren.tech/slides/triton_next.pdf\">triton next</a></li>\n</ul>\n</li>\n<li><a href=\"https://microsoft.github.io/AI-System/SystemforAI-8-Inference.pdf\">部署优化</a><ul>\n<li>延迟优化<ul>\n<li>量化</li>\n<li>剪枝</li>\n<li>layer or tensor fusion</li>\n<li>内存优化</li>\n<li>调度优化</li>\n<li>cache</li>\n</ul>\n</li>\n<li>吞吐优化<ul>\n<li>batch</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://microsoft.github.io/AI-System/SystemforAI-9-Compilation%20and%20Optimization.pdf\">(very good)神经网络编译器优化</a><ul>\n<li>计算图优化(graph)</li>\n<li>内存优化</li>\n<li>调度优化</li>\n<li>kernel 优化 - 算子表示与调度逻辑分离 - 自动调度搜索与代码生成<br><img src=\"https://i.ibb.co/mHM8NPV/pl-Uhf-F2-HIN.png\" alt=\"架构图\"></li>\n</ul>\n</li>\n<li>深度学习基础, 熟悉常见的模型架构，先不用管精度，专注在推理和性能<ul>\n<li><a href=\"https://github.com/mlabonne/llm-course\">llm-course</a></li>\n<li><a href=\"https://zh.d2l.ai/\">李沐《动手学深度学习》</a></li>\n<li>李宏毅</li>\n<li><a href=\"https://www.kaggle.com/learn\">kaggle learn</a></li>\n<li><a href=\"https://github.com/chenzomi12/DeepLearningSystem\">DeepLearningSystem</a></li>\n<li><a href=\"https://github.com/microsoft/generative-ai-for-beginners\">microsoft&#x2F;generative-ai-for-beginners</a> 注意仓库里有中文翻译</li>\n<li><a href=\"https://github.com/microsoft/AI-For-Beginners\">AI-For-Beginners</a></li>\n<li><a href=\"https://www.youtube.com/@statquest\">statquest</a></li>\n</ul>\n</li>\n<li>大模型推理<ul>\n<li><a href=\"https://github.com/karpathy/llm.c\">llm.c</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM\">TensorRT-LLM</a> faster transformer 后续</li>\n<li><a href=\"https://github.com/mlc-ai/mlc-llm\">mlc-ai&#x2F;mlc-llm</a></li>\n<li><a href=\"https://github.com/karpathy/llama2.c\">llama2.c</a> 可以放到 chatgpt 中解释基本流程</li>\n<li><a href=\"https://github.com/ggerganov/llama.cpp\">llama.cpp</a></li>\n<li><a href=\"https://github.com/microsoft/DeepSpeed\">DeepSpeed</a></li>\n<li><a href=\"https://github.com/ggerganov/ggml\">ggerganov&#x2F;ggml</a></li>\n<li><a href=\"https://github.com/nomic-ai/gpt4all\">nomic-ai&#x2F;gpt4all</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm\">vllm</a><ul>\n<li><a href=\"https://docs.google.com/presentation/d/1QL-XPFXiFpDBh86DbEegFXBXFXjix4v032GhShbKf3s/edit#slide=id.g24ad94a0065_0_209\">slides</a></li>\n<li>In vLLM, we identify that the performance of LLM serving is bottlenecked by memory.</li>\n<li><a href=\"https://blog.vllm.ai/2023/06/20/vllm.html\">blog</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/huggingface/text-generation-inference\">TGI: huggingface&#x2F;text-generation-inference</a></li>\n<li><a href=\"https://github.com/Mozilla-Ocho/llamafile\">Mozilla-Ocho&#x2F;llamafile</a></li>\n<li><a href=\"https://ggml.ai/\">GGML - AI at the edge</a></li>\n</ul>\n</li>\n<li>大模型推理优化<ul>\n<li>xformers, flash attention</li>\n<li><a href=\"https://www.databricks.com/blog/llm-inference-performance-engineering-best-practices\">LLM Inference Performance Engineering: Best Practices</a><ul>\n<li>Our goal? <code>The fastest time to first token, the highest throughput, and the quickest time per output token</code>. In other words, we want our models to generate text as fast as possible for as many users as we can support.</li>\n<li>Optimizing LLM inference benefits from general techniques such as: Operator Fusion, Quantization, Compression, Parallelization, KV caching</li>\n<li>Identify your optimization target: Do you care about interactive performance? Maximizing throughput? Minimizing cost? There are predictable trade-offs here.</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=7WeraZ0LLlg\">韩松大模型优化介绍</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/tree/main?tab=readme-ov-file#key-features\">TensorRT-LLM key-features</a></li>\n<li><a href=\"https://www.cvmart.net/community/detail/7069\">一文总结当下常用的大型 transformer 效率优化方案</a></li>\n<li><a href=\"https://github.com/mit-han-lab/streaming-llm\">mit-han-lab&#x2F;streaming-llm</a> 韩松论文</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/655325832\">LLM 推理优化技术综述：KVCache、PageAttention、FlashAttention、MQA、GQA</a></li>\n<li><a href=\"https://github.com/microsoft/DeepSpeed/blob/master/blogs/deepspeed-fastgen/chinese/README.md\">DeepSpeed-FastGen：通过 MII 和 DeepSpeed-Inference 实现 LLM 高吞吐量文本生成</a></li>\n<li>推理性能关键在： 矩阵乘法， kv cache 索引， embedding 索引（数据库技术）</li>\n<li>NCCL is a communication framework used by PyTorch to do distributed training&#x2F;inference. text-generation-inference make use of NCCL to enable Tensor Parallelism to dramatically speed up inference for large language models.</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/651359908\">大模型推理妙招—投机采样（Speculative Decoding）</a><ul>\n<li>大小模型：小模型运行 n 次，大模型运行一次(输入为 n 次的拼接，利用 batch，多 batch 的延迟和单 batch 相差不大)，如果两个结果相差不多，接收，如果相差较大, 从相差较大的 token 重新生成，大模型的输出作为该位置的输出</li>\n</ul>\n</li>\n<li>矩阵运算：<ul>\n<li>GEMM</li>\n<li><a href=\"https://github.com/NVIDIA/cutlass\">cutlass</a></li>\n</ul>\n</li>\n<li>token merging</li>\n<li>diffusers 加速技术<ul>\n<li><a href=\"https://huggingface.co/docs/diffusers/tutorials/fast_diffusion#accelerate-inference-of-text-to-image-diffusion-models\">accelerate-inference-of-text-to-image-diffusion-models</a></li>\n<li><a href=\"https://huggingface.co/docs/diffusers/optimization/fp16\">diffusers&#x2F;optimization</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>大模型量化<ul>\n<li>韩松视频</li>\n</ul>\n</li>\n<li>大模型训练（选）<ul>\n<li>finetune</li>\n<li><a href=\"https://github.com/NVIDIA/Megatron-LM\">NVIDIA&#x2F;Megatron-LM</a></li>\n</ul>\n</li>\n<li>onnx<ul>\n<li>熟悉规范</li>\n</ul>\n</li>\n<li>onnx runtime<ul>\n<li>推理</li>\n<li>模型优化， 量化</li>\n</ul>\n</li>\n<li>TVM</li>\n<li>MLIR IREE</li>\n<li>TensorRT<ul>\n<li>各种教程</li>\n<li>c++ 推理接口, sample, plugin</li>\n</ul>\n</li>\n<li>pytorch<ul>\n<li><a href=\"https://github.com/pytorch/tutorials/tree/main\">tutorials</a></li>\n</ul>\n</li>\n<li>模型优化和压缩技术(剪枝、量化、 蒸馏)</li>\n<li><a href=\"https://github.com/Tencent/ncnn\">ncnn</a></li>\n<li>Modular vs OctoML (MLIR vs TVM)<ul>\n<li>OctoML: 是一个真正的“输入模型，自动化输出硬件和软件”，而且随时可以部署</li>\n</ul>\n</li>\n<li>LLVM<ul>\n<li>学习模块化</li>\n</ul>\n</li>\n<li>汇编</li>\n<li>neon</li>\n<li>dsp</li>\n<li>gpu cuda 加速</li>\n<li>计算机体系结构</li>\n<li>熟悉常用的算子</li>\n<li>chatgpt 使用: vscode …</li>\n<li>线性代数</li>\n<li>python</li>\n<li>性能优化</li>\n<li>推理两大主题： 内存管理(onnx runtime tensor) + 调度(onnx runtime session)</li>\n<li>内存管理<ul>\n<li><a href=\"https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory\">memory-allocators-101-write-a-simple-memory</a></li>\n<li>malloc 源码</li>\n</ul>\n</li>\n<li>调度</li>\n</ol>\n<ul>\n<li>dag</li>\n</ul>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.zhihu.com/column/frozengene\">深度学习推理引擎的一些思考</a></li>\n<li><a href=\"https://github.com/kamranahmedse/developer-roadmap\">developer-roadmap</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU5ODY2MTk3Nw==&mid=2247492618&idx=1&sn=a20f4828b9ab3e3cee3fedfd906e0eb2&chksm=fe426a3cc935e32a8312ce9efbb4f2640787508d3e811579bbffe918685cdb07a8bd8e3ffc4b&scene=132&exptype=timeline_recommend_article_extendread_samebiz#wechat_redirect\">LLVM 之父 Chris Lattner：我的 AI 基础设施软件构建理念</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU5ODY2MTk3Nw==&mid=2247487015&idx=1&sn=04282e2d15eca05eb56062062b46e781&chksm=fe418011c9360907048966af43299fa55b570c9d634c4bcdb3702c6e4d8101a72ef07d5ec77f&scene=21#wechat_redirect\">TVM：成为深度学习领域的“Linux”</a></li>\n</ol>\n","categories":["Others","Roadmap"],"tags":["Roadmap"]},{"title":"software-features","url":"/2022/07/27/software-features/","content":"<h2 id=\"软件质量\"><a href=\"#软件质量\" class=\"headerlink\" title=\"软件质量\"></a>软件质量</h2><ol>\n<li><a href=\"https://bbs.huaweicloud.com/blogs/261499\">各种标准介绍</a></li>\n<li><a href=\"https://iso25000.com/index.php/en/iso-25000-standards/iso-25010\">ISO&#x2F;IEC 25010</a><br><img src=\"https://iso25000.com/images/figures/en/iso25010.png\" alt=\"ISO/IEC 25010\"></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol>\n<li><p><a href=\"https://www.encora.com/insights/software-quality-standards-iso-5055-overview\">ISO&#x2F;IEC 5055</a></p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=J8Wz0m1mkn4\">视频</a></li>\n</ul>\n</li>\n<li><p>ISO 5055 is intended to supplement the levels of measurement in the ISO&#x2F;IEC 25000 series. Also known as SQaRE, the ISO 25000 series uses a set of eight software quality characteristics, including our four from earlier, to measure a software’s quality at a behavioral level. This is different from ISO 5055, which is looking at software at a code level. ISO&#x2F;IEC 25000 and ISO 5055 are designed to complement each other.<br><img src=\"http://www.itcast.cn/files/image/202010/20201009143141577.jpg\" alt=\"软件质量\"></p>\n</li>\n<li><p>ISO&#x2F;IEC 9126:1901 标准所包含的 6 大特性的具体含义如下。</p>\n<ul>\n<li><code>功能性</code>:在指定条件下,软件满足用户显式需求和隐式需求的能力。</li>\n<li><code>可靠性</code>:在指定条件下使用时,软件产品维持规定的性能级别的能力。</li>\n<li><code>可使用性</code>:在指定条件下,软件产品被使用、理解、学习的能力。</li>\n<li><code>效率</code>:在指定条件下,相对于所有资源的数量,软件产品可提供适当性能的能力。</li>\n<li><code>可维护性</code>:指软件产品被修改的能力。修改包括修正、优化和功能规格变更的说明。</li>\n<li><code>可移植性</code>:指软件产品从一个环境迁移到另一个环境的能力。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>Functionality</li>\n<li>Usability (User-friendly) 易用性</li>\n<li>Efficiency 高效</li>\n<li>Flexibility</li>\n<li>Reliability 可靠性</li>\n<li>Maintainability</li>\n<li>Portability</li>\n<li>Integrity</li>\n<li>可复用性</li>\n<li>可用性</li>\n<li>兼容性</li>\n<li>可扩展性</li>\n<li>可移植性</li>\n<li>安全性</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><h2 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h2><ol>\n<li>延迟</li>\n<li>吞吐</li>\n<li>利用率</li>\n</ol>\n"},{"title":"sphinx-doc","url":"/2022/04/18/sphinx-doc/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>install sphinx and theme</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">% pip install Sphinx</span><br><span class=\"line\">% pip install sphinx-rtd-theme</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>sphinx-quickstart</code> start a project</li>\n<li><code>make html</code> build doc</li>\n<li><code>make man</code> build man doc</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://github.com/sphinx-doc/sphinx\">sphinx-doc&#x2F;sphinx</a></li>\n<li><a href=\"https://iridescent.ink/HowToMakeDocs/Basic/Sphinx.html#sphinx\">简明教程</a></li>\n<li><a href=\"https://iridescent.ink/HowToMakeDocs/Basic/reST.html#restructuredtext\">restructuredtext 语法</a></li>\n<li><a href=\"https://readthedocs.org/\">文档托管网站 readthedocs.org</a></li>\n<li><a href=\"https://sphinx-docs.readthedocs.io/zh_CN/latest/\">中文文档</a></li>\n<li><a href=\"https://github.com/mkdocs/mkdocs/\">mkdocs</a></li>\n<li><a href=\"https://blog.csdn.net/m0_46521785/article/details/119812280\">几款文档框架：Mkdocs、Sphinx、Teadocs、docsify</a></li>\n</ol>\n"},{"title":"talk_skills","url":"/2024/07/01/talk-skills/","content":"<h2 id=\"技术分享\"><a href=\"#技术分享\" class=\"headerlink\" title=\"技术分享\"></a>技术分享</h2><h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><ol>\n<li>清晰简洁<ul>\n<li>语言要清晰简洁，避免使用过多的专业术语。</li>\n<li>使用简单易懂的例子来说明复杂的概念。</li>\n</ul>\n</li>\n<li>视觉辅助<ul>\n<li>使用图表、图片和动画来帮助解释概念。</li>\n<li>确保幻灯片内容简洁，不要过多的文字。</li>\n</ul>\n</li>\n<li>互动性<ul>\n<li>提出问题并邀请听众参与讨论。</li>\n<li>使用现场演示或代码运行来增加互动性。</li>\n</ul>\n</li>\n<li>实战演练<ul>\n<li>事先进行多次演练，熟悉内容和演示流程。</li>\n<li>准备好应对可能出现的问题或故障。</li>\n</ul>\n</li>\n<li>自信和热情<ul>\n<li>保持自信和热情，感染听众。</li>\n<li>展示你对所分享内容的兴趣和信心。</li>\n</ul>\n</li>\n<li>时间管理<ul>\n<li>控制好每个部分的时间，避免超时或内容过于简略。</li>\n<li>根据听众的反应灵活调整节奏。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><ol>\n<li>自我介绍</li>\n<li>引言<ul>\n<li>介绍主题与分享目的</li>\n</ul>\n</li>\n<li>大纲</li>\n<li>具体内容</li>\n<li>总结<ul>\n<li>回顾关键点，并提出可能的下一步</li>\n</ul>\n</li>\n<li>QA</li>\n<li>反馈和改进</li>\n</ol>\n<h2 id=\"会议组织\"><a href=\"#会议组织\" class=\"headerlink\" title=\"会议组织\"></a>会议组织</h2><h2 id=\"演讲\"><a href=\"#演讲\" class=\"headerlink\" title=\"演讲\"></a>演讲</h2>"},{"title":"taskflow","url":"/2022/05/19/taskflow/","content":"<h2 id=\"调度框架实现\"><a href=\"#调度框架实现\" class=\"headerlink\" title=\"调度框架实现\"></a>调度框架实现</h2><ol>\n<li><a href=\"https://excalidraw.com/#json=TDm5o05q9INkFNkP9Xcu-,s4EkPpKyeCgTF4nqCC6fAQ\">queue 示意图</a></li>\n</ol>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ol>\n<li>顶点是函数，边是数据</li>\n<li>所谓 flow 是指计算顺序，数据并不会移动。</li>\n<li>顶点和边组成 DAG</li>\n<li>DAG 需要调度器来运行</li>\n<li>各框架：<ul>\n<li>vitis ai runtime: op 是顶点，tensor 是边, runner 是调度器</li>\n<li>dpx flow: module(forward?) 是顶点，message 是边, engine 是调度器</li>\n<li>taskflow: Node 是顶点，Executor 是调度器</li>\n<li>CGraph:</li>\n<li>sogou workflow:</li>\n<li>tensorflow:</li>\n<li>pytorch:</li>\n</ul>\n</li>\n<li>CGraph 中的<a href=\"http://www.chunel.cn/archives/cgraph-loop-introduce\">claster</a>和 flow 中的 module 很像, 继承自 group，由多个 functionNode 线性组合而成。执行 cluster 的时候，内部的 node 依次顺序执行。简而言之就是可以依次完成多个功能。</li>\n<li>flow 是异步事件驱动的运行模式，使用异步回调方式，feed msg 后执行完 workflow 后调用回调函数。</li>\n<li>taskflow 也是异步模式，都有 observer, 执行完后调用回调函数，观察者模式。 tf::ObserverInterface 和 RunObserver<br>q1. 顶点需要注册到图中, 并设定依赖关系。</li>\n</ol>\n<h2 id=\"先学习图，再来学-taskflow\"><a href=\"#先学习图，再来学-taskflow\" class=\"headerlink\" title=\"先学习图，再来学 taskflow\"></a>先学习图，再来学 taskflow</h2><h2 id=\"有向无环图（DAG-Directed-Acyclic-Graph）\"><a href=\"#有向无环图（DAG-Directed-Acyclic-Graph）\" class=\"headerlink\" title=\"有向无环图（DAG, Directed Acyclic Graph）\"></a>有向无环图（DAG, Directed Acyclic Graph）</h2><ol>\n<li><a href=\"http://www.chunel.cn/archives/cgraph-loop-introduce\">纯序员给你介绍图化框架的简单实现——循环逻辑</a>p</li>\n<li><a href=\"http://www.chunel.cn/archives/cgraph-run-introduce\">纯序员给你介绍图化框架的简单实现——执行逻辑</a></li>\n<li><a href=\"https://dolphinscheduler.apache.org/zh-cn/blog/DAG.html\">大数据工作流任务调度–有向无环图(DAG)之拓扑排序</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://github.com/oneapi-src/oneTBB\">oneTBB</a></li>\n<li><a href=\"https://github.com/taskflow/taskflow\">taskflow</a></li>\n<li><a href=\"https://taskflow.github.io/taskflow/pages.html\">tutorial</a></li>\n<li><a href=\"https://taskflow.github.io/taskflow/install.html\">Building and Installing</a></li>\n<li><a href=\"https://taskflow.github.io/taskflow/Examples.html\">Learning from Examples</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/438678706\">TaskFlow 代码阅读笔记</a></li>\n<li><a href=\"https://github.com/ChunelFeng/CGraph\">CGraph</a></li>\n<li><a href=\"https://github.com/sogou/workflow\">workflow</a></li>\n<li><a href=\"https://github.com/galois-advertising/gparallel\">gparallel</a></li>\n</ol>\n"},{"title":"tensorrt-llm","url":"/2024/01/01/tensorrt-llm/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li><code>A TensorRT Toolbox for Optimized Large Language Model Inference</code></li>\n<li>tensorrt-llm 使用了很多 tensorrt 插件，插件里调用 kernel <a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/main/docs/source/architecture.md#plugins\">link</a></li>\n<li>大模型优化方法：tensorrt + plugins, 耗时的算子用专有库进行替换，如矩阵乘用 cutlass</li>\n<li>TensorRT-LLM wraps TensorRT’s deep learning compiler—which includes optimized kernels from FasterTransformer, pre- and post-processing, and multi-GPU and multi-node communication—in a simple open-source Python API for defining, optimizing, and executing LLMs for inference in production.</li>\n<li><a href=\"https://nvidia.github.io/TensorRT-LLM/gpt_runtime.html#generation\">generation</a></li>\n<li><a href=\"https://nvidia.github.io/TensorRT-LLM/batch_manager.html#gptmanager-design\">gptmanager</a></li>\n<li>TensorRT-LLM provides users with an easy-to-use Python API to define Large Language Models (LLMs) and build TensorRT engines that contain state-of-the-art optimizations to perform inference efficiently on NVIDIA GPUs. TensorRT-LLM also contains components to create Python and C++ runtimes that execute those TensorRT engines.</li>\n<li><a href=\"https://nvidia.github.io/TensorRT-LLM/\">doc</a></li>\n<li>TensorRT-LLM includes an API to implement Python and C++ runtimes. The role of the runtime components is to load the TensorRT engines and drive their execution. Typically, for an auto-regressive model like GPT, the runtime is in charge of loading the engine that implements <code>both the processing of the input sequence as well as the body of the generation loop</code>.</li>\n<li>TensorRT-LLM 的运行时需要管理：<ul>\n<li>模型加载及执行</li>\n<li>对于 AR 模型，两阶段(prompt 和 decoding)都需要处理</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/main/docs/source/gpt_runtime.md\">decode only 执行流程</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/main/docs/source/gpt_attention.md\">attention 流程</a><ul>\n<li>As a quick reminder, the multihead attention is the sequence of a batched matmul, a softmax and another batched matmul described in the Attention Is All You Need article. attention 计算是 batch 的</li>\n<li>the current implementation supports two input modes: Padded and packed (non-padded). As the packed mode is always more memory-efficient and faster than the padded mode, support for padded mode may be removed in the future. 打包模式更节省内存并且更快</li>\n</ul>\n</li>\n<li>重算可以不用考虑 kv cache, uniad 只考虑 5 帧：前 4 帧运行时 padding 到 5 帧，重算 attention; 第六帧开始，recompute sliding window; 只考虑窗口的 5 帧，位置编码一直都是 0-5（位置改变，kv cache 需要重新计算)。 普通的 sliding windows 都是</li>\n</ol>\n<h2 id=\"best-practice\"><a href=\"#best-practice\" class=\"headerlink\" title=\"best practice\"></a><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/main/docs/source/perf_best_practices.md\">best practice</a></h2><h2 id=\"memory\"><a href=\"#memory\" class=\"headerlink\" title=\"memory\"></a>memory</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/main/docs/source/memory.md\">显存使用</a></li>\n</ol>\n<h2 id=\"key-features\"><a href=\"#key-features\" class=\"headerlink\" title=\"key-features\"></a>key-features</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/tree/main?tab=readme-ov-file#key-features\">key-features 可学习如何优化</a></li>\n</ol>\n<h3 id=\"in-flight-batching\"><a href=\"#in-flight-batching\" class=\"headerlink\" title=\"in-flight batching\"></a>in-flight batching</h3><h3 id=\"paged-attention\"><a href=\"#paged-attention\" class=\"headerlink\" title=\"paged attention\"></a>paged attention</h3><h3 id=\"MHA-GQA-MQA\"><a href=\"#MHA-GQA-MQA\" class=\"headerlink\" title=\"MHA GQA MQA\"></a>MHA GQA MQA</h3><h3 id=\"Quantization\"><a href=\"#Quantization\" class=\"headerlink\" title=\"Quantization\"></a><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/main/docs/source/precision.md\">Quantization</a></h3><h3 id=\"Graph-Rewriting\"><a href=\"#Graph-Rewriting\" class=\"headerlink\" title=\"Graph Rewriting\"></a>Graph Rewriting</h3><ol>\n<li>TensorRT-LLM 在将 LLM 模型编译为 TensorRT Engines 时会对神经网络进行优化，提升执行效率。</li>\n</ol>\n<h2 id=\"deubg\"><a href=\"#deubg\" class=\"headerlink\" title=\"deubg\"></a>deubg</h2><ol>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/6cc5e177ff2fb60b1aab3b03fa0534b5181cf0f1/cpp/tensorrt_llm/common/logger.cpp#L32\">TLLM_LOG_LEVEL&#x3D;TRACE</a></li>\n<li>打开 trace， 跟踪代码执行</li>\n</ol>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><ol>\n<li><a href=\"https://hub.docker.com/search?q=tensorrt_llm\">docker hubs</a></li>\n</ol>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><ol>\n<li>使用 docker <a href=\"https://hub.docker.com/r/baseten/tensorrt_llm-release\">baseten&#x2F;tensorrt_llm-release</a></li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/v0.7.1/docs/source/installation.md#fetch-the-sources\">fetch-the-sources</a> in docker</li>\n<li><a href=\"https://github.com/NVIDIA/TensorRT-LLM/blob/v0.7.1/docs/source/installation.md#build-tensorrt-llm\">build-tensorrt-llm</a></li>\n<li>可能需要先卸载 <code>pip uninstall tensorrt_llm</code>， 重新安装</li>\n</ol>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><h3 id=\"ccdv-cnn-dailymail\"><a href=\"#ccdv-cnn-dailymail\" class=\"headerlink\" title=\"ccdv&#x2F;cnn_dailymail\"></a><a href=\"https://huggingface.co/datasets/ccdv/cnn_dailymail\">ccdv&#x2F;cnn_dailymail</a></h3><ol>\n<li>gitee 镜像版本不太好使</li>\n<li>下载之后传到服务器</li>\n<li><a href=\"https://github.com/abisee/cnn-dailymail/tree/master/url_lists\">clone txt</a></li>\n<li>修改 summarize.py；从本地 load 数据集</li>\n<li><code>dataset = load_dataset(&quot;/mnt/data-2/home/xiyang.jia/TensorRT-LLM/examples/bloom/cnn_dailymail/cnn_dailymail.py&quot;, &quot;3.0.0&quot;)</code> 从本地加载数据集</li>\n</ol>\n<h2 id=\"vscode-setting\"><a href=\"#vscode-setting\" class=\"headerlink\" title=\"vscode setting\"></a>vscode setting</h2><ol>\n<li>env settings</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;PYDEVD_WARN_EVALUATION_TIMEOUT&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;500&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;OPAL_PREFIX&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/opt/hpcx/ompi&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>launch.json</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Python: tensorrt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/examples/summarize.py&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/examples/bloom/&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;program&quot;: &quot;../summarize.py&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;args&quot;: [</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--test_trt_llm&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--hf_model_dir&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;./bloom/560M/&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--data_type&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;fp16&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--engine_dir&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;./bloom/560M/trt_engines/fp16/1-gpu/&quot;</span></span><br><span class=\"line\">      <span class=\"comment\">// ],</span></span><br><span class=\"line\">      <span class=\"comment\">// run llama test</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/examples/llama/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;../run.py&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;--max_output_len=50&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;--tokenizer_dir&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/mnt/data-2/home/xiyang.jia/Llama-2-7b-hf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;--engine_dir=./tmp/llama/7B/trt_engines/fp16/1-gpu/&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"comment\">// build llama test</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/examples/llama/&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;program&quot;: &quot;./build.py&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;args&quot;: [</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--model_dir&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;/mnt/data-2/home/xiyang.jia/Llama-2-7b-hf&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--dtype&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;float16&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--remove_input_padding&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--use_gpt_attention_plugin&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;float16&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--enable_context_fmha&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--use_gemm_plugin&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;float16&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;--output_dir&quot;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &quot;./tmp/llama/7B/trt_engines/fp16/test/&quot;</span></span><br><span class=\"line\">      <span class=\"comment\">// ],</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;PYDEVD_WARN_EVALUATION_TIMEOUT&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;500&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;OPAL_PREFIX&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/opt/hpcx/ompi&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;CUDA_VISIBLE_DEVICES&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;6,7&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;TLLM_LOG_LEVEL&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;DEBUG&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integratedTerminal&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;justMyCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h2><ol>\n<li><code>build.py</code> 每个 example 独占，用于构建模型和编译成 engine 模型; 需要模型配置：权重等</li>\n<li>In addition, there are two shared files in the parent folder examples for inference and evaluation:<ul>\n<li><code>run.py</code> to run the inference on an input text; 运行推理</li>\n<li><code>summarize.py</code> to summarize the articles in the cnn_dailymail dataset. 总结故事</li>\n</ul>\n</li>\n<li>需要 hf model; 例:llama-7B-hf; hf 是 Huggingface 对原始 llama-7B 模型的打包版本,</li>\n<li>TensorRT-LLM LLaMA builds TensorRT engine(s) from HF checkpoint. If no checkpoint directory is specified, TensorRT-LLM will build engine(s) with dummy weights. 如果不设置 <code>--model_dir</code>, 使用随机权重</li>\n<li>llama sample 运行时需要 config.json, <code>--tokenizer_dir</code>指定</li>\n<li><a href=\"https://gitee.com/hf-models/Llama-2-7b-hf\">gitee.com&#x2F;hf-models&#x2F;Llama-2-7b-hf</a> gitee 下载要快很多 <code>git lfs clone https://gitee.com/hf-models/Llama-2-7b-hf</code></li>\n<li>run 的时候加参数<code>--temperature=0.6 --top_k=10</code>可生成不一样内容</li>\n<li><code>/usr/local/tensorrt/bin/trtexec --loadEngine=tmp/llama/7B/trt_engines/fp16/1-gpu/llama_float16_tp1_rank0.engine</code>会出错，未解决<ul>\n<li><code>export LD_LIBRARY_PATH=/usr/local/tensorrt/lib/:$LD_LIBRARY_PATH</code></li>\n</ul>\n</li>\n<li><code> Error[1]: [stdArchiveReader.cpp::stdArchiveReaderInitCommon::47] Error Code 1: Serialization (Serialization assertion stdVersionRead == kSERIALIZATION_VERSION failed.Version tag does not match. Note: Current Version: 226, Serialized Engine Version: 228)</code> tensorrt 版本有问题</li>\n<li><a href=\"https://github.com/hpcaitech/SwiftInfer?tab=readme-ov-file\">tensorrt llm llama</a></li>\n</ol>\n"},{"title":"test","url":"/2023/09/21/test/","content":"<h2 id=\"Fuzz-test\"><a href=\"#Fuzz-test\" class=\"headerlink\" title=\"Fuzz test\"></a>Fuzz test</h2><ol>\n<li>模糊测试（fuzz testing, fuzzing）是一种软件测试技术。 其核心思想是将自动或半自动生成的随机数据输入到一个程序中，并监视程序异常，如崩溃，断言（assertion）失败，以发现可能的程序错误，比如内存泄漏。 模糊测试常常用于检测软件或计算机系统的安全漏洞。</li>\n<li><a href=\"https://llvm.org/docs/LibFuzzer.html\">LibFuzzer</a> <a href=\"https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md\">libFuzzerTutorial</a></li>\n<li><a href=\"https://github.com/google/oss-fuzz\">oss-fuzz</a></li>\n<li><a href=\"https://github.com/google/clusterfuzz\">clusterfuzz</a></li>\n<li><a href=\"https://github.com/AFLplusplus/AFLplusplus\">AFL++</a></li>\n</ol>\n<h2 id=\"代码覆盖率检查\"><a href=\"#代码覆盖率检查\" class=\"headerlink\" title=\"代码覆盖率检查\"></a>代码覆盖率检查</h2><h3 id=\"gcovr\"><a href=\"#gcovr\" class=\"headerlink\" title=\"gcovr\"></a><a href=\"https://github.com/gcovr/gcovr\">gcovr</a></h3><ol>\n<li>可以用来查看 repo 中函数个数</li>\n<li><a href=\"https://gcovr.com/en/stable/\">doc</a></li>\n<li><code>-DCMAKE_CXX_FLAGS=&quot;--coverage -g -O0&quot;</code> 需要 O0, 否则代码对不上</li>\n<li><a href=\"https://www.cnblogs.com/iamkun2005/p/16502967.html\">交叉编译</a> <a href=\"https://www.cnblogs.com/vaughnhuang/p/16224069.html\">link</a><ul>\n<li><code>export GCOV_PREFIX_STRIP=9</code></li>\n<li><code>export GCOV_PREFIX=$PWD</code></li>\n<li>运行程序，生成对应的.gcno, 将该目录拷贝回主机并覆盖同级目录（即 .gcda 文件与同名 .gcno 文件应该在同一目录）</li>\n<li><code>mkdir out &amp;&amp; gcovr --html-nested out/coverage.html</code> html-nested 表示生成的报告是有层级的</li>\n<li><code>gcovr --decisions --txt</code></li>\n<li><code>-f samples -e build</code> -f 包含， -e 排除</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol>\n<li><a href=\"https://about.codecov.io/\">codecov</a> <a href=\"https://github.com/google/glog\">glog</a></li>\n<li><a href=\"https://coveralls.io/\">coveralls</a></li>\n<li><a href=\"https://gcovr.com/en/stable/guide/configuration.html#configuration\">config file</a> <a href=\"https://github.com/google/glog/blob/master/gcovr.cfg\">glog config</a></li>\n<li><code>--gcov-ignore-parse-errors</code></li>\n<li><code>gcovr --gcov-executable /opt/ti-processor-sdk-rtos-j721e-evm/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcov</code> 交叉编译有时需要指定 gcov</li>\n<li><a href=\"http://blog.chinaunix.net/uid-24709751-id-3612976.html\">原理</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/user/project/pages/getting_started/pages_ui.html\">Create a GitLab Pages deployment for a static site</a></li>\n<li><code>pip install gcovr</code></li>\n<li><a href=\"https://gcovr.com/en/stable/guide/merging.html\">合并结果</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -r outs/build_tda4/* ./build_tda4</span><br><span class=\"line\">gcovr --gcov-executable /opt/ti-processor-sdk-rtos-j721s2-evm/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcov -r . --filter src/ --filter include/ --xml-pretty --print-summary --json segment_height.json -o tmp</span><br><span class=\"line\">find build_tda4/ -name <span class=\"string\">&quot;*.gcda&quot;</span> |xargs <span class=\"built_in\">rm</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r outc/build_tda4/* ./build_tda4</span><br><span class=\"line\">gcovr --gcov-executable /opt/ti-processor-sdk-rtos-j721s2-evm/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcov -r . --filter src/ --filter include/ --xml-pretty  --print-summary --json classify_roadtype.json -o tmp</span><br><span class=\"line\">gcovr -a segment_height.json -a classify_roadtype.json --xml-pretty --print-summary -o coverage.xml</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>ctrl-c 不产生数据问题</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"type\">void</span> __gcov_flush(<span class=\"type\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">my_signal_handler</span><span class=\"params\">(<span class=\"type\">int</span> signum)</span> </span>&#123;</span><br><span class=\"line\">    __gcov_flush();</span><br><span class=\"line\">    <span class=\"comment\">// 结束程序或进行其他操作</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(signum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, my_signal_handler);</span><br><span class=\"line\">    <span class=\"comment\">// 其他代码...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gitlab-gcovr\"><a href=\"#gitlab-gcovr\" class=\"headerlink\" title=\"gitlab gcovr\"></a>gitlab gcovr</h4><ol>\n<li>cmake</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(COVERAGE_TEST)</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class=\"line\">    <span class=\"keyword\">add_compile_options</span>(-ftest-coverage)</span><br><span class=\"line\">    <span class=\"keyword\">add_compile_options</span>(-fprofile-arcs)</span><br><span class=\"line\">    <span class=\"keyword\">link_libraries</span>(gcov)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ci</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">CoverageTest::CPU:</span><br><span class=\"line\">  stage: <span class=\"built_in\">test</span></span><br><span class=\"line\">  image: centos7</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - phigent_runner_cpu</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - sh script/build_cpu.sh -DCOVERAGE_TEST=ON -DBUILD_TEST=ON</span><br><span class=\"line\">    - gcovr -r . --filter src/ --filter include/</span><br><span class=\"line\">  coverage: <span class=\"string\">&#x27;/^TOTAL.*\\s+(\\d+\\%)$/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><a href=\"https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html\">可视化</a></li>\n</ol>\n<h3 id=\"备选-gcov-lcov\"><a href=\"#备选-gcov-lcov\" class=\"headerlink\" title=\"(备选)gcov + lcov\"></a><a href=\"https://blog.csdn.net/u012247418/article/details/90137291\">(备选)gcov + lcov</a></h3><p><code>gcov</code>是 GNU 编译器集合（GCC）中的一个代码覆盖测试工具。它可以分析程序的性能，并显示源代码的每一行执行了多少次。这在测试和调试中非常有用。<br><code>lcov</code>是一个图形前端，它基于<code>gcov</code>生成更容易理解和更详细的信息。它产生 HTML 页面，可以让你看到哪些行执行了多少次，哪些没有。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -fprofile-arcs -ftest-coverage -o my_program my_program.c</span><br><span class=\"line\">./my_program</span><br><span class=\"line\">gcov my_program.c</span><br></pre></td></tr></table></figure>\n\n<p>这将在当前目录生成一个名为<code>my_program.c.gcov</code>的文件，其中包含每一行代码执行次数的统计信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install lcov</span><br><span class=\"line\">lcov --capture --directory . --output-file coverage.info</span><br><span class=\"line\">genhtml coverage.info --output-directory out</span><br><span class=\"line\">firefox out/index.html</span><br></pre></td></tr></table></figure>\n\n<p>这些只是基础; <code>gcov</code>和<code>lcov</code>都有许多其他选项和高级用法。在实际项目中，你可能还需要结合其他工具和方法，比如持续集成（CI）系统、测试框架等，以实现更全面的代码覆盖和测试。</p>\n<h2 id=\"gitlab-testing\"><a href=\"#gitlab-testing\" class=\"headerlink\" title=\"gitlab testing\"></a><a href=\"https://docs.gitlab.com/ee/ci/testing/\">gitlab testing</a></h2>","categories":["Program","Test"],"tags":["Test"]},{"title":"uniad","url":"/2024/06/25/uniad/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>传统范式: <code>感知-决策-规控</code></li>\n<li>感知（Perception）：感知是指系统通过各种传感器来感知周围环境的能力，包括识别和理解道路、车辆、行人、障碍物等元素。自动驾驶系统通常会使用多种传感器，如摄像头、激光雷达、毫米波雷达、GPS、超声波传感器等。这些传感器能够提供不同类型的信息，如图像、距离、速度、方向等。感知算法会对这些数据进行处理和分析，从而识别和跟踪周围环境中的各种对象，形成对周围环境的理解。</li>\n<li>决策（Decision-making）：决策是指系统基于感知到的环境信息，以及预先设定的目标和规则，来制定行动计划的能力。在决策过程中，系统需要考虑诸如避障、保持车辆安全、遵循交通规则、到达目的地等因素。决策算法会根据当前环境的状态，以及系统的目标和约束条件，选择最佳的行动策略。这可能涉及到路径规划、速度控制、车道保持、转向等决策。</li>\n<li>控制（Control）：控制是指将决策产生的行动指令转化为实际车辆控制的过程。控制系统负责实现决策中确定的行动，使车辆按照规划的路径和速度行驶，并且保持在安全的状态下。控制系统通常会包括车辆动力系统控制、转向控制、制动控制等方面。这些控制器会根据决策器提供的指令，以及传感器反馈的实时信息，对车辆进行精确的控制，以实现自动驾驶的目标。 这三个技术模块在自动驾驶系统中密切配合，形成了一个完整的闭环系统。感知模块提供环境信息，决策模块根据环境信息做出决策，控制模块将决策转化为实际行动。这种分层的设计使得自动驾驶系统能够根据周围环境实时变化，做出正确的决策，并安全地控制车辆行驶。</li>\n<li>自动驾驶算法框架的各种设计比较。<ul>\n<li>大多数工业解决方案是对不同的任务部署不同的模型。</li>\n<li>多任务学习架构，多个任务头共享一个主干网络（特征提取器）。</li>\n<li>端到端学习范式，其联合了感知与规划模块</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://developer.volcengine.com/articles/7382373299495862310\">All in One | UniAD：一种包含全栈自动驾驶算法的统一架构设计</a></li>\n<li><a href=\"https://github.com/OpenDriveLab/UniAD\">repo</a></li>\n</ol>\n"},{"title":"triton","url":"/2024/07/03/triton/","content":"<h2 id=\"适配-DSL\"><a href=\"#适配-DSL\" class=\"headerlink\" title=\"适配 DSL\"></a>适配 DSL</h2><ol>\n<li>intel<br><img src=\"https://i.ibb.co/cF3yF0K/e-Hk7ps-HTk-M.png\" alt=\"intel backend architecture\"></li>\n<li><a href=\"https://github.com/intel/intel-xpu-backend-for-triton\">intel-xpu-backend-for-triton</a></li>\n<li>高通<br><img src=\"https://i.ibb.co/6NMJ8Yk/xo5-Pqj-RPDT.png\" alt=\"architecture\"><br><img src=\"https://i.ibb.co/9VLhpNk/du-T6l-PNQfg.png\" alt=\"pytorch\"></li>\n<li><a href=\"https://www.youtube.com/watch?v=ONrKkI7KhU4&list=PLc_vA1r0qoiTjlrINKUuFrI8Ptoopm8Vz&index=18\">Triton Conference 2024: Afternoon Session</a></li>\n<li><a href=\"https://github.com/microsoft/triton-shared\">microsoft&#x2F;triton-shared</a></li>\n<li><a href=\"https://llvm.org/docs/TableGen/ProgRef.html\">tablegen 来生成 MLIR 代码</a></li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>使得算子开发的部分复杂度分配给上层 kernel 开发用户，部分复杂度分配给底层的 Triton compiler。同时对接上层框架的工作则交给了上层软件栈，使得 Triton 能够专注在自己这个层次需要解决的核心问题上，找到了一个比较不错的”product&#x2F;technology” fit。</li>\n<li>Triton 的核心设计思想—-Block-wise 编程，Block 上面的归用户，Block 内部的归 Triton compiler 自动化处理。相应地，Block 内部的优化细节，也交由 Triton compiler 处理了。</li>\n<li>Triton 这个项目目前还更像是一个满足细分场景(高效高性能 Kernel 开发)需求的“小而美”的项目</li>\n<li>triton kernel 中的计算是 block level, 跟据 ptr + offset 直接计算一个 block，block 具体如何划分成 thread 由编译器决定<ul>\n<li>通过 arrange + stride 来计算 block 中每个数据的 offset</li>\n</ul>\n</li>\n<li>注意代码中的 pid 含义和 cuda 的不同：triton 表示 block id, cuda 表示 thread id</li>\n<li>自定义优化搜索空间，减少搜索时间</li>\n<li>使用 triton 来做 codegen</li>\n<li>triton 的 language 语法确实很简单，相比较 cuda 来说，它能够帮我们快速验证一些 idea，同时给出比 cublas 性能相当的算子。</li>\n<li>Using Triton, you only need to know that a program is divided into multiple blocks</li>\n<li>大部分的框架都以 python 的 DSL 暴露给用户，然后用户通过写对应的 python 语法，调用已经用 C++&#x2F;CUDA 或者 assemble 写好的高性能组件。</li>\n<li><code>pip show triton</code> &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.10&#x2F;dist-packages&#x2F;triton&#x2F;_C&#x2F;libtriton.so</li>\n<li>支持 nvidia, AMD GPU； &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.10&#x2F;dist-packages&#x2F;triton&#x2F;backends&#x2F;amd&#x2F;lib&#x2F;libamdhip64.so</li>\n<li><code>~/.triton/cache</code> cache 路径, 里面有 ptx, cubin, 各种 ir 文件 <a href=\"https://chatgpt.com/share/6750222c-3c44-8004-b0a4-483b2d45dead\">link</a><br><img src=\"https://i.ibb.co/qFsBwJv/YMws76l-KOI.png\" alt=\"各文件作用\"><ul>\n<li>TTIR（Triton Tensor Intermediate Representation）TTIR 是 Triton 编译器的一个中间表示，专门用于描述张量级别的操作。它是一个较高层次的中间表示，关注计算任务中的张量操作和计算模式。</li>\n<li>TTGIR（Triton Tensor GPU Intermediate Representation）TTGIR 是 Triton 的低层中间表示，专注于描述与 GPU 硬件架构相关的计算细节。它建立在 TTIR 之上，但更加贴近 GPU 的执行模型。</li>\n</ul>\n</li>\n<li>Triton, a <code>language</code> and <code>compiler</code> for writing highly efficient custom Deep-Learning primitives. The aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.</li>\n<li>An open-source python-like programming language which enables researchers with no CUDA experience to write highly efficient GPU code – most of the time on par with what an expert would be able to produce</li>\n<li>开发效率<br><img src=\"https://i.ibb.co/NYSS9WV/Xrz-Qku-ZLSo.png\" alt=\"img\"></li>\n<li>领域特定语言（DSLs)</li>\n<li>本质上来说，Triton 和 TVM&#x2F;XLA 这类工作的定位有所不同，如果说 TVM&#x2F;XLA 是比较纯正的 AI 编译器的话，Triton 更像是一个面向 AI 加速器算子开发的领域开发语言，为了能够将用户使用 Triton 语言开发的 kernel 映射到具体硬件上的执行码，需要设计开发相应的 Triton compiler 来完成这层映射。所以当我们说 Triton 的时候，其实隐指了 Triton 语言+Triton 编译器这两个事物的综合体。</li>\n<li>从 triton 的源码来看，triton 目前在 NV 的 GPU 上已经有了一套自己比较成熟的 mapping 路线，通过先对 python 语言层，也就是 triton DSL 进行抽象，得到 AST，然后将 AST 中的每个节点 lower 到 Triton Dialect 上，Triton Dialect 则是一个比较贴近上层语言表达的 IR，他的主要作用则是为了保持用户在书写对应算法时的准确性。接下来会进一步被 map 到 TritonGPU Dialect 上，那么 TritonGPU Dialect 则是一个更加贴近 GPU 层面的 IR，它则是为了具体的性能优化而设计。图中其他的蓝色模块，比如 SCF，Arith，Tensor 等都是 MLIR 生态中已经被实现好并且广为使用的 Dialect。这些 Dialect 会一起和 TritonGPU Dialect 共存，然后被 lower 到对应的 LLVM Dialect，LLVM Dialect 则是最贴近 LLVM IR 的一层设计，从 LLVM Dialect 到 LLVM IR 的转换是非常容易的，最终代码就会被接入到 LLVM 的 NVPTX 的后端，从而生成后续能跑在 GPU 上的高性能 machine code. <a href=\"http://giantpandacv.com/project/%E9%83%A8%E7%BD%B2%E4%BC%98%E5%8C%96/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BC%96%E8%AF%91%E5%99%A8/OpenAI%20Triton%20MLIR%20%E7%AC%AC%E9%9B%B6%E7%AB%A0%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/\">link</a></li>\n<li>和 cuda pytorch 区别 <a href=\"https://www.youtube.com/watch?v=AtbnRIzpwho&t=273s\">link</a><br><img src=\"https://i.ibb.co/qszbhN4/NYmmor-R0l-P.png\" alt=\"区别\"></li>\n<li>编译器是一个很好的生产力工具，能够帮助做很多手工的任务</li>\n<li>triton 支持的语言特性是 Python 的一个子集<ul>\n<li>no dict</li>\n<li>no meta-programming</li>\n<li>no slicing</li>\n<li>no indexing</li>\n<li>…</li>\n</ul>\n</li>\n<li>triton v2 <a href=\"https://www.jokeren.tech/slides/triton_next.pdf\">link</a><ul>\n<li>MLIR(Triton dialect, TritonGPU dialect)</li>\n<li>clean layout concepts(like cutlass cute)<ul>\n<li>low overhead time: Cache and fetch kernels using efficient signatures</li>\n</ul>\n</li>\n<li>debugging: triton.language.print</li>\n<li>Profiler interface</li>\n</ul>\n</li>\n<li>查看 grid</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">grid = <span class=\"keyword\">lambda</span> meta: (triton.cdiv(n_elements, meta[<span class=\"string\">&#x27;BLOCK_SIZE&#x27;</span>]), )</span><br><span class=\"line\">grid_size = grid(&#123;<span class=\"string\">&#x27;BLOCK_SIZE&#x27;</span>: <span class=\"number\">1024</span>&#125;) <span class=\"comment\"># grid是lamda函数，需要先调用才能看结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Grid size: <span class=\"subst\">&#123;grid_size&#125;</span>&#x27;</span>) <span class=\"comment\"># (97, )</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h2><ol>\n<li>triton.jit</li>\n<li>triton.autotune</li>\n<li>triton.compile</li>\n<li>torch.compile</li>\n</ol>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><ol>\n<li><a href=\"https://triton-lang.org/main/programming-guide/chapter-3/debugging.html\">官方指导</a></li>\n<li><a href=\"https://github.com/triton-lang/triton?tab=readme-ov-file#tips-for-building\">源码 debug</a></li>\n<li><code>TRITON_INTERPRET=1</code> 使用 Triton 解释器而不是在 GPU 上运行。您可以在内核代码中插入 Python 断点！NOTE:注意真正运行的时候不要打开</li>\n<li><code>MLIR_ENABLE_DUMP=1</code></li>\n<li><code>LLVM_IR_ENABLE_DUMP=1</code></li>\n<li><code>TRITON_PRINT_AUTOTUNING=1</code>可以打印 autotune 选择的最快配置 prints out the best autotuning config and total time spent for each kernel after autotuning is complete.</li>\n</ol>\n<h2 id=\"c-调用-triton-kernel\"><a href=\"#c-调用-triton-kernel\" class=\"headerlink\" title=\"c++调用 triton kernel\"></a>c++调用 triton kernel</h2><ol>\n<li><a href=\"https://github.com/triton-lang/triton/blob/main/python/test/unit/tools/test_aot.py\">test aot</a><ul>\n<li>vscode testing 下的 pytest 来测试 debug 模式可以看到生成的文件路径, 右键测试程序进入 debug</li>\n<li>能自动生成 kernel.h, kernel.c, libkernel.so, test.c 不用手写</li>\n<li>python3 -m pytest -v python&#x2F;test&#x2F;unit&#x2F;tools 运行测试程序</li>\n<li>python3 -m pytest -v -k test_compile_link_matmul python&#x2F;test&#x2F;unit&#x2F;tools&#x2F;test_aot.py</li>\n<li>compile.py 编译</li>\n<li>compile_aot_kernels 编译 kernel</li>\n<li><a href=\"https://github.com/triton-lang/triton/blob/fd691c67ac20958a67693358186d877790f5f48f/python/triton/tools/link.py#L222\">load 函数</a></li>\n</ul>\n</li>\n<li>在 c++ load triton 生成的 ptx 或者 cubin 文件</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"http://giantpandacv.com/project/%E9%83%A8%E7%BD%B2%E4%BC%98%E5%8C%96/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BC%96%E8%AF%91%E5%99%A8/OpenAI%20Triton%20MLIR%20%E7%AC%AC%E9%9B%B6%E7%AB%A0%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/\">非常好的中文教程</a></li>\n<li><a href=\"https://www.jokeren.tech/slides/triton_next.pdf\">triton next</a><ul>\n<li>why triton</li>\n<li>triton 的定位</li>\n</ul>\n</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/613244988\">谈谈对 OpenAI Triton 的一些理解</a></li>\n</ol>\n"},{"title":"transformer","url":"/2023/11/21/transformer/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>硬 train 一发</li>\n<li><a href=\"https://zhouyifan.net/2022/11/12/20220925-Transformer/\">attention</a></li>\n<li><a href=\"https://stats.stackexchange.com/a/424127\">What exactly are keys, queries, and values in attention mechanisms?</a><ul>\n<li>The key&#x2F;value&#x2F;query concept is analogous to retrieval systems. For example, when you search for videos on Youtube, the search engine will map your query (text in the search bar) against a set of keys (video title, description, etc.) associated with candidate videos in their database, then present you the best matched videos (values).</li>\n<li>搜索是 query, 每个视频的信息是 key, query 和所有视频 key 做相关， 然后推荐最相关的视频(value)</li>\n</ul>\n</li>\n<li>只不过解码器的输入是编码器的状态的加权和，而不再是一个简单的中间状态。每一个输出对每一个输入的权重叫做注意力，注意力的大小取决于输出和输入的相关关系</li>\n<li>注意力机制能够无视序列的先后顺序，捕捉序列间的关系</li>\n<li>RNN 本轮的输入状态取决于上一轮的输出状态，这使 RNN 的计算必须串行执行。因此，RNN 的训练通常比较缓慢。</li>\n<li>transformer: 需要对每个输入向量做 3 次 transform, Wq, Wk, Wv，转换矩阵都是学习得到的</li>\n<li>score matrix:自相关矩阵</li>\n<li>预测时就相当于使用编码器(输入)和之前的输出来预测下一个输出； 考虑了输入和输出信息 <a href=\"https://www.youtube.com/watch?v=4Bdc55j80l8\">Illustrated Guide to Transformers Neural Network: A step by step explanation</a> 图示非常好</li>\n<li>多头是想模拟卷积，可以输出多个通道 由多个 feature，识别多个模式</li>\n<li>模型训练好之后，推理时每个 token 对应的 q,k,v 都固定了，因为 token embedding 后的词向量是固定的，Q,K V 矩阵也是固定的</li>\n<li>每一个 token 都会生成 q,k,v，用 q 去和所有 token 的 k 做相关，根据结果从 k 中提取特征; 例如： how are you How 的 q 会和每个 token 中的 k 提取出一些信息，根据这些信息决定下一个生成的字符，比如 you 中的 k 和 I 很相关（embeding 和训练 决定），从 you 中很可能提取出 I, 然后再根据 how are you I 中重复上一步动作，这就是为什么 token 要和自己做相关，所有 token 相关性是由 embeding 和训练一起决定的?</li>\n<li>kv cache 的长度分别为 <code>head 长度 * 每个 head 向量维度 * token 个数 * 层数</code></li>\n<li>transform llama 各层 shape 参数量和计算量</li>\n<li>推理时才自回归；训练时用相关矩阵(下三角)一步算出所有输出，推理时每次算出当前值与之前 token 注意力，相当于在下三角矩阵加一层，只输出一个预测 token;</li>\n<li>添加 position 信息在输入之后，attention 之前</li>\n<li>decode 训练时加掩码并行，同时输出； 推理时自回归一步一步输出</li>\n<li>encode decoder 架构推理直接有输入和起始符输出，decode only 需要预热</li>\n<li>batch 指的是在模型训练或推理的时候,同时输入模型的样本数量。<ul>\n<li>Transformer 可处理变长序列输入。不同的样本序列长度本来就可能不同,每个 batch 中的最大 token 长度是固定的,短的序列会 padding 补 0。对超长序列做截断,限制最大 token 数</li>\n<li>Transformer 模型的参数在不同的 batch 之间是共享的，而 KV cache 的共享则取决于具体的应用场景和模型配置。在自回归生成任务中，KV cache 通常是特定于单个样本的，不是共享的.</li>\n<li>在 Transformer 模型中,batch size 越大,则 key-value 缓存需要占用的内存空间也越大。</li>\n</ul>\n</li>\n<li>每个词向量(word vectors)代表了“词空间（word space）”中的一个点，具有相似含义的词的位置会更接近彼此。例如，在向量空间中与猫最接近的词包括狗、小猫和宠物。用实数向量表示单词（相对于“C-A-T”这样的字母串）的一个主要优点是，数字能够进行字母无法进行的运算。 <a href=\"https://www.understandingai.org/p/large-language-models-explained-with\">link</a></li>\n<li>像 ChatGPT 这样的语言模型能够根据单词出现的上下文以不同的向量表示同一个词(前几层 transformer 自动修改)。有一个针对“bank（金融机构）”的向量，还有一个针对“bank（河岸）”的向量。</li>\n<li>前几层专注于理解句子的语法,后面的层则致力于对整个段落的高层次理解。</li>\n<li><code>注意力层</code>从提示的较早部分检索信息，而<code>前馈层</code>使语言模型能够“记住”未在提示中出现的信息。事实上，可以将前馈层视为模型从训练数据中学到的信息的数据库。记忆力在前馈层。靠前的前馈层更可能编码与特定单词相关的简单事实，例如“特朗普经常在唐纳德之后出现”。靠后的层则编码更复杂的关系，如“添加这个向量以将一个国家转换为其首都。</li>\n<li>LLM 的一个关键创新之处在于，它们不需要显式标记的数据。相反，它们通过尝试预测文本段落中下一个单词来学习。几乎任何书面材料都适用于训练这些模型——从维基百科页面到新闻文章再到计算机代码。</li>\n<li>multi head 可能也是一维 把一维 head 当作多维 head</li>\n<li>Perplexity (PPL) 是一个衡量语言模型预测能力的指标。当评估大型语言模型时，PPL 是一个关键指标，因为它直接关系到模型对语言的处理能力。它反映了模型对语言的理解程度，特别是在预测下一个词时的不确定性。PPL 通常是通过在测试集上计算模型的交叉熵损失（cross-entropy loss）并将其转换为 PPL 来得到的。数学上，PPL 定义为交叉熵的指数。<ul>\n<li>低 PPL：意味着模型对数据的预测更准确，对语言的理解更深入。</li>\n<li>高 PPL：表明模型预测不准确，对语言的理解较浅。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"attention-计算\"><a href=\"#attention-计算\" class=\"headerlink\" title=\"attention 计算\"></a><a href=\"https://excalidraw.com/#json=0Es8o7IlBTF7Enynbr6Pb,yNTjZuZeNWYLdDYxy_dGzg\">attention 计算</a></h2><p><img src=\"https://i.ibb.co/ZhBZMds/fz-L82-OZ7od.png\" alt=\"矩阵计算\"></p>\n<h2 id=\"attention-种类\"><a href=\"#attention-种类\" class=\"headerlink\" title=\"attention 种类\"></a><a href=\"https://mp.weixin.qq.com/s/t4ytOIuPx0799kkjFs5lbQ\">attention 种类</a></h2><h2 id=\"kv-cache\"><a href=\"#kv-cache\" class=\"headerlink\" title=\"kv cache\"></a>kv cache</h2><p><img src=\"https://i.ibb.co/XCJ85TL/p3k-B45-Mhaj.png\" alt=\"四种attention策略\"></p>\n<ol>\n<li>多种 attention 策略<ul>\n<li>dense attention: 计算复杂度为 O(T*T), 缓存 T cache; 当句子超过训练长度时，PPL 增大, 计算复杂度：因为句子长为 T, 需要计算 T 次，每次需要和前 T 个 token 做 attention</li>\n<li>window attention: 计算复杂度为 O(T*L), 缓存 L cache，当句子大于窗口长度时， 模型的 PPL 会急速变大, 因为前几个 token 非常重要， 被换出后影响模型性能； <code>绝对位置编码</code></li>\n<li>sliding window attention with re-computing : 计算复杂度为 O(T<em>L</em>L), T 个字符，L 窗口内类似 dense attention, 重新计算 L kv, 相当于缓存 L cache; 每层中会为每个生成的 token 重建最近 token 的 KV 状态。这种方法虽然性能强大，但由于需要在窗口内计算 quadratic attention，因此速度明显较慢; <a href=\"https://github.com/mit-han-lab/streaming-llm/issues/33#issuecomment-1758597666\">和 window attention 区别</a> The critical distinction is that in sliding window with re-computation, some key states are treated as initial tokens, whereas in window attention, all previous tokens’ KV are computed as if they were middle tokens.<ul>\n<li>re-computation 重置了状态，窗口第一个 token 位置变为 0(位置改变，kv cache 需要重新计算)， 可以扩展为无限长输出，但没有记住无限长; 窗口应该会添加 BOS； <code>相对位置编码</code></li>\n</ul>\n</li>\n<li>sliding window attention:(和 re-computing 有较大区别) 计算复杂度为 O(T*L), 这种方法类似卷积， 一层一层增加感受范围，<ul>\n<li>对于 m 层的 Transformer，receptive field 的大小为 m * L； 增加了感知范围，但没有到无限长， decoder only 时注意有掩码，看不到之前节点的(这条不需要专门处理，多层 decoder 自动有这个特性)<br><img src=\"https://i.ibb.co/r2c3DLY/p5h-Alp-Fh-TT.png\" alt=\"类似卷积\"></li>\n<li><a href=\"https://ahelhady.medium.com/understanding-longformers-sliding-window-attention-mechanism-f5d61048a907\">Understanding LongFormer’s Sliding Window Attention Mechanism</a> 有图</li>\n</ul>\n</li>\n<li>streaming LLM: 计算复杂度为 O(T*L)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/mit-han-lab/streaming-llm\">streaming-llm</a><ul>\n<li>这个方法并没有增加 LLM 的对上文的记忆，只是让它输入输出无限长</li>\n<li><a href=\"https://github.com/mit-han-lab/streaming-llm/blob/main/assets/StreamingLLM.pdf\">slides</a></li>\n<li>介绍了多种 cache 方法</li>\n<li>上下文窗口保持不变。只保留最近的标记和注意力汇，丢弃中间的标记。这意味着模型只能处理最新的标记。需要重新计算 position</li>\n<li>StreamingLLM 的优势在于无需刷新缓存就能从最近的标记生成流畅的文本</li>\n<li>利用了 attention sink 现象, 由于 softmax，训练时前几个 token 对最终生成的内容非常关键，是生成内容稳定的关键 token, 如果保留前几个 token， 加上 window attention, 长文本时生成的内容就比较稳定</li>\n<li>这文章感觉就是之前 softmax 的 bug 带来的; 如果流式推理保证 system prompt 不被换出 不就没问题了…</li>\n<li>如何处理后面窗口位置信息的？有技巧，了解一下</li>\n</ul>\n</li>\n<li>llama kv cache<br><img src=\"https://i.ibb.co/88sYM2f/Cnc1i7-G0qy.png\" alt=\"llama-2-7B\"></li>\n<li>在基于 Transformer 的 decoder-only 模型中，包括<code>起始符号</code>在内的每个标记都有与之对应的键值（KV）缓存。</li>\n<li>decoder-only 推理过程，假设 prompt 为 how are you; 先输入 bos token, 生成对应 kv cache, 输入 how, 和 bos 做 attention, 不用管预测，将 are 作为输入，和之前做 attention， 不用管输出，将 you 作为输入， 输出为 I, 将 I 作为输入……<ul>\n<li>注意，如果有随机，每次 bos 生成的 kv cache 不同，对后面结果都有影响</li>\n<li>只要有输出不一样， 每一层的 kv cache 也不同， 会传递</li>\n<li>可以使用 flashattention 一次输出所有结果</li>\n</ul>\n</li>\n<li>encoder 也要存多有</li>\n</ol>\n<h4 id=\"变长矩阵乘\"><a href=\"#变长矩阵乘\" class=\"headerlink\" title=\"变长矩阵乘\"></a>变长矩阵乘</h4><ol>\n<li>预先申请长为 n 的 kv cache 内存, 使用 for 循环或变长矩阵乘计算 attention，<ul>\n<li>kv cache 长度小于 n 时， 不用移动 kv cache; <a href=\"https://chat.openai.com/c/405fe374-fd46-4ec2-85be-ce08e32912ce\">link</a></li>\n<li>大于 n 时，<ul>\n<li>环形缓冲区, 先放入到最早的 cache 位置; 不用关心顺序； 然后和所有 kv cache 做 attention; 和 q 直接矩阵乘; 由于每个 KV 对都与序列中的特定位置相关联，移除操作不会改变剩余 KV 对之间的相对位置关系。</li>\n<li>当前 kv 放到 cache 中的末尾，之前的 kv cache 需要向前移动</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"定长矩阵乘\"><a href=\"#定长矩阵乘\" class=\"headerlink\" title=\"定长矩阵乘\"></a>定长矩阵乘</h4><ol>\n<li>矩阵乘时需要 kv cache 是固定长的矩阵，刚开始 kv cache 矩阵需要 padding, 如果分配固定长的 kv cache 矩阵</li>\n<li>padding 利用优化的定长矩阵乘法来加速, 会浪费一些计算</li>\n</ol>\n<h2 id=\"推理过程：\"><a href=\"#推理过程：\" class=\"headerlink\" title=\"推理过程：\"></a>推理过程：</h2><ol>\n<li>有两个阶段 Prefill Phase 和 Decoding Phase（ FlexGen 中讲的比较清楚）。</li>\n<li>Prefill Phase：称为预处理&#x2F;Encoding。计算并缓存每一层的 key 和 value，其他的不需要缓存。每一个请求的 prompt 需要经过这个阶段，它只计算一次，是并行计算的。这个缓存称为 KV Cache，KV Cache 是整个解码过程中最为核心关键的一块。</li>\n<li>Decoding Phase：生成新 token 阶段，它是串行的，也就是 decode one by one。它用上一步生成的 token，称为当前 token 放到 input 中，然后生成下一个 token。具体包括两步，一是 Lookup KV Cache 计算并输出当前 token 最终 embedding 用来预测下一个 token，二是缓存计算过程中得到的当前 token 在每一层的 key 和 value，update 到第一阶段 Prefill Phase 中的 KV Cache 中。</li>\n<li>无问苍穹 <a href=\"https://arxiv.org/abs/2311.01282\">paper</a>, 有介绍各种推理框架<br><img src=\"https://i.ibb.co/T1DZvdD/0pemezw-XTa.png\" alt=\"inference\"></li>\n</ol>\n<h2 id=\"decode-only-推理过程-prompt（“how-are-you”）\"><a href=\"#decode-only-推理过程-prompt（“how-are-you”）\" class=\"headerlink\" title=\"decode only 推理过程: prompt（“how are you”）\"></a>decode only 推理过程: prompt（“how are you”）</h2><ol>\n<li>BOS Token：<ul>\n<li>开始：推理过程以输入一个特殊的开始标记（BOS, Begin Of Sentence）开始。</li>\n<li>生成 KV 缓存：对于 BOS 标记，模型计算出对应的键（Key）和值（Value），并将它们存储在 KV 缓存中。</li>\n</ul>\n</li>\n<li>逐个处理 Prompt 中的词：<ul>\n<li>对于 prompt 中的每个词（如”how”, “are”, “you”），模型依次进行处理。在处理每个词时，会使用到目前为止累积的 KV 缓存来进行注意力计算。例如，处理”how”时，它会与 BOS 的 KV 进行注意力计算；处理”are”时，它会与 BOS 和”how”的 KV 进行注意力计算，以此类推。<br>每个新词的处理结果也会生成新的 KV 对，这些新的 KV 对被添加到缓存中。</li>\n</ul>\n</li>\n<li>生成响应：<ul>\n<li>当处理完 prompt 中的所有词后，模型开始生成响应。假设首个生成的词是”I”。生成”I”时，会利用到目前为止（包括 BOS 标记和 prompt 中所有词）的所有 KV 缓存。</li>\n</ul>\n</li>\n<li>递归生成：<ul>\n<li>随后，模型继续基于累积的 KV 缓存和已生成的词（如”I”）来生成下一个词。这个过程会持续进行，直到生成一个完整的响应或达到某个终止条件（如特殊的结束标记或达到最大长度限制）。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"encoder-only-推理过程\"><a href=\"#encoder-only-推理过程\" class=\"headerlink\" title=\"encoder only 推理过程\"></a>encoder only 推理过程</h2><ol>\n<li>在 encoder-only 的 LLM 中，KV 缓存并不是一个主要问题，因为这些模型的设计和应用方式与需要逐步生成和维护上下文状态的 decoder-only 模型不同。在 encoder-only 模型中，更关注的是整个输入序列的一次性处理和理解。</li>\n<li>在 encoder-only 模型中的推理过程与 decoder-only 模型有所不同。encoder-only 模型，如 BERT，通常用于理解、分析或分类文本，而不是像 decoder-only 模型那样用于生成文本。以下是 encoder-only 模型的典型推理过程</li>\n<li><code>输入处理</code>：<ul>\n<li><code>完整的输入</code>：与 decoder-only 模型不同，encoder-only 模型在推理时接收完整的输入序列，如一个句子或段落。这个输入通常包括特殊的标记，如开始（BOS）和结束（EOS）标记。</li>\n<li><code>预处理</code>：输入文本经过标记化（tokenization），转换成模型能够理解的标记序列。</li>\n</ul>\n</li>\n<li><code>通过Encoder层传递</code>：<ul>\n<li><code>编码</code>：整个输入序列被送入模型的多个 encoder 层。在每一层中，通过自注意力机制和前馈神经网络，模型学习到输入中每个标记的上下文表示。</li>\n<li><code>自注意力计算</code>：在自注意力阶段，每个标记都考虑到序列中所有其他标记的信息，以捕捉内部的上下文关系。</li>\n</ul>\n</li>\n<li><code>输出提取</code>：<ul>\n<li><code>特定任务的输出</code>：根据任务的不同，模型的输出被相应地处理。例如，对于分类任务，模型可能只使用特定标记（如[CLS]）的最终隐藏状态；对于命名实体识别或问答任务，模型可能输出每个标记的特征表示。</li>\n</ul>\n</li>\n<li><code>后处理</code>：<ul>\n<li><code>映射到任务</code>：模型输出被映射到具体任务的要求上，如将隐藏状态映射到类别标签或其他输出格式。</li>\n<li><code>生成最终结果</code>：模型的输出经过适当的后处理步骤（如 softmax 层，用于分类任务），以生成最终的推理结果。</li>\n</ul>\n</li>\n<li>推理特点<ul>\n<li><code>不生成文本</code>：encoder-only 模型通常不用于生成文本，而是用于理解或分类输入文本。</li>\n<li><code>全局上下文</code>：模型在处理输入时同时考虑所有标记的上下文，与 decoder-only 模型逐步生成的方式不同。</li>\n<li><code>特定任务适用</code>：这类模型通常针对特定的 NLP 任务进行训练和优化，如情感分析、文本分类、实体识别等。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"关键操作\"><a href=\"#关键操作\" class=\"headerlink\" title=\"关键操作\"></a>关键操作</h2><ol>\n<li>multi head attention</li>\n<li>feed forward</li>\n<li>layernorm</li>\n<li>softmax</li>\n<li>matmul</li>\n<li>concat</li>\n<li>linear(生成 q, k, v) Q, K, V</li>\n</ol>\n<h2 id=\"参数、计算复杂度和-cache-统计\"><a href=\"#参数、计算复杂度和-cache-统计\" class=\"headerlink\" title=\"参数、计算复杂度和 cache 统计\"></a>参数、计算复杂度和 cache 统计</h2><ol>\n<li><a href=\"https://epochai.org/mlinputs/visualization?yAxis=Parameters\">Model Size of Notable Machine Learning Systems Over Time</a> 可交互, 右上角 option 可搜索，可直接到论文</li>\n<li><a href=\"https://kipp.ly/transformer-inference-arithmetic/\">transformer-inference-arithmetic</a></li>\n</ol>\n<h3 id=\"transformer-all-you-need-is-attention\"><a href=\"#transformer-all-you-need-is-attention\" class=\"headerlink\" title=\"transformer(all you need is attention)\"></a>transformer(all you need is attention)</h3><ol>\n<li><a href=\"https://github.com/harvardnlp/annotated-transformer\">harvardnlp&#x2F;annotated-transformer</a></li>\n<li>注意：模型结构定义并不决定 forward 流程，可以有多个函数，使用网络中不同的部分</li>\n<li>base model info: embeding 参数可能会共享</li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">EncoderDecoder(</span><br><span class=\"line\">  (encoder): Encoder(</span><br><span class=\"line\">    (layers): ModuleList(</span><br><span class=\"line\">      (0-5): EncoderLayer(</span><br><span class=\"line\">        (self_attn): MultiHeadedAttention(</span><br><span class=\"line\">          (linears): ModuleList(</span><br><span class=\"line\">            (0): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (1): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (2): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (3): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        (feed_forward): PositionwiseFeedForward(</span><br><span class=\"line\">          (w_1): Linear(in_features=512, out_features=2048, bias=True)</span><br><span class=\"line\">          (w_2): Linear(in_features=2048, out_features=512, bias=True)</span><br><span class=\"line\">          (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        (sublayer): ModuleList(</span><br><span class=\"line\">          (0): SublayerConnection(</span><br><span class=\"line\">            (norm): LayerNorm()</span><br><span class=\"line\">            (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          (1): SublayerConnection(</span><br><span class=\"line\">            (norm): LayerNorm()</span><br><span class=\"line\">            (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">          )</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    (norm): LayerNorm()</span><br><span class=\"line\">  )</span><br><span class=\"line\">  (decoder): Decoder(</span><br><span class=\"line\">    (layers): ModuleList(</span><br><span class=\"line\">      (0-5): DecoderLayer(</span><br><span class=\"line\">        (self_attn): MultiHeadedAttention(</span><br><span class=\"line\">          (linears): ModuleList(</span><br><span class=\"line\">            (0): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (1): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (2): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (3): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        (src_attn): MultiHeadedAttention(</span><br><span class=\"line\">          (linears): ModuleList(</span><br><span class=\"line\">            (0): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (1): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (2): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">            (3): Linear(in_features=512, out_features=512, bias=True)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        (feed_forward): PositionwiseFeedForward(</span><br><span class=\"line\">          (w_1): Linear(in_features=512, out_features=2048, bias=True)</span><br><span class=\"line\">          (w_2): Linear(in_features=2048, out_features=512, bias=True)</span><br><span class=\"line\">          (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        (sublayer): ModuleList(</span><br><span class=\"line\">          (0): SublayerConnection(</span><br><span class=\"line\">            (norm): LayerNorm()</span><br><span class=\"line\">            (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          (1): SublayerConnection(</span><br><span class=\"line\">            (norm): LayerNorm()</span><br><span class=\"line\">            (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">          )</span><br><span class=\"line\">          (2): SublayerConnection(</span><br><span class=\"line\">            (norm): LayerNorm()</span><br><span class=\"line\">            (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">          )</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    (norm): LayerNorm()</span><br><span class=\"line\">  )</span><br><span class=\"line\">  (src_embed): Sequential(</span><br><span class=\"line\">    (0): Embeddings(</span><br><span class=\"line\">      (lut): Embedding(32000, 512)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    (1): PositionalEncoding(</span><br><span class=\"line\">      (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  (tgt_embed): Sequential(</span><br><span class=\"line\">    (0): Embeddings(</span><br><span class=\"line\">      (lut): Embedding(32000, 512)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    (1): PositionalEncoding(</span><br><span class=\"line\">      (dropout): Dropout(p=0.1, inplace=False)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  (generator): Generator(</span><br><span class=\"line\">    (proj): Linear(in_features=512, out_features=32000, bias=True)</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>参数总量：65M,论文中有提及</li>\n</ol>\n<h3 id=\"llama2-7b\"><a href=\"#llama2-7b\" class=\"headerlink\" title=\"llama2-7b\"></a><a href=\"https://huggingface.co/meta-llama/Llama-2-7b-hf/blob/main/config.json\">llama2-7b</a></h3><ol>\n<li>model info</li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">LlamaForCausalLM(</span><br><span class=\"line\">  (model): LlamaModel(</span><br><span class=\"line\">    (embed_tokens): Embedding(32000, 4096, padding_idx=0)</span><br><span class=\"line\">    (layers): ModuleList(</span><br><span class=\"line\">      (0-31): 32 x LlamaDecoderLayer(</span><br><span class=\"line\">        (self_attn): LlamaAttention(</span><br><span class=\"line\">          (q_proj): Linear(in_features=4096, out_features=4096, bias=False)</span><br><span class=\"line\">          (k_proj): Linear(in_features=4096, out_features=4096, bias=False)</span><br><span class=\"line\">          (v_proj): Linear(in_features=4096, out_features=4096, bias=False)</span><br><span class=\"line\">          (o_proj): Linear(in_features=4096, out_features=4096, bias=False)</span><br><span class=\"line\">          (rotary_emb): LlamaRotaryEmbedding()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        (mlp): LlamaMLP(</span><br><span class=\"line\">          (gate_proj): Linear(in_features=4096, out_features=11008, bias=False) # 输入是 in_features, 输出为 out_features, 矩阵参数shape为（out_features, in_features); 因为矩阵乘法：(out_features, in_features)(in_features, 1) = (out_features, 1)</span><br><span class=\"line\">          (up_proj): Linear(in_features=4096, out_features=11008, bias=False)</span><br><span class=\"line\">          (down_proj): Linear(in_features=11008, out_features=4096, bias=False)</span><br><span class=\"line\">          (act_fn): SiLUActivation()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        (input_layernorm): LlamaRMSNorm()</span><br><span class=\"line\">        (post_attention_layernorm): LlamaRMSNorm()</span><br><span class=\"line\">      )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    (norm): LlamaRMSNorm()</span><br><span class=\"line\">  )</span><br><span class=\"line\">  (lm_head): Linear(in_features=4096, out_features=32000, bias=False)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>参数: 见 pytorch params 计算，<a href=\"https://medium.com/@saratbhargava/mastering-llama-math-part-1-a-step-by-step-guide-to-counting-parameters-in-llama-2-b3d73bc3ae31\">link</a></p>\n<ul>\n<li>total: 131072000 + 6476267520 + 4096 + 131072000 &#x3D; 6738415616 &#x3D; 6.7B<ul>\n<li>embed_tokens: (32000, 4096) &#x3D; 131072000</li>\n<li>attention block x 32 &#x3D; 202383360 x 32 &#x3D; 6476267520<ul>\n<li>attention layer:4 x (4096, 4096) &#x3D; 67108864</li>\n<li>mlp: 2 x (11008, 4096) + (4096, 11008) &#x3D; 135266304 (占比最大)</li>\n<li>input layernorm: (4096) &#x3D; 4096</li>\n<li>post_attention_layernorm: (4096) &#x3D; 4096</li>\n</ul>\n</li>\n<li>norm: (4096) &#x3D; 4096</li>\n<li>lm_head:(32000, 4096) &#x3D; 131072000</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>计算复杂度：</p>\n<ul>\n<li>total: O(l(n^2 x d + ndd’ + nd)) ; l 为层数; 不要考虑 kv cache 更好理解, 加掩码的矩阵乘<ul>\n<li>Multi-head self-attention 层 计算复杂度主要来自注意力机制的计算。对于序列长度为 n,hidden size 为 d 的 self-attention,其复杂度为 O(n^2 x d)；（n, d)(d, n) &#x3D;&gt; O(n^2 x d); 包含 cache 的也等价矩阵乘</li>\n<li>前馈全连接层 这一层包含两个仿射变换,如果其 width 为 d’,那么复杂度为 O(n x d x d’)； (n, d)(d, d’) &#x3D;&gt; O(ndd’)</li>\n<li>Layer normalization 对序列长度为 n, 向量维度为 d,其复杂度为 O(n x d)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>kv cache</p>\n<ul>\n<li><code>BS * layers * kv-heads * heads-d * N * 2(kv) * sizeof(fp16) = BS * 32 * 32 * 128 * N * 2 * 2 = 0.5MB * BS * N</code> 注：128 &#x3D; 4096 &#x2F; 32</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"hugging-face-transformers\"><a href=\"#hugging-face-transformers\" class=\"headerlink\" title=\"hugging face transformers\"></a><a href=\"https://github.com/huggingface/transformers\">hugging face transformers</a></h2><ol>\n<li><a href=\"https://huggingface.co/docs/transformers/index\">doc</a></li>\n<li><a href=\"https://huggingface.co/docs/transformers/installation#offline-mode\">offline-model</a></li>\n<li>模型文件页面右侧有对应使用方法</li>\n<li>模型里有 onnx</li>\n<li>只需要模型和对应的 config.json</li>\n<li>sample: <a href=\"https://huggingface.co/Xenova/llama2.c-stories15M/tree/main\">llama2.c-stories15M</a></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> transformers <span class=\"keyword\">import</span> AutoTokenizer, AutoModelForCausalLM</span><br><span class=\"line\">tokenizer = AutoTokenizer.from_pretrained(<span class=\"string\">&quot;/home/xiyang/d/working/transformers/models/&quot;</span>)</span><br><span class=\"line\">model = AutoModelForCausalLM.from_pretrained(<span class=\"string\">&quot;/home/xiyang/d/working/transformers/models/&quot;</span>)</span><br><span class=\"line\">model <span class=\"comment\"># 查看模型结构</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://huggingface.co/docs/transformers/model_summary\">transformers&#x2F;model_summary</a></li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/transformer_tutorial.html\">pytorch transformer_tutorial</a></li>\n<li><a href=\"https://nn.labml.ai/transformers/mha.html\">nn.labml.ai&#x2F;transformers&#x2F;mha</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=4Bdc55j80l8\">Illustrated Guide to Transformers Neural Network: A step by step explanation</a> 图示非常好</li>\n<li><a href=\"https://github.com/harvardnlp/annotated-transformer\">harvardnlp&#x2F;annotated-transformer</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=nzqlFIcCSWQ\">Transformer 论文逐段精读</a><br>代码带解说 李沐](<a href=\"https://zh.d2l.ai/chapter_attention-mechanisms/transformer.html\">https://zh.d2l.ai/chapter_attention-mechanisms/transformer.html</a>)</li>\n<li><a href=\"https://huggingface.co/docs/transformers/quicktour\">quicktour</a> can run in colab</li>\n<li><a href=\"https://arxiv.org/abs/2009.06732\">Efficient Transformers: A Survey</a>s</li>\n<li><a href=\"https://huggingface.co/docs/transformers/installation#fetch-models-and-tokenizers-to-use-offline\">fetch-models-and-tokenizers-to-use-offline</a></li>\n<li><a href=\"https://github.com/huggingface/transformers\">huggingface&#x2F;transformers</a></li>\n<li><a href=\"https://arxiv.org/pdf/1706.03762.pdf\">Attention Is All You Need (Transformer) 论文</a></li>\n<li><a href=\"https://zhouyifan.net/2022/11/12/20220925-Transformer/\">(good)Attention Is All You Need (Transformer) 论文精读</a></li>\n</ol>\n<h3 id=\"李宏毅\"><a href=\"#李宏毅\" class=\"headerlink\" title=\"李宏毅\"></a><a href=\"https://www.youtube.com/@HungyiLeeNTU/playlists\">李宏毅</a></h3><ol>\n<li><a href=\"https://hackmd.io/@shaoeChen/rJlRfP7mL\">Transformer</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hYdO9CscNes\">self attention</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/505105707\">Self-attention 自注意力机制讲解 李宏毅版 v.s 吴恩达版</a></li>\n</ol>\n"},{"title":"unix","url":"/2022/12/02/unix/","content":"<h2 id=\"UNIX-环境高级编程\"><a href=\"#UNIX-环境高级编程\" class=\"headerlink\" title=\"UNIX 环境高级编程\"></a><a href=\"http://www.apuebook.com/apue3e.html\">UNIX 环境高级编程</a></h2><ol>\n<li><p>ID</p>\n<ul>\n<li>文件(文件描述符)</li>\n<li>进程</li>\n<li>错误处理(errno)</li>\n<li>用户标识(用户 ID, 组 ID)</li>\n<li>信号(SIG)</li>\n</ul>\n</li>\n<li><p><code>stat</code>: 获取文件各种信息</p>\n<ul>\n<li><code>stat -c %s file</code> 查看文件长度</li>\n</ul>\n</li>\n<li><p><code>strace - trace system calls and signals</code></p>\n</li>\n</ol>\n<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h2 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h2><h2 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h2><ol>\n<li>信号是软件中断。</li>\n<li>终端键盘上有两种信号方法：<ul>\n<li>SIGINT 中断键：C-c</li>\n<li>SIGQUIT 退出键：C-\\</li>\n</ul>\n</li>\n<li>使用 system 而不是直接用 fork 和 exec 的优点是： system 有各种错误处理和各种信号处理</li>\n</ol>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><ol>\n<li>进程 ID 用 pid_t 数据类型来表示，是一个非负整数。 线程 ID 是用 pthread_t 数据类型来表示， 是一个结构体， 不同系统类型不同。</li>\n<li>如果进程中的任意线程调用了 exit, _Exit 或者_exit, 那么整个进程就会终止。</li>\n<li><code>nm -C test | grep GLIBC_</code>可以看出 c++程序用 thread 和 mutex 最终调用了 pthread_create 和 pthread_mutex*</li>\n<li>守护进程出错记录使用 syslog，log 位置 &#x2F;var&#x2F;log&#x2F;syslog</li>\n</ol>\n<h4 id=\"进程间通信-InterProcess-Communication-IPC\"><a href=\"#进程间通信-InterProcess-Communication-IPC\" class=\"headerlink\" title=\"进程间通信 InterProcess Communication IPC\"></a>进程间通信 InterProcess Communication IPC</h4><ol>\n<li>同一机器：管道，FIFO, 消息队列，信号量，共享内存。</li>\n<li>不同机器：socket</li>\n</ol>\n<h4 id=\"线程间通信\"><a href=\"#线程间通信\" class=\"headerlink\" title=\"线程间通信\"></a>线程间通信</h4><ol>\n<li>mutex, 读写锁，自旋锁， 条件变量</li>\n<li>mutex 保护的是 lock 和 unlock 之间的代码</li>\n<li>如果线程对一个互斥量加锁两次，那么它自身就会陷入死锁。</li>\n<li>线程间循环依赖锁也会死锁，解决办法：1. 控制互斥量加锁的顺序避免死锁。2. try_lock 如果获得不了想要的锁， 先释放已占有的锁，过一段时间再试试。</li>\n<li>自旋锁与互斥量类似， 但自旋锁获取锁之前线程是非阻塞状态。适用于锁持有时间段，线程不希望在重新调度上花费太多成本。自旋锁在非抢占式内核中非常有用，在用户层，自旋锁并不是很有用。</li>\n<li>很多互斥量实现非常高效，有些互斥量的实现在试图获取互斥量的时候会自选一小段时间，只有自旋计数达到某一阈值的时候才会休眠。</li>\n</ol>\n<h3 id=\"linux-下源码编译问题\"><a href=\"#linux-下源码编译问题\" class=\"headerlink\" title=\"linux 下源码编译问题\"></a><a href=\"https://blog.csdn.net/qq_29116917/article/details/103786194\">linux 下源码编译问题</a></h3><ol>\n<li>minor 找不到： filedir&#x2F;devrdev.c <code>#include &lt;sys/sysmacros.h&gt;</code></li>\n<li><code>sudo apt install libbsd-dev</code></li>\n<li>err_sys 找不到问题， error.c 源码复制到 apue.h 中</li>\n</ol>\n"},{"title":"v4l2","url":"/2022/10/09/v4l2/","content":"<h2 id=\"usb-双目\"><a href=\"#usb-双目\" class=\"headerlink\" title=\"usb 双目\"></a>usb 双目</h2><ol>\n<li>只能打开一个原因 <a href=\"https://www.21xrx.com/Articles/read_article/259051\">link</a> <a href=\"https://blog.csdn.net/qq_32900237/article/details/102392445\">link2</a></li>\n<li>保存到同一画面上的优势：解决同步问题, 通过板载芯片来进行同步</li>\n</ol>\n<h2 id=\"v4l2\"><a href=\"#v4l2\" class=\"headerlink\" title=\"v4l2\"></a><a href=\"http://zhaoxuhui.top/blog/2021/09/23/v4l2-introduction-and-usb-camera-bayer-raw-data.html\">v4l2</a></h2><ol>\n<li><code>sudo v4l2-ctl --list-devices</code>获取相机列表</li>\n<li><code>media-ctl -p</code></li>\n<li><code>v4l2-ctl --all -d /dev/video</code></li>\n<li><code>v4l2-ctl -d /dev/video0 --list-formats-ext</code> 列出&#x2F;dev&#x2F;video0 支持的格式</li>\n<li><code>yavta /dev/video0 -n3 -c10 -f YUYV -s1920x1282 --skip 9 -Fvideo0_#.yuv &amp;</code> 从&#x2F;dev&#x2F;video0 拿图, 保存未.yuv</li>\n<li><code>v4l2-ctl --set-fmt-video=width=1920,height=1282,pixelformat=YUYV --stream-mmap --stream-count=1 -d /dev/video0 --stream-to=camera_0_1920_1282_0.yuv</code> 获取一张图片</li>\n<li><a href=\"https://askubuntu.com/a/881341\">send video to &#x2F;dev&#x2F;video0</a></li>\n<li><code>ffmpeg -y -t 15 -f video4linux2 -video_size 1920x1080 -input_format nv12 -timestamps abs -use_libv4l2 1 -i /dev/video0 out.mov</code> ffmpeg <a href=\"https://superuser.com/q/1449252\">link</a></li>\n</ol>\n<h2 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h2><ol>\n<li><a href=\"https://github.com/wuhanstudio/capturev4l2\">wuhanstudio&#x2F;capturev4l2</a></li>\n<li><a href=\"https://www.kernel.org/doc/html/v4.9/media/uapi/v4l/capture.c.html\">C++ sample</a> <code>gcc -o v4l2_test v4l2_test.c</code></li>\n<li>simple opencv sample</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">char</span>**)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// open the first webcam plugged in the computer</span></span><br><span class=\"line\">    <span class=\"function\">cv::VideoCapture <span class=\"title\">camera</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!camera.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;ERROR: Could not open camera&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// create a window to display the images from the webcam</span></span><br><span class=\"line\">    cv::<span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;Webcam&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this will contain the image from the webcam</span></span><br><span class=\"line\">    cv::Mat frame;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// capture the next frame from the webcam</span></span><br><span class=\"line\">    camera &gt;&gt; frame;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// display the frame until you press a key</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// show the image on the window</span></span><br><span class=\"line\">        cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;Webcam&quot;</span>, frame);</span><br><span class=\"line\">        <span class=\"comment\">// wait (10ms) for a key to be pressed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">10</span>) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue\"></a>issue</h2><ol>\n<li><code>OPENCV_LOG_LEVEL=DEBUG ./demo</code> 打开 opencv debug 信息</li>\n<li>注意<code>/dev/video*</code> 权限</li>\n<li>双目摄像头可能需要同时打开 <code>/dev/video0</code> 和 <code>/dev/video1</code></li>\n</ol>\n"},{"title":"version","url":"/2022/11/15/version/","content":"<h2 id=\"Linux-动态库版本管理\"><a href=\"#Linux-动态库版本管理\" class=\"headerlink\" title=\"Linux 动态库版本管理\"></a>Linux 动态库版本管理</h2><ol>\n<li>Linux 通过版本号来管理动态库的版本，版本号最多有 3 级，其格式为 libname.so.x.y.z<ul>\n<li>x: major release，非兼容修改，可能对接口做了大改动，比如重命名、增加或减少参数等。</li>\n<li>y: minor release，不改变兼容性，但是增加了新接口</li>\n<li>z: patch release，不改变兼容性，仅仅是修复 bug、或者优化代码实现、优化性能等。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"wallpaper","url":"/2022/09/29/wallpaper/","content":"<h2 id=\"桌面背景制作\"><a href=\"#桌面背景制作\" class=\"headerlink\" title=\"桌面背景制作\"></a>桌面背景制作</h2><ol>\n<li><a href=\"https://github.com/pearmini/colorfu\">colorfu</a></li>\n<li>color value : <code>1E1E1E</code></li>\n<li><a href=\"https://express.adobe.com/zh-Hans-CN/sp/design/post/urn:aaid:sc:VA6C2:a245b511-f975-4454-94d9-cdb73067395b\">express.adobe</a> 先抠图，纯色背景，调整透明度</li>\n<li><a href=\"https://www.canva.com/\">canva</a></li>\n<li><a href=\"https://www.canva.com/design/DAFNl8MDuMs/Og2VZlsR1bnZXNcsOhPOYg/view?utm_content=DAFNl8MDuMs&utm_campaign=designshare&utm_medium=link&utm_source=publishsharelink&mode=preview\">think twice 模板链接</a></li>\n<li><a href=\"https://picwish.cn/upload\">在线抠图</a></li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.canva.com/search/templates?q=%E5%A3%81%E7%BA%B8%E6%B1%BD%E8%BD%A6&fCategory=tACZCp5JRWg&filters=eyJBIjoiTUBmcFVZX0dNQlhrM19idyIsIkE/IjoiQyIsIkQiOiIwMDAwMDAifQ==\">canva 搜索壁纸</a></li>\n<li><a href=\"https://wallpaperaccess.com/full/1644661.jpg\">口袋妖怪适合 zenburn 背景的壁纸</a></li>\n<li><a href=\"https://wallpaperaccess.com/awesome-gengar\">口袋妖怪壁纸</a></li>\n<li><a href=\"https://wallpaperaccess.com/black-pokemon\">口袋妖怪壁纸黑</a></li>\n<li><a href=\"http://ubuntu.ecchi.ca/wallpapers/\">ubuntu 每一版壁纸汇总</a></li>\n<li><a href=\"https://wallpaperaccess.com/ubuntu\">ubuntu 壁纸</a></li>\n<li><a href=\"https://wallpaperhub.app/creators/genrolecaspe\">windows 壁纸</a></li>\n<li><a href=\"https://wallpaperhub.app/wallpapers/?tags=windows\">windows 壁纸 2</a></li>\n<li><a href=\"https://github.com/microsoft/terminal/issues/3878#issuecomment-735253417\">close scroll bar</a></li>\n<li><a href=\"https://windowsterminalthemes.dev/\">themes</a></li>\n<li><a href=\"https://wallpapers.com/wallpapers/4k-programming-codes-in-black-screen-cl72lv0j7uvh4bmy.html\">programmer backgroud</a></li>\n<li><a href=\"https://wallpapers.com/wallpapers/cool-car-neon-blue-j3a9pqeowr7ywja3.html\">cool car</a></li>\n<li><a href=\"https://express.adobe.com/zh-Hans-CN/sp/design/post/urn:aaid:sc:VA6C2:928899ca-b02d-442f-9132-8607d4a4fada?workflow=quicktask\">cool</a></li>\n<li><a href=\"https://m.media-amazon.com/images/S/aplus-media-library-service-media/d64dd730-5df0-4bd0-a30c-c78d168d48bd.__CR0,0,1464,625_PT0_SX1464_V1___.jpg\">car</a></li>\n<li><a href=\"https://wallpaperaccess.com/cool-sports-car\">cool-sports-car</a></li>\n</ol>\n"},{"title":"windows WSL2","url":"/2022/04/26/windows-WSL2/","content":"<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ol>\n<li><a href=\"https://github.com/hubisan/emacs-wsl#run-emacs-in-graphical-display\">run-emacs-in-graphical-display</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps\">gui-apps</a></li>\n<li>wsl 里可以直接显示，如 opencv show， gpuplot</li>\n<li><a href=\"https://solidspoon.xyz/2021/02/17/%E9%85%8D%E7%BD%AEWSL2%E4%BD%BF%E7%94%A8Windows%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/\">WSL 2 配置代理 clash</a> 配置 WSL2 使用 Windows 代理上网 有用</li>\n</ol>\n<h2 id=\"install-WSL2\"><a href=\"#install-WSL2\" class=\"headerlink\" title=\"install WSL2\"></a><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">install WSL2</a></h2><ol>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package\">update kernel</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual\">install manual</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-CN/windows/terminal/install\">install windows terminal</a></li>\n<li><a href=\"https://www.cnblogs.com/yyfh/p/16526955.html\">内存限制</a></li>\n</ol>\n<h2 id=\"WSL2-ubuntu-usage\"><a href=\"#WSL2-ubuntu-usage\" class=\"headerlink\" title=\"WSL2 ubuntu usage\"></a>WSL2 ubuntu usage</h2><ol>\n<li><code>/mnt/c</code> windows C 盘 mount 路径</li>\n<li><code>explorer.exe .</code> 在 wsl 中打开 windows 资源管理器</li>\n<li><code>cd ~/ &amp;&amp; explorer.exe .</code> 查看 wsl 路径</li>\n<li><code>explorer.exe *.jpg</code> 查看图片</li>\n<li>explorer.exe 可以用默认方式打开各类文件 <code>alias open=&#39;explorer.exe&#39;</code></li>\n<li>samba mount(fast)</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data0/users/xiyang.jia/d</span><br><span class=\"line\">sudo mount.cifs //10.31.1.225/share /data0/users/xiyang.jia/d -o user=xiyang.jia</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><a href=\"https://linuxnightly.com/mount-and-access-hard-drives-in-windows-subsystem-for-linux-wsl/\">mount(slow)</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data0/users/xiyang.jia/</span><br><span class=\"line\">sudo mount -t drvfs Z: /data0/users/xiyang.jia/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"windows-terminal-美化\"><a href=\"#windows-terminal-美化\" class=\"headerlink\" title=\"windows terminal 美化\"></a><a href=\"https://github.com/microsoft/terminal\">windows terminal</a> 美化</h2><ol>\n<li>超高效： win + ` 打开一半 windows terminal, 然后使用 win + f 全屏，后边切换都是全屏， 使用 tmux，可以连接服务器<ul>\n<li>windows terminl</li>\n<li>wsl + tmux</li>\n<li>server</li>\n<li>sevver + docker</li>\n<li>需要解决 ssh 经常断开问题 <a href=\"https://blog.csdn.net/qq_15505637/article/details/80881770\">link</a><ul>\n<li><code>sudo /etc/init.d/ssh restart</code></li>\n</ul>\n</li>\n<li>tmux-resurrect 回复环境</li>\n</ul>\n</li>\n<li>如何设置 win 快捷键？</li>\n<li>C– and C-+ 放大或缩小</li>\n<li><a href=\"https://docs.microsoft.com/zh-CN/windows/terminal/install\">官方设置教程</a></li>\n<li><a href=\"https://github.com/agkozak/windows-terminal-zenburn\">zenburn 主题</a></li>\n<li><a href=\"https://wallpaperaccess.com/full/1644661.jpg\">口袋妖怪适合 zenburn 背景的壁纸</a></li>\n<li><a href=\"https://wallpaperaccess.com/awesome-gengar\">口袋妖怪壁纸</a></li>\n<li><a href=\"https://wallpaperaccess.com/black-pokemon\">口袋妖怪壁纸黑</a></li>\n<li><a href=\"http://ubuntu.ecchi.ca/wallpapers/\">ubuntu 每一版壁纸汇总</a></li>\n<li><a href=\"https://wallpaperaccess.com/ubuntu\">ubuntu 壁纸</a></li>\n<li><a href=\"https://wallpaperhub.app/creators/genrolecaspe\">windows 壁纸</a></li>\n<li><a href=\"https://wallpaperhub.app/wallpapers/?tags=windows\">windows 壁纸 2</a></li>\n<li><a href=\"https://github.com/microsoft/terminal/issues/3878#issuecomment-735253417\">close scroll bar</a></li>\n<li><a href=\"https://windowsterminalthemes.dev/\">themes</a></li>\n<li><a href=\"https://wallpapers.com/wallpapers/4k-programming-codes-in-black-screen-cl72lv0j7uvh4bmy.html\">programmer backgroud</a></li>\n</ol>\n"},{"title":"windows-docker","url":"/2022/04/26/windows-docker/","content":"<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><ol>\n<li><a href=\"https://git-scm.com/download/win\">install git</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers\">Visual Studio Code Remote Containers Extension</a></li>\n</ol>\n<h2 id=\"NOTES\"><a href=\"#NOTES\" class=\"headerlink\" title=\"NOTES\"></a>NOTES</h2><ol>\n<li>安装完 docker 后可以在 windows WLS2 ubuntu 下使用</li>\n</ol>\n"},{"title":"yaml","url":"/2022/03/26/yaml/","content":"<h2 id=\"opencv-对数\"><a href=\"#opencv-对数\" class=\"headerlink\" title=\"opencv 对数\"></a>opencv 对数</h2><ol>\n<li>python</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">`cv2.FileStorage(<span class=\"string\">&quot;output.yml&quot;</span>, cv2.FILE_STORAGE_WRITE).write(<span class=\"string\">&quot;mat&quot;</span>, mat)`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fs = cv2.FileStorage(<span class=\"string\">&quot;predict_benz_trajectory_v2_crop.yml&quot;</span>, cv2.FILE_STORAGE_WRITE)</span><br><span class=\"line\">fs.write(<span class=\"string\">&quot;Q&quot;</span>, Q.astype(np.float32))</span><br><span class=\"line\">fs.write(<span class=\"string\">&quot;traj_out_wid&quot;</span>, traj_out_wid)</span><br><span class=\"line\">fs.release()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>C++</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">cv::FileStorage <span class=\"title\">ymlfile</span><span class=\"params\">(<span class=\"string\">&quot;predict_benz_trajectory_v2_crop.yml&quot;</span>,                                                                                                                                                                                                                          cv::FileStorage::READ)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!fs.<span class=\"built_in\">isOpened</span>())&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Cannot open config file!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cv::Mat disparity;</span><br><span class=\"line\">ymlfile[<span class=\"string\">&quot;disparity&quot;</span>] &gt;&gt; disparity;</span><br><span class=\"line\"><span class=\"type\">float</span> traj_wid = (<span class=\"type\">float</span>)ymlfile[<span class=\"string\">&quot;ground_traj_wid&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  cv::Mat Q_mat;</span><br><span class=\"line\">  cv::FileNode node = ymlfile[<span class=\"string\">&quot;Q&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Key not found in yaml file&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.<span class=\"built_in\">type</span>() == cv::FileNode::MAP &amp;&amp; node.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    node &gt;&gt; Q_mat;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q_mat.<span class=\"built_in\">type</span>() == CV_64F) &#123;</span><br><span class=\"line\">      Q_mat.<span class=\"built_in\">convertTo</span>(Q_mat, CV_32F);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Node is not an opencv mat  or is empty&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>numpy and vector</li>\n</ol>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\">import cv2</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">np_array = np.array(<span class=\"string\">[[1, 2, 3], [4, 5, 6]]</span>, dtype=<span class=\"string\">&#x27;float32&#x27;</span>)</span><br><span class=\"line\">fs = cv2.FileStorage(<span class=\"string\">&#x27;output.xml&#x27;</span>, cv2.FileStorage_WRITE)</span><br><span class=\"line\">fs.<span class=\"built_in\">write</span>(<span class=\"string\">&#x27;my_array&#x27;</span>, np_array)</span><br><span class=\"line\">fs.release()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">std::vector&lt;<span class=\"type\">float</span>&gt; vec;</span><br><span class=\"line\">vec.<span class=\"built_in\">assign</span>((<span class=\"type\">float</span>*)mat.datastart, (<span class=\"type\">float</span>*)mat.dataend);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写\"><a href=\"#读写\" class=\"headerlink\" title=\"读写\"></a>读写</h3><ol>\n<li>yaml-cpp</li>\n<li><a href=\"https://blog.csdn.net/learning_tortosie/article/details/97815514\">opencv cv::FileStorage</a></li>\n</ol>\n<h3 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h3><ol>\n<li><a href=\"https://github.com/jbeder/yaml-cpp\">github</a></li>\n<li><a href=\"https://github.com/jbeder/yaml-cpp/wiki/Tutorial\">tutorial</a></li>\n</ol>\n<h3 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;yaml-cpp/yaml.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  YAML::Node config = YAML::<span class=\"built_in\">LoadFile</span>(<span class=\"string\">&quot;config.yaml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">double</span>&gt; intrinsic;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;intrinsic&quot;</span>]) &#123;</span><br><span class=\"line\">    intrinsic = config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;intrinsic&quot;</span>].as&lt;std::vector&lt;<span class=\"type\">double</span>&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; intrinsic.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; intrinsic[i] &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">double</span>&gt; cam2ego_R;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_R&quot;</span>]) &#123;</span><br><span class=\"line\">    cam2ego_R = config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_R&quot;</span>].as&lt;std::vector&lt;<span class=\"type\">double</span>&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; cam2ego_R.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; cam2ego_R[i] &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">double</span>&gt; <span class=\"type\">cam2ego_t</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_t&quot;</span>]) &#123;</span><br><span class=\"line\">    <span class=\"type\">cam2ego_t</span> = config[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_t&quot;</span>].as&lt;std::vector&lt;<span class=\"type\">double</span>&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0u</span>; i &lt; <span class=\"type\">cam2ego_t</span>.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; <span class=\"type\">cam2ego_t</span>[i] &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">std::ofstream <span class=\"title\">fout</span><span class=\"params\">(<span class=\"string\">&quot;./out.yaml&quot;</span>)</span></span>;</span><br><span class=\"line\">  fout &lt;&lt; config;</span><br><span class=\"line\"></span><br><span class=\"line\">  YAML::Node test;</span><br><span class=\"line\">  <span class=\"comment\">// test[&quot;camera&quot;][&quot;intrinsic&quot;].push_back(v);</span></span><br><span class=\"line\">  <span class=\"comment\">// note: push_back and = are not same</span></span><br><span class=\"line\">  test[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;intrinsic&quot;</span>] = intrinsic;</span><br><span class=\"line\">  test[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_R&quot;</span>] = cam2ego_R;</span><br><span class=\"line\">  test[<span class=\"string\">&quot;camera&quot;</span>][<span class=\"string\">&quot;cam2ego_t&quot;</span>] = <span class=\"type\">cam2ego_t</span>;</span><br><span class=\"line\">  <span class=\"function\">std::ofstream <span class=\"title\">fout1</span><span class=\"params\">(<span class=\"string\">&quot;./test.yaml&quot;</span>)</span></span>;</span><br><span class=\"line\">  fout1 &lt;&lt; test;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">camera:</span></span><br><span class=\"line\">  <span class=\"attr\">intrinsic:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1888.7618313608834</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">968.83548164132105</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1896.5639945248038</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">547.4612962459845</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">cam2ego_R:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0.034896920649101944</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0.015135626613007833</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0.99927629698862219</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">-0.99939075949347744</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0.0010902662284327418</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0.034884404167777945</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">-0.00056147988681672133</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">-0.99988485586850695</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">0.015164452300128389</span></span><br><span class=\"line\">  <span class=\"attr\">cam2ego_t:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1.84679730821996</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">-0.089090448031248784</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1.3980633087528846</span></span><br></pre></td></tr></table></figure>\n","categories":["Program"],"tags":["YAML"]},{"title":"域控制器","url":"/2022/09/06/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li><p>在今天软件定义汽车和汽车智能化、网联化的发展趋势下，原来基于 ECU 的分布式 EEA 也日益暴露诸多问题和挑战。为了解决分布式 EEA 的这些问题，人们开始逐渐把很多功能相似、分离的 ECU 功能集成整合到一个比 ECU 性能更强的处理器硬件平台上，这就是汽车“域控制器（Domain Control Unit，DCU）”。</p>\n</li>\n<li><p>ECU（Electronic Control Unit）电子控制单元，又称“行车电脑”、“车载电脑”等。它和普通的电脑一样,由微控制器（MCU）、存储器（ROM、RAM）、输入&#x2F;输出接口（I&#x2F;O）、模数转换器（A&#x2F;D）以及整形、驱动等大规模集成电路组成。</p>\n</li>\n<li><p>经典的五域集中式 EEA ：</p>\n<ul>\n<li>动力域（Power Train）</li>\n<li>底盘域（Chassis）</li>\n<li>车身域（Body&#x2F;Comfort）</li>\n<li>座舱域（Cockpit&#x2F;Infotainment）</li>\n<li>自动驾驶域（ADAS）</li>\n</ul>\n</li>\n<li><p>在五域集中式架构基础上进一步融合，把原本的动力域、底盘域和车身域融合为整车控制域，从而形成了三域集中式 EEA，也即：</p>\n<ul>\n<li>车控域控制器（VDC，Vehicle Domain Controller）</li>\n<li>智能驾驶域控制器（ADC，ADAS\\AD Domain Controller）</li>\n<li>智能座舱域控制器（CDC，Cockpit Domain Controller）</li>\n</ul>\n</li>\n<li><p>在分布式 ECU 时代，计算和控制的核心是 MCU 芯片，传输的基础核心是基于传统的 CAN、LIN 和 FlexRay 等低速总线。</p>\n</li>\n<li><p>在域控制器时代，高性能、高集成度的异构 SoC 芯片作为域的主控处理器，将成为域控制器的计算与控制的核心芯片。而汽车 <code>TSN（Time-Sensitive Network）</code>以太网因为具有高带宽、实时和可靠的数据通信能力等特点，必将成为整车通信的核心基础设施，尤其是域主控处理器之间的通信主干网。</p>\n</li>\n<li><p>分布式 &#x3D;&gt; （跨）域集中式 &#x3D;&gt; 中央+区域集中式</p>\n</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/561699068\">国内主机整车 EEA 架构汇总</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/460683077\">深度分析汽车芯片的现状与发展（一）汽车电子电气架构的变革</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/461714692\">深度分析汽车芯片的现状与发展（二）域控制器时代</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/462675111\">深度分析汽车芯片的现状与发展（三）ADAS&#x2F;AD 域控制器及芯片平台分析</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/464930132\">深度分析汽车芯片的现状与发展（四）整车控制域</a></li>\n<li><a href=\"https://pdf.dfcfw.com/pdf/H3_AP202205181566386836_1.pdf?1652907375000.pdf\">2022 年自动驾驶域控制器行业概览</a></li>\n</ol>\n"},{"title":"开发方法","url":"/2022/10/21/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/","content":"<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>瀑布流方法（Waterfall）</li>\n<li>V 型方法（V-model）</li>\n<li>迭代式开发（Iterative and incremental development, IID）</li>\n<li>螺旋开发（Spiral）</li>\n<li>敏捷开发（Scrum）</li>\n<li>极限编程（Extreme programming, XP）</li>\n</ol>\n"},{"title":"数据落盘","url":"/2022/07/04/%E6%95%B0%E6%8D%AE%E8%90%BD%E7%9B%98/","content":"<h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><ol>\n<li><img src=\"https://img-blog.csdnimg.cn/2020091210500712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXlpaHVhMTk5NA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"经典图\"></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://blog.csdn.net/xieyihua1994/article/details/108545746\">数据落盘机制</a></li>\n</ol>\n"},{"title":"消息中间件","url":"/2022/09/05/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/","content":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><ol>\n<li><a href=\"https://www.rti.com/rti-blog-cn/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E6%B1%BD%E8%BD%A6%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">自动驾驶汽车的软件连接解决方案</a><ul>\n<li>第一种选择是利用为大规模系统开发的云和企业技术</li>\n<li>第二种选择是从头开始构建解决方案。</li>\n<li>第三种方法是选择一种新的汽车平台，例如 AUTOSAR Adaptive、ROS 2、Apollo 等，并围绕它们构建系统。</li>\n<li>第四种方法是使用基于标准的关键技术中已证明的基础技术。上面提到的几种汽车平台都使用 Data Distribution Service™（DDS）标准作为其核心。</li>\n</ul>\n</li>\n<li>中间件——一种应用于分布式系统的基础软件，自上世纪 80 年代诞生以来，在分布式环境中低调地发挥着重要作用。基于中间件，系统软件与应用软件之间实现了高效连接与沟通，应用开发得以提速。</li>\n<li>消息中间件和计算中间件</li>\n</ol>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li>RPC 和消息中间件区别？ <a href=\"https://blog.csdn.net/u012562943/article/details/98586854\">link</a><ul>\n<li>主要的区别就是消息队列适用于异步场景，而 rpc 是远程同步调用 [<a href=\"https://www.cnblogs.com/lizhensheng/p/11117407.html\">消息队列 RPC 之间的区别与联系</a>]</li>\n<li>rpc 没有 broker, 而消息队列是需要管理消息的存储的，rpc 没有存储，只有通信。</li>\n<li>不管是消息队列还是 rpc 调用都是 分布式下面的 通信方式。</li>\n<li>消息队列最容易理解的方式就是生产者消费者模式，使两个应用解耦。mq 等框架就是对这的具体实现。</li>\n<li>MQ 是生产者消费者模式。</li>\n<li>RPC 是请求响应模式。</li>\n<li>MQ 是面向数据的。</li>\n<li>RPC 是面向动作的。</li>\n</ul>\n</li>\n<li>Broker: 消息服务器，作为 server 提供消息核心服务</li>\n<li>Producer: 消息生产者，业务的发起方，负责生产消息传输给 broker，</li>\n<li>Consumer: 消息消费者，业务的处理方，负责从 broker 获取消息并进行业务逻辑处理</li>\n<li>Topic: 主题，发布订阅模式下的消息统一汇集地，不同生产者向 topic 发送消息，由 MQ 服务器分发到不同的订阅者，实现消息的广播</li>\n<li>Queue: 队列，PTP 模式下，特定生产者向特定 queue 发送消息，消费者订阅特定的 queue 完成指定消息的接收</li>\n<li>Message: 消息体，根据不同通信协议定义的固定格式进行编码的数据包，来封装业务数据，实现消息的传输</li>\n</ol>\n<h2 id=\"baidu-cyber-RT\"><a href=\"#baidu-cyber-RT\" class=\"headerlink\" title=\"baidu cyber RT\"></a>baidu cyber RT</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/397607823\">Apollo6.0 学习 002：Cyber RT 框架</a></li>\n</ol>\n<h2 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h2><ol>\n<li>号称最快的消息队列系统，专门为高吞吐量&#x2F;低延迟的场景开发，在金融界的应用中经常使用，偏重于实时数据通信场景。ZMQ 能够实现 RabbitMQ 不擅长的高级&#x2F;复杂的队列，但是开发人员需要自己组合多种技术框架，开发成本高。</li>\n<li>无锁的队列模型：对于跨线程间的交互（用户端和 session）之间的数据交换通道 pipe，采用无锁的队列算法 CAS；在 pipe 的两端注册有异步事件，在读或者写消息到 pipe 的时，会自动触发读写事件。</li>\n<li><a href=\"https://blog.csdn.net/armlinuxww/article/details/103988198\">无锁队列的实现</a></li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BB%B6\">中间件</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_40210977/article/details/109729464\">中间件是什么,常用的中间件有哪些</a></li>\n<li><a href=\"https://www.jianshu.com/p/79ca08116d57\">消息队列</a></li>\n<li><a href=\"https://www.cnblogs.com/insane-Mr-Li/p/10684536.html\">消息中间件（一）MQ 详解及四大 MQ 比较</a></li>\n</ol>\n"},{"title":"系统架构师","url":"/2022/07/30/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%B8%88/","content":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://bm.ruankao.org.cn/sign/welcome\">网上报名平台</a></li>\n<li><a href=\"https://github.com/gitlfc163/SystemArchitect\">资料</a></li>\n<li><a href=\"https://github.com/xxlllq/system_architect\">高质量、最全面的 2022 年系统架构设计师（软考高级）备考资源库</a></li>\n<li><a href=\"https://www.ruankao.org.cn/\">中国计算机技术职业资格网</a></li>\n<li><a href=\"https://www.ruankao.org.cn/platform\">报考指南</a></li>\n<li><a href=\"https://www.ruankao.org.cn/arrange\">考试安排</a></li>\n<li><a href=\"https://www.zhihu.com/question/264585896\">知乎分析</a></li>\n</ol>\n"},{"title":"自动驾驶专业术语","url":"/2022/03/31/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/","content":"<h2 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a><a href=\"https://blog.csdn.net/LEON1741/article/details/89510034\">缩写</a></h2><ol>\n<li><code>OTA</code>: over the air</li>\n<li><code>FCW</code>: forward collision warning 前车碰撞预警</li>\n<li><code>TTC</code>: time to collision 碰撞时间</li>\n<li><code>NVS</code>: Night Vision System 夜视系统</li>\n<li><code>NOA</code> “自动辅助导航驾驶（Navigate on Autopilot）”的中文翻译也有人叫“按导航辅助驾驶”或“领航辅助功能”，本质意思是，把“导航”和“辅助驾驶”结合。在原来 L2 辅助驾驶的基础上（如车道线保持、自动跟车），加上车机的导航信息（如百度地图），自动变道，实现从 A 点到 B 点的自动驾驶。</li>\n<li><code>OEM</code> 又称主机厂，OEM 是英文 Original equipment manufacturer 的缩写。</li>\n<li><code>DCU</code> (Domain Control Unit）域控制器</li>\n<li><code>ECU</code>（Electronic Control Unit）电子控制单元</li>\n<li><code>V2X</code>（Vehicle to everything）</li>\n<li><code>TSN</code>（Time-Sensitive Network）</li>\n<li><code>AUTOSAR</code>（AUTomotive Open System Architecture）</li>\n<li><code>EEA</code> (Electrical&#x2F;Electronic Architecture) 电子电气架构</li>\n<li><code>SOME/IP</code> Scalable service-Oriented Middleware over IP。即“运行于 IP 之上的可伸缩的面向服务的中间件”</li>\n<li><code>AUTOSAR</code> (AUTomotive Open System ARchitecture)</li>\n<li><code>DDS</code> (Data Distribution Service,数据分发服务)</li>\n<li><code>RTPS</code> (Real-Time Publish Subscribe)</li>\n<li><code>FOV</code> (field of view) 视场; 在光学仪器或传感器的情况下，视场是检测器对电磁辐射敏感的立体角 <a href=\"https://blog.csdn.net/weixin_33358099/article/details/112102463?spm=1001.2101.3001.6650.6&utm_medium=distribut\">link</a></li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li>标定：</li>\n</ol>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://pdf.dfcfw.com/pdf/H3_AP202202221548462770_1.pdf?1645518929000.pdf\">汽车软件研报</a></li>\n<li><a href=\"https://www-file.huawei.com/-/media/corporate/pdf/news/intelligent-driving-computing-platform-whitepaper-new.pdf?la=zh\">华为 MDC 智能驾驶计算平台白皮书</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/261291971\">软件定义汽车（2）-软件中间件（Autosar 为例）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/561699068\">国内主机整车 EEA 架构汇总</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/460683077\">深度分析汽车芯片的现状与发展（一）汽车电子电气架构的变革</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/461714692\">深度分析汽车芯片的现状与发展（二）域控制器时代</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/462675111\">深度分析汽车芯片的现状与发展（三）ADAS&#x2F;AD 域控制器及芯片平台分析</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/464930132\">深度分析汽车芯片的现状与发展（四）整车控制域</a></li>\n</ol>\n"},{"title":"计算机原理","url":"/2023/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/","content":"<h2 id=\"处理器比较\"><a href=\"#处理器比较\" class=\"headerlink\" title=\"处理器比较\"></a>处理器比较</h2><h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>前后处理</li>\n</ol>\n<h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3><ol>\n<li>矩阵运算</li>\n</ol>\n<h3 id=\"DSP\"><a href=\"#DSP\" class=\"headerlink\" title=\"DSP\"></a>DSP</h3><ol>\n<li>element wise op</li>\n</ol>\n<h3 id=\"FPGA\"><a href=\"#FPGA\" class=\"headerlink\" title=\"FPGA\"></a>FPGA</h3><ol>\n<li>通信</li>\n</ol>\n<h3 id=\"ASIC\"><a href=\"#ASIC\" class=\"headerlink\" title=\"ASIC\"></a>ASIC</h3><h2 id=\"netdata\"><a href=\"#netdata\" class=\"headerlink\" title=\"netdata\"></a><a href=\"https://github.com/netdata/netdata\">netdata</a></h2><ol>\n<li><a href=\"https://getiot.tech/zh/foss/netdata\">使用说明</a></li>\n</ol>\n<h2 id=\"跑分软件\"><a href=\"#跑分软件\" class=\"headerlink\" title=\"跑分软件\"></a><a href=\"https://post.smzdm.com/p/aox560x7/\">跑分软件</a></h2><ol>\n<li><p><a href=\"https://www.aida64.com/downloads/YWY1MWUxM2E=\">windows aida64</a></p>\n<ul>\n<li>工具 -&gt; 内存缓存测试 -&gt; 有内存类型</li>\n<li>最下面有性能测试</li>\n<li><a href=\"https://www.extremexbb.com/aida64-keys/\">破解</a> 使用: 6.85.6300 版本</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.aida64.com/downloads/OThhYjQxZDU=\">aida64</a></p>\n</li>\n</ol>\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><ol>\n<li>top 出来的 core 数是逻辑内核，例如：windows 系统显示 4 个物理 core, 8 个逻辑 core， wsl 里 top 显示的 8core</li>\n<li>lscpu 可以看出逻辑 core 和物理 core</li>\n</ol>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ol>\n<li><code>likwid-topology</code>(good) 显示有关硬件拓扑的详细信息，例如 CPU、缓存、NUMA 域等 <a href=\"https://github.com/RRZE-HPC/likwid\">link</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/CPUID\">cpuid</a> CPUID 指令是一条 x86 架构中的的扩展指令（此处的扩展指相对 i80386），其操作码助记符缩写于“CPU 识别”（CPU Identification），其作用是返回特定的 CPU 信息</li>\n<li><a href=\"https://github.com/klauspost/cpuid/releases\">cpuid 另一个</a></li>\n<li><code>lscpu</code><ul>\n<li><code>-C</code> 显示详细 cache 信息</li>\n<li>cores 和 sockets 区别 <a href=\"https://blog.rwth-aachen.de/hpc_import_20210107/attachments/20056127/24117298.pdf\">tutorial1</a></li>\n</ul>\n</li>\n<li><a href=\"https://sunpma.com/115.html\">cpufreq</a><ul>\n<li><code>sudo apt-get install cpufrequtils</code></li>\n<li><code>cpufreq-info | grep &quot;current CPU&quot;</code>查看各 core cpu 频率</li>\n<li><code>for (( i = 0; i&lt;100; i++ )); do echo $i;  cpufreq-info | grep &quot;current CPU&quot;; sleep 1; done</code></li>\n<li><code>for (( i = 0; i&lt;100; i++ )); do echo -n &quot;$i:    &quot;;  cpufreq-info | grep &quot;current CPU&quot; | grep -o &#39;[0-9.]* [a-zA-Z]*Hz&#39; | awk &#39;&#123;printf &quot;%s,\\t  &quot;, $0&#125; END &#123;print &quot;&quot;&#125;&#39;; sleep 1; done</code></li>\n<li><code>for (( i = 0; i&lt;100; i++ )); do echo -n &quot;$i:    &quot;;  cpufreq-info | grep &quot;current CPU&quot; | grep -o &#39;[0-9.]* [a-zA-Z]*Hz&#39; | awk &#39;&#123;printf &quot;%d:%s,\\t  &quot;, NR, $0&#125; END &#123;print &quot;&quot;&#125;&#39;; sleep 1; done</code></li>\n<li><code>cpufreq-set -g performance</code> 保持最大频率</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"cpu-性能测试\"><a href=\"#cpu-性能测试\" class=\"headerlink\" title=\"cpu 性能测试\"></a>cpu 性能测试</h2><ol>\n<li><a href=\"https://github.com/RRZE-HPC/likwid/tree/master/groups\">各平台各性能指标计算方法</a></li>\n<li>理论浮点运行峰值 &#x3D; CPU 主频 × CPU 核心数 × 每周期浮点运算次数。</li>\n<li><code>Linpack</code>：这是最著名的浮点性能测试之一。HPL（高性能 Linpack）版本用于排名全球 TOP500 的最强大超级计算机。您可以在单个机器上运行 Linpack 来获取其浮点性能。</li>\n<li><code>Flops.c</code>：这是一个简单的 C 程序，用于测量机器的浮点性能。它执行加法、乘法、除法和平方根操作，并报告 GFLOPS 性能。</li>\n<li><code>Geekbench</code>：这是一个流行的跨平台基准测试工具，它提供了浮点性能的测量。</li>\n<li><code>Phoronix Test Suite</code>：这是一个开源的、综合的测试和基准测试框架，它包括许多专门针对浮点性能的测试。</li>\n<li><a href=\"https://github.com/kreier/benchmark/tree/main\">各种 benchmark 及数据</a></li>\n<li><a href=\"https://www.netlib.org/benchmark/\">hpl 各种测试</a></li>\n<li>pidstat 1 —–&gt; <code>process usage</code><ul>\n<li>可以看进程分配在哪一个 cpu 核上</li>\n</ul>\n</li>\n<li>perf stat 可以查看 CPU 真实利用率： CPUs utilized, 不包括等待时间，自旋时间等。真实利用率比 top 查看的利用率要低很多。</li>\n<li>top 查看的利用率： 如果 CPU 没有运行在内核的 idle 线程，就认为 CPU 在被使用。当 cpu 阻塞并等待内存访问时，也可能显示较高的利用率。</li>\n</ol>\n<h3 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h3><ol>\n<li><code>flops</code><ul>\n<li><a href=\"https://www.jianshu.com/p/b1ceaa7effa8\">nvidia 计算方法</a></li>\n</ul>\n</li>\n<li><code>ops</code></li>\n<li><code>DMIPS</code></li>\n<li><code>DMIPS/MHz</code></li>\n<li><code>MAC</code></li>\n<li>指令性能</li>\n</ol>\n<h3 id=\"likwid\"><a href=\"#likwid\" class=\"headerlink\" title=\"likwid\"></a>likwid</h3><ol>\n<li><a href=\"https://github.com/RRZE-HPC/likwid/wiki/Tutorial%3A-Empirical-Roofline-Model\">测 flops 性能</a></li>\n</ol>\n<h3 id=\"flops-c\"><a href=\"#flops-c\" class=\"headerlink\" title=\"flops.c\"></a><a href=\"https://github.com/AMDmi3/flops\">flops.c</a></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/AMDmi3/flops.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> flops &amp;&amp; make</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>测试的是单核性能 flops</li>\n</ol>\n<h3 id=\"linpack\"><a href=\"#linpack\" class=\"headerlink\" title=\"linpack\"></a>linpack</h3><ol>\n<li><a href=\"https://github.com/UNINETTSigma2/documentation/blob/main/jobs/arm-perf/linpack.md\">使用说明</a></li>\n<li><a href=\"https://elinux.org/RPi_Performance\">src test</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://www.netlib.org/benchmark/linpackc.new</span><br><span class=\"line\">gcc -O3 -o linpack  linpack.c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dhrystone\"><a href=\"#dhrystone\" class=\"headerlink\" title=\"dhrystone\"></a><a href=\"https://github.com/kreier/benchmark/tree/main/dhrystone\">dhrystone</a></h3><ol>\n<li>目前找到的达到最大 ops 和最大 IPC 的程序，使用自己写的 perf monitor 监控得到.</li>\n<li><a href=\"https://blog.csdn.net/qq_21475601/article/details/106564903\">ARM 各内核系列整型运算能力对比—DMIPS &#x2F; MHz</a></li>\n<li>MIPS: 每秒执行了多少百万条指令。DMIPS：D 是 Dhrystone 的缩写，在 MIPS 前面加上 Dhrystone （整数运算），用于测整数计算能力。进程占用 DMIPS &#x3D; 总的 DMIPS * 进程占用 CPU 百分比</li>\n<li>I got 2898550.8 Dhrystones per Second, and I divided by 1757 to get 1649 DMIPS&#x2F;core. And then I divided by 1200 to get 1.37 DMIPS&#x2F;MHz&#x2F;core.</li>\n<li>A55 单核算力： 2.7DMIPS&#x2F;MHz*1.2GHz&#x3D;3.24 KDMIPS, 每核没时钟周期处理 2.7 指令</li>\n<li>KDMIPS 是算力表示， DMIPS&#x2F;MHz 是密度表示</li>\n<li>perf stat -ddd 显示频率</li>\n<li><a href=\"https://github.com/Keith-S-Thompson/dhrystone/tree/master\">Keith-S-Thompson&#x2F;dhrystone</a></li>\n<li><a href=\"https://github.com/fm4dd/sbc-benchmarks/tree/master/sbc-bench/src/dhrystone\">sbc-bench&#x2F;src&#x2F;dhrystone</a></li>\n<li>use</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://homepages.cwi.nl/~steven/dry.c</span><br><span class=\"line\">sh dry.c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"phoronix-test-suite\"><a href=\"#phoronix-test-suite\" class=\"headerlink\" title=\"phoronix-test-suite\"></a><a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite\">phoronix-test-suite</a></h3><h3 id=\"MegPeak\"><a href=\"#MegPeak\" class=\"headerlink\" title=\"MegPeak\"></a><a href=\"https://github.com/MegEngine/MegPeak\">MegPeak</a></h3><ol>\n<li>可以测 memory<code>GOPS</code>, 各指令性能</li>\n<li>可以测 roofline, cpu gflops</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/522007924\">MegPeak——让你更懂你的处理器</a></li>\n</ol>\n<h3 id=\"clpeak\"><a href=\"#clpeak\" class=\"headerlink\" title=\"clpeak\"></a><a href=\"https://github.com/krrishnarraj/clpeak\">clpeak</a></h3><ol>\n<li>测试 opencl 设备性能</li>\n</ol>\n<h2 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h2><ol>\n<li><a href=\"https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/\">（good)各种动画</a></li>\n<li><a href=\"https://blog.csdn.net/chen1083376511/article/details/81941318\">(有动画)计算机组成原理（4）-中央处理器 CPU</a></li>\n<li><a href=\"http://note.wcoder.com/computer/cpu.md\">cpu</a></li>\n<li><a href=\"https://plantegg.github.io/categories/CPU/\">plantegg.github.io&#x2F;categories&#x2F;CPU&#x2F;</a></li>\n<li><a href=\"https://github.com/google/cpu_features\">cpu_features</a> c++ 获取 cpu feature</li>\n</ol>\n<h2 id=\"data-type\"><a href=\"#data-type\" class=\"headerlink\" title=\"data type\"></a>data type</h2><ol>\n<li><a href=\"https://www.omnicalculator.com/other/floating-point\">Floating-Point Calculator — 32-bit IEEE754</a></li>\n</ol>\n"},{"title":"软件架构图","url":"/2022/09/07/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%9B%BE/","content":"<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><ol>\n<li><p>画图工具</p>\n<ul>\n<li><a href=\"https://excalidraw.com/\">excalidraw</a></li>\n</ul>\n</li>\n<li><p>黑色背景图更清晰显眼 <a href=\"https://excalidraw.com/#json=QQSsjTtgSH00X3SatzWVM,fCNSETDLrfuaDv7-iRMwAA\">test</a></p>\n</li>\n<li><p>黑白灰就可以让框图显示的清晰</p>\n</li>\n<li><p>动态流程图 <a href=\"https://www.bilibili.com/video/BV1by4y167EA/\">link</a></p>\n</li>\n<li><p>交互式流程图 <a href=\"http://www.jtopo.com/\">link</a></p>\n</li>\n<li><p>ProcessOn 数据流图动图</p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/7111894700952387621\">用 JointJs 实现数据流图</a></p>\n</li>\n<li><p><a href=\"https://www.drawzh.com/1457.html\">如何用 drawio 让自己的流程图线条产生动起来的效果</a></p>\n</li>\n<li><p><a href=\"https://babkin-pavel.medium.com/how-to-animate-objects-along-the-path-in-figma-motion-plugin-370f3bf95e7b\">figma motion</a></p>\n</li>\n<li><p><a href=\"https://www.figma.com/file/35Xwhb4WtXZdRGQlWDdewn/Motion---UI-and-Games-animation-(Community)?node-id=0:1\">figma flow arrow</a></p>\n</li>\n</ol>\n<h2 id=\"层次图\"><a href=\"#层次图\" class=\"headerlink\" title=\"层次图\"></a>层次图</h2><h3 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h3><ol>\n<li><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ee658124(v=pandp.10)\">微软程序建构指南</a><br><img src=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/images/ee658124.b8220f0d-f76a-40d6-8b1b-5279f7cdcee9(en-us,pandp.10).png\" alt=\"Common application architecture\"></li>\n<li>appolo<br><img src=\"https://github.com/ApolloAuto/apollo/raw/master/docs/demo_guide/images/Apollo_7_0.png\" alt=\"Apollo 7.0\"></li>\n<li>vitis-ai-library<br><img src=\"https://github.com/Xilinx/Vitis-AI/raw/master/src/Vitis-AI-Library/ai_library_diagram.png\" alt=\"vitis-ai-library\"></li>\n<li>dcv-cpp<br><img src=\"/images/software-diagram/dcv-cpp.jpg\" alt=\"dcv-cpp\"></li>\n<li><a href=\"https://inews.gtimg.com/newsapp_bt/0/14916534758/1000\">理想的软件自研规划</a><br><img src=\"/images/software-diagram/lixiang.png\" alt=\"理想的软件自研规划\"></li>\n<li><img src=\"https://mmbiz.qpic.cn/mmbiz_png/dgmES0HFW0utCXbf5mDOFepsQSA2wVFPBqzgGf38bkxsJOlMEkjvHG3H5ibs5ZW9Mw968jLxgOOpVk8iaKNRdABg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"SOA汽车分层模型\"></li>\n<li><img src=\"https://img-blog.csdnimg.cn/20210414055550879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1amlhbmluZ18xMTAxMTc=,size_16,color_FFFFFF,t_70\" alt=\"华为MDC智能驾驶计算平台\"></li>\n<li><a href=\"https://nwzimg.wezhan.cn/contents/sitefiles2049/10245019/images/23519503.png\">华玉通软 Greenstone 智能驾驶基础软件平台</a><br><img src=\"/images/software-diagram/huayu.png\" alt=\"华玉通软Greenstone 智能驾驶基础软件平台\"></li>\n<li><img src=\"https://nwzimg.wezhan.cn/contents/sitefiles2049/10245019/images/25100339.gif\" alt=\"华玉通软应用\"></li>\n<li><img src=\"http://nvidia.zhidx.com/uploadfile/2018/10/5bce021d3364a.jpg\" alt=\"nvidia\"></li>\n</ol>\n"},{"title":"about","url":"/about/index-1.html","content":""},{"title":"about","url":"/about/index.html","content":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>贾夕阳<br>毕业于北京理工大学，目前从事人工智能软件架构工作</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ol>\n<li>mail: <a href=\"mailto:&#106;&#x69;&#97;&#x78;&#x69;&#121;&#x61;&#110;&#103;&#x62;&#105;&#116;&#x40;&#x31;&#x32;&#x36;&#x2e;&#99;&#111;&#x6d;\">&#106;&#x69;&#97;&#x78;&#x69;&#121;&#x61;&#110;&#103;&#x62;&#105;&#116;&#x40;&#x31;&#x32;&#x36;&#x2e;&#99;&#111;&#x6d;</a></li>\n<li>qq: 312567150</li>\n</ol>\n"},{"title":"categories","url":"/categories/index.html","content":""},{"title":"tags","url":"/tags/index.html","content":""}]